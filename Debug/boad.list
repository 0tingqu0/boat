
boad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008ef4  08008ef4  00009ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009144  08009144  0000b0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009144  08009144  0000b0a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009144  08009144  0000b0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009144  08009144  0000a144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009148  08009148  0000a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800914c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200000a0  080091ec  0000b0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080091ec  0000b514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e9a  00000000  00000000  0000b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003219  00000000  00000000  0001ef63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00022180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8d  00000000  00000000  00023568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a80f  00000000  00000000  000244f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184a8  00000000  00000000  0003ed04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f12  00000000  00000000  000571ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e90be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb4  00000000  00000000  000e9104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ef0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008edc 	.word	0x08008edc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08008edc 	.word	0x08008edc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_frsub>:
 8000514:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__addsf3>
 800051a:	bf00      	nop

0800051c <__aeabi_fsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000520 <__addsf3>:
 8000520:	0042      	lsls	r2, r0, #1
 8000522:	bf1f      	itttt	ne
 8000524:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000528:	ea92 0f03 	teqne	r2, r3
 800052c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000530:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000534:	d06a      	beq.n	800060c <__addsf3+0xec>
 8000536:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800053a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800053e:	bfc1      	itttt	gt
 8000540:	18d2      	addgt	r2, r2, r3
 8000542:	4041      	eorgt	r1, r0
 8000544:	4048      	eorgt	r0, r1
 8000546:	4041      	eorgt	r1, r0
 8000548:	bfb8      	it	lt
 800054a:	425b      	neglt	r3, r3
 800054c:	2b19      	cmp	r3, #25
 800054e:	bf88      	it	hi
 8000550:	4770      	bxhi	lr
 8000552:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000556:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800055a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800055e:	bf18      	it	ne
 8000560:	4240      	negne	r0, r0
 8000562:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000566:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800056a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800056e:	bf18      	it	ne
 8000570:	4249      	negne	r1, r1
 8000572:	ea92 0f03 	teq	r2, r3
 8000576:	d03f      	beq.n	80005f8 <__addsf3+0xd8>
 8000578:	f1a2 0201 	sub.w	r2, r2, #1
 800057c:	fa41 fc03 	asr.w	ip, r1, r3
 8000580:	eb10 000c 	adds.w	r0, r0, ip
 8000584:	f1c3 0320 	rsb	r3, r3, #32
 8000588:	fa01 f103 	lsl.w	r1, r1, r3
 800058c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000590:	d502      	bpl.n	8000598 <__addsf3+0x78>
 8000592:	4249      	negs	r1, r1
 8000594:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000598:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800059c:	d313      	bcc.n	80005c6 <__addsf3+0xa6>
 800059e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005a2:	d306      	bcc.n	80005b2 <__addsf3+0x92>
 80005a4:	0840      	lsrs	r0, r0, #1
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	f102 0201 	add.w	r2, r2, #1
 80005ae:	2afe      	cmp	r2, #254	@ 0xfe
 80005b0:	d251      	bcs.n	8000656 <__addsf3+0x136>
 80005b2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80005b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005ba:	bf08      	it	eq
 80005bc:	f020 0001 	biceq.w	r0, r0, #1
 80005c0:	ea40 0003 	orr.w	r0, r0, r3
 80005c4:	4770      	bx	lr
 80005c6:	0049      	lsls	r1, r1, #1
 80005c8:	eb40 0000 	adc.w	r0, r0, r0
 80005cc:	3a01      	subs	r2, #1
 80005ce:	bf28      	it	cs
 80005d0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80005d4:	d2ed      	bcs.n	80005b2 <__addsf3+0x92>
 80005d6:	fab0 fc80 	clz	ip, r0
 80005da:	f1ac 0c08 	sub.w	ip, ip, #8
 80005de:	ebb2 020c 	subs.w	r2, r2, ip
 80005e2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005e6:	bfaa      	itet	ge
 80005e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ec:	4252      	neglt	r2, r2
 80005ee:	4318      	orrge	r0, r3
 80005f0:	bfbc      	itt	lt
 80005f2:	40d0      	lsrlt	r0, r2
 80005f4:	4318      	orrlt	r0, r3
 80005f6:	4770      	bx	lr
 80005f8:	f092 0f00 	teq	r2, #0
 80005fc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000600:	bf06      	itte	eq
 8000602:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000606:	3201      	addeq	r2, #1
 8000608:	3b01      	subne	r3, #1
 800060a:	e7b5      	b.n	8000578 <__addsf3+0x58>
 800060c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000610:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000614:	bf18      	it	ne
 8000616:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800061a:	d021      	beq.n	8000660 <__addsf3+0x140>
 800061c:	ea92 0f03 	teq	r2, r3
 8000620:	d004      	beq.n	800062c <__addsf3+0x10c>
 8000622:	f092 0f00 	teq	r2, #0
 8000626:	bf08      	it	eq
 8000628:	4608      	moveq	r0, r1
 800062a:	4770      	bx	lr
 800062c:	ea90 0f01 	teq	r0, r1
 8000630:	bf1c      	itt	ne
 8000632:	2000      	movne	r0, #0
 8000634:	4770      	bxne	lr
 8000636:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800063a:	d104      	bne.n	8000646 <__addsf3+0x126>
 800063c:	0040      	lsls	r0, r0, #1
 800063e:	bf28      	it	cs
 8000640:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000644:	4770      	bx	lr
 8000646:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800064a:	bf3c      	itt	cc
 800064c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000650:	4770      	bxcc	lr
 8000652:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000656:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800065a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800065e:	4770      	bx	lr
 8000660:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000664:	bf16      	itet	ne
 8000666:	4608      	movne	r0, r1
 8000668:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800066c:	4601      	movne	r1, r0
 800066e:	0242      	lsls	r2, r0, #9
 8000670:	bf06      	itte	eq
 8000672:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000676:	ea90 0f01 	teqeq	r0, r1
 800067a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800067e:	4770      	bx	lr

08000680 <__aeabi_ui2f>:
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e004      	b.n	8000690 <__aeabi_i2f+0x8>
 8000686:	bf00      	nop

08000688 <__aeabi_i2f>:
 8000688:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800068c:	bf48      	it	mi
 800068e:	4240      	negmi	r0, r0
 8000690:	ea5f 0c00 	movs.w	ip, r0
 8000694:	bf08      	it	eq
 8000696:	4770      	bxeq	lr
 8000698:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800069c:	4601      	mov	r1, r0
 800069e:	f04f 0000 	mov.w	r0, #0
 80006a2:	e01c      	b.n	80006de <__aeabi_l2f+0x2a>

080006a4 <__aeabi_ul2f>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	e00a      	b.n	80006c8 <__aeabi_l2f+0x14>
 80006b2:	bf00      	nop

080006b4 <__aeabi_l2f>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80006c0:	d502      	bpl.n	80006c8 <__aeabi_l2f+0x14>
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	ea5f 0c01 	movs.w	ip, r1
 80006cc:	bf02      	ittt	eq
 80006ce:	4684      	moveq	ip, r0
 80006d0:	4601      	moveq	r1, r0
 80006d2:	2000      	moveq	r0, #0
 80006d4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80006d8:	bf08      	it	eq
 80006da:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80006de:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006e2:	fabc f28c 	clz	r2, ip
 80006e6:	3a08      	subs	r2, #8
 80006e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ec:	db10      	blt.n	8000710 <__aeabi_l2f+0x5c>
 80006ee:	fa01 fc02 	lsl.w	ip, r1, r2
 80006f2:	4463      	add	r3, ip
 80006f4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006f8:	f1c2 0220 	rsb	r2, r2, #32
 80006fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000700:	fa20 f202 	lsr.w	r2, r0, r2
 8000704:	eb43 0002 	adc.w	r0, r3, r2
 8000708:	bf08      	it	eq
 800070a:	f020 0001 	biceq.w	r0, r0, #1
 800070e:	4770      	bx	lr
 8000710:	f102 0220 	add.w	r2, r2, #32
 8000714:	fa01 fc02 	lsl.w	ip, r1, r2
 8000718:	f1c2 0220 	rsb	r2, r2, #32
 800071c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000720:	fa21 f202 	lsr.w	r2, r1, r2
 8000724:	eb43 0002 	adc.w	r0, r3, r2
 8000728:	bf08      	it	eq
 800072a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800072e:	4770      	bx	lr

08000730 <__aeabi_fmul>:
 8000730:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000734:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000738:	bf1e      	ittt	ne
 800073a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800073e:	ea92 0f0c 	teqne	r2, ip
 8000742:	ea93 0f0c 	teqne	r3, ip
 8000746:	d06f      	beq.n	8000828 <__aeabi_fmul+0xf8>
 8000748:	441a      	add	r2, r3
 800074a:	ea80 0c01 	eor.w	ip, r0, r1
 800074e:	0240      	lsls	r0, r0, #9
 8000750:	bf18      	it	ne
 8000752:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000756:	d01e      	beq.n	8000796 <__aeabi_fmul+0x66>
 8000758:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800075c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000760:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000764:	fba0 3101 	umull	r3, r1, r0, r1
 8000768:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800076c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000770:	bf3e      	ittt	cc
 8000772:	0049      	lslcc	r1, r1, #1
 8000774:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000778:	005b      	lslcc	r3, r3, #1
 800077a:	ea40 0001 	orr.w	r0, r0, r1
 800077e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000782:	2afd      	cmp	r2, #253	@ 0xfd
 8000784:	d81d      	bhi.n	80007c2 <__aeabi_fmul+0x92>
 8000786:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800078a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800078e:	bf08      	it	eq
 8000790:	f020 0001 	biceq.w	r0, r0, #1
 8000794:	4770      	bx	lr
 8000796:	f090 0f00 	teq	r0, #0
 800079a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800079e:	bf08      	it	eq
 80007a0:	0249      	lsleq	r1, r1, #9
 80007a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007aa:	3a7f      	subs	r2, #127	@ 0x7f
 80007ac:	bfc2      	ittt	gt
 80007ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80007b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007b6:	4770      	bxgt	lr
 80007b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	dc5d      	bgt.n	8000880 <__aeabi_fmul+0x150>
 80007c4:	f112 0f19 	cmn.w	r2, #25
 80007c8:	bfdc      	itt	le
 80007ca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80007ce:	4770      	bxle	lr
 80007d0:	f1c2 0200 	rsb	r2, r2, #0
 80007d4:	0041      	lsls	r1, r0, #1
 80007d6:	fa21 f102 	lsr.w	r1, r1, r2
 80007da:	f1c2 0220 	rsb	r2, r2, #32
 80007de:	fa00 fc02 	lsl.w	ip, r0, r2
 80007e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007e6:	f140 0000 	adc.w	r0, r0, #0
 80007ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ee:	bf08      	it	eq
 80007f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f4:	4770      	bx	lr
 80007f6:	f092 0f00 	teq	r2, #0
 80007fa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007fe:	bf02      	ittt	eq
 8000800:	0040      	lsleq	r0, r0, #1
 8000802:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000806:	3a01      	subeq	r2, #1
 8000808:	d0f9      	beq.n	80007fe <__aeabi_fmul+0xce>
 800080a:	ea40 000c 	orr.w	r0, r0, ip
 800080e:	f093 0f00 	teq	r3, #0
 8000812:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000816:	bf02      	ittt	eq
 8000818:	0049      	lsleq	r1, r1, #1
 800081a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800081e:	3b01      	subeq	r3, #1
 8000820:	d0f9      	beq.n	8000816 <__aeabi_fmul+0xe6>
 8000822:	ea41 010c 	orr.w	r1, r1, ip
 8000826:	e78f      	b.n	8000748 <__aeabi_fmul+0x18>
 8000828:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800082c:	ea92 0f0c 	teq	r2, ip
 8000830:	bf18      	it	ne
 8000832:	ea93 0f0c 	teqne	r3, ip
 8000836:	d00a      	beq.n	800084e <__aeabi_fmul+0x11e>
 8000838:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800083c:	bf18      	it	ne
 800083e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000842:	d1d8      	bne.n	80007f6 <__aeabi_fmul+0xc6>
 8000844:	ea80 0001 	eor.w	r0, r0, r1
 8000848:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800084c:	4770      	bx	lr
 800084e:	f090 0f00 	teq	r0, #0
 8000852:	bf17      	itett	ne
 8000854:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000858:	4608      	moveq	r0, r1
 800085a:	f091 0f00 	teqne	r1, #0
 800085e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000862:	d014      	beq.n	800088e <__aeabi_fmul+0x15e>
 8000864:	ea92 0f0c 	teq	r2, ip
 8000868:	d101      	bne.n	800086e <__aeabi_fmul+0x13e>
 800086a:	0242      	lsls	r2, r0, #9
 800086c:	d10f      	bne.n	800088e <__aeabi_fmul+0x15e>
 800086e:	ea93 0f0c 	teq	r3, ip
 8000872:	d103      	bne.n	800087c <__aeabi_fmul+0x14c>
 8000874:	024b      	lsls	r3, r1, #9
 8000876:	bf18      	it	ne
 8000878:	4608      	movne	r0, r1
 800087a:	d108      	bne.n	800088e <__aeabi_fmul+0x15e>
 800087c:	ea80 0001 	eor.w	r0, r0, r1
 8000880:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000884:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000888:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800088c:	4770      	bx	lr
 800088e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000892:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000896:	4770      	bx	lr

08000898 <__aeabi_fdiv>:
 8000898:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008a0:	bf1e      	ittt	ne
 80008a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a6:	ea92 0f0c 	teqne	r2, ip
 80008aa:	ea93 0f0c 	teqne	r3, ip
 80008ae:	d069      	beq.n	8000984 <__aeabi_fdiv+0xec>
 80008b0:	eba2 0203 	sub.w	r2, r2, r3
 80008b4:	ea80 0c01 	eor.w	ip, r0, r1
 80008b8:	0249      	lsls	r1, r1, #9
 80008ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008be:	d037      	beq.n	8000930 <__aeabi_fdiv+0x98>
 80008c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80008c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008d0:	428b      	cmp	r3, r1
 80008d2:	bf38      	it	cc
 80008d4:	005b      	lslcc	r3, r3, #1
 80008d6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80008da:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80008de:	428b      	cmp	r3, r1
 80008e0:	bf24      	itt	cs
 80008e2:	1a5b      	subcs	r3, r3, r1
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008ec:	bf24      	itt	cs
 80008ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008fa:	bf24      	itt	cs
 80008fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000908:	bf24      	itt	cs
 800090a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800090e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	bf18      	it	ne
 8000916:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800091a:	d1e0      	bne.n	80008de <__aeabi_fdiv+0x46>
 800091c:	2afd      	cmp	r2, #253	@ 0xfd
 800091e:	f63f af50 	bhi.w	80007c2 <__aeabi_fmul+0x92>
 8000922:	428b      	cmp	r3, r1
 8000924:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000928:	bf08      	it	eq
 800092a:	f020 0001 	biceq.w	r0, r0, #1
 800092e:	4770      	bx	lr
 8000930:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000934:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000938:	327f      	adds	r2, #127	@ 0x7f
 800093a:	bfc2      	ittt	gt
 800093c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000940:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000944:	4770      	bxgt	lr
 8000946:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	3a01      	subs	r2, #1
 8000950:	e737      	b.n	80007c2 <__aeabi_fmul+0x92>
 8000952:	f092 0f00 	teq	r2, #0
 8000956:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800095a:	bf02      	ittt	eq
 800095c:	0040      	lsleq	r0, r0, #1
 800095e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000962:	3a01      	subeq	r2, #1
 8000964:	d0f9      	beq.n	800095a <__aeabi_fdiv+0xc2>
 8000966:	ea40 000c 	orr.w	r0, r0, ip
 800096a:	f093 0f00 	teq	r3, #0
 800096e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000972:	bf02      	ittt	eq
 8000974:	0049      	lsleq	r1, r1, #1
 8000976:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800097a:	3b01      	subeq	r3, #1
 800097c:	d0f9      	beq.n	8000972 <__aeabi_fdiv+0xda>
 800097e:	ea41 010c 	orr.w	r1, r1, ip
 8000982:	e795      	b.n	80008b0 <__aeabi_fdiv+0x18>
 8000984:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000988:	ea92 0f0c 	teq	r2, ip
 800098c:	d108      	bne.n	80009a0 <__aeabi_fdiv+0x108>
 800098e:	0242      	lsls	r2, r0, #9
 8000990:	f47f af7d 	bne.w	800088e <__aeabi_fmul+0x15e>
 8000994:	ea93 0f0c 	teq	r3, ip
 8000998:	f47f af70 	bne.w	800087c <__aeabi_fmul+0x14c>
 800099c:	4608      	mov	r0, r1
 800099e:	e776      	b.n	800088e <__aeabi_fmul+0x15e>
 80009a0:	ea93 0f0c 	teq	r3, ip
 80009a4:	d104      	bne.n	80009b0 <__aeabi_fdiv+0x118>
 80009a6:	024b      	lsls	r3, r1, #9
 80009a8:	f43f af4c 	beq.w	8000844 <__aeabi_fmul+0x114>
 80009ac:	4608      	mov	r0, r1
 80009ae:	e76e      	b.n	800088e <__aeabi_fmul+0x15e>
 80009b0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80009b4:	bf18      	it	ne
 80009b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80009ba:	d1ca      	bne.n	8000952 <__aeabi_fdiv+0xba>
 80009bc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80009c0:	f47f af5c 	bne.w	800087c <__aeabi_fmul+0x14c>
 80009c4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80009c8:	f47f af3c 	bne.w	8000844 <__aeabi_fmul+0x114>
 80009cc:	e75f      	b.n	800088e <__aeabi_fmul+0x15e>
 80009ce:	bf00      	nop

080009d0 <__gesf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpsf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__lesf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpsf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpsf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fa:	d011      	beq.n	8000a20 <__cmpsf2+0x40>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a02:	bf18      	it	ne
 8000a04:	ea90 0f01 	teqne	r0, r1
 8000a08:	bf58      	it	pl
 8000a0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a0e:	bf88      	it	hi
 8000a10:	17c8      	asrhi	r0, r1, #31
 8000a12:	bf38      	it	cc
 8000a14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a18:	bf18      	it	ne
 8000a1a:	f040 0001 	orrne.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a24:	d102      	bne.n	8000a2c <__cmpsf2+0x4c>
 8000a26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a2a:	d105      	bne.n	8000a38 <__cmpsf2+0x58>
 8000a2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a30:	d1e4      	bne.n	80009fc <__cmpsf2+0x1c>
 8000a32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a36:	d0e1      	beq.n	80009fc <__cmpsf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cfrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4608      	mov	r0, r1
 8000a44:	4661      	mov	r1, ip
 8000a46:	e7ff      	b.n	8000a48 <__aeabi_cfcmpeq>

08000a48 <__aeabi_cfcmpeq>:
 8000a48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a4a:	f7ff ffc9 	bl	80009e0 <__cmpsf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a58 <__aeabi_fcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_fcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffd2 	bl	8000a40 <__aeabi_cfrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_fcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc8 	bl	8000a40 <__aeabi_cfrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6153      	str	r3, [r2, #20]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f001 fde3 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f001 fdfc 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200d      	movs	r0, #13
 8000af0:	f001 fddb 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000af4:	200d      	movs	r0, #13
 8000af6:	f001 fdf4 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200f      	movs	r0, #15
 8000b00:	f001 fdd3 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f001 fdec 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2010      	movs	r0, #16
 8000b10:	f001 fdcb 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b14:	2010      	movs	r0, #16
 8000b16:	f001 fde4 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2011      	movs	r0, #17
 8000b20:	f001 fdc3 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b24:	2011      	movs	r0, #17
 8000b26:	f001 fddc 	bl	80026e2 <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <apply_deadzone>:
        .in2_port = GPIOA, .in2_pin = GPIO_PIN_3, .pwm_tim = &htim2,
        .pwm_in1_channel = TIM_CHANNEL_3, .pwm_in2_channel = TIM_CHANNEL_4 };

// 应用死区处理
static void apply_deadzone(int raw, int *processed)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	*processed = raw;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]

	// 中心死区
	if (abs(raw - CENTER) <= CENTER_DEADZONE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b4e:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 8000b52:	db09      	blt.n	8000b68 <apply_deadzone+0x30>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b5c:	dc04      	bgt.n	8000b68 <apply_deadzone+0x30>
	{
		*processed = CENTER;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b64:	601a      	str	r2, [r3, #0]
	}
	else if (raw >= 4096 - EDGE_DEADZONE)
	{
		*processed = 4096;
	}
}
 8000b66:	e010      	b.n	8000b8a <apply_deadzone+0x52>
	else if (raw <= EDGE_DEADZONE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000b6e:	dc03      	bgt.n	8000b78 <apply_deadzone+0x40>
		*processed = 0;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	e008      	b.n	8000b8a <apply_deadzone+0x52>
	else if (raw >= 4096 - EDGE_DEADZONE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f640 62d3 	movw	r2, #3795	@ 0xed3
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	dd03      	ble.n	8000b8a <apply_deadzone+0x52>
		*processed = 4096;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <speed_to_pwm>:

// 速度转PWM值
static int speed_to_pwm(float speed)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	float abs_speed = fabsf(speed);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ba2:	60fb      	str	r3, [r7, #12]
	if (abs_speed <= 0)
 8000ba4:	f04f 0100 	mov.w	r1, #0
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff ff69 	bl	8000a80 <__aeabi_fcmple>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <speed_to_pwm+0x24>
		return 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e024      	b.n	8000c02 <speed_to_pwm+0x6e>
	return (int) round(PWM_MIN + ((abs_speed - 1) / 99) * PWM_RANGE);
 8000bb8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff fcad 	bl	800051c <__aeabi_fsub>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4911      	ldr	r1, [pc, #68]	@ (8000c0c <speed_to_pwm+0x78>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe66 	bl	8000898 <__aeabi_fdiv>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4910      	ldr	r1, [pc, #64]	@ (8000c10 <speed_to_pwm+0x7c>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fdad 	bl	8000730 <__aeabi_fmul>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	490e      	ldr	r1, [pc, #56]	@ (8000c14 <speed_to_pwm+0x80>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fca0 	bl	8000520 <__addsf3>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc16 	bl	8000414 <__aeabi_f2d>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f008 f92e 	bl	8008e50 <round>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fc62 	bl	80004c4 <__aeabi_d2iz>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	42c60000 	.word	0x42c60000
 8000c10:	428c0000 	.word	0x428c0000
 8000c14:	4414c000 	.word	0x4414c000

08000c18 <motor_control>:

// 电机控制函数
static void motor_control(MotorController *motor, float speed)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	// 计算PWM值
	int pwm = speed_to_pwm(speed);
 8000c22:	6838      	ldr	r0, [r7, #0]
 8000c24:	f7ff ffb6 	bl	8000b94 <speed_to_pwm>
 8000c28:	60f8      	str	r0, [r7, #12]

//    // 方向控制
	if (speed > 0)
 8000c2a:	f04f 0100 	mov.w	r1, #0
 8000c2e:	6838      	ldr	r0, [r7, #0]
 8000c30:	f7ff ff3a 	bl	8000aa8 <__aeabi_fcmpgt>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d046      	beq.n	8000cc8 <motor_control+0xb0>
	{
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d105      	bne.n	8000c4e <motor_control+0x36>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c4c:	e018      	b.n	8000c80 <motor_control+0x68>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d105      	bne.n	8000c62 <motor_control+0x4a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c60:	e00e      	b.n	8000c80 <motor_control+0x68>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d105      	bne.n	8000c76 <motor_control+0x5e>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2300      	movs	r3, #0
 8000c72:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c74:	e004      	b.n	8000c80 <motor_control+0x68>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, pwm);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d105      	bne.n	8000c94 <motor_control+0x7c>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
	}

//    // 设置PWM
//    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, pwm);
}
 8000c92:	e060      	b.n	8000d56 <motor_control+0x13e>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, pwm);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d105      	bne.n	8000ca8 <motor_control+0x90>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ca6:	e056      	b.n	8000d56 <motor_control+0x13e>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d105      	bne.n	8000cbc <motor_control+0xa4>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cba:	e04c      	b.n	8000d56 <motor_control+0x13e>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cc6:	e046      	b.n	8000d56 <motor_control+0x13e>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d105      	bne.n	8000cdc <motor_control+0xc4>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cda:	e018      	b.n	8000d0e <motor_control+0xf6>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d105      	bne.n	8000cf0 <motor_control+0xd8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cee:	e00e      	b.n	8000d0e <motor_control+0xf6>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d105      	bne.n	8000d04 <motor_control+0xec>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d02:	e004      	b.n	8000d0e <motor_control+0xf6>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <motor_control+0x10a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d20:	e019      	b.n	8000d56 <motor_control+0x13e>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d105      	bne.n	8000d36 <motor_control+0x11e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2300      	movs	r3, #0
 8000d32:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000d34:	e00f      	b.n	8000d56 <motor_control+0x13e>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	2b08      	cmp	r3, #8
 8000d3c:	d105      	bne.n	8000d4a <motor_control+0x132>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000d48:	e005      	b.n	8000d56 <motor_control+0x13e>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2300      	movs	r3, #0
 8000d52:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d54:	e7ff      	b.n	8000d56 <motor_control+0x13e>
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <update_motion_control>:

// 主控制函数
void update_motion_control(int *input_array)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	float x_norm, y_norm;
	float left_speed, right_speed;
	float throttle_percent;

	// 1. 应用死区处理
	apply_deadzone(input_array[0], &x_processed);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f107 0210 	add.w	r2, r7, #16
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fee0 	bl	8000b38 <apply_deadzone>
	apply_deadzone(input_array[1], &y_processed);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f107 020c 	add.w	r2, r7, #12
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fed7 	bl	8000b38 <apply_deadzone>

	// 2. 归一化处理 (-1.0到1.0范围)
	x_norm = (x_processed - CENTER) / (float) (CENTER - EDGE_DEADZONE);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fc79 	bl	8000688 <__aeabi_i2f>
 8000d96:	4603      	mov	r3, r0
 8000d98:	494c      	ldr	r1, [pc, #304]	@ (8000ecc <update_motion_control+0x16c>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fd7c 	bl	8000898 <__aeabi_fdiv>
 8000da0:	4603      	mov	r3, r0
 8000da2:	623b      	str	r3, [r7, #32]
	y_norm = (y_processed - CENTER) / (float) (CENTER - EDGE_DEADZONE);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fc6c 	bl	8000688 <__aeabi_i2f>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4946      	ldr	r1, [pc, #280]	@ (8000ecc <update_motion_control+0x16c>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fd6f 	bl	8000898 <__aeabi_fdiv>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	61fb      	str	r3, [r7, #28]

	// 限制在[-1, 1]范围内
	x_norm = fmaxf(-1.0f, fminf(1.0f, x_norm));
 8000dbe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000dc2:	6a38      	ldr	r0, [r7, #32]
 8000dc4:	f008 f815 	bl	8008df2 <fminf>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4941      	ldr	r1, [pc, #260]	@ (8000ed0 <update_motion_control+0x170>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f007 fffb 	bl	8008dc8 <fmaxf>
 8000dd2:	6238      	str	r0, [r7, #32]
	y_norm = fmaxf(-1.0f, fminf(1.0f, y_norm));
 8000dd4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000dd8:	69f8      	ldr	r0, [r7, #28]
 8000dda:	f008 f80a 	bl	8008df2 <fminf>
 8000dde:	4603      	mov	r3, r0
 8000de0:	493b      	ldr	r1, [pc, #236]	@ (8000ed0 <update_motion_control+0x170>)
 8000de2:	4618      	mov	r0, r3
 8000de4:	f007 fff0 	bl	8008dc8 <fmaxf>
 8000de8:	61f8      	str	r0, [r7, #28]

	// 3. 计算油门百分比 (0-100%)
	if (input_array[3] <= (2048 + CENTER))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	330c      	adds	r3, #12
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000df4:	dc03      	bgt.n	8000dfe <update_motion_control+0x9e>
	{
		throttle_percent = 0;
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dfc:	e023      	b.n	8000e46 <update_motion_control+0xe6>
	}
	else if (input_array[3] >= 4080)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	330c      	adds	r3, #12
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f5b3 6f7f 	cmp.w	r3, #4080	@ 0xff0
 8000e08:	db02      	blt.n	8000e10 <update_motion_control+0xb0>
	{
		throttle_percent = 100;
 8000e0a:	4b32      	ldr	r3, [pc, #200]	@ (8000ed4 <update_motion_control+0x174>)
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e0e:	e01a      	b.n	8000e46 <update_motion_control+0xe6>
	}
	else
	{
		throttle_percent = ((input_array[3] - 2048) / (float) 2048) * 99 + 1;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	330c      	adds	r3, #12
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fc34 	bl	8000688 <__aeabi_i2f>
 8000e20:	4603      	mov	r3, r0
 8000e22:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fd36 	bl	8000898 <__aeabi_fdiv>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	492a      	ldr	r1, [pc, #168]	@ (8000ed8 <update_motion_control+0x178>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fc7d 	bl	8000730 <__aeabi_fmul>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb6f 	bl	8000520 <__addsf3>
 8000e42:	4603      	mov	r3, r0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	// 4. 差速驱动计算
	left_speed = (y_norm + x_norm) * throttle_percent / 100.0f;
 8000e46:	6a39      	ldr	r1, [r7, #32]
 8000e48:	69f8      	ldr	r0, [r7, #28]
 8000e4a:	f7ff fb69 	bl	8000520 <__addsf3>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fc6c 	bl	8000730 <__aeabi_fmul>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	491e      	ldr	r1, [pc, #120]	@ (8000ed4 <update_motion_control+0x174>)
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fd1b 	bl	8000898 <__aeabi_fdiv>
 8000e62:	4603      	mov	r3, r0
 8000e64:	61bb      	str	r3, [r7, #24]
	right_speed = (y_norm - x_norm) * throttle_percent / 100.0f;
 8000e66:	6a39      	ldr	r1, [r7, #32]
 8000e68:	69f8      	ldr	r0, [r7, #28]
 8000e6a:	f7ff fb57 	bl	800051c <__aeabi_fsub>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc5c 	bl	8000730 <__aeabi_fmul>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4916      	ldr	r1, [pc, #88]	@ (8000ed4 <update_motion_control+0x174>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fd0b 	bl	8000898 <__aeabi_fdiv>
 8000e82:	4603      	mov	r3, r0
 8000e84:	617b      	str	r3, [r7, #20]

	// 限幅处理 (确保在-100%到100%之间)
	left_speed = fmaxf(-1.0f, fminf(1.0f, left_speed));
 8000e86:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e8a:	69b8      	ldr	r0, [r7, #24]
 8000e8c:	f007 ffb1 	bl	8008df2 <fminf>
 8000e90:	4603      	mov	r3, r0
 8000e92:	490f      	ldr	r1, [pc, #60]	@ (8000ed0 <update_motion_control+0x170>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 ff97 	bl	8008dc8 <fmaxf>
 8000e9a:	61b8      	str	r0, [r7, #24]
	right_speed = fmaxf(-1.0f, fminf(1.0f, right_speed));
 8000e9c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ea0:	6978      	ldr	r0, [r7, #20]
 8000ea2:	f007 ffa6 	bl	8008df2 <fminf>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4909      	ldr	r1, [pc, #36]	@ (8000ed0 <update_motion_control+0x170>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f007 ff8c 	bl	8008dc8 <fmaxf>
 8000eb0:	6178      	str	r0, [r7, #20]

	// 5. 控制电机
	motor_control(&left_motor, left_speed);
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	4809      	ldr	r0, [pc, #36]	@ (8000edc <update_motion_control+0x17c>)
 8000eb6:	f7ff feaf 	bl	8000c18 <motor_control>
	motor_control(&right_motor, right_speed);
 8000eba:	6979      	ldr	r1, [r7, #20]
 8000ebc:	4808      	ldr	r0, [pc, #32]	@ (8000ee0 <update_motion_control+0x180>)
 8000ebe:	f7ff feab 	bl	8000c18 <motor_control>
}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	@ 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	44da8000 	.word	0x44da8000
 8000ed0:	bf800000 	.word	0xbf800000
 8000ed4:	42c80000 	.word	0x42c80000
 8000ed8:	42c60000 	.word	0x42c60000
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	2000001c 	.word	0x2000001c

08000ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a4a      	ldr	r2, [pc, #296]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b48      	ldr	r3, [pc, #288]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f10:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a44      	ldr	r2, [pc, #272]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b42      	ldr	r3, [pc, #264]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b3f      	ldr	r3, [pc, #252]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b3c      	ldr	r3, [pc, #240]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b39      	ldr	r3, [pc, #228]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a38      	ldr	r2, [pc, #224]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b36      	ldr	r3, [pc, #216]	@ (8001028 <MX_GPIO_Init+0x144>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5e:	4833      	ldr	r0, [pc, #204]	@ (800102c <MX_GPIO_Init+0x148>)
 8000f60:	f002 f80c 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2103      	movs	r1, #3
 8000f68:	4831      	ldr	r0, [pc, #196]	@ (8001030 <MX_GPIO_Init+0x14c>)
 8000f6a:	f002 f807 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8000f74:	482e      	ldr	r0, [pc, #184]	@ (8001030 <MX_GPIO_Init+0x14c>)
 8000f76:	f002 f801 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4619      	mov	r1, r3
 8000f92:	4826      	ldr	r0, [pc, #152]	@ (800102c <MX_GPIO_Init+0x148>)
 8000f94:	f001 fe6e 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4822      	ldr	r0, [pc, #136]	@ (8001034 <MX_GPIO_Init+0x150>)
 8000fac:	f001 fe62 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481a      	ldr	r0, [pc, #104]	@ (8001030 <MX_GPIO_Init+0x14c>)
 8000fc8:	f001 fe54 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4812      	ldr	r0, [pc, #72]	@ (8001030 <MX_GPIO_Init+0x14c>)
 8000fe6:	f001 fe45 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : remode1_Pin remode2_Pin */
  GPIO_InitStruct.Pin = remode1_Pin|remode2_Pin;
 8000fea:	2318      	movs	r3, #24
 8000fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <MX_GPIO_Init+0x14c>)
 8000ffe:	f001 fe39 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001008:	2311      	movs	r3, #17
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2302      	movs	r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_GPIO_Init+0x14c>)
 800101c:	f001 fe2a 	bl	8002c74 <HAL_GPIO_Init>

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000
 800102c:	40011000 	.word	0x40011000
 8001030:	40010c00 	.word	0x40010c00
 8001034:	40010800 	.word	0x40010800

08001038 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_I2C1_Init+0x50>)
 800103e:	4a13      	ldr	r2, [pc, #76]	@ (800108c <MX_I2C1_Init+0x54>)
 8001040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001044:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_I2C1_Init+0x58>)
 8001046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001056:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800105a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_I2C1_Init+0x50>)
 8001076:	f001 ffb3 	bl	8002fe0 <HAL_I2C_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 f981 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000bc 	.word	0x200000bc
 800108c:	40005400 	.word	0x40005400
 8001090:	00061a80 	.word	0x00061a80

08001094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a45      	ldr	r2, [pc, #276]	@ (80011c4 <HAL_I2C_MspInit+0x130>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	f040 8082 	bne.w	80011ba <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b44      	ldr	r3, [pc, #272]	@ (80011c8 <HAL_I2C_MspInit+0x134>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4a43      	ldr	r2, [pc, #268]	@ (80011c8 <HAL_I2C_MspInit+0x134>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6193      	str	r3, [r2, #24]
 80010c2:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <HAL_I2C_MspInit+0x134>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ce:	23c0      	movs	r3, #192	@ 0xc0
 80010d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d2:	2312      	movs	r3, #18
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	4619      	mov	r1, r3
 80010e0:	483a      	ldr	r0, [pc, #232]	@ (80011cc <HAL_I2C_MspInit+0x138>)
 80010e2:	f001 fdc7 	bl	8002c74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e6:	4b38      	ldr	r3, [pc, #224]	@ (80011c8 <HAL_I2C_MspInit+0x134>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a37      	ldr	r2, [pc, #220]	@ (80011c8 <HAL_I2C_MspInit+0x134>)
 80010ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b35      	ldr	r3, [pc, #212]	@ (80011c8 <HAL_I2C_MspInit+0x134>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80010fe:	4b34      	ldr	r3, [pc, #208]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 8001100:	4a34      	ldr	r2, [pc, #208]	@ (80011d4 <HAL_I2C_MspInit+0x140>)
 8001102:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001104:	4b32      	ldr	r3, [pc, #200]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001110:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001116:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111c:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001122:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001128:	4b29      	ldr	r3, [pc, #164]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 800112a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800112e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001130:	4827      	ldr	r0, [pc, #156]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 8001132:	f001 faf1 	bl	8002718 <HAL_DMA_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 800113c:	f000 f923 	bl	8001386 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a23      	ldr	r2, [pc, #140]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 8001144:	639a      	str	r2, [r3, #56]	@ 0x38
 8001146:	4a22      	ldr	r2, [pc, #136]	@ (80011d0 <HAL_I2C_MspInit+0x13c>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 800114e:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <HAL_I2C_MspInit+0x148>)
 8001150:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001152:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 8001154:	2210      	movs	r2, #16
 8001156:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 8001160:	2280      	movs	r2, #128	@ 0x80
 8001162:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800116a:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 8001178:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800117c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800117e:	4816      	ldr	r0, [pc, #88]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 8001180:	f001 faca 	bl	8002718 <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800118a:	f000 f8fc 	bl	8001386 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a11      	ldr	r2, [pc, #68]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
 8001194:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_I2C_MspInit+0x144>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	201f      	movs	r0, #31
 80011a0:	f001 fa83 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011a4:	201f      	movs	r0, #31
 80011a6:	f001 fa9c 	bl	80026e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2020      	movs	r0, #32
 80011b0:	f001 fa7b 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011b4:	2020      	movs	r0, #32
 80011b6:	f001 fa94 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40005400 	.word	0x40005400
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	20000110 	.word	0x20000110
 80011d4:	40020080 	.word	0x40020080
 80011d8:	20000154 	.word	0x20000154
 80011dc:	4002006c 	.word	0x4002006c

080011e0 <parse_input_str>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void parse_input_str(char *str, int arr[4])
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	char *token = strtok(str, ",");
 80011ea:	4911      	ldr	r1, [pc, #68]	@ (8001230 <parse_input_str+0x50>)
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f006 fee7 	bl	8007fc0 <strtok>
 80011f2:	60f8      	str	r0, [r7, #12]
	for (int i = 0; i < 4 && token != NULL; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	e010      	b.n	800121c <parse_input_str+0x3c>
	{
		arr[i] = atoi(token);
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	18d4      	adds	r4, r2, r3
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f006 fd46 	bl	8007c94 <atoi>
 8001208:	4603      	mov	r3, r0
 800120a:	6023      	str	r3, [r4, #0]
		token = strtok(NULL, ",");
 800120c:	4908      	ldr	r1, [pc, #32]	@ (8001230 <parse_input_str+0x50>)
 800120e:	2000      	movs	r0, #0
 8001210:	f006 fed6 	bl	8007fc0 <strtok>
 8001214:	60f8      	str	r0, [r7, #12]
	for (int i = 0; i < 4 && token != NULL; i++)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3301      	adds	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b03      	cmp	r3, #3
 8001220:	dc02      	bgt.n	8001228 <parse_input_str+0x48>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e8      	bne.n	80011fa <parse_input_str+0x1a>
	}
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	08008ef4 	.word	0x08008ef4

08001234 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	uint8_t i = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800123e:	f001 f8d7 	bl	80023f0 <HAL_Init>
	/* USER CODE BEGIN Init */
//  HAL_SYSTICK_IRQHandler();
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001242:	f000 f85b 	bl	80012fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001246:	f7ff fe4d 	bl	8000ee4 <MX_GPIO_Init>
	MX_DMA_Init();
 800124a:	f7ff fc37 	bl	8000abc <MX_DMA_Init>
	MX_I2C1_Init();
 800124e:	f7ff fef3 	bl	8001038 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001252:	f000 fc1b 	bl	8001a8c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001256:	f001 f827 	bl	80022a8 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 800125a:	f000 fe8b 	bl	8001f74 <MX_TIM1_Init>
	MX_TIM2_Init();
 800125e:	f000 fedb 	bl	8002018 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// 启动定时器中断
	HAL_TIM_Base_Start_IT(&htim1);
 8001262:	4821      	ldr	r0, [pc, #132]	@ (80012e8 <main+0xb4>)
 8001264:	f005 f8d2 	bl	800640c <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001268:	2100      	movs	r1, #0
 800126a:	4820      	ldr	r0, [pc, #128]	@ (80012ec <main+0xb8>)
 800126c:	f005 f978 	bl	8006560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001270:	2104      	movs	r1, #4
 8001272:	481e      	ldr	r0, [pc, #120]	@ (80012ec <main+0xb8>)
 8001274:	f005 f974 	bl	8006560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001278:	2108      	movs	r1, #8
 800127a:	481c      	ldr	r0, [pc, #112]	@ (80012ec <main+0xb8>)
 800127c:	f005 f970 	bl	8006560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001280:	210c      	movs	r1, #12
 8001282:	481a      	ldr	r0, [pc, #104]	@ (80012ec <main+0xb8>)
 8001284:	f005 f96c 	bl	8006560 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);        //设置占空比50%
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <main+0xb8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);        //设置占空比50%
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <main+0xb8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	@ 0x38

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);        //设置占空比50%
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <main+0xb8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);        //设置占空比50%
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <main+0xb8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	641a      	str	r2, [r3, #64]	@ 0x40

//	OLED_Init();

	//RF24L01引脚初始化
	NRF24L01_Gpio_Init();
 80012a8:	f000 fb6e 	bl	8001988 <NRF24L01_Gpio_Init>

	//检测nRF24L01
	while (NRF24L01_check_DMA() == 0);
 80012ac:	bf00      	nop
 80012ae:	f000 fa1d 	bl	80016ec <NRF24L01_check_DMA>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0fa      	beq.n	80012ae <main+0x7a>
	RF24L01_Init_DMA();
 80012b8:	f000 fb82 	bl	80019c0 <RF24L01_Init_DMA>
	RF24L01_Set_Mode_DMA(MODE_RX);        //发送模式
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fab1 	bl	8001824 <RF24L01_Set_Mode_DMA>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		if (0 != NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer))        //接收字节
 80012c2:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <main+0xbc>)
 80012c4:	f000 fb06 	bl	80018d4 <NRF24L01_RxPacket_DMA>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f9      	beq.n	80012c2 <main+0x8e>
		{
			parse_input_str(g_RF24L01RxBuffer, RX_BUFF);//解析接收数据
 80012ce:	4909      	ldr	r1, [pc, #36]	@ (80012f4 <main+0xc0>)
 80012d0:	4807      	ldr	r0, [pc, #28]	@ (80012f0 <main+0xbc>)
 80012d2:	f7ff ff85 	bl	80011e0 <parse_input_str>
			update_motion_control(RX_BUFF);
 80012d6:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <main+0xc0>)
 80012d8:	f7ff fd42 	bl	8000d60 <update_motion_control>
//			i++;OLED_Clear();
//			OLED_ShowString(0, i, g_RF24L01RxBuffer, 16, 0);
//			if(i==7)i=-1;
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <main+0xc4>)
 80012e2:	f001 fe63 	bl	8002fac <HAL_GPIO_TogglePin>
		if (0 != NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer))        //接收字节
 80012e6:	e7ec      	b.n	80012c2 <main+0x8e>
 80012e8:	200002a8 	.word	0x200002a8
 80012ec:	200002f0 	.word	0x200002f0
 80012f0:	200001a8 	.word	0x200001a8
 80012f4:	20000198 	.word	0x20000198
 80012f8:	40011000 	.word	0x40011000

080012fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b090      	sub	sp, #64	@ 0x40
 8001300:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	2228      	movs	r2, #40	@ 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fe4f 	bl	8007fae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001322:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001326:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001330:	2302      	movs	r3, #2
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001334:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800133a:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800133e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 0318 	add.w	r3, r7, #24
 8001344:	4618      	mov	r0, r3
 8001346:	f003 fc9d 	bl	8004c84 <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8001350:	f000 f819 	bl	8001386 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001354:	230f      	movs	r3, #15
 8001356:	607b      	str	r3, [r7, #4]
	        | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001358:	2302      	movs	r3, #2
 800135a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001364:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f003 ff0a 	bl	8005188 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x82>
	{
		Error_Handler();
 800137a:	f000 f804 	bl	8001386 <Error_Handler>
	}
}
 800137e:	bf00      	nop
 8001380:	3740      	adds	r7, #64	@ 0x40
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138a:	b672      	cpsid	i
}
 800138c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800138e:	bf00      	nop
 8001390:	e7fd      	b.n	800138e <Error_Handler+0x8>
	...

08001394 <drv_spi_read_write_byte>:
 *         @TxByte: 发送的数据字节
 * @note  :非堵塞式，一旦等待超时，函数会自动退出
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte(uint8_t TxByte)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af02      	add	r7, sp, #8
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1, &TxByte, &rx_data, 1, HAL_MAX_DELAY);
 800139e:	f107 020f 	add.w	r2, r7, #15
 80013a2:	1df9      	adds	r1, r7, #7
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <drv_spi_read_write_byte+0x28>)
 80013ae:	f004 f8fd 	bl	80055ac <HAL_SPI_TransmitReceive>
//    HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
//    while (HAL_SPI_GetState(&SPI1))!=HAL_SPI_STATE_READY);
	return rx_data;      //返回
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200001bc 	.word	0x200001bc

080013c0 <drv_spi_read_write_byte_dma>:
 *         @TxByte: 发送的数据字节
 * @note  :使用DMA进行SPI传输，需要等待传输完成
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte_dma(uint8_t TxByte)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_StatusTypeDef status;

	// 使用DMA进行SPI传输
	status = HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
 80013ca:	f107 020e 	add.w	r2, r7, #14
 80013ce:	1df9      	adds	r1, r7, #7
 80013d0:	2301      	movs	r3, #1
 80013d2:	480b      	ldr	r0, [pc, #44]	@ (8001400 <drv_spi_read_write_byte_dma+0x40>)
 80013d4:	f004 fb46 	bl	8005a64 <HAL_SPI_TransmitReceive_DMA>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <drv_spi_read_write_byte_dma+0x26>
	{
		// 处理错误情况
		Error_Handler();
 80013e2:	f7ff ffd0 	bl	8001386 <Error_Handler>
	}

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013e6:	bf00      	nop
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <drv_spi_read_write_byte_dma+0x40>)
 80013ea:	f004 fd5c 	bl	8005ea6 <HAL_SPI_GetState>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d1f9      	bne.n	80013e8 <drv_spi_read_write_byte_dma+0x28>

	return rx_data;
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001bc 	.word	0x200001bc

08001404 <drv_spi_read_write_buffer_dma>:
/*​
 * @brief SPI DMA方式读写缓冲区
 */
HAL_StatusTypeDef drv_spi_read_write_buffer_dma(uint8_t *tx_buf,
        uint8_t *rx_buf, uint16_t len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4613      	mov	r3, r2
 8001410:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf,
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	68f9      	ldr	r1, [r7, #12]
 8001418:	4808      	ldr	r0, [pc, #32]	@ (800143c <drv_spi_read_write_buffer_dma+0x38>)
 800141a:	f004 fb23 	bl	8005a64 <HAL_SPI_TransmitReceive_DMA>
 800141e:	4603      	mov	r3, r0
 8001420:	75fb      	strb	r3, [r7, #23]
	        rx_buf, len);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001422:	bf00      	nop
 8001424:	4805      	ldr	r0, [pc, #20]	@ (800143c <drv_spi_read_write_buffer_dma+0x38>)
 8001426:	f004 fd3e 	bl	8005ea6 <HAL_SPI_GetState>
 800142a:	4603      	mov	r3, r0
 800142c:	2b01      	cmp	r3, #1
 800142e:	d1f9      	bne.n	8001424 <drv_spi_read_write_buffer_dma+0x20>
	return status;
 8001430:	7dfb      	ldrb	r3, [r7, #23]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200001bc 	.word	0x200001bc

08001440 <NRF24L01_Read_Reg_DMA>:
 *         @RegAddr:寄存器地址
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:读取的数据
 */
uint8_t NRF24L01_Read_Reg_DMA(uint8_t RegAddr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[2] = { NRF_READ_REG | RegAddr, 0xFF };  // 命令+空数据
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	733b      	strb	r3, [r7, #12]
 800144e:	23ff      	movs	r3, #255	@ 0xff
 8001450:	737b      	strb	r3, [r7, #13]
	uint8_t rx_buf[2] = { 0 };                            // 接收缓冲区
 8001452:	2300      	movs	r3, #0
 8001454:	813b      	strh	r3, [r7, #8]

	RF24L01_SET_CS_LOW();          // 片选
 8001456:	2200      	movs	r2, #0
 8001458:	2102      	movs	r1, #2
 800145a:	480e      	ldr	r0, [pc, #56]	@ (8001494 <NRF24L01_Read_Reg_DMA+0x54>)
 800145c:	f001 fd8e 	bl	8002f7c <HAL_GPIO_WritePin>

	// 使用DMA进行SPI传输
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8001460:	f107 0208 	add.w	r2, r7, #8
 8001464:	f107 010c 	add.w	r1, r7, #12
 8001468:	2302      	movs	r3, #2
 800146a:	480b      	ldr	r0, [pc, #44]	@ (8001498 <NRF24L01_Read_Reg_DMA+0x58>)
 800146c:	f004 fafa 	bl	8005a64 <HAL_SPI_TransmitReceive_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001470:	bf00      	nop
 8001472:	4809      	ldr	r0, [pc, #36]	@ (8001498 <NRF24L01_Read_Reg_DMA+0x58>)
 8001474:	f004 fd17 	bl	8005ea6 <HAL_SPI_GetState>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d1f9      	bne.n	8001472 <NRF24L01_Read_Reg_DMA+0x32>

	RF24L01_SET_CS_HIGH();         // 取消片选
 800147e:	2201      	movs	r2, #1
 8001480:	2102      	movs	r1, #2
 8001482:	4804      	ldr	r0, [pc, #16]	@ (8001494 <NRF24L01_Read_Reg_DMA+0x54>)
 8001484:	f001 fd7a 	bl	8002f7c <HAL_GPIO_WritePin>

	return rx_buf[1];              // 返回接收到的数据
 8001488:	7a7b      	ldrb	r3, [r7, #9]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40010c00 	.word	0x40010c00
 8001498:	200001bc 	.word	0x200001bc

0800149c <NRF24L01_Read_Buf_DMA>:
 *         @len: 数据长度
 * @note  :数据长度不超过255，地址在设备中有效
 * @retval:无
 */
void NRF24L01_Read_Buf_DMA(uint8_t RegAddr, uint8_t *pBuf, uint8_t len)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b092      	sub	sp, #72	@ 0x48
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[32];  // 最大32字节
	uint8_t rx_buf[32];

	// 准备发送数据
	tx_buf[0] = NRF_READ_REG | RegAddr;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	memset(&tx_buf[1], 0xFF, len);  // 填充0xFF用于读取
 80014b2:	79ba      	ldrb	r2, [r7, #6]
 80014b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014b8:	3301      	adds	r3, #1
 80014ba:	21ff      	movs	r1, #255	@ 0xff
 80014bc:	4618      	mov	r0, r3
 80014be:	f006 fd76 	bl	8007fae <memset>

	RF24L01_SET_CS_LOW();          // 片选
 80014c2:	2200      	movs	r2, #0
 80014c4:	2102      	movs	r1, #2
 80014c6:	480f      	ldr	r0, [pc, #60]	@ (8001504 <NRF24L01_Read_Buf_DMA+0x68>)
 80014c8:	f001 fd58 	bl	8002f7c <HAL_GPIO_WritePin>

	// 使用DMA批量传输
	drv_spi_read_write_buffer_dma(tx_buf, rx_buf, len + 1);
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f107 0108 	add.w	r1, r7, #8
 80014d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff91 	bl	8001404 <drv_spi_read_write_buffer_dma>

	// 复制接收到的数据到输出缓冲区
	memcpy(pBuf, &rx_buf[1], len);
 80014e2:	79ba      	ldrb	r2, [r7, #6]
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	3301      	adds	r3, #1
 80014ea:	4619      	mov	r1, r3
 80014ec:	6838      	ldr	r0, [r7, #0]
 80014ee:	f006 fe36 	bl	800815e <memcpy>

	RF24L01_SET_CS_HIGH();         // 取消片选
 80014f2:	2201      	movs	r2, #1
 80014f4:	2102      	movs	r1, #2
 80014f6:	4803      	ldr	r0, [pc, #12]	@ (8001504 <NRF24L01_Read_Buf_DMA+0x68>)
 80014f8:	f001 fd40 	bl	8002f7c <HAL_GPIO_WritePin>
}
 80014fc:	bf00      	nop
 80014fe:	3748      	adds	r7, #72	@ 0x48
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40010c00 	.word	0x40010c00

08001508 <NRF24L01_Write_Reg_DMA>:
 *         @Value:要写入的值
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:无
 */
void NRF24L01_Write_Reg_DMA(uint8_t RegAddr, uint8_t Value)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[2] = { NRF_WRITE_REG | RegAddr, Value };  // 命令+数据
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	b2db      	uxtb	r3, r3
 8001520:	733b      	strb	r3, [r7, #12]
 8001522:	79bb      	ldrb	r3, [r7, #6]
 8001524:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();      // 片选
 8001526:	2200      	movs	r2, #0
 8001528:	2102      	movs	r1, #2
 800152a:	480d      	ldr	r0, [pc, #52]	@ (8001560 <NRF24L01_Write_Reg_DMA+0x58>)
 800152c:	f001 fd26 	bl	8002f7c <HAL_GPIO_WritePin>

	// 使用DMA进行SPI传输
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	2202      	movs	r2, #2
 8001536:	4619      	mov	r1, r3
 8001538:	480a      	ldr	r0, [pc, #40]	@ (8001564 <NRF24L01_Write_Reg_DMA+0x5c>)
 800153a:	f004 f9e1 	bl	8005900 <HAL_SPI_Transmit_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800153e:	bf00      	nop
 8001540:	4808      	ldr	r0, [pc, #32]	@ (8001564 <NRF24L01_Write_Reg_DMA+0x5c>)
 8001542:	f004 fcb0 	bl	8005ea6 <HAL_SPI_GetState>
 8001546:	4603      	mov	r3, r0
 8001548:	2b01      	cmp	r3, #1
 800154a:	d1f9      	bne.n	8001540 <NRF24L01_Write_Reg_DMA+0x38>

	RF24L01_SET_CS_HIGH();     // 取消片选
 800154c:	2201      	movs	r2, #1
 800154e:	2102      	movs	r1, #2
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <NRF24L01_Write_Reg_DMA+0x58>)
 8001552:	f001 fd13 	bl	8002f7c <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40010c00 	.word	0x40010c00
 8001564:	200001bc 	.word	0x200001bc

08001568 <NRF24L01_Read_Status_Register>:
 * @param :无
 * @note  :无
 * @retval:RF24L01状态
 */
uint8_t NRF24L01_Read_Status_Register(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	uint8_t Status;

	RF24L01_SET_CS_LOW();      //片选
 800156e:	2200      	movs	r2, #0
 8001570:	2102      	movs	r1, #2
 8001572:	4809      	ldr	r0, [pc, #36]	@ (8001598 <NRF24L01_Read_Status_Register+0x30>)
 8001574:	f001 fd02 	bl	8002f7c <HAL_GPIO_WritePin>

	Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS);  //读状态寄存器
 8001578:	2007      	movs	r0, #7
 800157a:	f7ff ff0b 	bl	8001394 <drv_spi_read_write_byte>
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]

	RF24L01_SET_CS_HIGH();     //取消片选
 8001582:	2201      	movs	r2, #1
 8001584:	2102      	movs	r1, #2
 8001586:	4804      	ldr	r0, [pc, #16]	@ (8001598 <NRF24L01_Read_Status_Register+0x30>)
 8001588:	f001 fcf8 	bl	8002f7c <HAL_GPIO_WritePin>

	return Status;
 800158c:	79fb      	ldrb	r3, [r7, #7]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010c00 	.word	0x40010c00

0800159c <NRF24L01_Clear_IRQ_Flag>:
 @IRQ_Source:中断源
 * @note  :无
 * @retval:清除后状态寄存器的值
 */
uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); // 保留有效中断位
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015ac:	71fb      	strb	r3, [r7, #7]
	status = NRF24L01_Read_Status_Register();                  // 读取当前状态
 80015ae:	f7ff ffdb 	bl	8001568 <NRF24L01_Read_Status_Register>
 80015b2:	4603      	mov	r3, r0
 80015b4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // 拉低CSN
 80015b6:	2200      	movs	r2, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	480c      	ldr	r0, [pc, #48]	@ (80015ec <NRF24L01_Clear_IRQ_Flag+0x50>)
 80015bc:	f001 fcde 	bl	8002f7c <HAL_GPIO_WritePin>
	drv_spi_read_write_byte(NRF_WRITE_REG + STATUS);          // 发送写命令
 80015c0:	2027      	movs	r0, #39	@ 0x27
 80015c2:	f7ff fee7 	bl	8001394 <drv_spi_read_write_byte>
	drv_spi_read_write_byte(status | IRQ_Source);             // 写1清中断标志[1]
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fee0 	bl	8001394 <drv_spi_read_write_byte>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // 拉高CSN
 80015d4:	2201      	movs	r2, #1
 80015d6:	2102      	movs	r1, #2
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <NRF24L01_Clear_IRQ_Flag+0x50>)
 80015da:	f001 fccf 	bl	8002f7c <HAL_GPIO_WritePin>

	return NRF24L01_Read_Status_Register();                   // 返回新状态
 80015de:	f7ff ffc3 	bl	8001568 <NRF24L01_Read_Status_Register>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <NRF24L01_Set_TxAddr_DMA>:
 * @param :
 *         @pAddr:地址存放地址
 *         @len:长度
 */
void NRF24L01_Set_TxAddr_DMA(uint8_t *pAddr, uint8_t len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tx_buf[6];  // 命令+5字节地址

	len = (len > 5) ? 5 : len;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	2b05      	cmp	r3, #5
 8001600:	bf28      	it	cs
 8001602:	2305      	movcs	r3, #5
 8001604:	70fb      	strb	r3, [r7, #3]
	tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8001606:	2330      	movs	r3, #48	@ 0x30
 8001608:	723b      	strb	r3, [r7, #8]
	memcpy(&tx_buf[1], pAddr, len);
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	3301      	adds	r3, #1
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f006 fda2 	bl	800815e <memcpy>

	RF24L01_SET_CS_LOW();
 800161a:	2200      	movs	r2, #0
 800161c:	2102      	movs	r1, #2
 800161e:	480e      	ldr	r0, [pc, #56]	@ (8001658 <NRF24L01_Set_TxAddr_DMA+0x68>)
 8001620:	f001 fcac 	bl	8002f7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, len + 1);
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	b29b      	uxth	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4619      	mov	r1, r3
 8001632:	480a      	ldr	r0, [pc, #40]	@ (800165c <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8001634:	f004 f964 	bl	8005900 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001638:	bf00      	nop
 800163a:	4808      	ldr	r0, [pc, #32]	@ (800165c <NRF24L01_Set_TxAddr_DMA+0x6c>)
 800163c:	f004 fc33 	bl	8005ea6 <HAL_SPI_GetState>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d1f9      	bne.n	800163a <NRF24L01_Set_TxAddr_DMA+0x4a>
	RF24L01_SET_CS_HIGH();
 8001646:	2201      	movs	r2, #1
 8001648:	2102      	movs	r1, #2
 800164a:	4803      	ldr	r0, [pc, #12]	@ (8001658 <NRF24L01_Set_TxAddr_DMA+0x68>)
 800164c:	f001 fc96 	bl	8002f7c <HAL_GPIO_WritePin>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010c00 	.word	0x40010c00
 800165c:	200001bc 	.word	0x200001bc

08001660 <NRF24L01_Set_RxAddr_DMA>:
 *         @PipeNum:通道
 *         @pAddr:地址存放地址
 *         @Len:长度
 */
void NRF24L01_Set_RxAddr_DMA(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	4613      	mov	r3, r2
 800166e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[6];  // 命令+5字节地址

	Len = (Len > 5) ? 5 : Len;
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	2b05      	cmp	r3, #5
 8001674:	bf28      	it	cs
 8001676:	2305      	movcs	r3, #5
 8001678:	71bb      	strb	r3, [r7, #6]
	PipeNum = (PipeNum > 5) ? 5 : PipeNum;
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2b05      	cmp	r3, #5
 800167e:	bf28      	it	cs
 8001680:	2305      	movcs	r3, #5
 8001682:	71fb      	strb	r3, [r7, #7]

	tx_buf[0] = NRF_WRITE_REG | (RX_ADDR_P0 + PipeNum);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	330a      	adds	r3, #10
 8001688:	b2db      	uxtb	r3, r3
 800168a:	b25b      	sxtb	r3, r3
 800168c:	f043 0320 	orr.w	r3, r3, #32
 8001690:	b25b      	sxtb	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	723b      	strb	r3, [r7, #8]
	memcpy(&tx_buf[1], pAddr, Len);
 8001696:	79ba      	ldrb	r2, [r7, #6]
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	3301      	adds	r3, #1
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 fd5c 	bl	800815e <memcpy>

	RF24L01_SET_CS_LOW();
 80016a6:	2200      	movs	r2, #0
 80016a8:	2102      	movs	r1, #2
 80016aa:	480e      	ldr	r0, [pc, #56]	@ (80016e4 <NRF24L01_Set_RxAddr_DMA+0x84>)
 80016ac:	f001 fc66 	bl	8002f7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, Len + 1);
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4619      	mov	r1, r3
 80016be:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <NRF24L01_Set_RxAddr_DMA+0x88>)
 80016c0:	f004 f91e 	bl	8005900 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80016c4:	bf00      	nop
 80016c6:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <NRF24L01_Set_RxAddr_DMA+0x88>)
 80016c8:	f004 fbed 	bl	8005ea6 <HAL_SPI_GetState>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d1f9      	bne.n	80016c6 <NRF24L01_Set_RxAddr_DMA+0x66>
	RF24L01_SET_CS_HIGH();
 80016d2:	2201      	movs	r2, #1
 80016d4:	2102      	movs	r1, #2
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <NRF24L01_Set_RxAddr_DMA+0x84>)
 80016d8:	f001 fc50 	bl	8002f7c <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40010c00 	.word	0x40010c00
 80016e8:	200001bc 	.word	0x200001bc

080016ec <NRF24L01_check_DMA>:
 * @param :无
 * @note  :使用DMA进行SPI传输检测模块
 * @retval:检测结果(0:失败, 1:成功)
 */
uint8_t NRF24L01_check_DMA(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t buf[5] = { 0xA5, 0xA5, 0xA5, 0xA5, 0xA5 };
 80016f2:	4a48      	ldr	r2, [pc, #288]	@ (8001814 <NRF24L01_check_DMA+0x128>)
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fc:	6018      	str	r0, [r3, #0]
 80016fe:	3304      	adds	r3, #4
 8001700:	7019      	strb	r1, [r3, #0]
	uint8_t read_buf[5] = { 0 };
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	711a      	strb	r2, [r3, #4]
	uint8_t tx_buf[6], rx_buf[6];
	uint32_t start_time = HAL_GetTick();
 800170c:	f000 fec8 	bl	80024a0 <HAL_GetTick>
 8001710:	6238      	str	r0, [r7, #32]

	while (1)
	{
		// 使用DMA写入地址
		tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8001712:	2330      	movs	r3, #48	@ 0x30
 8001714:	723b      	strb	r3, [r7, #8]
		memcpy(&tx_buf[1], buf, 5);
 8001716:	f107 0309 	add.w	r3, r7, #9
 800171a:	f107 0218 	add.w	r2, r7, #24
 800171e:	6810      	ldr	r0, [r2, #0]
 8001720:	6018      	str	r0, [r3, #0]
 8001722:	7912      	ldrb	r2, [r2, #4]
 8001724:	711a      	strb	r2, [r3, #4]

		RF24L01_SET_CS_LOW();
 8001726:	2200      	movs	r2, #0
 8001728:	2102      	movs	r1, #2
 800172a:	483b      	ldr	r0, [pc, #236]	@ (8001818 <NRF24L01_check_DMA+0x12c>)
 800172c:	f001 fc26 	bl	8002f7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 6);
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	2206      	movs	r2, #6
 8001736:	4619      	mov	r1, r3
 8001738:	4838      	ldr	r0, [pc, #224]	@ (800181c <NRF24L01_check_DMA+0x130>)
 800173a:	f004 f8e1 	bl	8005900 <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800173e:	bf00      	nop
 8001740:	4836      	ldr	r0, [pc, #216]	@ (800181c <NRF24L01_check_DMA+0x130>)
 8001742:	f004 fbb0 	bl	8005ea6 <HAL_SPI_GetState>
 8001746:	4603      	mov	r3, r0
 8001748:	2b01      	cmp	r3, #1
 800174a:	d1f9      	bne.n	8001740 <NRF24L01_check_DMA+0x54>
		RF24L01_SET_CS_HIGH();
 800174c:	2201      	movs	r2, #1
 800174e:	2102      	movs	r1, #2
 8001750:	4831      	ldr	r0, [pc, #196]	@ (8001818 <NRF24L01_check_DMA+0x12c>)
 8001752:	f001 fc13 	bl	8002f7c <HAL_GPIO_WritePin>

		// 使用DMA读取地址
		tx_buf[0] = NRF_READ_REG | TX_ADDR;
 8001756:	2310      	movs	r3, #16
 8001758:	723b      	strb	r3, [r7, #8]
		memset(&tx_buf[1], 0xFF, 5);
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	3301      	adds	r3, #1
 8001760:	2205      	movs	r2, #5
 8001762:	21ff      	movs	r1, #255	@ 0xff
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fc22 	bl	8007fae <memset>

		RF24L01_SET_CS_LOW();
 800176a:	2200      	movs	r2, #0
 800176c:	2102      	movs	r1, #2
 800176e:	482a      	ldr	r0, [pc, #168]	@ (8001818 <NRF24L01_check_DMA+0x12c>)
 8001770:	f001 fc04 	bl	8002f7c <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 6);
 8001774:	463a      	mov	r2, r7
 8001776:	f107 0108 	add.w	r1, r7, #8
 800177a:	2306      	movs	r3, #6
 800177c:	4827      	ldr	r0, [pc, #156]	@ (800181c <NRF24L01_check_DMA+0x130>)
 800177e:	f004 f971 	bl	8005a64 <HAL_SPI_TransmitReceive_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001782:	bf00      	nop
 8001784:	4825      	ldr	r0, [pc, #148]	@ (800181c <NRF24L01_check_DMA+0x130>)
 8001786:	f004 fb8e 	bl	8005ea6 <HAL_SPI_GetState>
 800178a:	4603      	mov	r3, r0
 800178c:	2b01      	cmp	r3, #1
 800178e:	d1f9      	bne.n	8001784 <NRF24L01_check_DMA+0x98>
		RF24L01_SET_CS_HIGH();
 8001790:	2201      	movs	r2, #1
 8001792:	2102      	movs	r1, #2
 8001794:	4820      	ldr	r0, [pc, #128]	@ (8001818 <NRF24L01_check_DMA+0x12c>)
 8001796:	f001 fbf1 	bl	8002f7c <HAL_GPIO_WritePin>

		// 比较结果
		for (i = 0; i < 5; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017a0:	e013      	b.n	80017ca <NRF24L01_check_DMA+0xde>
		{
			if (buf[i] != rx_buf[i + 1])
 80017a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017a6:	3328      	adds	r3, #40	@ 0x28
 80017a8:	443b      	add	r3, r7
 80017aa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80017ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017b2:	3301      	adds	r3, #1
 80017b4:	3328      	adds	r3, #40	@ 0x28
 80017b6:	443b      	add	r3, r7
 80017b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d109      	bne.n	80017d4 <NRF24L01_check_DMA+0xe8>
		for (i = 0; i < 5; i++)
 80017c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017c4:	3301      	adds	r3, #1
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d9e7      	bls.n	80017a2 <NRF24L01_check_DMA+0xb6>
 80017d2:	e000      	b.n	80017d6 <NRF24L01_check_DMA+0xea>
			{
				break;
 80017d4:	bf00      	nop
			}
		}

		if (i == 5)
 80017d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d101      	bne.n	80017e2 <NRF24L01_check_DMA+0xf6>
		{
			return 1; // 检测成功
 80017de:	2301      	movs	r3, #1
 80017e0:	e013      	b.n	800180a <NRF24L01_check_DMA+0x11e>
		}

		// 超时处理(5秒超时)
		if (HAL_GetTick() - start_time > 5000)
 80017e2:	f000 fe5d 	bl	80024a0 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <NRF24L01_check_DMA+0x10c>
		{
			return 0; // 检测失败
 80017f4:	2300      	movs	r3, #0
 80017f6:	e008      	b.n	800180a <NRF24L01_check_DMA+0x11e>
		}

		// 错误指示
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <NRF24L01_check_DMA+0x134>)
 80017fe:	f001 fbd5 	bl	8002fac <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001802:	2064      	movs	r0, #100	@ 0x64
 8001804:	f000 fe56 	bl	80024b4 <HAL_Delay>
		tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8001808:	e783      	b.n	8001712 <NRF24L01_check_DMA+0x26>
	}
}
 800180a:	4618      	mov	r0, r3
 800180c:	3728      	adds	r7, #40	@ 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	08008f14 	.word	0x08008f14
 8001818:	40010c00 	.word	0x40010c00
 800181c:	200001bc 	.word	0x200001bc
 8001820:	40011000 	.word	0x40011000

08001824 <RF24L01_Set_Mode_DMA>:
 *         @Mode:模式发送模式或接收模式
 * @note  :使用DMA进行寄存器读写
 * @retval:无
 */
void RF24L01_Set_Mode_DMA(nRf24l01ModeType Mode)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[2], rx_buf[2];

	// 使用DMA读取CONFIG寄存器
	tx_buf[0] = NRF_READ_REG | CONFIG;
 800182e:	2300      	movs	r3, #0
 8001830:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0xFF;
 8001832:	23ff      	movs	r3, #255	@ 0xff
 8001834:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();
 8001836:	2200      	movs	r2, #0
 8001838:	2102      	movs	r1, #2
 800183a:	4824      	ldr	r0, [pc, #144]	@ (80018cc <RF24L01_Set_Mode_DMA+0xa8>)
 800183c:	f001 fb9e 	bl	8002f7c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8001840:	f107 0208 	add.w	r2, r7, #8
 8001844:	f107 010c 	add.w	r1, r7, #12
 8001848:	2302      	movs	r3, #2
 800184a:	4821      	ldr	r0, [pc, #132]	@ (80018d0 <RF24L01_Set_Mode_DMA+0xac>)
 800184c:	f004 f90a 	bl	8005a64 <HAL_SPI_TransmitReceive_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001850:	bf00      	nop
 8001852:	481f      	ldr	r0, [pc, #124]	@ (80018d0 <RF24L01_Set_Mode_DMA+0xac>)
 8001854:	f004 fb27 	bl	8005ea6 <HAL_SPI_GetState>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d1f9      	bne.n	8001852 <RF24L01_Set_Mode_DMA+0x2e>
	RF24L01_SET_CS_HIGH();
 800185e:	2201      	movs	r2, #1
 8001860:	2102      	movs	r1, #2
 8001862:	481a      	ldr	r0, [pc, #104]	@ (80018cc <RF24L01_Set_Mode_DMA+0xa8>)
 8001864:	f001 fb8a 	bl	8002f7c <HAL_GPIO_WritePin>

	uint8_t controlreg = rx_buf[1];
 8001868:	7a7b      	ldrb	r3, [r7, #9]
 800186a:	73fb      	strb	r3, [r7, #15]

	// 修改模式位
	if (Mode == MODE_TX)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <RF24L01_Set_Mode_DMA+0x58>
	{
		controlreg &= ~(1 << PRIM_RX);
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e006      	b.n	800188a <RF24L01_Set_Mode_DMA+0x66>
	}
	else if (Mode == MODE_RX)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d103      	bne.n	800188a <RF24L01_Set_Mode_DMA+0x66>
	{
		controlreg |= (1 << PRIM_RX);
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
	}

	// 使用DMA写入CONFIG寄存器
	tx_buf[0] = NRF_WRITE_REG | CONFIG;
 800188a:	2320      	movs	r3, #32
 800188c:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = controlreg;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();
 8001892:	2200      	movs	r2, #0
 8001894:	2102      	movs	r1, #2
 8001896:	480d      	ldr	r0, [pc, #52]	@ (80018cc <RF24L01_Set_Mode_DMA+0xa8>)
 8001898:	f001 fb70 	bl	8002f7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2202      	movs	r2, #2
 80018a2:	4619      	mov	r1, r3
 80018a4:	480a      	ldr	r0, [pc, #40]	@ (80018d0 <RF24L01_Set_Mode_DMA+0xac>)
 80018a6:	f004 f82b 	bl	8005900 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80018aa:	bf00      	nop
 80018ac:	4808      	ldr	r0, [pc, #32]	@ (80018d0 <RF24L01_Set_Mode_DMA+0xac>)
 80018ae:	f004 fafa 	bl	8005ea6 <HAL_SPI_GetState>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d1f9      	bne.n	80018ac <RF24L01_Set_Mode_DMA+0x88>
	RF24L01_SET_CS_HIGH();
 80018b8:	2201      	movs	r2, #1
 80018ba:	2102      	movs	r1, #2
 80018bc:	4803      	ldr	r0, [pc, #12]	@ (80018cc <RF24L01_Set_Mode_DMA+0xa8>)
 80018be:	f001 fb5d 	bl	8002f7c <HAL_GPIO_WritePin>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	200001bc 	.word	0x200001bc

080018d4 <NRF24L01_RxPacket_DMA>:
 *         @rxbuf:接收数据存放地址
 * @note  :无
 * @retval:接收的数据个数
 */
uint8_t NRF24L01_RxPacket_DMA(uint8_t *rxbuf)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	uint8_t l_Status = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	75fb      	strb	r3, [r7, #23]
	uint32_t start_time = HAL_GetTick();
 80018e0:	f000 fdde 	bl	80024a0 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]
	uint8_t l_RxLength = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]

	RF24L01_SET_CS_LOW();      //片选
 80018ea:	2200      	movs	r2, #0
 80018ec:	2102      	movs	r1, #2
 80018ee:	4824      	ldr	r0, [pc, #144]	@ (8001980 <NRF24L01_RxPacket_DMA+0xac>)
 80018f0:	f001 fb44 	bl	8002f7c <HAL_GPIO_WritePin>
	drv_spi_read_write_byte_dma( FLUSH_RX);
 80018f4:	20e2      	movs	r0, #226	@ 0xe2
 80018f6:	f7ff fd63 	bl	80013c0 <drv_spi_read_write_byte_dma>
	RF24L01_SET_CS_HIGH();
 80018fa:	2201      	movs	r2, #1
 80018fc:	2102      	movs	r1, #2
 80018fe:	4820      	ldr	r0, [pc, #128]	@ (8001980 <NRF24L01_RxPacket_DMA+0xac>)
 8001900:	f001 fb3c 	bl	8002f7c <HAL_GPIO_WritePin>

	// 等待传输完成或超时
		while (RF24L01_GET_IRQ_STATUS() != 0)
 8001904:	e011      	b.n	800192a <NRF24L01_RxPacket_DMA+0x56>
		{
			if (HAL_GetTick() - start_time > 100)  // 500ms超时
 8001906:	f000 fdcb 	bl	80024a0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	@ 0x64
 8001912:	d907      	bls.n	8001924 <NRF24L01_RxPacket_DMA+0x50>
			{
				NRF24L01_Gpio_Init();
 8001914:	f000 f838 	bl	8001988 <NRF24L01_Gpio_Init>
				RF24L01_Init_DMA();
 8001918:	f000 f852 	bl	80019c0 <RF24L01_Init_DMA>
				RF24L01_Set_Mode_DMA(MODE_RX);
 800191c:	2001      	movs	r0, #1
 800191e:	f7ff ff81 	bl	8001824 <RF24L01_Set_Mode_DMA>
				break;
 8001922:	e008      	b.n	8001936 <NRF24L01_RxPacket_DMA+0x62>
			}
			HAL_Delay(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f000 fdc5 	bl	80024b4 <HAL_Delay>
		while (RF24L01_GET_IRQ_STATUS() != 0)
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <NRF24L01_RxPacket_DMA+0xb0>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b10      	cmp	r3, #16
 8001934:	d0e7      	beq.n	8001906 <NRF24L01_RxPacket_DMA+0x32>
		}

	l_Status = NRF24L01_Read_Reg_DMA( STATUS);     //读状态寄存器
 8001936:	2007      	movs	r0, #7
 8001938:	f7ff fd82 	bl	8001440 <NRF24L01_Read_Reg_DMA>
 800193c:	4603      	mov	r3, r0
 800193e:	75fb      	strb	r3, [r7, #23]
	NRF24L01_Write_Reg_DMA( STATUS, l_Status);      //清中断标志
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	4619      	mov	r1, r3
 8001944:	2007      	movs	r0, #7
 8001946:	f7ff fddf 	bl	8001508 <NRF24L01_Write_Reg_DMA>
	if (l_Status & RX_OK)   //接收到数据
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <NRF24L01_RxPacket_DMA+0xa2>
	{
		l_RxLength = NRF24L01_Read_Reg_DMA( R_RX_PL_WID);      //读取接收到的数据个数
 8001954:	2060      	movs	r0, #96	@ 0x60
 8001956:	f7ff fd73 	bl	8001440 <NRF24L01_Read_Reg_DMA>
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]
		NRF24L01_Read_Buf_DMA( RD_RX_PLOAD, rxbuf, l_RxLength);  //接收到数据
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	461a      	mov	r2, r3
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	2061      	movs	r0, #97	@ 0x61
 8001966:	f7ff fd99 	bl	800149c <NRF24L01_Read_Buf_DMA>
		NRF24L01_Write_Reg_DMA( FLUSH_RX, 0xff);                //清除RX FIFO
 800196a:	21ff      	movs	r1, #255	@ 0xff
 800196c:	20e2      	movs	r0, #226	@ 0xe2
 800196e:	f7ff fdcb 	bl	8001508 <NRF24L01_Write_Reg_DMA>
		return l_RxLength;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	e000      	b.n	8001978 <NRF24L01_RxPacket_DMA+0xa4>
	}

	return 0;               //没有收到数据
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40010c00 	.word	0x40010c00
 8001984:	40010800 	.word	0x40010800

08001988 <NRF24L01_Gpio_Init>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void NRF24L01_Gpio_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2101      	movs	r1, #1
 8001990:	4809      	ldr	r0, [pc, #36]	@ (80019b8 <NRF24L01_Gpio_Init+0x30>)
 8001992:	f001 faf3 	bl	8002f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	2110      	movs	r1, #16
 800199a:	4808      	ldr	r0, [pc, #32]	@ (80019bc <NRF24L01_Gpio_Init+0x34>)
 800199c:	f001 faee 	bl	8002f7c <HAL_GPIO_WritePin>

	RF24L01_SET_CE_LOW();      //??24L01
 80019a0:	2200      	movs	r2, #0
 80019a2:	2101      	movs	r1, #1
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <NRF24L01_Gpio_Init+0x30>)
 80019a6:	f001 fae9 	bl	8002f7c <HAL_GPIO_WritePin>
	RF24L01_SET_CS_HIGH();     //??SPI??
 80019aa:	2201      	movs	r2, #1
 80019ac:	2102      	movs	r1, #2
 80019ae:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <NRF24L01_Gpio_Init+0x30>)
 80019b0:	f001 fae4 	bl	8002f7c <HAL_GPIO_WritePin>

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	40010800 	.word	0x40010800

080019c0 <RF24L01_Init_DMA>:
 * @param :无
 * @note  :使用DMA批量配置寄存器，提高初始化速度
 * @retval:无
 */
void RF24L01_Init_DMA(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
	uint8_t addr[5] = { INIT_ADDR };
 80019c6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a7c <RF24L01_Init_DMA+0xbc>)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ce:	6018      	str	r0, [r3, #0]
 80019d0:	3304      	adds	r3, #4
 80019d2:	7019      	strb	r1, [r3, #0]

	// 初始化状态
	RF24L01_SET_CE_HIGH();
 80019d4:	2201      	movs	r2, #1
 80019d6:	2101      	movs	r1, #1
 80019d8:	4829      	ldr	r0, [pc, #164]	@ (8001a80 <RF24L01_Init_DMA+0xc0>)
 80019da:	f001 facf 	bl	8002f7c <HAL_GPIO_WritePin>
	NRF24L01_Clear_IRQ_Flag(IRQ_ALL);
 80019de:	2070      	movs	r0, #112	@ 0x70
 80019e0:	f7ff fddc 	bl	800159c <NRF24L01_Clear_IRQ_Flag>
	                AW_5BYTES },
	        { SETUP_RETR, ARD_4000US | (REPEAT_CNT & 0x0F) }, { RF_CH, 60 }, {
	                RF_SETUP, 0x26 } };

	// 使用DMA批量写入寄存器配置
	for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e036      	b.n	8001a58 <RF24L01_Init_DMA+0x98>
	{
		uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 80019ea:	4a26      	ldr	r2, [pc, #152]	@ (8001a84 <RF24L01_Init_DMA+0xc4>)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	703b      	strb	r3, [r7, #0]
		        init_config[i].val };
 80019fa:	4a22      	ldr	r2, [pc, #136]	@ (8001a84 <RF24L01_Init_DMA+0xc4>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	785b      	ldrb	r3, [r3, #1]
		uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 8001a04:	707b      	strb	r3, [r7, #1]

		RF24L01_SET_CS_LOW();
 8001a06:	2200      	movs	r2, #0
 8001a08:	2102      	movs	r1, #2
 8001a0a:	481d      	ldr	r0, [pc, #116]	@ (8001a80 <RF24L01_Init_DMA+0xc0>)
 8001a0c:	f001 fab6 	bl	8002f7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8001a10:	463b      	mov	r3, r7
 8001a12:	2202      	movs	r2, #2
 8001a14:	4619      	mov	r1, r3
 8001a16:	481c      	ldr	r0, [pc, #112]	@ (8001a88 <RF24L01_Init_DMA+0xc8>)
 8001a18:	f003 ff72 	bl	8005900 <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001a1c:	bf00      	nop
 8001a1e:	481a      	ldr	r0, [pc, #104]	@ (8001a88 <RF24L01_Init_DMA+0xc8>)
 8001a20:	f004 fa41 	bl	8005ea6 <HAL_SPI_GetState>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d1f9      	bne.n	8001a1e <RF24L01_Init_DMA+0x5e>
		RF24L01_SET_CS_HIGH();
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4814      	ldr	r0, [pc, #80]	@ (8001a80 <RF24L01_Init_DMA+0xc0>)
 8001a30:	f001 faa4 	bl	8002f7c <HAL_GPIO_WritePin>

		// 添加必要的延时(某些寄存器写入后需要稳定时间)
		if (init_config[i].reg == CONFIG || init_config[i].reg == RF_SETUP)
 8001a34:	4a13      	ldr	r2, [pc, #76]	@ (8001a84 <RF24L01_Init_DMA+0xc4>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <RF24L01_Init_DMA+0x8c>
 8001a40:	4a10      	ldr	r2, [pc, #64]	@ (8001a84 <RF24L01_Init_DMA+0xc4>)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	d102      	bne.n	8001a52 <RF24L01_Init_DMA+0x92>
		{
			HAL_Delay(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f000 fd31 	bl	80024b4 <HAL_Delay>
	for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3301      	adds	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d9c5      	bls.n	80019ea <RF24L01_Init_DMA+0x2a>
		}
	}

	// 设置地址(使用DMA版本)
	NRF24L01_Set_TxAddr_DMA(&addr[0], 5);       // 设置TX地址
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2105      	movs	r1, #5
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fdc4 	bl	80015f0 <NRF24L01_Set_TxAddr_DMA>
	NRF24L01_Set_RxAddr_DMA(0, &addr[0], 5);    // 设置RX地址
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2205      	movs	r2, #5
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fdf6 	bl	8001660 <NRF24L01_Set_RxAddr_DMA>

	// 可选的速度和功率设置
	// NRF24L01_Set_Speed_DMA(SPEED_1M);
	// NRF24L01_Set_Power_DMA(POWER_F18DBM);
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	08008f1c 	.word	0x08008f1c
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	08008f24 	.word	0x08008f24
 8001a88:	200001bc 	.word	0x200001bc

08001a8c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001a92:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <MX_SPI1_Init+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a96:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001ac0:	2218      	movs	r2, #24
 8001ac2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <MX_SPI1_Init+0x64>)
 8001ade:	f003 fce1 	bl	80054a4 <HAL_SPI_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ae8:	f7ff fc4d 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200001bc 	.word	0x200001bc
 8001af4:	40013000 	.word	0x40013000

08001af8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a47      	ldr	r2, [pc, #284]	@ (8001c30 <HAL_SPI_MspInit+0x138>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	f040 8086 	bne.w	8001c26 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b1a:	4b46      	ldr	r3, [pc, #280]	@ (8001c34 <HAL_SPI_MspInit+0x13c>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	4a45      	ldr	r2, [pc, #276]	@ (8001c34 <HAL_SPI_MspInit+0x13c>)
 8001b20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b24:	6193      	str	r3, [r2, #24]
 8001b26:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_SPI_MspInit+0x13c>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	4b40      	ldr	r3, [pc, #256]	@ (8001c34 <HAL_SPI_MspInit+0x13c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4a3f      	ldr	r2, [pc, #252]	@ (8001c34 <HAL_SPI_MspInit+0x13c>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6193      	str	r3, [r2, #24]
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c34 <HAL_SPI_MspInit+0x13c>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b4a:	23a0      	movs	r3, #160	@ 0xa0
 8001b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4836      	ldr	r0, [pc, #216]	@ (8001c38 <HAL_SPI_MspInit+0x140>)
 8001b5e:	f001 f889 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b62:	2340      	movs	r3, #64	@ 0x40
 8001b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	4619      	mov	r1, r3
 8001b74:	4830      	ldr	r0, [pc, #192]	@ (8001c38 <HAL_SPI_MspInit+0x140>)
 8001b76:	f001 f87d 	bl	8002c74 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001b7a:	4b30      	ldr	r3, [pc, #192]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001b7c:	4a30      	ldr	r2, [pc, #192]	@ (8001c40 <HAL_SPI_MspInit+0x148>)
 8001b7e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b92:	4b2a      	ldr	r3, [pc, #168]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001b9e:	4b27      	ldr	r3, [pc, #156]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001ba6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001baa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001bac:	4823      	ldr	r0, [pc, #140]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001bae:	f000 fdb3 	bl	8002718 <HAL_DMA_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001bb8:	f7ff fbe5 	bl	8001386 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c3c <HAL_SPI_MspInit+0x144>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001bca:	4a1f      	ldr	r2, [pc, #124]	@ (8001c48 <HAL_SPI_MspInit+0x150>)
 8001bcc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be0:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be6:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bec:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bf8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bfa:	4812      	ldr	r0, [pc, #72]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001bfc:	f000 fd8c 	bl	8002718 <HAL_DMA_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001c06:	f7ff fbbe 	bl	8001386 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001c0e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c10:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <HAL_SPI_MspInit+0x14c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2023      	movs	r0, #35	@ 0x23
 8001c1c:	f000 fd45 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c20:	2023      	movs	r0, #35	@ 0x23
 8001c22:	f000 fd5e 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c26:	bf00      	nop
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40013000 	.word	0x40013000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	20000214 	.word	0x20000214
 8001c40:	4002001c 	.word	0x4002001c
 8001c44:	20000258 	.word	0x20000258
 8001c48:	40020030 	.word	0x40020030

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6193      	str	r3, [r2, #24]
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <HAL_MspInit+0x5c>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_MspInit+0x60>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_MspInit+0x60>)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 fbbc 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <DMA1_Channel2_IRQHandler+0x10>)
 8001d0e:	f000 fe71 	bl	80029f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000214 	.word	0x20000214

08001d1c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <DMA1_Channel3_IRQHandler+0x10>)
 8001d22:	f000 fe67 	bl	80029f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000258 	.word	0x20000258

08001d30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <DMA1_Channel5_IRQHandler+0x10>)
 8001d36:	f000 fe5d 	bl	80029f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000338 	.word	0x20000338

08001d44 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <DMA1_Channel6_IRQHandler+0x10>)
 8001d4a:	f000 fe53 	bl	80029f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000154 	.word	0x20000154

08001d58 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <DMA1_Channel7_IRQHandler+0x10>)
 8001d5e:	f000 fe49 	bl	80029f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000110 	.word	0x20000110

08001d6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <TIM1_UP_IRQHandler+0x10>)
 8001d72:	f004 fc97 	bl	80066a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200002a8 	.word	0x200002a8

08001d80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <TIM2_IRQHandler+0x10>)
 8001d86:	f004 fc8d 	bl	80066a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200002f0 	.word	0x200002f0

08001d94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <I2C1_EV_IRQHandler+0x10>)
 8001d9a:	f001 fa79 	bl	8003290 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200000bc 	.word	0x200000bc

08001da8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <I2C1_ER_IRQHandler+0x10>)
 8001dae:	f001 fbe0 	bl	8003572 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200000bc 	.word	0x200000bc

08001dbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <SPI1_IRQHandler+0x10>)
 8001dc2:	f003 ff4b 	bl	8005c5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200001bc 	.word	0x200001bc

08001dd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <USART1_IRQHandler+0x10>)
 8001dd6:	f005 fa7b 	bl	80072d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000037c 	.word	0x2000037c

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <_kill>:

int _kill(int pid, int sig)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfc:	f006 f982 	bl	8008104 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2216      	movs	r2, #22
 8001e04:	601a      	str	r2, [r3, #0]
  return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_exit>:

void _exit (int status)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffe7 	bl	8001df2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <_exit+0x12>

08001e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e00a      	b.n	8001e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e3a:	f3af 8000 	nop.w
 8001e3e:	4601      	mov	r1, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf0      	blt.n	8001e3a <_read+0x12>
  }

  return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e009      	b.n	8001e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbf1      	blt.n	8001e74 <_write+0x12>
  }
  return len;
 8001e90:	687b      	ldr	r3, [r7, #4]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_close>:

int _close(int file)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <_isatty>:

int _isatty(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
	...

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f006 f8ea 	bl	8008104 <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20005000 	.word	0x20005000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	2000029c 	.word	0x2000029c
 8001f64:	20000518 	.word	0x20000518

08001f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f90:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001f92:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <MX_TIM1_Init+0xa0>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8001f96:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001f98:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001f9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001fa6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001faa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb2:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb8:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fbe:	4814      	ldr	r0, [pc, #80]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001fc0:	f004 f9d5 	bl	800636e <HAL_TIM_Base_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001fca:	f7ff f9dc 	bl	8001386 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480d      	ldr	r0, [pc, #52]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001fdc:	f004 fd14 	bl	8006a08 <HAL_TIM_ConfigClockSource>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001fe6:	f7ff f9ce 	bl	8001386 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4806      	ldr	r0, [pc, #24]	@ (8002010 <MX_TIM1_Init+0x9c>)
 8001ff8:	f005 f8aa 	bl	8007150 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002002:	f7ff f9c0 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200002a8 	.word	0x200002a8
 8002014:	40012c00 	.word	0x40012c00

08002018 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	@ 0x38
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
 8002044:	615a      	str	r2, [r3, #20]
 8002046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002048:	4b44      	ldr	r3, [pc, #272]	@ (800215c <MX_TIM2_Init+0x144>)
 800204a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800204e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002050:	4b42      	ldr	r3, [pc, #264]	@ (800215c <MX_TIM2_Init+0x144>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b41      	ldr	r3, [pc, #260]	@ (800215c <MX_TIM2_Init+0x144>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 800205c:	4b3f      	ldr	r3, [pc, #252]	@ (800215c <MX_TIM2_Init+0x144>)
 800205e:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8002062:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b3d      	ldr	r3, [pc, #244]	@ (800215c <MX_TIM2_Init+0x144>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800206a:	4b3c      	ldr	r3, [pc, #240]	@ (800215c <MX_TIM2_Init+0x144>)
 800206c:	2280      	movs	r2, #128	@ 0x80
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002070:	483a      	ldr	r0, [pc, #232]	@ (800215c <MX_TIM2_Init+0x144>)
 8002072:	f004 f97c 	bl	800636e <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800207c:	f7ff f983 	bl	8001386 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002084:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800208a:	4619      	mov	r1, r3
 800208c:	4833      	ldr	r0, [pc, #204]	@ (800215c <MX_TIM2_Init+0x144>)
 800208e:	f004 fcbb 	bl	8006a08 <HAL_TIM_ConfigClockSource>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002098:	f7ff f975 	bl	8001386 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800209c:	482f      	ldr	r0, [pc, #188]	@ (800215c <MX_TIM2_Init+0x144>)
 800209e:	f004 fa07 	bl	80064b0 <HAL_TIM_PWM_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020a8:	f7ff f96d 	bl	8001386 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	4619      	mov	r1, r3
 80020ba:	4828      	ldr	r0, [pc, #160]	@ (800215c <MX_TIM2_Init+0x144>)
 80020bc:	f005 f848 	bl	8007150 <HAL_TIMEx_MasterConfigSynchronization>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020c6:	f7ff f95e 	bl	8001386 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ca:	2360      	movs	r3, #96	@ 0x60
 80020cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = Rpwm_in1;
 80020ce:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <MX_TIM2_Init+0x148>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80020da:	2304      	movs	r3, #4
 80020dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	481d      	ldr	r0, [pc, #116]	@ (800215c <MX_TIM2_Init+0x144>)
 80020e6:	f004 fbcd 	bl	8006884 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80020f0:	f7ff f949 	bl	8001386 <Error_Handler>
  }
  sConfigOC.Pulse = Rpwm_in2;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <MX_TIM2_Init+0x14c>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2204      	movs	r2, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4816      	ldr	r0, [pc, #88]	@ (800215c <MX_TIM2_Init+0x144>)
 8002104:	f004 fbbe 	bl	8006884 <HAL_TIM_PWM_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800210e:	f7ff f93a 	bl	8001386 <Error_Handler>
  }
  sConfigOC.Pulse = Lpwm_in1;
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <MX_TIM2_Init+0x150>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2208      	movs	r2, #8
 800211e:	4619      	mov	r1, r3
 8002120:	480e      	ldr	r0, [pc, #56]	@ (800215c <MX_TIM2_Init+0x144>)
 8002122:	f004 fbaf 	bl	8006884 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 800212c:	f7ff f92b 	bl	8001386 <Error_Handler>
  }
  sConfigOC.Pulse = Lpwm_in2;
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <MX_TIM2_Init+0x154>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	220c      	movs	r2, #12
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	@ (800215c <MX_TIM2_Init+0x144>)
 8002140:	f004 fba0 	bl	8006884 <HAL_TIM_PWM_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 800214a:	f7ff f91c 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800214e:	4803      	ldr	r0, [pc, #12]	@ (800215c <MX_TIM2_Init+0x144>)
 8002150:	f000 f87a 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8002154:	bf00      	nop
 8002156:	3738      	adds	r7, #56	@ 0x38
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200002f0 	.word	0x200002f0
 8002160:	200002a0 	.word	0x200002a0
 8002164:	200002a2 	.word	0x200002a2
 8002168:	200002a4 	.word	0x200002a4
 800216c:	200002a6 	.word	0x200002a6

08002170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2e      	ldr	r2, [pc, #184]	@ (8002238 <HAL_TIM_Base_MspInit+0xc8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d114      	bne.n	80021ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002182:	4b2e      	ldr	r3, [pc, #184]	@ (800223c <HAL_TIM_Base_MspInit+0xcc>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <HAL_TIM_Base_MspInit+0xcc>)
 8002188:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800218c:	6193      	str	r3, [r2, #24]
 800218e:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <HAL_TIM_Base_MspInit+0xcc>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	2019      	movs	r0, #25
 80021a0:	f000 fa83 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021a4:	2019      	movs	r0, #25
 80021a6:	f000 fa9c 	bl	80026e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021aa:	e040      	b.n	800222e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b4:	d13b      	bne.n	800222e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b6:	4b21      	ldr	r3, [pc, #132]	@ (800223c <HAL_TIM_Base_MspInit+0xcc>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a20      	ldr	r2, [pc, #128]	@ (800223c <HAL_TIM_Base_MspInit+0xcc>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	61d3      	str	r3, [r2, #28]
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <HAL_TIM_Base_MspInit+0xcc>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002244 <HAL_TIM_Base_MspInit+0xd4>)
 80021d2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ec:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021ee:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80021f6:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80021fc:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002202:	480f      	ldr	r0, [pc, #60]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 8002204:	f000 fa88 	bl	8002718 <HAL_DMA_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_TIM_Base_MspInit+0xa2>
      Error_Handler();
 800220e:	f7ff f8ba 	bl	8001386 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24
 8002218:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	201c      	movs	r0, #28
 8002224:	f000 fa41 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002228:	201c      	movs	r0, #28
 800222a:	f000 fa5a 	bl	80026e2 <HAL_NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40021000 	.word	0x40021000
 8002240:	20000338 	.word	0x20000338
 8002244:	40020058 	.word	0x40020058

08002248 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002266:	d117      	bne.n	8002298 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <HAL_TIM_MspPostInit+0x58>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <HAL_TIM_MspPostInit+0x58>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_TIM_MspPostInit+0x58>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Rpwm_in1_Pin|Rpwm_in2_Pin|Lpwm_in1_Pin|Lpwm_in2_Pin;
 8002280:	230f      	movs	r3, #15
 8002282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2302      	movs	r3, #2
 800228a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	4619      	mov	r1, r3
 8002292:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <HAL_TIM_MspPostInit+0x5c>)
 8002294:	f000 fcee 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010800 	.word	0x40010800

080022a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022ae:	4a12      	ldr	r2, [pc, #72]	@ (80022f8 <MX_USART1_UART_Init+0x50>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022de:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022e0:	f004 ffa6 	bl	8007230 <HAL_UART_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022ea:	f7ff f84c 	bl	8001386 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000037c 	.word	0x2000037c
 80022f8:	40013800 	.word	0x40013800

080022fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a20      	ldr	r2, [pc, #128]	@ (8002398 <HAL_UART_MspInit+0x9c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d139      	bne.n	8002390 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800231c:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <HAL_UART_MspInit+0xa0>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a1e      	ldr	r2, [pc, #120]	@ (800239c <HAL_UART_MspInit+0xa0>)
 8002322:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <HAL_UART_MspInit+0xa0>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_UART_MspInit+0xa0>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a18      	ldr	r2, [pc, #96]	@ (800239c <HAL_UART_MspInit+0xa0>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b16      	ldr	r3, [pc, #88]	@ (800239c <HAL_UART_MspInit+0xa0>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800234c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002350:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4619      	mov	r1, r3
 8002360:	480f      	ldr	r0, [pc, #60]	@ (80023a0 <HAL_UART_MspInit+0xa4>)
 8002362:	f000 fc87 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800236a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4619      	mov	r1, r3
 800237a:	4809      	ldr	r0, [pc, #36]	@ (80023a0 <HAL_UART_MspInit+0xa4>)
 800237c:	f000 fc7a 	bl	8002c74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	2025      	movs	r0, #37	@ 0x25
 8002386:	f000 f990 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800238a:	2025      	movs	r0, #37	@ 0x25
 800238c:	f000 f9a9 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002390:	bf00      	nop
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40013800 	.word	0x40013800
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010800 	.word	0x40010800

080023a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a4:	f7ff fde0 	bl	8001f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a8:	480b      	ldr	r0, [pc, #44]	@ (80023d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023aa:	490c      	ldr	r1, [pc, #48]	@ (80023dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023ac:	4a0c      	ldr	r2, [pc, #48]	@ (80023e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b0:	e002      	b.n	80023b8 <LoopCopyDataInit>

080023b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b6:	3304      	adds	r3, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023bc:	d3f9      	bcc.n	80023b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023be:	4a09      	ldr	r2, [pc, #36]	@ (80023e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023c0:	4c09      	ldr	r4, [pc, #36]	@ (80023e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c4:	e001      	b.n	80023ca <LoopFillZerobss>

080023c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c8:	3204      	adds	r2, #4

080023ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023cc:	d3fb      	bcc.n	80023c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ce:	f005 fe9f 	bl	8008110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023d2:	f7fe ff2f 	bl	8001234 <main>
  bx lr
 80023d6:	4770      	bx	lr
  ldr r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023dc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80023e0:	0800914c 	.word	0x0800914c
  ldr r2, =_sbss
 80023e4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80023e8:	20000514 	.word	0x20000514

080023ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC1_2_IRQHandler>
	...

080023f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_Init+0x28>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <HAL_Init+0x28>)
 80023fa:	f043 0310 	orr.w	r3, r3, #16
 80023fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002400:	2003      	movs	r0, #3
 8002402:	f000 f947 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002406:	200f      	movs	r0, #15
 8002408:	f000 f808 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800240c:	f7ff fc1e 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_InitTick+0x54>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_InitTick+0x58>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f95f 	bl	80026fe <HAL_SYSTICK_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00e      	b.n	8002468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d80a      	bhi.n	8002466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002450:	2200      	movs	r2, #0
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f000 f927 	bl	80026aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800245c:	4a06      	ldr	r2, [pc, #24]	@ (8002478 <HAL_InitTick+0x5c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000038 	.word	0x20000038
 8002474:	20000040 	.word	0x20000040
 8002478:	2000003c 	.word	0x2000003c

0800247c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_IncTick+0x1c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b05      	ldr	r3, [pc, #20]	@ (800249c <HAL_IncTick+0x20>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a03      	ldr	r2, [pc, #12]	@ (800249c <HAL_IncTick+0x20>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000040 	.word	0x20000040
 800249c:	200003c4 	.word	0x200003c4

080024a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b02      	ldr	r3, [pc, #8]	@ (80024b0 <HAL_GetTick+0x10>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	200003c4 	.word	0x200003c4

080024b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff fff0 	bl	80024a0 <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d005      	beq.n	80024da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_Delay+0x44>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024da:	bf00      	nop
 80024dc:	f7ff ffe0 	bl	80024a0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d8f7      	bhi.n	80024dc <HAL_Delay+0x28>
  {
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000040 	.word	0x20000040

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4906      	ldr	r1, [pc, #24]	@ (8002594 <__NVIC_EnableIRQ+0x34>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	@ (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	@ (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	@ 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	@ 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ff90 	bl	8002598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff2d 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026bc:	f7ff ff42 	bl	8002544 <__NVIC_GetPriorityGrouping>
 80026c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f7ff ff90 	bl	80025ec <NVIC_EncodePriority>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5f 	bl	8002598 <__NVIC_SetPriority>
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff35 	bl	8002560 <__NVIC_EnableIRQ>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffa2 	bl	8002650 <SysTick_Config>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e043      	b.n	80027b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <HAL_DMA_Init+0xa8>)
 8002736:	4413      	add	r3, r2
 8002738:	4a22      	ldr	r2, [pc, #136]	@ (80027c4 <HAL_DMA_Init+0xac>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	009a      	lsls	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1f      	ldr	r2, [pc, #124]	@ (80027c8 <HAL_DMA_Init+0xb0>)
 800274a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002762:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002766:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	bffdfff8 	.word	0xbffdfff8
 80027c4:	cccccccd 	.word	0xcccccccd
 80027c8:	40020000 	.word	0x40020000

080027cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Start_IT+0x20>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e04b      	b.n	8002884 <HAL_DMA_Start_IT+0xb8>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d13a      	bne.n	8002876 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f9f8 	bl	8002c1a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 020e 	orr.w	r2, r2, #14
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e00f      	b.n	8002864 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0204 	bic.w	r2, r2, #4
 8002852:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 020a 	orr.w	r2, r2, #10
 8002862:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e005      	b.n	8002882 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800287e:	2302      	movs	r3, #2
 8002880:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d008      	beq.n	80028b6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2204      	movs	r2, #4
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e020      	b.n	80028f8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 020e 	bic.w	r2, r2, #14
 80028c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028de:	2101      	movs	r1, #1
 80028e0:	fa01 f202 	lsl.w	r2, r1, r2
 80028e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
	...

08002904 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d005      	beq.n	8002928 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2204      	movs	r2, #4
 8002920:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e051      	b.n	80029cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 020e 	bic.w	r2, r2, #14
 8002936:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a22      	ldr	r2, [pc, #136]	@ (80029d8 <HAL_DMA_Abort_IT+0xd4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d029      	beq.n	80029a6 <HAL_DMA_Abort_IT+0xa2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a21      	ldr	r2, [pc, #132]	@ (80029dc <HAL_DMA_Abort_IT+0xd8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d022      	beq.n	80029a2 <HAL_DMA_Abort_IT+0x9e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1f      	ldr	r2, [pc, #124]	@ (80029e0 <HAL_DMA_Abort_IT+0xdc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01a      	beq.n	800299c <HAL_DMA_Abort_IT+0x98>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1e      	ldr	r2, [pc, #120]	@ (80029e4 <HAL_DMA_Abort_IT+0xe0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d012      	beq.n	8002996 <HAL_DMA_Abort_IT+0x92>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <HAL_DMA_Abort_IT+0xe4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00a      	beq.n	8002990 <HAL_DMA_Abort_IT+0x8c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1b      	ldr	r2, [pc, #108]	@ (80029ec <HAL_DMA_Abort_IT+0xe8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d102      	bne.n	800298a <HAL_DMA_Abort_IT+0x86>
 8002984:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002988:	e00e      	b.n	80029a8 <HAL_DMA_Abort_IT+0xa4>
 800298a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800298e:	e00b      	b.n	80029a8 <HAL_DMA_Abort_IT+0xa4>
 8002990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002994:	e008      	b.n	80029a8 <HAL_DMA_Abort_IT+0xa4>
 8002996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800299a:	e005      	b.n	80029a8 <HAL_DMA_Abort_IT+0xa4>
 800299c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029a0:	e002      	b.n	80029a8 <HAL_DMA_Abort_IT+0xa4>
 80029a2:	2310      	movs	r3, #16
 80029a4:	e000      	b.n	80029a8 <HAL_DMA_Abort_IT+0xa4>
 80029a6:	2301      	movs	r3, #1
 80029a8:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <HAL_DMA_Abort_IT+0xec>)
 80029aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
    } 
  }
  return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020008 	.word	0x40020008
 80029dc:	4002001c 	.word	0x4002001c
 80029e0:	40020030 	.word	0x40020030
 80029e4:	40020044 	.word	0x40020044
 80029e8:	40020058 	.word	0x40020058
 80029ec:	4002006c 	.word	0x4002006c
 80029f0:	40020000 	.word	0x40020000

080029f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	2204      	movs	r2, #4
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d04f      	beq.n	8002abc <HAL_DMA_IRQHandler+0xc8>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04a      	beq.n	8002abc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0204 	bic.w	r2, r2, #4
 8002a42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a66      	ldr	r2, [pc, #408]	@ (8002be4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d029      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0xae>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a65      	ldr	r2, [pc, #404]	@ (8002be8 <HAL_DMA_IRQHandler+0x1f4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xaa>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a63      	ldr	r2, [pc, #396]	@ (8002bec <HAL_DMA_IRQHandler+0x1f8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0xa4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a62      	ldr	r2, [pc, #392]	@ (8002bf0 <HAL_DMA_IRQHandler+0x1fc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d012      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x9e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a60      	ldr	r2, [pc, #384]	@ (8002bf4 <HAL_DMA_IRQHandler+0x200>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00a      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x98>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf8 <HAL_DMA_IRQHandler+0x204>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d102      	bne.n	8002a86 <HAL_DMA_IRQHandler+0x92>
 8002a80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a84:	e00e      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xb0>
 8002a86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a8a:	e00b      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xb0>
 8002a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a90:	e008      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xb0>
 8002a92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a96:	e005      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xb0>
 8002a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a9c:	e002      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xb0>
 8002a9e:	2340      	movs	r3, #64	@ 0x40
 8002aa0:	e000      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xb0>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	4a55      	ldr	r2, [pc, #340]	@ (8002bfc <HAL_DMA_IRQHandler+0x208>)
 8002aa6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8094 	beq.w	8002bda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002aba:	e08e      	b.n	8002bda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d056      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x186>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d051      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 020a 	bic.w	r2, r2, #10
 8002af2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a38      	ldr	r2, [pc, #224]	@ (8002be4 <HAL_DMA_IRQHandler+0x1f0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d029      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x166>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a37      	ldr	r2, [pc, #220]	@ (8002be8 <HAL_DMA_IRQHandler+0x1f4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x162>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a35      	ldr	r2, [pc, #212]	@ (8002bec <HAL_DMA_IRQHandler+0x1f8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01a      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x15c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a34      	ldr	r2, [pc, #208]	@ (8002bf0 <HAL_DMA_IRQHandler+0x1fc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d012      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x156>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a32      	ldr	r2, [pc, #200]	@ (8002bf4 <HAL_DMA_IRQHandler+0x200>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x150>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a31      	ldr	r2, [pc, #196]	@ (8002bf8 <HAL_DMA_IRQHandler+0x204>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d102      	bne.n	8002b3e <HAL_DMA_IRQHandler+0x14a>
 8002b38:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b3c:	e00e      	b.n	8002b5c <HAL_DMA_IRQHandler+0x168>
 8002b3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b42:	e00b      	b.n	8002b5c <HAL_DMA_IRQHandler+0x168>
 8002b44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b48:	e008      	b.n	8002b5c <HAL_DMA_IRQHandler+0x168>
 8002b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b4e:	e005      	b.n	8002b5c <HAL_DMA_IRQHandler+0x168>
 8002b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b54:	e002      	b.n	8002b5c <HAL_DMA_IRQHandler+0x168>
 8002b56:	2320      	movs	r3, #32
 8002b58:	e000      	b.n	8002b5c <HAL_DMA_IRQHandler+0x168>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	4a27      	ldr	r2, [pc, #156]	@ (8002bfc <HAL_DMA_IRQHandler+0x208>)
 8002b5e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d034      	beq.n	8002bda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b78:	e02f      	b.n	8002bda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	2208      	movs	r2, #8
 8002b80:	409a      	lsls	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d028      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x1e8>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d023      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 020e 	bic.w	r2, r2, #14
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
    }
  }
  return;
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
}
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40020008 	.word	0x40020008
 8002be8:	4002001c 	.word	0x4002001c
 8002bec:	40020030 	.word	0x40020030
 8002bf0:	40020044 	.word	0x40020044
 8002bf4:	40020058 	.word	0x40020058
 8002bf8:	4002006c 	.word	0x4002006c
 8002bfc:	40020000 	.word	0x40020000

08002c00 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c0e:	b2db      	uxtb	r3, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d108      	bne.n	8002c5a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c58:	e007      	b.n	8002c6a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	60da      	str	r2, [r3, #12]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b08b      	sub	sp, #44	@ 0x2c
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c86:	e169      	b.n	8002f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	f040 8158 	bne.w	8002f56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4a9a      	ldr	r2, [pc, #616]	@ (8002f14 <HAL_GPIO_Init+0x2a0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d05e      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cb0:	4a98      	ldr	r2, [pc, #608]	@ (8002f14 <HAL_GPIO_Init+0x2a0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d875      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cb6:	4a98      	ldr	r2, [pc, #608]	@ (8002f18 <HAL_GPIO_Init+0x2a4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d058      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cbc:	4a96      	ldr	r2, [pc, #600]	@ (8002f18 <HAL_GPIO_Init+0x2a4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d86f      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cc2:	4a96      	ldr	r2, [pc, #600]	@ (8002f1c <HAL_GPIO_Init+0x2a8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d052      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cc8:	4a94      	ldr	r2, [pc, #592]	@ (8002f1c <HAL_GPIO_Init+0x2a8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d869      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cce:	4a94      	ldr	r2, [pc, #592]	@ (8002f20 <HAL_GPIO_Init+0x2ac>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04c      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cd4:	4a92      	ldr	r2, [pc, #584]	@ (8002f20 <HAL_GPIO_Init+0x2ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d863      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cda:	4a92      	ldr	r2, [pc, #584]	@ (8002f24 <HAL_GPIO_Init+0x2b0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d046      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002ce0:	4a90      	ldr	r2, [pc, #576]	@ (8002f24 <HAL_GPIO_Init+0x2b0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d85d      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002ce6:	2b12      	cmp	r3, #18
 8002ce8:	d82a      	bhi.n	8002d40 <HAL_GPIO_Init+0xcc>
 8002cea:	2b12      	cmp	r3, #18
 8002cec:	d859      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cee:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf4 <HAL_GPIO_Init+0x80>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d6f 	.word	0x08002d6f
 8002cf8:	08002d49 	.word	0x08002d49
 8002cfc:	08002d5b 	.word	0x08002d5b
 8002d00:	08002d9d 	.word	0x08002d9d
 8002d04:	08002da3 	.word	0x08002da3
 8002d08:	08002da3 	.word	0x08002da3
 8002d0c:	08002da3 	.word	0x08002da3
 8002d10:	08002da3 	.word	0x08002da3
 8002d14:	08002da3 	.word	0x08002da3
 8002d18:	08002da3 	.word	0x08002da3
 8002d1c:	08002da3 	.word	0x08002da3
 8002d20:	08002da3 	.word	0x08002da3
 8002d24:	08002da3 	.word	0x08002da3
 8002d28:	08002da3 	.word	0x08002da3
 8002d2c:	08002da3 	.word	0x08002da3
 8002d30:	08002da3 	.word	0x08002da3
 8002d34:	08002da3 	.word	0x08002da3
 8002d38:	08002d51 	.word	0x08002d51
 8002d3c:	08002d65 	.word	0x08002d65
 8002d40:	4a79      	ldr	r2, [pc, #484]	@ (8002f28 <HAL_GPIO_Init+0x2b4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d46:	e02c      	b.n	8002da2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	623b      	str	r3, [r7, #32]
          break;
 8002d4e:	e029      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	3304      	adds	r3, #4
 8002d56:	623b      	str	r3, [r7, #32]
          break;
 8002d58:	e024      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	623b      	str	r3, [r7, #32]
          break;
 8002d62:	e01f      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	e01a      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d76:	2304      	movs	r3, #4
 8002d78:	623b      	str	r3, [r7, #32]
          break;
 8002d7a:	e013      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d84:	2308      	movs	r3, #8
 8002d86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	611a      	str	r2, [r3, #16]
          break;
 8002d8e:	e009      	b.n	8002da4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d90:	2308      	movs	r3, #8
 8002d92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	615a      	str	r2, [r3, #20]
          break;
 8002d9a:	e003      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
          break;
 8002da0:	e000      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          break;
 8002da2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	@ 0xff
 8002da8:	d801      	bhi.n	8002dae <HAL_GPIO_Init+0x13a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	e001      	b.n	8002db2 <HAL_GPIO_Init+0x13e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2bff      	cmp	r3, #255	@ 0xff
 8002db8:	d802      	bhi.n	8002dc0 <HAL_GPIO_Init+0x14c>
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	e002      	b.n	8002dc6 <HAL_GPIO_Init+0x152>
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	3b08      	subs	r3, #8
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	210f      	movs	r1, #15
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	431a      	orrs	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80b1 	beq.w	8002f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6193      	str	r3, [r2, #24]
 8002e00:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e0c:	4a48      	ldr	r2, [pc, #288]	@ (8002f30 <HAL_GPIO_Init+0x2bc>)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a40      	ldr	r2, [pc, #256]	@ (8002f34 <HAL_GPIO_Init+0x2c0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d013      	beq.n	8002e60 <HAL_GPIO_Init+0x1ec>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00d      	beq.n	8002e5c <HAL_GPIO_Init+0x1e8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a3e      	ldr	r2, [pc, #248]	@ (8002f3c <HAL_GPIO_Init+0x2c8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <HAL_GPIO_Init+0x1e4>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f40 <HAL_GPIO_Init+0x2cc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_GPIO_Init+0x1e0>
 8002e50:	2303      	movs	r3, #3
 8002e52:	e006      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e54:	2304      	movs	r3, #4
 8002e56:	e004      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e002      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e60:	2300      	movs	r3, #0
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	f002 0203 	and.w	r2, r2, #3
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	4093      	lsls	r3, r2
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e72:	492f      	ldr	r1, [pc, #188]	@ (8002f30 <HAL_GPIO_Init+0x2bc>)
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	492c      	ldr	r1, [pc, #176]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	4928      	ldr	r1, [pc, #160]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4922      	ldr	r1, [pc, #136]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	491e      	ldr	r1, [pc, #120]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4918      	ldr	r1, [pc, #96]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eea:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4914      	ldr	r1, [pc, #80]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d021      	beq.n	8002f48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e021      	b.n	8002f56 <HAL_GPIO_Init+0x2e2>
 8002f12:	bf00      	nop
 8002f14:	10320000 	.word	0x10320000
 8002f18:	10310000 	.word	0x10310000
 8002f1c:	10220000 	.word	0x10220000
 8002f20:	10210000 	.word	0x10210000
 8002f24:	10120000 	.word	0x10120000
 8002f28:	10110000 	.word	0x10110000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40010800 	.word	0x40010800
 8002f38:	40010c00 	.word	0x40010c00
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	40011400 	.word	0x40011400
 8002f44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	4909      	ldr	r1, [pc, #36]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	3301      	adds	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f ae8e 	bne.w	8002c88 <HAL_GPIO_Init+0x14>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	372c      	adds	r7, #44	@ 0x2c
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	40010400 	.word	0x40010400

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f98:	e003      	b.n	8002fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	041a      	lsls	r2, r3, #16
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43d9      	mvns	r1, r3
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	400b      	ands	r3, r1
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	611a      	str	r2, [r3, #16]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e12b      	b.n	800324a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe f844 	bl	8001094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	@ 0x24
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003044:	f002 f9e8 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8003048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a81      	ldr	r2, [pc, #516]	@ (8003254 <HAL_I2C_Init+0x274>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d807      	bhi.n	8003064 <HAL_I2C_Init+0x84>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a80      	ldr	r2, [pc, #512]	@ (8003258 <HAL_I2C_Init+0x278>)
 8003058:	4293      	cmp	r3, r2
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e006      	b.n	8003072 <HAL_I2C_Init+0x92>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a7d      	ldr	r2, [pc, #500]	@ (800325c <HAL_I2C_Init+0x27c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	bf94      	ite	ls
 800306c:	2301      	movls	r3, #1
 800306e:	2300      	movhi	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0e7      	b.n	800324a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a78      	ldr	r2, [pc, #480]	@ (8003260 <HAL_I2C_Init+0x280>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0c9b      	lsrs	r3, r3, #18
 8003084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003254 <HAL_I2C_Init+0x274>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d802      	bhi.n	80030b4 <HAL_I2C_Init+0xd4>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3301      	adds	r3, #1
 80030b2:	e009      	b.n	80030c8 <HAL_I2C_Init+0xe8>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	4a69      	ldr	r2, [pc, #420]	@ (8003264 <HAL_I2C_Init+0x284>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	3301      	adds	r3, #1
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	495c      	ldr	r1, [pc, #368]	@ (8003254 <HAL_I2C_Init+0x274>)
 80030e4:	428b      	cmp	r3, r1
 80030e6:	d819      	bhi.n	800311c <HAL_I2C_Init+0x13c>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1e59      	subs	r1, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f6:	1c59      	adds	r1, r3, #1
 80030f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030fc:	400b      	ands	r3, r1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_I2C_Init+0x138>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1e59      	subs	r1, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	e051      	b.n	80031bc <HAL_I2C_Init+0x1dc>
 8003118:	2304      	movs	r3, #4
 800311a:	e04f      	b.n	80031bc <HAL_I2C_Init+0x1dc>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d111      	bne.n	8003148 <HAL_I2C_Init+0x168>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e58      	subs	r0, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	440b      	add	r3, r1
 8003132:	fbb0 f3f3 	udiv	r3, r0, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e012      	b.n	800316e <HAL_I2C_Init+0x18e>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e58      	subs	r0, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	0099      	lsls	r1, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Init+0x196>
 8003172:	2301      	movs	r3, #1
 8003174:	e022      	b.n	80031bc <HAL_I2C_Init+0x1dc>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10e      	bne.n	800319c <HAL_I2C_Init+0x1bc>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1e58      	subs	r0, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6859      	ldr	r1, [r3, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	440b      	add	r3, r1
 800318c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003190:	3301      	adds	r3, #1
 8003192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800319a:	e00f      	b.n	80031bc <HAL_I2C_Init+0x1dc>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1e58      	subs	r0, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	0099      	lsls	r1, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	6809      	ldr	r1, [r1, #0]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6911      	ldr	r1, [r2, #16]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68d2      	ldr	r2, [r2, #12]
 80031f6:	4311      	orrs	r1, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	000186a0 	.word	0x000186a0
 8003258:	001e847f 	.word	0x001e847f
 800325c:	003d08ff 	.word	0x003d08ff
 8003260:	431bde83 	.word	0x431bde83
 8003264:	10624dd3 	.word	0x10624dd3

08003268 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327a:	2b80      	cmp	r3, #128	@ 0x80
 800327c:	d103      	bne.n	8003286 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  }
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d003      	beq.n	80032c8 <HAL_I2C_EV_IRQHandler+0x38>
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b40      	cmp	r3, #64	@ 0x40
 80032c4:	f040 80c1 	bne.w	800344a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10d      	bne.n	80032fe <HAL_I2C_EV_IRQHandler+0x6e>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80032e8:	d003      	beq.n	80032f2 <HAL_I2C_EV_IRQHandler+0x62>
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80032f0:	d101      	bne.n	80032f6 <HAL_I2C_EV_IRQHandler+0x66>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_I2C_EV_IRQHandler+0x68>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f000 8132 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <HAL_I2C_EV_IRQHandler+0x92>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	0a5b      	lsrs	r3, r3, #9
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f001 fc9b 	bl	8004c50 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fd99 	bl	8003e52 <I2C_Master_SB>
 8003320:	e092      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_I2C_EV_IRQHandler+0xb2>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	0a5b      	lsrs	r3, r3, #9
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fe0e 	bl	8003f5c <I2C_Master_ADD10>
 8003340:	e082      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0xd2>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	0a5b      	lsrs	r3, r3, #9
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fe27 	bl	8003fae <I2C_Master_ADDR>
 8003360:	e072      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d03b      	beq.n	80033e6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800337c:	f000 80f3 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	09db      	lsrs	r3, r3, #7
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00f      	beq.n	80033ac <HAL_I2C_EV_IRQHandler+0x11c>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_I2C_EV_IRQHandler+0x11c>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f9f1 	bl	800378c <I2C_MasterTransmit_TXE>
 80033aa:	e04d      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80d6 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	0a5b      	lsrs	r3, r3, #9
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80cf 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033c8:	7bbb      	ldrb	r3, [r7, #14]
 80033ca:	2b21      	cmp	r3, #33	@ 0x21
 80033cc:	d103      	bne.n	80033d6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fa78 	bl	80038c4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d4:	e0c7      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b40      	cmp	r3, #64	@ 0x40
 80033da:	f040 80c4 	bne.w	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fae6 	bl	80039b0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e4:	e0bf      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033f4:	f000 80b7 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00f      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x194>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x194>
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fb5f 	bl	8003ae0 <I2C_MasterReceive_RXNE>
 8003422:	e011      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 809a 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0a5b      	lsrs	r3, r3, #9
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8093 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fc15 	bl	8003c70 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003446:	e08e      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003448:	e08d      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e007      	b.n	800346c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x20e>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	0a5b      	lsrs	r3, r3, #9
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 ffe0 	bl	800445c <I2C_Slave_ADDR>
 800349c:	e066      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0x22e>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0a5b      	lsrs	r3, r3, #9
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 f81a 	bl	80044f0 <I2C_Slave_STOPF>
 80034bc:	e056      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034be:	7bbb      	ldrb	r3, [r7, #14]
 80034c0:	2b21      	cmp	r3, #33	@ 0x21
 80034c2:	d002      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x23a>
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	2b29      	cmp	r3, #41	@ 0x29
 80034c8:	d125      	bne.n	8003516 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	09db      	lsrs	r3, r3, #7
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00f      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x266>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	0a9b      	lsrs	r3, r3, #10
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x266>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fef8 	bl	80042e4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f4:	e039      	b.n	800356a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d033      	beq.n	800356a <HAL_I2C_EV_IRQHandler+0x2da>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	0a5b      	lsrs	r3, r3, #9
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02d      	beq.n	800356a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 ff25 	bl	800435e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003514:	e029      	b.n	800356a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00f      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	0a9b      	lsrs	r3, r3, #10
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x2b2>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 ff2f 	bl	800439e <I2C_SlaveReceive_RXNE>
 8003540:	e014      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00e      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x2dc>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 ff5d 	bl	800441a <I2C_SlaveReceive_BTF>
 8003560:	e004      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800356a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b08a      	sub	sp, #40	@ 0x28
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003594:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <HAL_I2C_ER_IRQHandler+0x5e>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035be:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	0a5b      	lsrs	r3, r3, #9
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00e      	beq.n	80035fa <HAL_I2C_ER_IRQHandler+0x88>
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80035f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	0a9b      	lsrs	r3, r3, #10
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03f      	beq.n	8003686 <HAL_I2C_ER_IRQHandler+0x114>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d039      	beq.n	8003686 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003612:	7efb      	ldrb	r3, [r7, #27]
 8003614:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003624:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800362c:	7ebb      	ldrb	r3, [r7, #26]
 800362e:	2b20      	cmp	r3, #32
 8003630:	d112      	bne.n	8003658 <HAL_I2C_ER_IRQHandler+0xe6>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10f      	bne.n	8003658 <HAL_I2C_ER_IRQHandler+0xe6>
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b21      	cmp	r3, #33	@ 0x21
 800363c:	d008      	beq.n	8003650 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b29      	cmp	r3, #41	@ 0x29
 8003642:	d005      	beq.n	8003650 <HAL_I2C_ER_IRQHandler+0xde>
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b28      	cmp	r3, #40	@ 0x28
 8003648:	d106      	bne.n	8003658 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b21      	cmp	r3, #33	@ 0x21
 800364e:	d103      	bne.n	8003658 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f001 f87d 	bl	8004750 <I2C_Slave_AF>
 8003656:	e016      	b.n	8003686 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003660:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800366a:	7efb      	ldrb	r3, [r7, #27]
 800366c:	2b10      	cmp	r3, #16
 800366e:	d002      	beq.n	8003676 <HAL_I2C_ER_IRQHandler+0x104>
 8003670:	7efb      	ldrb	r3, [r7, #27]
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d107      	bne.n	8003686 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003684:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	0adb      	lsrs	r3, r3, #11
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <HAL_I2C_ER_IRQHandler+0x13e>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80036ae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f001 f8b8 	bl	8004838 <I2C_ITError>
  }
}
 80036c8:	bf00      	nop
 80036ca:	3728      	adds	r7, #40	@ 0x28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
 8003724:	4613      	mov	r3, r2
 8003726:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d150      	bne.n	8003854 <I2C_MasterTransmit_TXE+0xc8>
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b21      	cmp	r3, #33	@ 0x21
 80037b6:	d14d      	bne.n	8003854 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d01d      	beq.n	80037fa <I2C_MasterTransmit_TXE+0x6e>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d01a      	beq.n	80037fa <I2C_MasterTransmit_TXE+0x6e>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037ca:	d016      	beq.n	80037fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2211      	movs	r2, #17
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ff6c 	bl	80036d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f8:	e060      	b.n	80038bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003808:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003818:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d107      	bne.n	8003844 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff81 	bl	8003744 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003842:	e03b      	b.n	80038bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff3f 	bl	80036d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003852:	e033      	b.n	80038bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b21      	cmp	r3, #33	@ 0x21
 8003858:	d005      	beq.n	8003866 <I2C_MasterTransmit_TXE+0xda>
 800385a:	7bbb      	ldrb	r3, [r7, #14]
 800385c:	2b40      	cmp	r3, #64	@ 0x40
 800385e:	d12d      	bne.n	80038bc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b22      	cmp	r3, #34	@ 0x22
 8003864:	d12a      	bne.n	80038bc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d108      	bne.n	8003882 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800387e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003880:	e01c      	b.n	80038bc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b40      	cmp	r3, #64	@ 0x40
 800388c:	d103      	bne.n	8003896 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f88e 	bl	80039b0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003894:	e012      	b.n	80038bc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038ba:	e7ff      	b.n	80038bc <I2C_MasterTransmit_TXE+0x130>
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b21      	cmp	r3, #33	@ 0x21
 80038dc:	d164      	bne.n	80039a8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800390c:	e04c      	b.n	80039a8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d01d      	beq.n	8003950 <I2C_MasterTransmit_BTF+0x8c>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b20      	cmp	r3, #32
 8003918:	d01a      	beq.n	8003950 <I2C_MasterTransmit_BTF+0x8c>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003920:	d016      	beq.n	8003950 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003930:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2211      	movs	r2, #17
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fec1 	bl	80036d0 <HAL_I2C_MasterTxCpltCallback>
}
 800394e:	e02b      	b.n	80039a8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800395e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b40      	cmp	r3, #64	@ 0x40
 8003988:	d107      	bne.n	800399a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fed6 	bl	8003744 <HAL_I2C_MemTxCpltCallback>
}
 8003998:	e006      	b.n	80039a8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fe94 	bl	80036d0 <HAL_I2C_MasterTxCpltCallback>
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11d      	bne.n	8003a04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d10b      	bne.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80039e6:	e077      	b.n	8003ad8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	121b      	asrs	r3, r3, #8
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a02:	e069      	b.n	8003ad8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10b      	bne.n	8003a24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a22:	e059      	b.n	8003ad8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d152      	bne.n	8003ad2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b22      	cmp	r3, #34	@ 0x22
 8003a30:	d10d      	bne.n	8003a4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a4c:	e044      	b.n	8003ad8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b21      	cmp	r3, #33	@ 0x21
 8003a5c:	d112      	bne.n	8003a84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a82:	e029      	b.n	8003ad8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d124      	bne.n	8003ad8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b21      	cmp	r3, #33	@ 0x21
 8003a92:	d121      	bne.n	8003ad8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aa2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fe3a 	bl	8003744 <HAL_I2C_MemTxCpltCallback>
}
 8003ad0:	e002      	b.n	8003ad8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fbc8 	bl	8003268 <I2C_Flush_DR>
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b22      	cmp	r3, #34	@ 0x22
 8003af2:	f040 80b9 	bne.w	8003c68 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d921      	bls.n	8003b4e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	f040 8096 	bne.w	8003c68 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b4a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b4c:	e08c      	b.n	8003c68 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d07f      	beq.n	8003c56 <I2C_MasterReceive_RXNE+0x176>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d002      	beq.n	8003b62 <I2C_MasterReceive_RXNE+0x82>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d179      	bne.n	8003c56 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f001 f842 	bl	8004bec <I2C_WaitOnSTOPRequestThroughIT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d14c      	bne.n	8003c08 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b40      	cmp	r3, #64	@ 0x40
 8003bc6:	d10a      	bne.n	8003bde <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fdbd 	bl	8003756 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bdc:	e044      	b.n	8003c68 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d002      	beq.n	8003bf2 <I2C_MasterReceive_RXNE+0x112>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d103      	bne.n	8003bfa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bf8:	e002      	b.n	8003c00 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2212      	movs	r2, #18
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fd6e 	bl	80036e2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c06:	e02f      	b.n	8003c68 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fd8a 	bl	8003768 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c54:	e008      	b.n	8003c68 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c64:	605a      	str	r2, [r3, #4]
}
 8003c66:	e7ff      	b.n	8003c68 <I2C_MasterReceive_RXNE+0x188>
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d11b      	bne.n	8003cc0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c96:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003cbe:	e0c4      	b.n	8003e4a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d129      	bne.n	8003d1e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d00a      	beq.n	8003cf6 <I2C_MasterReceive_BTF+0x86>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d007      	beq.n	8003cf6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d1c:	e095      	b.n	8003e4a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d17d      	bne.n	8003e24 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d002      	beq.n	8003d34 <I2C_MasterReceive_BTF+0xc4>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d108      	bne.n	8003d46 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e016      	b.n	8003d74 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d002      	beq.n	8003d52 <I2C_MasterReceive_BTF+0xe2>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d108      	bne.n	8003d64 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e007      	b.n	8003d74 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003dce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b40      	cmp	r3, #64	@ 0x40
 8003de2:	d10a      	bne.n	8003dfa <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fcaf 	bl	8003756 <HAL_I2C_MemRxCpltCallback>
}
 8003df8:	e027      	b.n	8003e4a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d002      	beq.n	8003e0e <I2C_MasterReceive_BTF+0x19e>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d103      	bne.n	8003e16 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e14:	e002      	b.n	8003e1c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2212      	movs	r2, #18
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fc60 	bl	80036e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003e22:	e012      	b.n	8003e4a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b40      	cmp	r3, #64	@ 0x40
 8003e64:	d117      	bne.n	8003e96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e80:	e067      	b.n	8003f52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]
}
 8003e94:	e05d      	b.n	8003f52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e9e:	d133      	bne.n	8003f08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b21      	cmp	r3, #33	@ 0x21
 8003eaa:	d109      	bne.n	8003ec0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ebc:	611a      	str	r2, [r3, #16]
 8003ebe:	e008      	b.n	8003ed2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <I2C_Master_SB+0x92>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d032      	beq.n	8003f52 <I2C_Master_SB+0x100>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02d      	beq.n	8003f52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f04:	605a      	str	r2, [r3, #4]
}
 8003f06:	e024      	b.n	8003f52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	11db      	asrs	r3, r3, #7
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0306 	and.w	r3, r3, #6
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f063 030f 	orn	r3, r3, #15
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
}
 8003f2c:	e011      	b.n	8003f52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10d      	bne.n	8003f52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	11db      	asrs	r3, r3, #7
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 0306 	and.w	r3, r3, #6
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f063 030e 	orn	r3, r3, #14
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <I2C_Master_ADD10+0x26>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d108      	bne.n	8003f94 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <I2C_Master_ADD10+0x48>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fa2:	605a      	str	r2, [r3, #4]
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b091      	sub	sp, #68	@ 0x44
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fbc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b22      	cmp	r3, #34	@ 0x22
 8003fd6:	f040 8174 	bne.w	80042c2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10f      	bne.n	8004002 <I2C_Master_ADDR+0x54>
 8003fe2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	d10b      	bne.n	8004002 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fea:	2300      	movs	r3, #0
 8003fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004000:	e16b      	b.n	80042da <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11d      	bne.n	8004046 <I2C_Master_ADDR+0x98>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004012:	d118      	bne.n	8004046 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004014:	2300      	movs	r3, #0
 8004016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004038:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	651a      	str	r2, [r3, #80]	@ 0x50
 8004044:	e149      	b.n	80042da <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d113      	bne.n	8004078 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004050:	2300      	movs	r3, #0
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004064:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e120      	b.n	80042ba <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	f040 808a 	bne.w	8004198 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004086:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800408a:	d137      	bne.n	80040fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040aa:	d113      	bne.n	80040d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040bc:	2300      	movs	r3, #0
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	e0f2      	b.n	80042ba <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d4:	2300      	movs	r3, #0
 80040d6:	623b      	str	r3, [r7, #32]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e0de      	b.n	80042ba <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d02e      	beq.n	8004160 <I2C_Master_ADDR+0x1b2>
 8004102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004104:	2b20      	cmp	r3, #32
 8004106:	d02b      	beq.n	8004160 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410a:	2b12      	cmp	r3, #18
 800410c:	d102      	bne.n	8004114 <I2C_Master_ADDR+0x166>
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	2b01      	cmp	r3, #1
 8004112:	d125      	bne.n	8004160 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	2b04      	cmp	r3, #4
 8004118:	d00e      	beq.n	8004138 <I2C_Master_ADDR+0x18a>
 800411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411c:	2b02      	cmp	r3, #2
 800411e:	d00b      	beq.n	8004138 <I2C_Master_ADDR+0x18a>
 8004120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004122:	2b10      	cmp	r3, #16
 8004124:	d008      	beq.n	8004138 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e007      	b.n	8004148 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004146:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	e0ac      	b.n	80042ba <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e090      	b.n	80042ba <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d158      	bne.n	8004254 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d021      	beq.n	80041ec <I2C_Master_ADDR+0x23e>
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d01e      	beq.n	80041ec <I2C_Master_ADDR+0x23e>
 80041ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d01b      	beq.n	80041ec <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e012      	b.n	8004212 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004220:	d14b      	bne.n	80042ba <I2C_Master_ADDR+0x30c>
 8004222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004224:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004228:	d00b      	beq.n	8004242 <I2C_Master_ADDR+0x294>
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	2b01      	cmp	r3, #1
 800422e:	d008      	beq.n	8004242 <I2C_Master_ADDR+0x294>
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	2b08      	cmp	r3, #8
 8004234:	d005      	beq.n	8004242 <I2C_Master_ADDR+0x294>
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	2b10      	cmp	r3, #16
 800423a:	d002      	beq.n	8004242 <I2C_Master_ADDR+0x294>
 800423c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423e:	2b20      	cmp	r3, #32
 8004240:	d13b      	bne.n	80042ba <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	e032      	b.n	80042ba <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004262:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800426e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004272:	d117      	bne.n	80042a4 <I2C_Master_ADDR+0x2f6>
 8004274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004276:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800427a:	d00b      	beq.n	8004294 <I2C_Master_ADDR+0x2e6>
 800427c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427e:	2b01      	cmp	r3, #1
 8004280:	d008      	beq.n	8004294 <I2C_Master_ADDR+0x2e6>
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	2b08      	cmp	r3, #8
 8004286:	d005      	beq.n	8004294 <I2C_Master_ADDR+0x2e6>
 8004288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428a:	2b10      	cmp	r3, #16
 800428c:	d002      	beq.n	8004294 <I2C_Master_ADDR+0x2e6>
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	2b20      	cmp	r3, #32
 8004292:	d107      	bne.n	80042a4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80042c0:	e00b      	b.n	80042da <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
}
 80042d8:	e7ff      	b.n	80042da <I2C_Master_ADDR+0x32c>
 80042da:	bf00      	nop
 80042dc:	3744      	adds	r7, #68	@ 0x44
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d02b      	beq.n	8004356 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	781a      	ldrb	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d114      	bne.n	8004356 <I2C_SlaveTransmit_TXE+0x72>
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b29      	cmp	r3, #41	@ 0x29
 8004330:	d111      	bne.n	8004356 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004340:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2221      	movs	r2, #33	@ 0x21
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2228      	movs	r2, #40	@ 0x28
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff f9cf 	bl	80036f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d011      	beq.n	8004394 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d02c      	beq.n	8004412 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d114      	bne.n	8004412 <I2C_SlaveReceive_RXNE+0x74>
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ec:	d111      	bne.n	8004412 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2222      	movs	r2, #34	@ 0x22
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2228      	movs	r2, #40	@ 0x28
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff f97a 	bl	8003706 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004476:	2b28      	cmp	r3, #40	@ 0x28
 8004478:	d127      	bne.n	80044ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004488:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	09db      	lsrs	r3, r3, #7
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	81bb      	strh	r3, [r7, #12]
 80044ac:	e002      	b.n	80044b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80044bc:	89ba      	ldrh	r2, [r7, #12]
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	4619      	mov	r1, r3
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff f928 	bl	8003718 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044c8:	e00e      	b.n	80044e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800450e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454c:	d172      	bne.n	8004634 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b22      	cmp	r3, #34	@ 0x22
 8004552:	d002      	beq.n	800455a <I2C_Slave_STOPF+0x6a>
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b2a      	cmp	r3, #42	@ 0x2a
 8004558:	d135      	bne.n	80045c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800458c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fb34 	bl	8002c00 <HAL_DMA_GetState>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d049      	beq.n	8004632 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	4a69      	ldr	r2, [pc, #420]	@ (8004748 <I2C_Slave_STOPF+0x258>)
 80045a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe f9aa 	bl	8002904 <HAL_DMA_Abort_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d03d      	beq.n	8004632 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045c0:	4610      	mov	r0, r2
 80045c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045c4:	e035      	b.n	8004632 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f043 0204 	orr.w	r2, r3, #4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fafe 	bl	8002c00 <HAL_DMA_GetState>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d014      	beq.n	8004634 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460e:	4a4e      	ldr	r2, [pc, #312]	@ (8004748 <I2C_Slave_STOPF+0x258>)
 8004610:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe f974 	bl	8002904 <HAL_DMA_Abort_IT>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800462c:	4610      	mov	r0, r2
 800462e:	4798      	blx	r3
 8004630:	e000      	b.n	8004634 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004632:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d03e      	beq.n	80046bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d112      	bne.n	8004672 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467c:	2b40      	cmp	r3, #64	@ 0x40
 800467e:	d112      	bne.n	80046a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f043 0204 	orr.w	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8b7 	bl	8004838 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046ca:	e039      	b.n	8004740 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80046d0:	d109      	bne.n	80046e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2228      	movs	r2, #40	@ 0x28
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff f810 	bl	8003706 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b28      	cmp	r3, #40	@ 0x28
 80046f0:	d111      	bne.n	8004716 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a15      	ldr	r2, [pc, #84]	@ (800474c <I2C_Slave_STOPF+0x25c>)
 80046f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff f80f 	bl	8003732 <HAL_I2C_ListenCpltCallback>
}
 8004714:	e014      	b.n	8004740 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471a:	2b22      	cmp	r3, #34	@ 0x22
 800471c:	d002      	beq.n	8004724 <I2C_Slave_STOPF+0x234>
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b22      	cmp	r3, #34	@ 0x22
 8004722:	d10d      	bne.n	8004740 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fe ffe3 	bl	8003706 <HAL_I2C_SlaveRxCpltCallback>
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	08004a9d 	.word	0x08004a9d
 800474c:	ffff0000 	.word	0xffff0000

08004750 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d002      	beq.n	8004772 <I2C_Slave_AF+0x22>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b20      	cmp	r3, #32
 8004770:	d129      	bne.n	80047c6 <I2C_Slave_AF+0x76>
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b28      	cmp	r3, #40	@ 0x28
 8004776:	d126      	bne.n	80047c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a2e      	ldr	r2, [pc, #184]	@ (8004834 <I2C_Slave_AF+0xe4>)
 800477c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800478c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004796:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fe ffb7 	bl	8003732 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80047c4:	e031      	b.n	800482a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b21      	cmp	r3, #33	@ 0x21
 80047ca:	d129      	bne.n	8004820 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a19      	ldr	r2, [pc, #100]	@ (8004834 <I2C_Slave_AF+0xe4>)
 80047d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2221      	movs	r2, #33	@ 0x21
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004800:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004810:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fe fd28 	bl	8003268 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fe ff6b 	bl	80036f4 <HAL_I2C_SlaveTxCpltCallback>
}
 800481e:	e004      	b.n	800482a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004828:	615a      	str	r2, [r3, #20]
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	ffff0000 	.word	0xffff0000

08004838 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004846:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800484e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004850:	7bbb      	ldrb	r3, [r7, #14]
 8004852:	2b10      	cmp	r3, #16
 8004854:	d002      	beq.n	800485c <I2C_ITError+0x24>
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	2b40      	cmp	r3, #64	@ 0x40
 800485a:	d10a      	bne.n	8004872 <I2C_ITError+0x3a>
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b22      	cmp	r3, #34	@ 0x22
 8004860:	d107      	bne.n	8004872 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004870:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004878:	2b28      	cmp	r3, #40	@ 0x28
 800487a:	d107      	bne.n	800488c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2228      	movs	r2, #40	@ 0x28
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800488a:	e015      	b.n	80048b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800489a:	d00a      	beq.n	80048b2 <I2C_ITError+0x7a>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b60      	cmp	r3, #96	@ 0x60
 80048a0:	d007      	beq.n	80048b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c6:	d162      	bne.n	800498e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d020      	beq.n	8004928 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ea:	4a6a      	ldr	r2, [pc, #424]	@ (8004a94 <I2C_ITError+0x25c>)
 80048ec:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe f806 	bl	8002904 <HAL_DMA_Abort_IT>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8089 	beq.w	8004a12 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004922:	4610      	mov	r0, r2
 8004924:	4798      	blx	r3
 8004926:	e074      	b.n	8004a12 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	4a59      	ldr	r2, [pc, #356]	@ (8004a94 <I2C_ITError+0x25c>)
 800492e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	4618      	mov	r0, r3
 8004936:	f7fd ffe5 	bl	8002904 <HAL_DMA_Abort_IT>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d068      	beq.n	8004a12 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494a:	2b40      	cmp	r3, #64	@ 0x40
 800494c:	d10b      	bne.n	8004966 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0201 	bic.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004988:	4610      	mov	r0, r2
 800498a:	4798      	blx	r3
 800498c:	e041      	b.n	8004a12 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b60      	cmp	r3, #96	@ 0x60
 8004998:	d125      	bne.n	80049e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d10b      	bne.n	80049ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fe fecb 	bl	800377a <HAL_I2C_AbortCpltCallback>
 80049e4:	e015      	b.n	8004a12 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b40      	cmp	r3, #64	@ 0x40
 80049f2:	d10b      	bne.n	8004a0c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fe feab 	bl	8003768 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10e      	bne.n	8004a40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a56:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d113      	bne.n	8004a8c <I2C_ITError+0x254>
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b28      	cmp	r3, #40	@ 0x28
 8004a68:	d110      	bne.n	8004a8c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a98 <I2C_ITError+0x260>)
 8004a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fe fe53 	bl	8003732 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	08004a9d 	.word	0x08004a9d
 8004a98:	ffff0000 	.word	0xffff0000

08004a9c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8004be4 <I2C_DMAAbort+0x148>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	08db      	lsrs	r3, r3, #3
 8004abc:	4a4a      	ldr	r2, [pc, #296]	@ (8004be8 <I2C_DMAAbort+0x14c>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	0a1a      	lsrs	r2, r3, #8
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00da      	lsls	r2, r3, #3
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	f043 0220 	orr.w	r2, r3, #32
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004ae2:	e00a      	b.n	8004afa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af8:	d0ea      	beq.n	8004ad0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b06:	2200      	movs	r2, #0
 8004b08:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	2200      	movs	r2, #0
 8004b18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b28:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b60      	cmp	r3, #96	@ 0x60
 8004b6a:	d10e      	bne.n	8004b8a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7fe fdf9 	bl	800377a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b88:	e027      	b.n	8004bda <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b8a:	7cfb      	ldrb	r3, [r7, #19]
 8004b8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b90:	2b28      	cmp	r3, #40	@ 0x28
 8004b92:	d117      	bne.n	8004bc4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bb2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2228      	movs	r2, #40	@ 0x28
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004bc2:	e007      	b.n	8004bd4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bd4:	6978      	ldr	r0, [r7, #20]
 8004bd6:	f7fe fdc7 	bl	8003768 <HAL_I2C_ErrorCallback>
}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000038 	.word	0x20000038
 8004be8:	14f8b589 	.word	0x14f8b589

08004bec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bf8:	4b13      	ldr	r3, [pc, #76]	@ (8004c48 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	08db      	lsrs	r3, r3, #3
 8004bfe:	4a13      	ldr	r2, [pc, #76]	@ (8004c4c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	0a1a      	lsrs	r2, r3, #8
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d107      	bne.n	8004c2a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e008      	b.n	8004c3c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c38:	d0e9      	beq.n	8004c0e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000038 	.word	0x20000038
 8004c4c:	14f8b589 	.word	0x14f8b589

08004c50 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004c60:	d103      	bne.n	8004c6a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c68:	e007      	b.n	8004c7a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c72:	d102      	bne.n	8004c7a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2208      	movs	r2, #8
 8004c78:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e272      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8087 	beq.w	8004db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ca4:	4b92      	ldr	r3, [pc, #584]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d00c      	beq.n	8004cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d112      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x5e>
 8004cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc8:	d10b      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cca:	4b89      	ldr	r3, [pc, #548]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d06c      	beq.n	8004db0 <HAL_RCC_OscConfig+0x12c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d168      	bne.n	8004db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e24c      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x76>
 8004cec:	4b80      	ldr	r3, [pc, #512]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a7f      	ldr	r2, [pc, #508]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e02e      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x98>
 8004d02:	4b7b      	ldr	r3, [pc, #492]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a7a      	ldr	r2, [pc, #488]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b78      	ldr	r3, [pc, #480]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a77      	ldr	r2, [pc, #476]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e01d      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0xbc>
 8004d26:	4b72      	ldr	r3, [pc, #456]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a71      	ldr	r2, [pc, #452]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b6f      	ldr	r3, [pc, #444]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6e      	ldr	r2, [pc, #440]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004d40:	4b6b      	ldr	r3, [pc, #428]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a6a      	ldr	r2, [pc, #424]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b68      	ldr	r3, [pc, #416]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a67      	ldr	r2, [pc, #412]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fd fb9e 	bl	80024a0 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fd fb9a 	bl	80024a0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	@ 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e200      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0xe4>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fd fb8a 	bl	80024a0 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fd fb86 	bl	80024a0 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	@ 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1ec      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	4b53      	ldr	r3, [pc, #332]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x10c>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d063      	beq.n	8004e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dca:	4b49      	ldr	r3, [pc, #292]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d11c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x18c>
 8004dd6:	4b46      	ldr	r3, [pc, #280]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	4b43      	ldr	r3, [pc, #268]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_RCC_OscConfig+0x176>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e1c0      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4939      	ldr	r1, [pc, #228]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0e:	e03a      	b.n	8004e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d020      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e18:	4b36      	ldr	r3, [pc, #216]	@ (8004ef4 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fd fb3f 	bl	80024a0 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e26:	f7fd fb3b 	bl	80024a0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e1a1      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4927      	ldr	r1, [pc, #156]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	e015      	b.n	8004e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b26      	ldr	r3, [pc, #152]	@ (8004ef4 <HAL_RCC_OscConfig+0x270>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fd fb1e 	bl	80024a0 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fd fb1a 	bl	80024a0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e180      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d03a      	beq.n	8004f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d019      	beq.n	8004ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9a:	4b17      	ldr	r3, [pc, #92]	@ (8004ef8 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea0:	f7fd fafe 	bl	80024a0 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fd fafa 	bl	80024a0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e160      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f000 face 	bl	8005468 <RCC_Delay>
 8004ecc:	e01c      	b.n	8004f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ece:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7fd fae4 	bl	80024a0 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eda:	e00f      	b.n	8004efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fd fae0 	bl	80024a0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d908      	bls.n	8004efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e146      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	42420000 	.word	0x42420000
 8004ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004efc:	4b92      	ldr	r3, [pc, #584]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e9      	bne.n	8004edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a6 	beq.w	8005062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f1a:	4b8b      	ldr	r3, [pc, #556]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10d      	bne.n	8004f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	4b88      	ldr	r3, [pc, #544]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4a87      	ldr	r2, [pc, #540]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	61d3      	str	r3, [r2, #28]
 8004f32:	4b85      	ldr	r3, [pc, #532]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f42:	4b82      	ldr	r3, [pc, #520]	@ (800514c <HAL_RCC_OscConfig+0x4c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d118      	bne.n	8004f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800514c <HAL_RCC_OscConfig+0x4c8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a7e      	ldr	r2, [pc, #504]	@ (800514c <HAL_RCC_OscConfig+0x4c8>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f5a:	f7fd faa1 	bl	80024a0 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7fd fa9d 	bl	80024a0 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b64      	cmp	r3, #100	@ 0x64
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e103      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	4b75      	ldr	r3, [pc, #468]	@ (800514c <HAL_RCC_OscConfig+0x4c8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x312>
 8004f88:	4b6f      	ldr	r3, [pc, #444]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6213      	str	r3, [r2, #32]
 8004f94:	e02d      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x334>
 8004f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4a69      	ldr	r2, [pc, #420]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6213      	str	r3, [r2, #32]
 8004faa:	4b67      	ldr	r3, [pc, #412]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4a66      	ldr	r2, [pc, #408]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	6213      	str	r3, [r2, #32]
 8004fb6:	e01c      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d10c      	bne.n	8004fda <HAL_RCC_OscConfig+0x356>
 8004fc0:	4b61      	ldr	r3, [pc, #388]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4a60      	ldr	r2, [pc, #384]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6213      	str	r3, [r2, #32]
 8004fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	6213      	str	r3, [r2, #32]
 8004fd8:	e00b      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004fda:	4b5b      	ldr	r3, [pc, #364]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4a5a      	ldr	r2, [pc, #360]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	6213      	str	r3, [r2, #32]
 8004fe6:	4b58      	ldr	r3, [pc, #352]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a57      	ldr	r2, [pc, #348]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d015      	beq.n	8005026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffa:	f7fd fa51 	bl	80024a0 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fd fa4d 	bl	80024a0 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0b1      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005018:	4b4b      	ldr	r3, [pc, #300]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ee      	beq.n	8005002 <HAL_RCC_OscConfig+0x37e>
 8005024:	e014      	b.n	8005050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005026:	f7fd fa3b 	bl	80024a0 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502c:	e00a      	b.n	8005044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fd fa37 	bl	80024a0 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e09b      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005044:	4b40      	ldr	r3, [pc, #256]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ee      	bne.n	800502e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d105      	bne.n	8005062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005056:	4b3c      	ldr	r3, [pc, #240]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4a3b      	ldr	r2, [pc, #236]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 800505c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8087 	beq.w	800517a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800506c:	4b36      	ldr	r3, [pc, #216]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 030c 	and.w	r3, r3, #12
 8005074:	2b08      	cmp	r3, #8
 8005076:	d061      	beq.n	800513c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d146      	bne.n	800510e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005080:	4b33      	ldr	r3, [pc, #204]	@ (8005150 <HAL_RCC_OscConfig+0x4cc>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fd fa0b 	bl	80024a0 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508e:	f7fd fa07 	bl	80024a0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e06d      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a0:	4b29      	ldr	r3, [pc, #164]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b4:	d108      	bne.n	80050c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050b6:	4b24      	ldr	r3, [pc, #144]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	4921      	ldr	r1, [pc, #132]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a19      	ldr	r1, [r3, #32]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	430b      	orrs	r3, r1
 80050da:	491b      	ldr	r1, [pc, #108]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x4cc>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7fd f9db 	bl	80024a0 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ee:	f7fd f9d7 	bl	80024a0 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e03d      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005100:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0x46a>
 800510c:	e035      	b.n	800517a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b10      	ldr	r3, [pc, #64]	@ (8005150 <HAL_RCC_OscConfig+0x4cc>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fd f9c4 	bl	80024a0 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fd f9c0 	bl	80024a0 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e026      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512e:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x498>
 800513a:	e01e      	b.n	800517a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d107      	bne.n	8005154 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e019      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
 8005148:	40021000 	.word	0x40021000
 800514c:	40007000 	.word	0x40007000
 8005150:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005154:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <HAL_RCC_OscConfig+0x500>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	429a      	cmp	r2, r3
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d001      	beq.n	800517a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40021000 	.word	0x40021000

08005188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0d0      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800519c:	4b6a      	ldr	r3, [pc, #424]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d910      	bls.n	80051cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b67      	ldr	r3, [pc, #412]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 0207 	bic.w	r2, r3, #7
 80051b2:	4965      	ldr	r1, [pc, #404]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b63      	ldr	r3, [pc, #396]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0b8      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d020      	beq.n	800521a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e4:	4b59      	ldr	r3, [pc, #356]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a58      	ldr	r2, [pc, #352]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051fc:	4b53      	ldr	r3, [pc, #332]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a52      	ldr	r2, [pc, #328]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005202:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005208:	4b50      	ldr	r3, [pc, #320]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	494d      	ldr	r1, [pc, #308]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d040      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522e:	4b47      	ldr	r3, [pc, #284]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d115      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07f      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d107      	bne.n	8005256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005246:	4b41      	ldr	r3, [pc, #260]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e073      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005256:	4b3d      	ldr	r3, [pc, #244]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e06b      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005266:	4b39      	ldr	r3, [pc, #228]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f023 0203 	bic.w	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4936      	ldr	r1, [pc, #216]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005278:	f7fd f912 	bl	80024a0 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	e00a      	b.n	8005296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005280:	f7fd f90e 	bl	80024a0 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e053      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005296:	4b2d      	ldr	r3, [pc, #180]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 020c 	and.w	r2, r3, #12
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d1eb      	bne.n	8005280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a8:	4b27      	ldr	r3, [pc, #156]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d210      	bcs.n	80052d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b24      	ldr	r3, [pc, #144]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 0207 	bic.w	r2, r3, #7
 80052be:	4922      	ldr	r1, [pc, #136]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b20      	ldr	r3, [pc, #128]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e032      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e4:	4b19      	ldr	r3, [pc, #100]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4916      	ldr	r1, [pc, #88]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d009      	beq.n	8005316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005302:	4b12      	ldr	r3, [pc, #72]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	490e      	ldr	r1, [pc, #56]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	4313      	orrs	r3, r2
 8005314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005316:	f000 f821 	bl	800535c <HAL_RCC_GetSysClockFreq>
 800531a:	4602      	mov	r2, r0
 800531c:	4b0b      	ldr	r3, [pc, #44]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	490a      	ldr	r1, [pc, #40]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	5ccb      	ldrb	r3, [r1, r3]
 800532a:	fa22 f303 	lsr.w	r3, r2, r3
 800532e:	4a09      	ldr	r2, [pc, #36]	@ (8005354 <HAL_RCC_ClockConfig+0x1cc>)
 8005330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005332:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <HAL_RCC_ClockConfig+0x1d0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f7fd f870 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40022000 	.word	0x40022000
 800534c:	40021000 	.word	0x40021000
 8005350:	08008f38 	.word	0x08008f38
 8005354:	20000038 	.word	0x20000038
 8005358:	2000003c 	.word	0x2000003c

0800535c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005376:	4b1e      	ldr	r3, [pc, #120]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b04      	cmp	r3, #4
 8005384:	d002      	beq.n	800538c <HAL_RCC_GetSysClockFreq+0x30>
 8005386:	2b08      	cmp	r3, #8
 8005388:	d003      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0x36>
 800538a:	e027      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800538c:	4b19      	ldr	r3, [pc, #100]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800538e:	613b      	str	r3, [r7, #16]
      break;
 8005390:	e027      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	0c9b      	lsrs	r3, r3, #18
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	4a17      	ldr	r2, [pc, #92]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800539c:	5cd3      	ldrb	r3, [r2, r3]
 800539e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d010      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053aa:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	0c5b      	lsrs	r3, r3, #17
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	4a11      	ldr	r2, [pc, #68]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80053b6:	5cd3      	ldrb	r3, [r2, r3]
 80053b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a0d      	ldr	r2, [pc, #52]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80053be:	fb03 f202 	mul.w	r2, r3, r2
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e004      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	613b      	str	r3, [r7, #16]
      break;
 80053da:	e002      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053dc:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80053de:	613b      	str	r3, [r7, #16]
      break;
 80053e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053e2:	693b      	ldr	r3, [r7, #16]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	007a1200 	.word	0x007a1200
 80053f8:	08008f50 	.word	0x08008f50
 80053fc:	08008f60 	.word	0x08008f60
 8005400:	003d0900 	.word	0x003d0900

08005404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005408:	4b02      	ldr	r3, [pc, #8]	@ (8005414 <HAL_RCC_GetHCLKFreq+0x10>)
 800540a:	681b      	ldr	r3, [r3, #0]
}
 800540c:	4618      	mov	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	20000038 	.word	0x20000038

08005418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800541c:	f7ff fff2 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	@ (800543c <HAL_RCC_GetPCLK1Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40021000 	.word	0x40021000
 800543c:	08008f48 	.word	0x08008f48

08005440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005444:	f7ff ffde 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	0adb      	lsrs	r3, r3, #11
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4903      	ldr	r1, [pc, #12]	@ (8005464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	08008f48 	.word	0x08008f48

08005468 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <RCC_Delay+0x34>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a0a      	ldr	r2, [pc, #40]	@ (80054a0 <RCC_Delay+0x38>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	0a5b      	lsrs	r3, r3, #9
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005484:	bf00      	nop
  }
  while (Delay --);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1e5a      	subs	r2, r3, #1
 800548a:	60fa      	str	r2, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f9      	bne.n	8005484 <RCC_Delay+0x1c>
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	20000038 	.word	0x20000038
 80054a0:	10624dd3 	.word	0x10624dd3

080054a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e076      	b.n	80055a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054c6:	d009      	beq.n	80054dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	61da      	str	r2, [r3, #28]
 80054ce:	e005      	b.n	80054dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fc fafe 	bl	8001af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005560:	ea42 0103 	orr.w	r1, r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005568:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	0c1a      	lsrs	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f002 0204 	and.w	r2, r2, #4
 8005582:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005592:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	@ 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055ba:	2301      	movs	r3, #1
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055be:	f7fc ff6f 	bl	80024a0 <HAL_GetTick>
 80055c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055d6:	7ffb      	ldrb	r3, [r7, #31]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d00c      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x4a>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055e2:	d106      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x46>
 80055ec:	7ffb      	ldrb	r3, [r7, #31]
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d001      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
 80055f4:	e17f      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x5c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x5c>
 8005602:	887b      	ldrh	r3, [r7, #2]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e174      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_SPI_TransmitReceive+0x6e>
 8005616:	2302      	movs	r3, #2
 8005618:	e16d      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x34a>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b04      	cmp	r3, #4
 800562c:	d003      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2205      	movs	r2, #5
 8005632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	887a      	ldrh	r2, [r7, #2]
 8005646:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	887a      	ldrh	r2, [r7, #2]
 8005658:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	887a      	ldrh	r2, [r7, #2]
 800565e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005676:	2b40      	cmp	r3, #64	@ 0x40
 8005678:	d007      	beq.n	800568a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005692:	d17e      	bne.n	8005792 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_SPI_TransmitReceive+0xf6>
 800569c:	8afb      	ldrh	r3, [r7, #22]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d16c      	bne.n	800577c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b2:	1c9a      	adds	r2, r3, #2
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056c6:	e059      	b.n	800577c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d11b      	bne.n	800570e <HAL_SPI_TransmitReceive+0x162>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d016      	beq.n	800570e <HAL_SPI_TransmitReceive+0x162>
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d113      	bne.n	800570e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	d119      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x1a4>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d014      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	b292      	uxth	r2, r2
 8005732:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	1c9a      	adds	r2, r3, #2
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800574c:	2301      	movs	r3, #1
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005750:	f7fc fea6 	bl	80024a0 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800575c:	429a      	cmp	r2, r3
 800575e:	d80d      	bhi.n	800577c <HAL_SPI_TransmitReceive+0x1d0>
 8005760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d009      	beq.n	800577c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e0bc      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1a0      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x11c>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d19b      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x11c>
 8005790:	e082      	b.n	8005898 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x1f4>
 800579a:	8afb      	ldrh	r3, [r7, #22]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d171      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	7812      	ldrb	r2, [r2, #0]
 80057ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c6:	e05d      	b.n	8005884 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d11c      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x264>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d017      	beq.n	8005810 <HAL_SPI_TransmitReceive+0x264>
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d114      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	7812      	ldrb	r2, [r2, #0]
 80057f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d119      	bne.n	8005852 <HAL_SPI_TransmitReceive+0x2a6>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d014      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800584e:	2301      	movs	r3, #1
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005852:	f7fc fe25 	bl	80024a0 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800585e:	429a      	cmp	r2, r3
 8005860:	d803      	bhi.n	800586a <HAL_SPI_TransmitReceive+0x2be>
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d102      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x2c4>
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e038      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d19c      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x21c>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d197      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fd35 	bl	800630c <SPI_EndRxTxTransaction>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e01d      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
  }
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3728      	adds	r7, #40	@ 0x28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b01      	cmp	r3, #1
 8005918:	d001      	beq.n	800591e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
 800591c:	e097      	b.n	8005a4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SPI_Transmit_DMA+0x2a>
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e08f      	b.n	8005a4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_SPI_Transmit_DMA+0x3c>
 8005938:	2302      	movs	r3, #2
 800593a:	e088      	b.n	8005a4e <HAL_SPI_Transmit_DMA+0x14e>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2203      	movs	r2, #3
 8005948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	88fa      	ldrh	r2, [r7, #6]
 8005962:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800598a:	d10f      	bne.n	80059ac <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b0:	4a29      	ldr	r2, [pc, #164]	@ (8005a58 <HAL_SPI_Transmit_DMA+0x158>)
 80059b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b8:	4a28      	ldr	r2, [pc, #160]	@ (8005a5c <HAL_SPI_Transmit_DMA+0x15c>)
 80059ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c0:	4a27      	ldr	r2, [pc, #156]	@ (8005a60 <HAL_SPI_Transmit_DMA+0x160>)
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c8:	2200      	movs	r2, #0
 80059ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d4:	4619      	mov	r1, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80059e4:	f7fc fef2 	bl	80027cc <HAL_DMA_Start_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f2:	f043 0210 	orr.w	r2, r3, #16
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e023      	b.n	8005a4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a10:	2b40      	cmp	r3, #64	@ 0x40
 8005a12:	d007      	beq.n	8005a24 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a22:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0220 	orr.w	r2, r2, #32
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0202 	orr.w	r2, r2, #2
 8005a4a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	0800609b 	.word	0x0800609b
 8005a5c:	08005ec1 	.word	0x08005ec1
 8005a60:	080060ef 	.word	0x080060ef

08005a64 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a78:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d00c      	beq.n	8005aa0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a8c:	d106      	bne.n	8005a9c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_SPI_TransmitReceive_DMA+0x38>
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d001      	beq.n	8005aa0 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0cf      	b.n	8005c40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005aac:	887b      	ldrh	r3, [r7, #2]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e0c4      	b.n	8005c40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e0bd      	b.n	8005c40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d003      	beq.n	8005ae0 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2205      	movs	r2, #5
 8005adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	887a      	ldrh	r2, [r7, #2]
 8005af0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	887a      	ldrh	r2, [r7, #2]
 8005af6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	887a      	ldrh	r2, [r7, #2]
 8005b02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d108      	bne.n	8005b34 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b26:	4a48      	ldr	r2, [pc, #288]	@ (8005c48 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005b28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b2e:	4a47      	ldr	r2, [pc, #284]	@ (8005c4c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005b30:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b32:	e007      	b.n	8005b44 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b38:	4a45      	ldr	r2, [pc, #276]	@ (8005c50 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b40:	4a44      	ldr	r2, [pc, #272]	@ (8005c54 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005b42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b48:	4a43      	ldr	r2, [pc, #268]	@ (8005c58 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005b4a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b50:	2200      	movs	r2, #0
 8005b52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	4619      	mov	r1, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b64:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005b6c:	f7fc fe2e 	bl	80027cc <HAL_DMA_Start_IT>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7a:	f043 0210 	orr.w	r2, r3, #16
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e058      	b.n	8005c40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005baa:	2200      	movs	r2, #0
 8005bac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bba:	2200      	movs	r2, #0
 8005bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bd6:	f7fc fdf9 	bl	80027cc <HAL_DMA_Start_IT>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be4:	f043 0210 	orr.w	r2, r3, #16
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e023      	b.n	8005c40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c02:	2b40      	cmp	r3, #64	@ 0x40
 8005c04:	d007      	beq.n	8005c16 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c14:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0220 	orr.w	r2, r2, #32
 8005c2c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0202 	orr.w	r2, r2, #2
 8005c3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	080060b7 	.word	0x080060b7
 8005c4c:	08005f67 	.word	0x08005f67
 8005c50:	080060d3 	.word	0x080060d3
 8005c54:	0800600d 	.word	0x0800600d
 8005c58:	080060ef 	.word	0x080060ef

08005c5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	099b      	lsrs	r3, r3, #6
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10f      	bne.n	8005ca0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	099b      	lsrs	r3, r3, #6
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d004      	beq.n	8005ca0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
    return;
 8005c9e:	e0be      	b.n	8005e1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_SPI_IRQHandler+0x66>
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
    return;
 8005cc0:	e0ad      	b.n	8005e1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_SPI_IRQHandler+0x80>
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 80a1 	beq.w	8005e1e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 809a 	beq.w	8005e1e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	099b      	lsrs	r3, r3, #6
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d023      	beq.n	8005d3e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d011      	beq.n	8005d26 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	f043 0204 	orr.w	r2, r3, #4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	e00b      	b.n	8005d3e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	693b      	ldr	r3, [r7, #16]
        return;
 8005d3c:	e06f      	b.n	8005e1e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d014      	beq.n	8005d74 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4e:	f043 0201 	orr.w	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d04f      	beq.n	8005e1c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d104      	bne.n	8005da8 <HAL_SPI_IRQHandler+0x14c>
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d034      	beq.n	8005e12 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0203 	bic.w	r2, r2, #3
 8005db6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d011      	beq.n	8005de4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc4:	4a17      	ldr	r2, [pc, #92]	@ (8005e24 <HAL_SPI_IRQHandler+0x1c8>)
 8005dc6:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fc fd99 	bl	8002904 <HAL_DMA_Abort_IT>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ddc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d016      	beq.n	8005e1a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df0:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <HAL_SPI_IRQHandler+0x1c8>)
 8005df2:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fc fd83 	bl	8002904 <HAL_DMA_Abort_IT>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005e10:	e003      	b.n	8005e1a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f83e 	bl	8005e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e18:	e000      	b.n	8005e1c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005e1a:	bf00      	nop
    return;
 8005e1c:	bf00      	nop
  }
}
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	0800612f 	.word	0x0800612f

08005e28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005eb4:	b2db      	uxtb	r3, r3
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ece:	f7fc fae7 	bl	80024a0 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d03b      	beq.n	8005f5a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0220 	bic.w	r2, r2, #32
 8005ef0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0202 	bic.w	r2, r2, #2
 8005f00:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	2164      	movs	r1, #100	@ 0x64
 8005f06:	6978      	ldr	r0, [r7, #20]
 8005f08:	f000 fa00 	bl	800630c <SPI_EndRxTxTransaction>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f16:	f043 0220 	orr.w	r2, r3, #32
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f7ff ff9e 	bl	8005e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f58:	e002      	b.n	8005f60 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	f7ff ff64 	bl	8005e28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f72:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f74:	f7fc fa94 	bl	80024a0 <HAL_GetTick>
 8005f78:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d03b      	beq.n	8006000 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0220 	bic.w	r2, r2, #32
 8005f96:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10d      	bne.n	8005fbc <SPI_DMAReceiveCplt+0x56>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fa8:	d108      	bne.n	8005fbc <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0203 	bic.w	r2, r2, #3
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	e007      	b.n	8005fcc <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	2164      	movs	r1, #100	@ 0x64
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f949 	bl	8006268 <SPI_EndRxTransaction>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff ff4b 	bl	8005e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ffe:	e002      	b.n	8006006 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff ff1a 	bl	8005e3a <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800601a:	f7fc fa41 	bl	80024a0 <HAL_GetTick>
 800601e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b20      	cmp	r3, #32
 800602c:	d02f      	beq.n	800608e <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0220 	bic.w	r2, r2, #32
 800603c:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	2164      	movs	r1, #100	@ 0x64
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f962 	bl	800630c <SPI_EndRxTxTransaction>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006052:	f043 0220 	orr.w	r2, r3, #32
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0203 	bic.w	r2, r2, #3
 8006068:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff ff04 	bl	8005e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800608c:	e002      	b.n	8006094 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fedc 	bl	8005e4c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fed8 	bl	8005e5e <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff fed3 	bl	8005e70 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff fece 	bl	8005e82 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0203 	bic.w	r2, r2, #3
 800610a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006110:	f043 0210 	orr.w	r2, r3, #16
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff feb7 	bl	8005e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fea3 	bl	8005e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006168:	f7fc f99a 	bl	80024a0 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	4413      	add	r3, r2
 8006176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006178:	f7fc f992 	bl	80024a0 <HAL_GetTick>
 800617c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800617e:	4b39      	ldr	r3, [pc, #228]	@ (8006264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	015b      	lsls	r3, r3, #5
 8006184:	0d1b      	lsrs	r3, r3, #20
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	fb02 f303 	mul.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800618e:	e054      	b.n	800623a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d050      	beq.n	800623a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006198:	f7fc f982 	bl	80024a0 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d902      	bls.n	80061ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d13d      	bne.n	800622a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061c6:	d111      	bne.n	80061ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d0:	d004      	beq.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061da:	d107      	bne.n	80061ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f4:	d10f      	bne.n	8006216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e017      	b.n	800625a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	3b01      	subs	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	bf0c      	ite	eq
 800624a:	2301      	moveq	r3, #1
 800624c:	2300      	movne	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	429a      	cmp	r2, r3
 8006256:	d19b      	bne.n	8006190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000038 	.word	0x20000038

08006268 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800627c:	d111      	bne.n	80062a2 <SPI_EndRxTransaction+0x3a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006286:	d004      	beq.n	8006292 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006290:	d107      	bne.n	80062a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062aa:	d117      	bne.n	80062dc <SPI_EndRxTransaction+0x74>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b4:	d112      	bne.n	80062dc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	2101      	movs	r1, #1
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff ff49 	bl	8006158 <SPI_WaitFlagStateUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01a      	beq.n	8006302 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e013      	b.n	8006304 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2200      	movs	r2, #0
 80062e4:	2180      	movs	r1, #128	@ 0x80
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff ff36 	bl	8006158 <SPI_WaitFlagStateUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f6:	f043 0220 	orr.w	r2, r3, #32
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e000      	b.n	8006304 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2201      	movs	r2, #1
 8006320:	2102      	movs	r1, #2
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff ff18 	bl	8006158 <SPI_WaitFlagStateUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006332:	f043 0220 	orr.w	r2, r3, #32
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e013      	b.n	8006366 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2200      	movs	r2, #0
 8006346:	2180      	movs	r1, #128	@ 0x80
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff ff05 	bl	8006158 <SPI_WaitFlagStateUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d007      	beq.n	8006364 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e000      	b.n	8006366 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e041      	b.n	8006404 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fb feeb 	bl	8002170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4619      	mov	r1, r3
 80063ac:	4610      	mov	r0, r2
 80063ae:	f000 fc1f 	bl	8006bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d001      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e03a      	b.n	800649a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a18      	ldr	r2, [pc, #96]	@ (80064a4 <HAL_TIM_Base_Start_IT+0x98>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00e      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x58>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644e:	d009      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x58>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a14      	ldr	r2, [pc, #80]	@ (80064a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x58>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a13      	ldr	r2, [pc, #76]	@ (80064ac <HAL_TIM_Base_Start_IT+0xa0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d111      	bne.n	8006488 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b06      	cmp	r3, #6
 8006474:	d010      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	e007      	b.n	8006498 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800

080064b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e041      	b.n	8006546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f839 	bl	800654e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f000 fb7e 	bl	8006bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <HAL_TIM_PWM_Start+0x24>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	e022      	b.n	80065ca <HAL_TIM_PWM_Start+0x6a>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b04      	cmp	r3, #4
 8006588:	d109      	bne.n	800659e <HAL_TIM_PWM_Start+0x3e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	bf14      	ite	ne
 8006596:	2301      	movne	r3, #1
 8006598:	2300      	moveq	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	e015      	b.n	80065ca <HAL_TIM_PWM_Start+0x6a>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d109      	bne.n	80065b8 <HAL_TIM_PWM_Start+0x58>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	e008      	b.n	80065ca <HAL_TIM_PWM_Start+0x6a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	bf14      	ite	ne
 80065c4:	2301      	movne	r3, #1
 80065c6:	2300      	moveq	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e05e      	b.n	8006690 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <HAL_TIM_PWM_Start+0x82>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065e0:	e013      	b.n	800660a <HAL_TIM_PWM_Start+0xaa>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_PWM_Start+0x92>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065f0:	e00b      	b.n	800660a <HAL_TIM_PWM_Start+0xaa>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d104      	bne.n	8006602 <HAL_TIM_PWM_Start+0xa2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006600:	e003      	b.n	800660a <HAL_TIM_PWM_Start+0xaa>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2202      	movs	r2, #2
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2201      	movs	r2, #1
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fd78 	bl	8007108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1e      	ldr	r2, [pc, #120]	@ (8006698 <HAL_TIM_PWM_Start+0x138>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d107      	bne.n	8006632 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006630:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a18      	ldr	r2, [pc, #96]	@ (8006698 <HAL_TIM_PWM_Start+0x138>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIM_PWM_Start+0xfa>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006644:	d009      	beq.n	800665a <HAL_TIM_PWM_Start+0xfa>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a14      	ldr	r2, [pc, #80]	@ (800669c <HAL_TIM_PWM_Start+0x13c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIM_PWM_Start+0xfa>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a12      	ldr	r2, [pc, #72]	@ (80066a0 <HAL_TIM_PWM_Start+0x140>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d111      	bne.n	800667e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b06      	cmp	r3, #6
 800666a:	d010      	beq.n	800668e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667c:	e007      	b.n	800668e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800

080066a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01b      	beq.n	8006708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0202 	mvn.w	r2, #2
 80066d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa63 	bl	8006bba <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa56 	bl	8006ba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fa65 	bl	8006bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	2b00      	cmp	r3, #0
 8006710:	d020      	beq.n	8006754 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01b      	beq.n	8006754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0204 	mvn.w	r2, #4
 8006724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa3d 	bl	8006bba <HAL_TIM_IC_CaptureCallback>
 8006740:	e005      	b.n	800674e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fa30 	bl	8006ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fa3f 	bl	8006bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d020      	beq.n	80067a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01b      	beq.n	80067a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0208 	mvn.w	r2, #8
 8006770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2204      	movs	r2, #4
 8006776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa17 	bl	8006bba <HAL_TIM_IC_CaptureCallback>
 800678c:	e005      	b.n	800679a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa0a 	bl	8006ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fa19 	bl	8006bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d020      	beq.n	80067ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01b      	beq.n	80067ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0210 	mvn.w	r2, #16
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2208      	movs	r2, #8
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9f1 	bl	8006bba <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9e4 	bl	8006ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f9f3 	bl	8006bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00c      	beq.n	8006810 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0201 	mvn.w	r2, #1
 8006808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9c3 	bl	8006b96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800682c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fcf5 	bl	800721e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00c      	beq.n	8006858 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9c3 	bl	8006bde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00c      	beq.n	800687c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0220 	mvn.w	r2, #32
 8006874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fcc8 	bl	800720c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800689e:	2302      	movs	r3, #2
 80068a0:	e0ae      	b.n	8006a00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b0c      	cmp	r3, #12
 80068ae:	f200 809f 	bhi.w	80069f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068b2:	a201      	add	r2, pc, #4	@ (adr r2, 80068b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068ed 	.word	0x080068ed
 80068bc:	080069f1 	.word	0x080069f1
 80068c0:	080069f1 	.word	0x080069f1
 80068c4:	080069f1 	.word	0x080069f1
 80068c8:	0800692d 	.word	0x0800692d
 80068cc:	080069f1 	.word	0x080069f1
 80068d0:	080069f1 	.word	0x080069f1
 80068d4:	080069f1 	.word	0x080069f1
 80068d8:	0800696f 	.word	0x0800696f
 80068dc:	080069f1 	.word	0x080069f1
 80068e0:	080069f1 	.word	0x080069f1
 80068e4:	080069f1 	.word	0x080069f1
 80068e8:	080069af 	.word	0x080069af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f9ea 	bl	8006ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0208 	orr.w	r2, r2, #8
 8006906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0204 	bic.w	r2, r2, #4
 8006916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6999      	ldr	r1, [r3, #24]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	619a      	str	r2, [r3, #24]
      break;
 800692a:	e064      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fa30 	bl	8006d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6999      	ldr	r1, [r3, #24]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	021a      	lsls	r2, r3, #8
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	619a      	str	r2, [r3, #24]
      break;
 800696c:	e043      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fa79 	bl	8006e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0208 	orr.w	r2, r2, #8
 8006988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0204 	bic.w	r2, r2, #4
 8006998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69d9      	ldr	r1, [r3, #28]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	61da      	str	r2, [r3, #28]
      break;
 80069ac:	e023      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fac3 	bl	8006f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69d9      	ldr	r1, [r3, #28]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	021a      	lsls	r2, r3, #8
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	61da      	str	r2, [r3, #28]
      break;
 80069ee:	e002      	b.n	80069f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
      break;
 80069f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_TIM_ConfigClockSource+0x1c>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e0b4      	b.n	8006b8e <HAL_TIM_ConfigClockSource+0x186>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a5c:	d03e      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0xd4>
 8006a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a62:	f200 8087 	bhi.w	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a6a:	f000 8086 	beq.w	8006b7a <HAL_TIM_ConfigClockSource+0x172>
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a72:	d87f      	bhi.n	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
 8006a74:	2b70      	cmp	r3, #112	@ 0x70
 8006a76:	d01a      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0xa6>
 8006a78:	2b70      	cmp	r3, #112	@ 0x70
 8006a7a:	d87b      	bhi.n	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
 8006a7c:	2b60      	cmp	r3, #96	@ 0x60
 8006a7e:	d050      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x11a>
 8006a80:	2b60      	cmp	r3, #96	@ 0x60
 8006a82:	d877      	bhi.n	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
 8006a84:	2b50      	cmp	r3, #80	@ 0x50
 8006a86:	d03c      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0xfa>
 8006a88:	2b50      	cmp	r3, #80	@ 0x50
 8006a8a:	d873      	bhi.n	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
 8006a8c:	2b40      	cmp	r3, #64	@ 0x40
 8006a8e:	d058      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0x13a>
 8006a90:	2b40      	cmp	r3, #64	@ 0x40
 8006a92:	d86f      	bhi.n	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
 8006a94:	2b30      	cmp	r3, #48	@ 0x30
 8006a96:	d064      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x15a>
 8006a98:	2b30      	cmp	r3, #48	@ 0x30
 8006a9a:	d86b      	bhi.n	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d060      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x15a>
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d867      	bhi.n	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d05c      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x15a>
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d05a      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x15a>
 8006aac:	e062      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006abe:	f000 fb04 	bl	80070ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	609a      	str	r2, [r3, #8]
      break;
 8006ada:	e04f      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006aec:	f000 faed 	bl	80070ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006afe:	609a      	str	r2, [r3, #8]
      break;
 8006b00:	e03c      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f000 fa64 	bl	8006fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2150      	movs	r1, #80	@ 0x50
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fabb 	bl	8007096 <TIM_ITRx_SetConfig>
      break;
 8006b20:	e02c      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f000 fa82 	bl	8007038 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2160      	movs	r1, #96	@ 0x60
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 faab 	bl	8007096 <TIM_ITRx_SetConfig>
      break;
 8006b40:	e01c      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f000 fa44 	bl	8006fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2140      	movs	r1, #64	@ 0x40
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fa9b 	bl	8007096 <TIM_ITRx_SetConfig>
      break;
 8006b60:	e00c      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	f000 fa92 	bl	8007096 <TIM_ITRx_SetConfig>
      break;
 8006b72:	e003      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
      break;
 8006b78:	e000      	b.n	8006b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr

08006bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc0 <TIM_Base_SetConfig+0xd0>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <TIM_Base_SetConfig+0x30>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0e:	d007      	beq.n	8006c20 <TIM_Base_SetConfig+0x30>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a2c      	ldr	r2, [pc, #176]	@ (8006cc4 <TIM_Base_SetConfig+0xd4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_Base_SetConfig+0x30>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc8 <TIM_Base_SetConfig+0xd8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d108      	bne.n	8006c32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a22      	ldr	r2, [pc, #136]	@ (8006cc0 <TIM_Base_SetConfig+0xd0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00b      	beq.n	8006c52 <TIM_Base_SetConfig+0x62>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c40:	d007      	beq.n	8006c52 <TIM_Base_SetConfig+0x62>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc4 <TIM_Base_SetConfig+0xd4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d003      	beq.n	8006c52 <TIM_Base_SetConfig+0x62>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc8 <TIM_Base_SetConfig+0xd8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d108      	bne.n	8006c64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006cc0 <TIM_Base_SetConfig+0xd0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d103      	bne.n	8006c98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f023 0201 	bic.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	611a      	str	r2, [r3, #16]
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800

08006ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	f023 0201 	bic.w	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0303 	bic.w	r3, r3, #3
 8006d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f023 0302 	bic.w	r3, r3, #2
 8006d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a1c      	ldr	r2, [pc, #112]	@ (8006d94 <TIM_OC1_SetConfig+0xc8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d10c      	bne.n	8006d42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0308 	bic.w	r3, r3, #8
 8006d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f023 0304 	bic.w	r3, r3, #4
 8006d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a13      	ldr	r2, [pc, #76]	@ (8006d94 <TIM_OC1_SetConfig+0xc8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d111      	bne.n	8006d6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40012c00 	.word	0x40012c00

08006d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f023 0210 	bic.w	r2, r3, #16
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 0320 	bic.w	r3, r3, #32
 8006de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e68 <TIM_OC2_SetConfig+0xd0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d10d      	bne.n	8006e14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a14      	ldr	r2, [pc, #80]	@ (8006e68 <TIM_OC2_SetConfig+0xd0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d113      	bne.n	8006e44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr
 8006e68:	40012c00 	.word	0x40012c00

08006e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f3c <TIM_OC3_SetConfig+0xd0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d10d      	bne.n	8006ee6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a14      	ldr	r2, [pc, #80]	@ (8006f3c <TIM_OC3_SetConfig+0xd0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d113      	bne.n	8006f16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	621a      	str	r2, [r3, #32]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40012c00 	.word	0x40012c00

08006f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	031b      	lsls	r3, r3, #12
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8006fd8 <TIM_OC4_SetConfig+0x98>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d109      	bne.n	8006fb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	019b      	lsls	r3, r3, #6
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr
 8006fd8:	40012c00 	.word	0x40012c00

08006fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f023 0201 	bic.w	r2, r3, #1
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f023 030a 	bic.w	r3, r3, #10
 8007018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f023 0210 	bic.w	r2, r3, #16
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	031b      	lsls	r3, r3, #12
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007074:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	621a      	str	r2, [r3, #32]
}
 800708c:	bf00      	nop
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr

08007096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f043 0307 	orr.w	r3, r3, #7
 80070b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr

080070ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b087      	sub	sp, #28
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	021a      	lsls	r2, r3, #8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	609a      	str	r2, [r3, #8]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	2201      	movs	r2, #1
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1a      	ldr	r2, [r3, #32]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	43db      	mvns	r3, r3
 800712a:	401a      	ands	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1a      	ldr	r2, [r3, #32]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	fa01 f303 	lsl.w	r3, r1, r3
 8007140:	431a      	orrs	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007164:	2302      	movs	r3, #2
 8007166:	e046      	b.n	80071f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a16      	ldr	r2, [pc, #88]	@ (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00e      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b4:	d009      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a12      	ldr	r2, [pc, #72]	@ (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d004      	beq.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a10      	ldr	r2, [pc, #64]	@ (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d10c      	bne.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr
 8007200:	40012c00 	.word	0x40012c00
 8007204:	40000400 	.word	0x40000400
 8007208:	40000800 	.word	0x40000800

0800720c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr

0800721e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e042      	b.n	80072c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fb f850 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2224      	movs	r2, #36	@ 0x24
 8007260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fc7f 	bl	8007b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695a      	ldr	r2, [r3, #20]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b0ba      	sub	sp, #232	@ 0xe8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800730e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10f      	bne.n	8007336 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <HAL_UART_IRQHandler+0x66>
 8007322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fb63 	bl	80079fa <UART_Receive_IT>
      return;
 8007334:	e25b      	b.n	80077ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80de 	beq.w	80074fc <HAL_UART_IRQHandler+0x22c>
 8007340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007350:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80d1 	beq.w	80074fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800735a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00b      	beq.n	800737e <HAL_UART_IRQHandler+0xae>
 8007366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800736a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	f043 0201 	orr.w	r2, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800737e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <HAL_UART_IRQHandler+0xd2>
 800738a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739a:	f043 0202 	orr.w	r2, r3, #2
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <HAL_UART_IRQHandler+0xf6>
 80073ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d005      	beq.n	80073c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073be:	f043 0204 	orr.w	r2, r3, #4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d011      	beq.n	80073f6 <HAL_UART_IRQHandler+0x126>
 80073d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d105      	bne.n	80073ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d005      	beq.n	80073f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ee:	f043 0208 	orr.w	r2, r3, #8
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 81f2 	beq.w	80077e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <HAL_UART_IRQHandler+0x14e>
 800740c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 faee 	bl	80079fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	bf14      	ite	ne
 800742c:	2301      	movne	r3, #1
 800742e:	2300      	moveq	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <HAL_UART_IRQHandler+0x17a>
 8007442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007446:	2b00      	cmp	r3, #0
 8007448:	d04f      	beq.n	80074ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9f8 	bl	8007840 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d041      	beq.n	80074e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3314      	adds	r3, #20
 8007464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800747c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3314      	adds	r3, #20
 8007486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800748a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800748e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80074a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1d9      	bne.n	800745e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d013      	beq.n	80074da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b6:	4a7e      	ldr	r2, [pc, #504]	@ (80076b0 <HAL_UART_IRQHandler+0x3e0>)
 80074b8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fb fa20 	bl	8002904 <HAL_DMA_Abort_IT>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d016      	beq.n	80074f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80074d4:	4610      	mov	r0, r2
 80074d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d8:	e00e      	b.n	80074f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f99c 	bl	8007818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e0:	e00a      	b.n	80074f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f998 	bl	8007818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e8:	e006      	b.n	80074f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f994 	bl	8007818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80074f6:	e175      	b.n	80077e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f8:	bf00      	nop
    return;
 80074fa:	e173      	b.n	80077e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007500:	2b01      	cmp	r3, #1
 8007502:	f040 814f 	bne.w	80077a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750a:	f003 0310 	and.w	r3, r3, #16
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8148 	beq.w	80077a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007518:	f003 0310 	and.w	r3, r3, #16
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8141 	beq.w	80077a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007522:	2300      	movs	r3, #0
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60bb      	str	r3, [r7, #8]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	60bb      	str	r3, [r7, #8]
 8007536:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 80b6 	beq.w	80076b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8145 	beq.w	80077e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007566:	429a      	cmp	r2, r3
 8007568:	f080 813e 	bcs.w	80077e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007572:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	2b20      	cmp	r3, #32
 800757c:	f000 8088 	beq.w	8007690 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007596:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800759a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800759e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80075ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80075b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80075c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1d9      	bne.n	8007580 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3314      	adds	r3, #20
 80075d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80075dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075de:	f023 0301 	bic.w	r3, r3, #1
 80075e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3314      	adds	r3, #20
 80075ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80075f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80075f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80075f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e1      	bne.n	80075cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800761a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800761e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3314      	adds	r3, #20
 8007628:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800762c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800762e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007632:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800763a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e3      	bne.n	8007608 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800765e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007660:	f023 0310 	bic.w	r3, r3, #16
 8007664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007672:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007674:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007678:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e3      	bne.n	800764e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800768a:	4618      	mov	r0, r3
 800768c:	f7fb f8fe 	bl	800288c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f8bf 	bl	800782a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076ac:	e09c      	b.n	80077e8 <HAL_UART_IRQHandler+0x518>
 80076ae:	bf00      	nop
 80076b0:	08007905 	.word	0x08007905
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 808e 	beq.w	80077ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80076d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 8089 	beq.w	80077ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	330c      	adds	r3, #12
 80076e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	330c      	adds	r3, #12
 80076fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80076fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8007700:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007704:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800770c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e3      	bne.n	80076da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3314      	adds	r3, #20
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	623b      	str	r3, [r7, #32]
   return(result);
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f023 0301 	bic.w	r3, r3, #1
 8007728:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3314      	adds	r3, #20
 8007732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007736:	633a      	str	r2, [r7, #48]	@ 0x30
 8007738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800773c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e3      	bne.n	8007712 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	330c      	adds	r3, #12
 800775e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	60fb      	str	r3, [r7, #12]
   return(result);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0310 	bic.w	r3, r3, #16
 800776e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	330c      	adds	r3, #12
 8007778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800777c:	61fa      	str	r2, [r7, #28]
 800777e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	69b9      	ldr	r1, [r7, #24]
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	617b      	str	r3, [r7, #20]
   return(result);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e3      	bne.n	8007758 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007796:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f844 	bl	800782a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077a2:	e023      	b.n	80077ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d009      	beq.n	80077c4 <HAL_UART_IRQHandler+0x4f4>
 80077b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8b5 	bl	800792c <UART_Transmit_IT>
    return;
 80077c2:	e014      	b.n	80077ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00e      	beq.n	80077ee <HAL_UART_IRQHandler+0x51e>
 80077d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d008      	beq.n	80077ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f8f4 	bl	80079ca <UART_EndTransmit_IT>
    return;
 80077e2:	e004      	b.n	80077ee <HAL_UART_IRQHandler+0x51e>
    return;
 80077e4:	bf00      	nop
 80077e6:	e002      	b.n	80077ee <HAL_UART_IRQHandler+0x51e>
      return;
 80077e8:	bf00      	nop
 80077ea:	e000      	b.n	80077ee <HAL_UART_IRQHandler+0x51e>
      return;
 80077ec:	bf00      	nop
  }
}
 80077ee:	37e8      	adds	r7, #232	@ 0xe8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr

08007806 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr

08007818 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr

0800782a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr

08007840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b095      	sub	sp, #84	@ 0x54
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	330c      	adds	r3, #12
 8007866:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007868:	643a      	str	r2, [r7, #64]	@ 0x40
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800786e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3314      	adds	r3, #20
 8007882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	61fb      	str	r3, [r7, #28]
   return(result);
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3314      	adds	r3, #20
 800789a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800789c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d119      	bne.n	80078ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f023 0310 	bic.w	r3, r3, #16
 80078ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078d8:	61ba      	str	r2, [r7, #24]
 80078da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6979      	ldr	r1, [r7, #20]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	613b      	str	r3, [r7, #16]
   return(result);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e5      	bne.n	80078b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078fa:	bf00      	nop
 80078fc:	3754      	adds	r7, #84	@ 0x54
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr

08007904 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007910:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7ff ff7a 	bl	8007818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b21      	cmp	r3, #33	@ 0x21
 800793e:	d13e      	bne.n	80079be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007948:	d114      	bne.n	8007974 <UART_Transmit_IT+0x48>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d110      	bne.n	8007974 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007966:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	1c9a      	adds	r2, r3, #2
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	621a      	str	r2, [r3, #32]
 8007972:	e008      	b.n	8007986 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	1c59      	adds	r1, r3, #1
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6211      	str	r1, [r2, #32]
 800797e:	781a      	ldrb	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29b      	uxth	r3, r3
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4619      	mov	r1, r3
 8007994:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10f      	bne.n	80079ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e000      	b.n	80079c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079be:	2302      	movs	r3, #2
  }
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr

080079ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff ff02 	bl	80077f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b08c      	sub	sp, #48	@ 0x30
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b22      	cmp	r3, #34	@ 0x22
 8007a0c:	f040 80ae 	bne.w	8007b6c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a18:	d117      	bne.n	8007a4a <UART_Receive_IT+0x50>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d113      	bne.n	8007a4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	1c9a      	adds	r2, r3, #2
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a48:	e026      	b.n	8007a98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007a50:	2300      	movs	r3, #0
 8007a52:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5c:	d007      	beq.n	8007a6e <UART_Receive_IT+0x74>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <UART_Receive_IT+0x82>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	e008      	b.n	8007a8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d15d      	bne.n	8007b68 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0220 	bic.w	r2, r2, #32
 8007aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0201 	bic.w	r2, r2, #1
 8007ada:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d135      	bne.n	8007b5e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	613b      	str	r3, [r7, #16]
   return(result);
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f023 0310 	bic.w	r3, r3, #16
 8007b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b18:	623a      	str	r2, [r7, #32]
 8007b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	69f9      	ldr	r1, [r7, #28]
 8007b1e:	6a3a      	ldr	r2, [r7, #32]
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e5      	bne.n	8007af8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b10      	cmp	r3, #16
 8007b38:	d10a      	bne.n	8007b50 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff fe67 	bl	800782a <HAL_UARTEx_RxEventCallback>
 8007b5c:	e002      	b.n	8007b64 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fe51 	bl	8007806 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e002      	b.n	8007b6e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e000      	b.n	8007b6e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b6c:	2302      	movs	r3, #2
  }
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3730      	adds	r7, #48	@ 0x30
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007bb2:	f023 030c 	bic.w	r3, r3, #12
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6812      	ldr	r2, [r2, #0]
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a2c      	ldr	r2, [pc, #176]	@ (8007c8c <UART_SetConfig+0x114>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d103      	bne.n	8007be8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007be0:	f7fd fc2e 	bl	8005440 <HAL_RCC_GetPCLK2Freq>
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	e002      	b.n	8007bee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007be8:	f7fd fc16 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8007bec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009a      	lsls	r2, r3, #2
 8007bf8:	441a      	add	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c04:	4a22      	ldr	r2, [pc, #136]	@ (8007c90 <UART_SetConfig+0x118>)
 8007c06:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	0119      	lsls	r1, r3, #4
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009a      	lsls	r2, r3, #2
 8007c18:	441a      	add	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c24:	4b1a      	ldr	r3, [pc, #104]	@ (8007c90 <UART_SetConfig+0x118>)
 8007c26:	fba3 0302 	umull	r0, r3, r3, r2
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	2064      	movs	r0, #100	@ 0x64
 8007c2e:	fb00 f303 	mul.w	r3, r0, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	3332      	adds	r3, #50	@ 0x32
 8007c38:	4a15      	ldr	r2, [pc, #84]	@ (8007c90 <UART_SetConfig+0x118>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	095b      	lsrs	r3, r3, #5
 8007c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c44:	4419      	add	r1, r3
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009a      	lsls	r2, r3, #2
 8007c50:	441a      	add	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c90 <UART_SetConfig+0x118>)
 8007c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	2064      	movs	r0, #100	@ 0x64
 8007c66:	fb00 f303 	mul.w	r3, r0, r3
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	3332      	adds	r3, #50	@ 0x32
 8007c70:	4a07      	ldr	r2, [pc, #28]	@ (8007c90 <UART_SetConfig+0x118>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	f003 020f 	and.w	r2, r3, #15
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	440a      	add	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	40013800 	.word	0x40013800
 8007c90:	51eb851f 	.word	0x51eb851f

08007c94 <atoi>:
 8007c94:	220a      	movs	r2, #10
 8007c96:	2100      	movs	r1, #0
 8007c98:	f000 b87a 	b.w	8007d90 <strtol>

08007c9c <_strtol_l.isra.0>:
 8007c9c:	2b24      	cmp	r3, #36	@ 0x24
 8007c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca2:	4686      	mov	lr, r0
 8007ca4:	4690      	mov	r8, r2
 8007ca6:	d801      	bhi.n	8007cac <_strtol_l.isra.0+0x10>
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d106      	bne.n	8007cba <_strtol_l.isra.0+0x1e>
 8007cac:	f000 fa2a 	bl	8008104 <__errno>
 8007cb0:	2316      	movs	r3, #22
 8007cb2:	6003      	str	r3, [r0, #0]
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cba:	460d      	mov	r5, r1
 8007cbc:	4833      	ldr	r0, [pc, #204]	@ (8007d8c <_strtol_l.isra.0+0xf0>)
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cc4:	5d06      	ldrb	r6, [r0, r4]
 8007cc6:	f016 0608 	ands.w	r6, r6, #8
 8007cca:	d1f8      	bne.n	8007cbe <_strtol_l.isra.0+0x22>
 8007ccc:	2c2d      	cmp	r4, #45	@ 0x2d
 8007cce:	d110      	bne.n	8007cf2 <_strtol_l.isra.0+0x56>
 8007cd0:	2601      	movs	r6, #1
 8007cd2:	782c      	ldrb	r4, [r5, #0]
 8007cd4:	1c95      	adds	r5, r2, #2
 8007cd6:	f033 0210 	bics.w	r2, r3, #16
 8007cda:	d115      	bne.n	8007d08 <_strtol_l.isra.0+0x6c>
 8007cdc:	2c30      	cmp	r4, #48	@ 0x30
 8007cde:	d10d      	bne.n	8007cfc <_strtol_l.isra.0+0x60>
 8007ce0:	782a      	ldrb	r2, [r5, #0]
 8007ce2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ce6:	2a58      	cmp	r2, #88	@ 0x58
 8007ce8:	d108      	bne.n	8007cfc <_strtol_l.isra.0+0x60>
 8007cea:	786c      	ldrb	r4, [r5, #1]
 8007cec:	3502      	adds	r5, #2
 8007cee:	2310      	movs	r3, #16
 8007cf0:	e00a      	b.n	8007d08 <_strtol_l.isra.0+0x6c>
 8007cf2:	2c2b      	cmp	r4, #43	@ 0x2b
 8007cf4:	bf04      	itt	eq
 8007cf6:	782c      	ldrbeq	r4, [r5, #0]
 8007cf8:	1c95      	addeq	r5, r2, #2
 8007cfa:	e7ec      	b.n	8007cd6 <_strtol_l.isra.0+0x3a>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f6      	bne.n	8007cee <_strtol_l.isra.0+0x52>
 8007d00:	2c30      	cmp	r4, #48	@ 0x30
 8007d02:	bf14      	ite	ne
 8007d04:	230a      	movne	r3, #10
 8007d06:	2308      	moveq	r3, #8
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d12:	fbbc f9f3 	udiv	r9, ip, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d20:	2f09      	cmp	r7, #9
 8007d22:	d80f      	bhi.n	8007d44 <_strtol_l.isra.0+0xa8>
 8007d24:	463c      	mov	r4, r7
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	dd1b      	ble.n	8007d62 <_strtol_l.isra.0+0xc6>
 8007d2a:	1c57      	adds	r7, r2, #1
 8007d2c:	d007      	beq.n	8007d3e <_strtol_l.isra.0+0xa2>
 8007d2e:	4581      	cmp	r9, r0
 8007d30:	d314      	bcc.n	8007d5c <_strtol_l.isra.0+0xc0>
 8007d32:	d101      	bne.n	8007d38 <_strtol_l.isra.0+0x9c>
 8007d34:	45a2      	cmp	sl, r4
 8007d36:	db11      	blt.n	8007d5c <_strtol_l.isra.0+0xc0>
 8007d38:	2201      	movs	r2, #1
 8007d3a:	fb00 4003 	mla	r0, r0, r3, r4
 8007d3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d42:	e7eb      	b.n	8007d1c <_strtol_l.isra.0+0x80>
 8007d44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d48:	2f19      	cmp	r7, #25
 8007d4a:	d801      	bhi.n	8007d50 <_strtol_l.isra.0+0xb4>
 8007d4c:	3c37      	subs	r4, #55	@ 0x37
 8007d4e:	e7ea      	b.n	8007d26 <_strtol_l.isra.0+0x8a>
 8007d50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007d54:	2f19      	cmp	r7, #25
 8007d56:	d804      	bhi.n	8007d62 <_strtol_l.isra.0+0xc6>
 8007d58:	3c57      	subs	r4, #87	@ 0x57
 8007d5a:	e7e4      	b.n	8007d26 <_strtol_l.isra.0+0x8a>
 8007d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d60:	e7ed      	b.n	8007d3e <_strtol_l.isra.0+0xa2>
 8007d62:	1c53      	adds	r3, r2, #1
 8007d64:	d108      	bne.n	8007d78 <_strtol_l.isra.0+0xdc>
 8007d66:	2322      	movs	r3, #34	@ 0x22
 8007d68:	4660      	mov	r0, ip
 8007d6a:	f8ce 3000 	str.w	r3, [lr]
 8007d6e:	f1b8 0f00 	cmp.w	r8, #0
 8007d72:	d0a0      	beq.n	8007cb6 <_strtol_l.isra.0+0x1a>
 8007d74:	1e69      	subs	r1, r5, #1
 8007d76:	e006      	b.n	8007d86 <_strtol_l.isra.0+0xea>
 8007d78:	b106      	cbz	r6, 8007d7c <_strtol_l.isra.0+0xe0>
 8007d7a:	4240      	negs	r0, r0
 8007d7c:	f1b8 0f00 	cmp.w	r8, #0
 8007d80:	d099      	beq.n	8007cb6 <_strtol_l.isra.0+0x1a>
 8007d82:	2a00      	cmp	r2, #0
 8007d84:	d1f6      	bne.n	8007d74 <_strtol_l.isra.0+0xd8>
 8007d86:	f8c8 1000 	str.w	r1, [r8]
 8007d8a:	e794      	b.n	8007cb6 <_strtol_l.isra.0+0x1a>
 8007d8c:	08008f63 	.word	0x08008f63

08007d90 <strtol>:
 8007d90:	4613      	mov	r3, r2
 8007d92:	460a      	mov	r2, r1
 8007d94:	4601      	mov	r1, r0
 8007d96:	4802      	ldr	r0, [pc, #8]	@ (8007da0 <strtol+0x10>)
 8007d98:	6800      	ldr	r0, [r0, #0]
 8007d9a:	f7ff bf7f 	b.w	8007c9c <_strtol_l.isra.0>
 8007d9e:	bf00      	nop
 8007da0:	20000050 	.word	0x20000050

08007da4 <std>:
 8007da4:	2300      	movs	r3, #0
 8007da6:	b510      	push	{r4, lr}
 8007da8:	4604      	mov	r4, r0
 8007daa:	e9c0 3300 	strd	r3, r3, [r0]
 8007dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007db2:	6083      	str	r3, [r0, #8]
 8007db4:	8181      	strh	r1, [r0, #12]
 8007db6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007db8:	81c2      	strh	r2, [r0, #14]
 8007dba:	6183      	str	r3, [r0, #24]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	305c      	adds	r0, #92	@ 0x5c
 8007dc2:	f000 f8f4 	bl	8007fae <memset>
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dfc <std+0x58>)
 8007dc8:	6224      	str	r4, [r4, #32]
 8007dca:	6263      	str	r3, [r4, #36]	@ 0x24
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <std+0x5c>)
 8007dce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e04 <std+0x60>)
 8007dd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <std+0x64>)
 8007dd6:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007e0c <std+0x68>)
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	d006      	beq.n	8007dec <std+0x48>
 8007dde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007de2:	4294      	cmp	r4, r2
 8007de4:	d002      	beq.n	8007dec <std+0x48>
 8007de6:	33d0      	adds	r3, #208	@ 0xd0
 8007de8:	429c      	cmp	r4, r3
 8007dea:	d105      	bne.n	8007df8 <std+0x54>
 8007dec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	f000 b9b0 	b.w	8008158 <__retarget_lock_init_recursive>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	bf00      	nop
 8007dfc:	08007f29 	.word	0x08007f29
 8007e00:	08007f4b 	.word	0x08007f4b
 8007e04:	08007f83 	.word	0x08007f83
 8007e08:	08007fa7 	.word	0x08007fa7
 8007e0c:	200003c8 	.word	0x200003c8

08007e10 <stdio_exit_handler>:
 8007e10:	4a02      	ldr	r2, [pc, #8]	@ (8007e1c <stdio_exit_handler+0xc>)
 8007e12:	4903      	ldr	r1, [pc, #12]	@ (8007e20 <stdio_exit_handler+0x10>)
 8007e14:	4803      	ldr	r0, [pc, #12]	@ (8007e24 <stdio_exit_handler+0x14>)
 8007e16:	f000 b869 	b.w	8007eec <_fwalk_sglue>
 8007e1a:	bf00      	nop
 8007e1c:	20000044 	.word	0x20000044
 8007e20:	080084b5 	.word	0x080084b5
 8007e24:	20000054 	.word	0x20000054

08007e28 <cleanup_stdio>:
 8007e28:	6841      	ldr	r1, [r0, #4]
 8007e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e5c <cleanup_stdio+0x34>)
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	4299      	cmp	r1, r3
 8007e30:	4604      	mov	r4, r0
 8007e32:	d001      	beq.n	8007e38 <cleanup_stdio+0x10>
 8007e34:	f000 fb3e 	bl	80084b4 <_fflush_r>
 8007e38:	68a1      	ldr	r1, [r4, #8]
 8007e3a:	4b09      	ldr	r3, [pc, #36]	@ (8007e60 <cleanup_stdio+0x38>)
 8007e3c:	4299      	cmp	r1, r3
 8007e3e:	d002      	beq.n	8007e46 <cleanup_stdio+0x1e>
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fb37 	bl	80084b4 <_fflush_r>
 8007e46:	68e1      	ldr	r1, [r4, #12]
 8007e48:	4b06      	ldr	r3, [pc, #24]	@ (8007e64 <cleanup_stdio+0x3c>)
 8007e4a:	4299      	cmp	r1, r3
 8007e4c:	d004      	beq.n	8007e58 <cleanup_stdio+0x30>
 8007e4e:	4620      	mov	r0, r4
 8007e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e54:	f000 bb2e 	b.w	80084b4 <_fflush_r>
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200003c8 	.word	0x200003c8
 8007e60:	20000430 	.word	0x20000430
 8007e64:	20000498 	.word	0x20000498

08007e68 <global_stdio_init.part.0>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e98 <global_stdio_init.part.0+0x30>)
 8007e6c:	4c0b      	ldr	r4, [pc, #44]	@ (8007e9c <global_stdio_init.part.0+0x34>)
 8007e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea0 <global_stdio_init.part.0+0x38>)
 8007e70:	4620      	mov	r0, r4
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	2104      	movs	r1, #4
 8007e76:	2200      	movs	r2, #0
 8007e78:	f7ff ff94 	bl	8007da4 <std>
 8007e7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e80:	2201      	movs	r2, #1
 8007e82:	2109      	movs	r1, #9
 8007e84:	f7ff ff8e 	bl	8007da4 <std>
 8007e88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e92:	2112      	movs	r1, #18
 8007e94:	f7ff bf86 	b.w	8007da4 <std>
 8007e98:	20000500 	.word	0x20000500
 8007e9c:	200003c8 	.word	0x200003c8
 8007ea0:	08007e11 	.word	0x08007e11

08007ea4 <__sfp_lock_acquire>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	@ (8007eac <__sfp_lock_acquire+0x8>)
 8007ea6:	f000 b958 	b.w	800815a <__retarget_lock_acquire_recursive>
 8007eaa:	bf00      	nop
 8007eac:	20000509 	.word	0x20000509

08007eb0 <__sfp_lock_release>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	@ (8007eb8 <__sfp_lock_release+0x8>)
 8007eb2:	f000 b953 	b.w	800815c <__retarget_lock_release_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	20000509 	.word	0x20000509

08007ebc <__sinit>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	f7ff fff0 	bl	8007ea4 <__sfp_lock_acquire>
 8007ec4:	6a23      	ldr	r3, [r4, #32]
 8007ec6:	b11b      	cbz	r3, 8007ed0 <__sinit+0x14>
 8007ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ecc:	f7ff bff0 	b.w	8007eb0 <__sfp_lock_release>
 8007ed0:	4b04      	ldr	r3, [pc, #16]	@ (8007ee4 <__sinit+0x28>)
 8007ed2:	6223      	str	r3, [r4, #32]
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <__sinit+0x2c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f5      	bne.n	8007ec8 <__sinit+0xc>
 8007edc:	f7ff ffc4 	bl	8007e68 <global_stdio_init.part.0>
 8007ee0:	e7f2      	b.n	8007ec8 <__sinit+0xc>
 8007ee2:	bf00      	nop
 8007ee4:	08007e29 	.word	0x08007e29
 8007ee8:	20000500 	.word	0x20000500

08007eec <_fwalk_sglue>:
 8007eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	4607      	mov	r7, r0
 8007ef2:	4688      	mov	r8, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007efc:	f1b9 0901 	subs.w	r9, r9, #1
 8007f00:	d505      	bpl.n	8007f0e <_fwalk_sglue+0x22>
 8007f02:	6824      	ldr	r4, [r4, #0]
 8007f04:	2c00      	cmp	r4, #0
 8007f06:	d1f7      	bne.n	8007ef8 <_fwalk_sglue+0xc>
 8007f08:	4630      	mov	r0, r6
 8007f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d907      	bls.n	8007f24 <_fwalk_sglue+0x38>
 8007f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	d003      	beq.n	8007f24 <_fwalk_sglue+0x38>
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c0      	blx	r8
 8007f22:	4306      	orrs	r6, r0
 8007f24:	3568      	adds	r5, #104	@ 0x68
 8007f26:	e7e9      	b.n	8007efc <_fwalk_sglue+0x10>

08007f28 <__sread>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f30:	f000 f8c4 	bl	80080bc <_read_r>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	bfab      	itete	ge
 8007f38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f3c:	181b      	addge	r3, r3, r0
 8007f3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f42:	bfac      	ite	ge
 8007f44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f46:	81a3      	strhlt	r3, [r4, #12]
 8007f48:	bd10      	pop	{r4, pc}

08007f4a <__swrite>:
 8007f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4e:	461f      	mov	r7, r3
 8007f50:	898b      	ldrh	r3, [r1, #12]
 8007f52:	4605      	mov	r5, r0
 8007f54:	05db      	lsls	r3, r3, #23
 8007f56:	460c      	mov	r4, r1
 8007f58:	4616      	mov	r6, r2
 8007f5a:	d505      	bpl.n	8007f68 <__swrite+0x1e>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f64:	f000 f898 	bl	8008098 <_lseek_r>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	4628      	mov	r0, r5
 8007f74:	463b      	mov	r3, r7
 8007f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7e:	f000 b8af 	b.w	80080e0 <_write_r>

08007f82 <__sseek>:
 8007f82:	b510      	push	{r4, lr}
 8007f84:	460c      	mov	r4, r1
 8007f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8a:	f000 f885 	bl	8008098 <_lseek_r>
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	bf15      	itete	ne
 8007f94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f9e:	81a3      	strheq	r3, [r4, #12]
 8007fa0:	bf18      	it	ne
 8007fa2:	81a3      	strhne	r3, [r4, #12]
 8007fa4:	bd10      	pop	{r4, pc}

08007fa6 <__sclose>:
 8007fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007faa:	f000 b865 	b.w	8008078 <_close_r>

08007fae <memset>:
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4402      	add	r2, r0
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d100      	bne.n	8007fb8 <memset+0xa>
 8007fb6:	4770      	bx	lr
 8007fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fbc:	e7f9      	b.n	8007fb2 <memset+0x4>
	...

08007fc0 <strtok>:
 8007fc0:	4b16      	ldr	r3, [pc, #88]	@ (800801c <strtok+0x5c>)
 8007fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc6:	681f      	ldr	r7, [r3, #0]
 8007fc8:	4605      	mov	r5, r0
 8007fca:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007fcc:	460e      	mov	r6, r1
 8007fce:	b9ec      	cbnz	r4, 800800c <strtok+0x4c>
 8007fd0:	2050      	movs	r0, #80	@ 0x50
 8007fd2:	f000 f939 	bl	8008248 <malloc>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6478      	str	r0, [r7, #68]	@ 0x44
 8007fda:	b920      	cbnz	r0, 8007fe6 <strtok+0x26>
 8007fdc:	215b      	movs	r1, #91	@ 0x5b
 8007fde:	4b10      	ldr	r3, [pc, #64]	@ (8008020 <strtok+0x60>)
 8007fe0:	4810      	ldr	r0, [pc, #64]	@ (8008024 <strtok+0x64>)
 8007fe2:	f000 f8cb 	bl	800817c <__assert_func>
 8007fe6:	e9c0 4400 	strd	r4, r4, [r0]
 8007fea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007fee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007ff2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007ff6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007ffa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007ffe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008002:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008006:	6184      	str	r4, [r0, #24]
 8008008:	7704      	strb	r4, [r0, #28]
 800800a:	6244      	str	r4, [r0, #36]	@ 0x24
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008012:	2301      	movs	r3, #1
 8008014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008018:	f000 b806 	b.w	8008028 <__strtok_r>
 800801c:	20000050 	.word	0x20000050
 8008020:	08009063 	.word	0x08009063
 8008024:	0800907a 	.word	0x0800907a

08008028 <__strtok_r>:
 8008028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800802a:	4604      	mov	r4, r0
 800802c:	b908      	cbnz	r0, 8008032 <__strtok_r+0xa>
 800802e:	6814      	ldr	r4, [r2, #0]
 8008030:	b144      	cbz	r4, 8008044 <__strtok_r+0x1c>
 8008032:	460f      	mov	r7, r1
 8008034:	4620      	mov	r0, r4
 8008036:	f814 5b01 	ldrb.w	r5, [r4], #1
 800803a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800803e:	b91e      	cbnz	r6, 8008048 <__strtok_r+0x20>
 8008040:	b965      	cbnz	r5, 800805c <__strtok_r+0x34>
 8008042:	6015      	str	r5, [r2, #0]
 8008044:	2000      	movs	r0, #0
 8008046:	e005      	b.n	8008054 <__strtok_r+0x2c>
 8008048:	42b5      	cmp	r5, r6
 800804a:	d1f6      	bne.n	800803a <__strtok_r+0x12>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1f0      	bne.n	8008032 <__strtok_r+0xa>
 8008050:	6014      	str	r4, [r2, #0]
 8008052:	7003      	strb	r3, [r0, #0]
 8008054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008056:	461c      	mov	r4, r3
 8008058:	e00c      	b.n	8008074 <__strtok_r+0x4c>
 800805a:	b91d      	cbnz	r5, 8008064 <__strtok_r+0x3c>
 800805c:	460e      	mov	r6, r1
 800805e:	4627      	mov	r7, r4
 8008060:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008064:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008068:	42ab      	cmp	r3, r5
 800806a:	d1f6      	bne.n	800805a <__strtok_r+0x32>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0f2      	beq.n	8008056 <__strtok_r+0x2e>
 8008070:	2300      	movs	r3, #0
 8008072:	703b      	strb	r3, [r7, #0]
 8008074:	6014      	str	r4, [r2, #0]
 8008076:	e7ed      	b.n	8008054 <__strtok_r+0x2c>

08008078 <_close_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	2300      	movs	r3, #0
 800807c:	4d05      	ldr	r5, [pc, #20]	@ (8008094 <_close_r+0x1c>)
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7f9 ff09 	bl	8001e9a <_close>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_close_r+0x1a>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_close_r+0x1a>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20000504 	.word	0x20000504

08008098 <_lseek_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	2200      	movs	r2, #0
 80080a2:	4d05      	ldr	r5, [pc, #20]	@ (80080b8 <_lseek_r+0x20>)
 80080a4:	602a      	str	r2, [r5, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f7f9 ff1b 	bl	8001ee2 <_lseek>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_lseek_r+0x1e>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_lseek_r+0x1e>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20000504 	.word	0x20000504

080080bc <_read_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	4611      	mov	r1, r2
 80080c4:	2200      	movs	r2, #0
 80080c6:	4d05      	ldr	r5, [pc, #20]	@ (80080dc <_read_r+0x20>)
 80080c8:	602a      	str	r2, [r5, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f7f9 feac 	bl	8001e28 <_read>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_read_r+0x1e>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_read_r+0x1e>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	20000504 	.word	0x20000504

080080e0 <_write_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	2200      	movs	r2, #0
 80080ea:	4d05      	ldr	r5, [pc, #20]	@ (8008100 <_write_r+0x20>)
 80080ec:	602a      	str	r2, [r5, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	f7f9 feb7 	bl	8001e62 <_write>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_write_r+0x1e>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_write_r+0x1e>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	20000504 	.word	0x20000504

08008104 <__errno>:
 8008104:	4b01      	ldr	r3, [pc, #4]	@ (800810c <__errno+0x8>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000050 	.word	0x20000050

08008110 <__libc_init_array>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	2600      	movs	r6, #0
 8008114:	4d0c      	ldr	r5, [pc, #48]	@ (8008148 <__libc_init_array+0x38>)
 8008116:	4c0d      	ldr	r4, [pc, #52]	@ (800814c <__libc_init_array+0x3c>)
 8008118:	1b64      	subs	r4, r4, r5
 800811a:	10a4      	asrs	r4, r4, #2
 800811c:	42a6      	cmp	r6, r4
 800811e:	d109      	bne.n	8008134 <__libc_init_array+0x24>
 8008120:	f000 fedc 	bl	8008edc <_init>
 8008124:	2600      	movs	r6, #0
 8008126:	4d0a      	ldr	r5, [pc, #40]	@ (8008150 <__libc_init_array+0x40>)
 8008128:	4c0a      	ldr	r4, [pc, #40]	@ (8008154 <__libc_init_array+0x44>)
 800812a:	1b64      	subs	r4, r4, r5
 800812c:	10a4      	asrs	r4, r4, #2
 800812e:	42a6      	cmp	r6, r4
 8008130:	d105      	bne.n	800813e <__libc_init_array+0x2e>
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	f855 3b04 	ldr.w	r3, [r5], #4
 8008138:	4798      	blx	r3
 800813a:	3601      	adds	r6, #1
 800813c:	e7ee      	b.n	800811c <__libc_init_array+0xc>
 800813e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008142:	4798      	blx	r3
 8008144:	3601      	adds	r6, #1
 8008146:	e7f2      	b.n	800812e <__libc_init_array+0x1e>
 8008148:	08009144 	.word	0x08009144
 800814c:	08009144 	.word	0x08009144
 8008150:	08009144 	.word	0x08009144
 8008154:	08009148 	.word	0x08009148

08008158 <__retarget_lock_init_recursive>:
 8008158:	4770      	bx	lr

0800815a <__retarget_lock_acquire_recursive>:
 800815a:	4770      	bx	lr

0800815c <__retarget_lock_release_recursive>:
 800815c:	4770      	bx	lr

0800815e <memcpy>:
 800815e:	440a      	add	r2, r1
 8008160:	4291      	cmp	r1, r2
 8008162:	f100 33ff 	add.w	r3, r0, #4294967295
 8008166:	d100      	bne.n	800816a <memcpy+0xc>
 8008168:	4770      	bx	lr
 800816a:	b510      	push	{r4, lr}
 800816c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008170:	4291      	cmp	r1, r2
 8008172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008176:	d1f9      	bne.n	800816c <memcpy+0xe>
 8008178:	bd10      	pop	{r4, pc}
	...

0800817c <__assert_func>:
 800817c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800817e:	4614      	mov	r4, r2
 8008180:	461a      	mov	r2, r3
 8008182:	4b09      	ldr	r3, [pc, #36]	@ (80081a8 <__assert_func+0x2c>)
 8008184:	4605      	mov	r5, r0
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68d8      	ldr	r0, [r3, #12]
 800818a:	b14c      	cbz	r4, 80081a0 <__assert_func+0x24>
 800818c:	4b07      	ldr	r3, [pc, #28]	@ (80081ac <__assert_func+0x30>)
 800818e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008192:	9100      	str	r1, [sp, #0]
 8008194:	462b      	mov	r3, r5
 8008196:	4906      	ldr	r1, [pc, #24]	@ (80081b0 <__assert_func+0x34>)
 8008198:	f000 f9b4 	bl	8008504 <fiprintf>
 800819c:	f000 f9d4 	bl	8008548 <abort>
 80081a0:	4b04      	ldr	r3, [pc, #16]	@ (80081b4 <__assert_func+0x38>)
 80081a2:	461c      	mov	r4, r3
 80081a4:	e7f3      	b.n	800818e <__assert_func+0x12>
 80081a6:	bf00      	nop
 80081a8:	20000050 	.word	0x20000050
 80081ac:	080090d4 	.word	0x080090d4
 80081b0:	080090e1 	.word	0x080090e1
 80081b4:	0800910f 	.word	0x0800910f

080081b8 <_free_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4605      	mov	r5, r0
 80081bc:	2900      	cmp	r1, #0
 80081be:	d040      	beq.n	8008242 <_free_r+0x8a>
 80081c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c4:	1f0c      	subs	r4, r1, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	18e4      	addlt	r4, r4, r3
 80081cc:	f000 f8e6 	bl	800839c <__malloc_lock>
 80081d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008244 <_free_r+0x8c>)
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	b933      	cbnz	r3, 80081e4 <_free_r+0x2c>
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	6014      	str	r4, [r2, #0]
 80081da:	4628      	mov	r0, r5
 80081dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e0:	f000 b8e2 	b.w	80083a8 <__malloc_unlock>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d908      	bls.n	80081fa <_free_r+0x42>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	1821      	adds	r1, r4, r0
 80081ec:	428b      	cmp	r3, r1
 80081ee:	bf01      	itttt	eq
 80081f0:	6819      	ldreq	r1, [r3, #0]
 80081f2:	685b      	ldreq	r3, [r3, #4]
 80081f4:	1809      	addeq	r1, r1, r0
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	e7ed      	b.n	80081d6 <_free_r+0x1e>
 80081fa:	461a      	mov	r2, r3
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b10b      	cbz	r3, 8008204 <_free_r+0x4c>
 8008200:	42a3      	cmp	r3, r4
 8008202:	d9fa      	bls.n	80081fa <_free_r+0x42>
 8008204:	6811      	ldr	r1, [r2, #0]
 8008206:	1850      	adds	r0, r2, r1
 8008208:	42a0      	cmp	r0, r4
 800820a:	d10b      	bne.n	8008224 <_free_r+0x6c>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	4401      	add	r1, r0
 8008210:	1850      	adds	r0, r2, r1
 8008212:	4283      	cmp	r3, r0
 8008214:	6011      	str	r1, [r2, #0]
 8008216:	d1e0      	bne.n	80081da <_free_r+0x22>
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	4408      	add	r0, r1
 800821e:	6010      	str	r0, [r2, #0]
 8008220:	6053      	str	r3, [r2, #4]
 8008222:	e7da      	b.n	80081da <_free_r+0x22>
 8008224:	d902      	bls.n	800822c <_free_r+0x74>
 8008226:	230c      	movs	r3, #12
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	e7d6      	b.n	80081da <_free_r+0x22>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	1821      	adds	r1, r4, r0
 8008230:	428b      	cmp	r3, r1
 8008232:	bf01      	itttt	eq
 8008234:	6819      	ldreq	r1, [r3, #0]
 8008236:	685b      	ldreq	r3, [r3, #4]
 8008238:	1809      	addeq	r1, r1, r0
 800823a:	6021      	streq	r1, [r4, #0]
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	6054      	str	r4, [r2, #4]
 8008240:	e7cb      	b.n	80081da <_free_r+0x22>
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20000510 	.word	0x20000510

08008248 <malloc>:
 8008248:	4b02      	ldr	r3, [pc, #8]	@ (8008254 <malloc+0xc>)
 800824a:	4601      	mov	r1, r0
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	f000 b825 	b.w	800829c <_malloc_r>
 8008252:	bf00      	nop
 8008254:	20000050 	.word	0x20000050

08008258 <sbrk_aligned>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4e0f      	ldr	r6, [pc, #60]	@ (8008298 <sbrk_aligned+0x40>)
 800825c:	460c      	mov	r4, r1
 800825e:	6831      	ldr	r1, [r6, #0]
 8008260:	4605      	mov	r5, r0
 8008262:	b911      	cbnz	r1, 800826a <sbrk_aligned+0x12>
 8008264:	f000 f960 	bl	8008528 <_sbrk_r>
 8008268:	6030      	str	r0, [r6, #0]
 800826a:	4621      	mov	r1, r4
 800826c:	4628      	mov	r0, r5
 800826e:	f000 f95b 	bl	8008528 <_sbrk_r>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	d103      	bne.n	800827e <sbrk_aligned+0x26>
 8008276:	f04f 34ff 	mov.w	r4, #4294967295
 800827a:	4620      	mov	r0, r4
 800827c:	bd70      	pop	{r4, r5, r6, pc}
 800827e:	1cc4      	adds	r4, r0, #3
 8008280:	f024 0403 	bic.w	r4, r4, #3
 8008284:	42a0      	cmp	r0, r4
 8008286:	d0f8      	beq.n	800827a <sbrk_aligned+0x22>
 8008288:	1a21      	subs	r1, r4, r0
 800828a:	4628      	mov	r0, r5
 800828c:	f000 f94c 	bl	8008528 <_sbrk_r>
 8008290:	3001      	adds	r0, #1
 8008292:	d1f2      	bne.n	800827a <sbrk_aligned+0x22>
 8008294:	e7ef      	b.n	8008276 <sbrk_aligned+0x1e>
 8008296:	bf00      	nop
 8008298:	2000050c 	.word	0x2000050c

0800829c <_malloc_r>:
 800829c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a0:	1ccd      	adds	r5, r1, #3
 80082a2:	f025 0503 	bic.w	r5, r5, #3
 80082a6:	3508      	adds	r5, #8
 80082a8:	2d0c      	cmp	r5, #12
 80082aa:	bf38      	it	cc
 80082ac:	250c      	movcc	r5, #12
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	4606      	mov	r6, r0
 80082b2:	db01      	blt.n	80082b8 <_malloc_r+0x1c>
 80082b4:	42a9      	cmp	r1, r5
 80082b6:	d904      	bls.n	80082c2 <_malloc_r+0x26>
 80082b8:	230c      	movs	r3, #12
 80082ba:	6033      	str	r3, [r6, #0]
 80082bc:	2000      	movs	r0, #0
 80082be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008398 <_malloc_r+0xfc>
 80082c6:	f000 f869 	bl	800839c <__malloc_lock>
 80082ca:	f8d8 3000 	ldr.w	r3, [r8]
 80082ce:	461c      	mov	r4, r3
 80082d0:	bb44      	cbnz	r4, 8008324 <_malloc_r+0x88>
 80082d2:	4629      	mov	r1, r5
 80082d4:	4630      	mov	r0, r6
 80082d6:	f7ff ffbf 	bl	8008258 <sbrk_aligned>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	4604      	mov	r4, r0
 80082de:	d158      	bne.n	8008392 <_malloc_r+0xf6>
 80082e0:	f8d8 4000 	ldr.w	r4, [r8]
 80082e4:	4627      	mov	r7, r4
 80082e6:	2f00      	cmp	r7, #0
 80082e8:	d143      	bne.n	8008372 <_malloc_r+0xd6>
 80082ea:	2c00      	cmp	r4, #0
 80082ec:	d04b      	beq.n	8008386 <_malloc_r+0xea>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	4639      	mov	r1, r7
 80082f2:	4630      	mov	r0, r6
 80082f4:	eb04 0903 	add.w	r9, r4, r3
 80082f8:	f000 f916 	bl	8008528 <_sbrk_r>
 80082fc:	4581      	cmp	r9, r0
 80082fe:	d142      	bne.n	8008386 <_malloc_r+0xea>
 8008300:	6821      	ldr	r1, [r4, #0]
 8008302:	4630      	mov	r0, r6
 8008304:	1a6d      	subs	r5, r5, r1
 8008306:	4629      	mov	r1, r5
 8008308:	f7ff ffa6 	bl	8008258 <sbrk_aligned>
 800830c:	3001      	adds	r0, #1
 800830e:	d03a      	beq.n	8008386 <_malloc_r+0xea>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	442b      	add	r3, r5
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	f8d8 3000 	ldr.w	r3, [r8]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	bb62      	cbnz	r2, 8008378 <_malloc_r+0xdc>
 800831e:	f8c8 7000 	str.w	r7, [r8]
 8008322:	e00f      	b.n	8008344 <_malloc_r+0xa8>
 8008324:	6822      	ldr	r2, [r4, #0]
 8008326:	1b52      	subs	r2, r2, r5
 8008328:	d420      	bmi.n	800836c <_malloc_r+0xd0>
 800832a:	2a0b      	cmp	r2, #11
 800832c:	d917      	bls.n	800835e <_malloc_r+0xc2>
 800832e:	1961      	adds	r1, r4, r5
 8008330:	42a3      	cmp	r3, r4
 8008332:	6025      	str	r5, [r4, #0]
 8008334:	bf18      	it	ne
 8008336:	6059      	strne	r1, [r3, #4]
 8008338:	6863      	ldr	r3, [r4, #4]
 800833a:	bf08      	it	eq
 800833c:	f8c8 1000 	streq.w	r1, [r8]
 8008340:	5162      	str	r2, [r4, r5]
 8008342:	604b      	str	r3, [r1, #4]
 8008344:	4630      	mov	r0, r6
 8008346:	f000 f82f 	bl	80083a8 <__malloc_unlock>
 800834a:	f104 000b 	add.w	r0, r4, #11
 800834e:	1d23      	adds	r3, r4, #4
 8008350:	f020 0007 	bic.w	r0, r0, #7
 8008354:	1ac2      	subs	r2, r0, r3
 8008356:	bf1c      	itt	ne
 8008358:	1a1b      	subne	r3, r3, r0
 800835a:	50a3      	strne	r3, [r4, r2]
 800835c:	e7af      	b.n	80082be <_malloc_r+0x22>
 800835e:	6862      	ldr	r2, [r4, #4]
 8008360:	42a3      	cmp	r3, r4
 8008362:	bf0c      	ite	eq
 8008364:	f8c8 2000 	streq.w	r2, [r8]
 8008368:	605a      	strne	r2, [r3, #4]
 800836a:	e7eb      	b.n	8008344 <_malloc_r+0xa8>
 800836c:	4623      	mov	r3, r4
 800836e:	6864      	ldr	r4, [r4, #4]
 8008370:	e7ae      	b.n	80082d0 <_malloc_r+0x34>
 8008372:	463c      	mov	r4, r7
 8008374:	687f      	ldr	r7, [r7, #4]
 8008376:	e7b6      	b.n	80082e6 <_malloc_r+0x4a>
 8008378:	461a      	mov	r2, r3
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	42a3      	cmp	r3, r4
 800837e:	d1fb      	bne.n	8008378 <_malloc_r+0xdc>
 8008380:	2300      	movs	r3, #0
 8008382:	6053      	str	r3, [r2, #4]
 8008384:	e7de      	b.n	8008344 <_malloc_r+0xa8>
 8008386:	230c      	movs	r3, #12
 8008388:	4630      	mov	r0, r6
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	f000 f80c 	bl	80083a8 <__malloc_unlock>
 8008390:	e794      	b.n	80082bc <_malloc_r+0x20>
 8008392:	6005      	str	r5, [r0, #0]
 8008394:	e7d6      	b.n	8008344 <_malloc_r+0xa8>
 8008396:	bf00      	nop
 8008398:	20000510 	.word	0x20000510

0800839c <__malloc_lock>:
 800839c:	4801      	ldr	r0, [pc, #4]	@ (80083a4 <__malloc_lock+0x8>)
 800839e:	f7ff bedc 	b.w	800815a <__retarget_lock_acquire_recursive>
 80083a2:	bf00      	nop
 80083a4:	20000508 	.word	0x20000508

080083a8 <__malloc_unlock>:
 80083a8:	4801      	ldr	r0, [pc, #4]	@ (80083b0 <__malloc_unlock+0x8>)
 80083aa:	f7ff bed7 	b.w	800815c <__retarget_lock_release_recursive>
 80083ae:	bf00      	nop
 80083b0:	20000508 	.word	0x20000508

080083b4 <__sflush_r>:
 80083b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	0716      	lsls	r6, r2, #28
 80083bc:	4605      	mov	r5, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	d454      	bmi.n	800846c <__sflush_r+0xb8>
 80083c2:	684b      	ldr	r3, [r1, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dc02      	bgt.n	80083ce <__sflush_r+0x1a>
 80083c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dd48      	ble.n	8008460 <__sflush_r+0xac>
 80083ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	d045      	beq.n	8008460 <__sflush_r+0xac>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083da:	682f      	ldr	r7, [r5, #0]
 80083dc:	6a21      	ldr	r1, [r4, #32]
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	d030      	beq.n	8008444 <__sflush_r+0x90>
 80083e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	0759      	lsls	r1, r3, #29
 80083e8:	d505      	bpl.n	80083f6 <__sflush_r+0x42>
 80083ea:	6863      	ldr	r3, [r4, #4]
 80083ec:	1ad2      	subs	r2, r2, r3
 80083ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083f0:	b10b      	cbz	r3, 80083f6 <__sflush_r+0x42>
 80083f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083f4:	1ad2      	subs	r2, r2, r3
 80083f6:	2300      	movs	r3, #0
 80083f8:	4628      	mov	r0, r5
 80083fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083fc:	6a21      	ldr	r1, [r4, #32]
 80083fe:	47b0      	blx	r6
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	d106      	bne.n	8008414 <__sflush_r+0x60>
 8008406:	6829      	ldr	r1, [r5, #0]
 8008408:	291d      	cmp	r1, #29
 800840a:	d82b      	bhi.n	8008464 <__sflush_r+0xb0>
 800840c:	4a28      	ldr	r2, [pc, #160]	@ (80084b0 <__sflush_r+0xfc>)
 800840e:	40ca      	lsrs	r2, r1
 8008410:	07d6      	lsls	r6, r2, #31
 8008412:	d527      	bpl.n	8008464 <__sflush_r+0xb0>
 8008414:	2200      	movs	r2, #0
 8008416:	6062      	str	r2, [r4, #4]
 8008418:	6922      	ldr	r2, [r4, #16]
 800841a:	04d9      	lsls	r1, r3, #19
 800841c:	6022      	str	r2, [r4, #0]
 800841e:	d504      	bpl.n	800842a <__sflush_r+0x76>
 8008420:	1c42      	adds	r2, r0, #1
 8008422:	d101      	bne.n	8008428 <__sflush_r+0x74>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b903      	cbnz	r3, 800842a <__sflush_r+0x76>
 8008428:	6560      	str	r0, [r4, #84]	@ 0x54
 800842a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800842c:	602f      	str	r7, [r5, #0]
 800842e:	b1b9      	cbz	r1, 8008460 <__sflush_r+0xac>
 8008430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008434:	4299      	cmp	r1, r3
 8008436:	d002      	beq.n	800843e <__sflush_r+0x8a>
 8008438:	4628      	mov	r0, r5
 800843a:	f7ff febd 	bl	80081b8 <_free_r>
 800843e:	2300      	movs	r3, #0
 8008440:	6363      	str	r3, [r4, #52]	@ 0x34
 8008442:	e00d      	b.n	8008460 <__sflush_r+0xac>
 8008444:	2301      	movs	r3, #1
 8008446:	4628      	mov	r0, r5
 8008448:	47b0      	blx	r6
 800844a:	4602      	mov	r2, r0
 800844c:	1c50      	adds	r0, r2, #1
 800844e:	d1c9      	bne.n	80083e4 <__sflush_r+0x30>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0c6      	beq.n	80083e4 <__sflush_r+0x30>
 8008456:	2b1d      	cmp	r3, #29
 8008458:	d001      	beq.n	800845e <__sflush_r+0xaa>
 800845a:	2b16      	cmp	r3, #22
 800845c:	d11d      	bne.n	800849a <__sflush_r+0xe6>
 800845e:	602f      	str	r7, [r5, #0]
 8008460:	2000      	movs	r0, #0
 8008462:	e021      	b.n	80084a8 <__sflush_r+0xf4>
 8008464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008468:	b21b      	sxth	r3, r3
 800846a:	e01a      	b.n	80084a2 <__sflush_r+0xee>
 800846c:	690f      	ldr	r7, [r1, #16]
 800846e:	2f00      	cmp	r7, #0
 8008470:	d0f6      	beq.n	8008460 <__sflush_r+0xac>
 8008472:	0793      	lsls	r3, r2, #30
 8008474:	bf18      	it	ne
 8008476:	2300      	movne	r3, #0
 8008478:	680e      	ldr	r6, [r1, #0]
 800847a:	bf08      	it	eq
 800847c:	694b      	ldreq	r3, [r1, #20]
 800847e:	1bf6      	subs	r6, r6, r7
 8008480:	600f      	str	r7, [r1, #0]
 8008482:	608b      	str	r3, [r1, #8]
 8008484:	2e00      	cmp	r6, #0
 8008486:	ddeb      	ble.n	8008460 <__sflush_r+0xac>
 8008488:	4633      	mov	r3, r6
 800848a:	463a      	mov	r2, r7
 800848c:	4628      	mov	r0, r5
 800848e:	6a21      	ldr	r1, [r4, #32]
 8008490:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008494:	47e0      	blx	ip
 8008496:	2800      	cmp	r0, #0
 8008498:	dc07      	bgt.n	80084aa <__sflush_r+0xf6>
 800849a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084a2:	f04f 30ff 	mov.w	r0, #4294967295
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084aa:	4407      	add	r7, r0
 80084ac:	1a36      	subs	r6, r6, r0
 80084ae:	e7e9      	b.n	8008484 <__sflush_r+0xd0>
 80084b0:	20400001 	.word	0x20400001

080084b4 <_fflush_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	690b      	ldr	r3, [r1, #16]
 80084b8:	4605      	mov	r5, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	b913      	cbnz	r3, 80084c4 <_fflush_r+0x10>
 80084be:	2500      	movs	r5, #0
 80084c0:	4628      	mov	r0, r5
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	b118      	cbz	r0, 80084ce <_fflush_r+0x1a>
 80084c6:	6a03      	ldr	r3, [r0, #32]
 80084c8:	b90b      	cbnz	r3, 80084ce <_fflush_r+0x1a>
 80084ca:	f7ff fcf7 	bl	8007ebc <__sinit>
 80084ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f3      	beq.n	80084be <_fflush_r+0xa>
 80084d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084d8:	07d0      	lsls	r0, r2, #31
 80084da:	d404      	bmi.n	80084e6 <_fflush_r+0x32>
 80084dc:	0599      	lsls	r1, r3, #22
 80084de:	d402      	bmi.n	80084e6 <_fflush_r+0x32>
 80084e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084e2:	f7ff fe3a 	bl	800815a <__retarget_lock_acquire_recursive>
 80084e6:	4628      	mov	r0, r5
 80084e8:	4621      	mov	r1, r4
 80084ea:	f7ff ff63 	bl	80083b4 <__sflush_r>
 80084ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084f0:	4605      	mov	r5, r0
 80084f2:	07da      	lsls	r2, r3, #31
 80084f4:	d4e4      	bmi.n	80084c0 <_fflush_r+0xc>
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	059b      	lsls	r3, r3, #22
 80084fa:	d4e1      	bmi.n	80084c0 <_fflush_r+0xc>
 80084fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084fe:	f7ff fe2d 	bl	800815c <__retarget_lock_release_recursive>
 8008502:	e7dd      	b.n	80084c0 <_fflush_r+0xc>

08008504 <fiprintf>:
 8008504:	b40e      	push	{r1, r2, r3}
 8008506:	b503      	push	{r0, r1, lr}
 8008508:	4601      	mov	r1, r0
 800850a:	ab03      	add	r3, sp, #12
 800850c:	4805      	ldr	r0, [pc, #20]	@ (8008524 <fiprintf+0x20>)
 800850e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008512:	6800      	ldr	r0, [r0, #0]
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	f000 f845 	bl	80085a4 <_vfiprintf_r>
 800851a:	b002      	add	sp, #8
 800851c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008520:	b003      	add	sp, #12
 8008522:	4770      	bx	lr
 8008524:	20000050 	.word	0x20000050

08008528 <_sbrk_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	2300      	movs	r3, #0
 800852c:	4d05      	ldr	r5, [pc, #20]	@ (8008544 <_sbrk_r+0x1c>)
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	f7f9 fce2 	bl	8001efc <_sbrk>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_sbrk_r+0x1a>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_sbrk_r+0x1a>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	20000504 	.word	0x20000504

08008548 <abort>:
 8008548:	2006      	movs	r0, #6
 800854a:	b508      	push	{r3, lr}
 800854c:	f000 fb8e 	bl	8008c6c <raise>
 8008550:	2001      	movs	r0, #1
 8008552:	f7f9 fc5e 	bl	8001e12 <_exit>

08008556 <__sfputc_r>:
 8008556:	6893      	ldr	r3, [r2, #8]
 8008558:	b410      	push	{r4}
 800855a:	3b01      	subs	r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	6093      	str	r3, [r2, #8]
 8008560:	da07      	bge.n	8008572 <__sfputc_r+0x1c>
 8008562:	6994      	ldr	r4, [r2, #24]
 8008564:	42a3      	cmp	r3, r4
 8008566:	db01      	blt.n	800856c <__sfputc_r+0x16>
 8008568:	290a      	cmp	r1, #10
 800856a:	d102      	bne.n	8008572 <__sfputc_r+0x1c>
 800856c:	bc10      	pop	{r4}
 800856e:	f000 bac1 	b.w	8008af4 <__swbuf_r>
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	1c58      	adds	r0, r3, #1
 8008576:	6010      	str	r0, [r2, #0]
 8008578:	7019      	strb	r1, [r3, #0]
 800857a:	4608      	mov	r0, r1
 800857c:	bc10      	pop	{r4}
 800857e:	4770      	bx	lr

08008580 <__sfputs_r>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	4606      	mov	r6, r0
 8008584:	460f      	mov	r7, r1
 8008586:	4614      	mov	r4, r2
 8008588:	18d5      	adds	r5, r2, r3
 800858a:	42ac      	cmp	r4, r5
 800858c:	d101      	bne.n	8008592 <__sfputs_r+0x12>
 800858e:	2000      	movs	r0, #0
 8008590:	e007      	b.n	80085a2 <__sfputs_r+0x22>
 8008592:	463a      	mov	r2, r7
 8008594:	4630      	mov	r0, r6
 8008596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859a:	f7ff ffdc 	bl	8008556 <__sfputc_r>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	d1f3      	bne.n	800858a <__sfputs_r+0xa>
 80085a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085a4 <_vfiprintf_r>:
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	460d      	mov	r5, r1
 80085aa:	4614      	mov	r4, r2
 80085ac:	4698      	mov	r8, r3
 80085ae:	4606      	mov	r6, r0
 80085b0:	b09d      	sub	sp, #116	@ 0x74
 80085b2:	b118      	cbz	r0, 80085bc <_vfiprintf_r+0x18>
 80085b4:	6a03      	ldr	r3, [r0, #32]
 80085b6:	b90b      	cbnz	r3, 80085bc <_vfiprintf_r+0x18>
 80085b8:	f7ff fc80 	bl	8007ebc <__sinit>
 80085bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_vfiprintf_r+0x2a>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	059a      	lsls	r2, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_vfiprintf_r+0x2a>
 80085c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ca:	f7ff fdc6 	bl	800815a <__retarget_lock_acquire_recursive>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	071b      	lsls	r3, r3, #28
 80085d2:	d501      	bpl.n	80085d8 <_vfiprintf_r+0x34>
 80085d4:	692b      	ldr	r3, [r5, #16]
 80085d6:	b99b      	cbnz	r3, 8008600 <_vfiprintf_r+0x5c>
 80085d8:	4629      	mov	r1, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	f000 fac8 	bl	8008b70 <__swsetup_r>
 80085e0:	b170      	cbz	r0, 8008600 <_vfiprintf_r+0x5c>
 80085e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085e4:	07dc      	lsls	r4, r3, #31
 80085e6:	d504      	bpl.n	80085f2 <_vfiprintf_r+0x4e>
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	b01d      	add	sp, #116	@ 0x74
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	0598      	lsls	r0, r3, #22
 80085f6:	d4f7      	bmi.n	80085e8 <_vfiprintf_r+0x44>
 80085f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085fa:	f7ff fdaf 	bl	800815c <__retarget_lock_release_recursive>
 80085fe:	e7f3      	b.n	80085e8 <_vfiprintf_r+0x44>
 8008600:	2300      	movs	r3, #0
 8008602:	9309      	str	r3, [sp, #36]	@ 0x24
 8008604:	2320      	movs	r3, #32
 8008606:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800860a:	2330      	movs	r3, #48	@ 0x30
 800860c:	f04f 0901 	mov.w	r9, #1
 8008610:	f8cd 800c 	str.w	r8, [sp, #12]
 8008614:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80087c0 <_vfiprintf_r+0x21c>
 8008618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800861c:	4623      	mov	r3, r4
 800861e:	469a      	mov	sl, r3
 8008620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008624:	b10a      	cbz	r2, 800862a <_vfiprintf_r+0x86>
 8008626:	2a25      	cmp	r2, #37	@ 0x25
 8008628:	d1f9      	bne.n	800861e <_vfiprintf_r+0x7a>
 800862a:	ebba 0b04 	subs.w	fp, sl, r4
 800862e:	d00b      	beq.n	8008648 <_vfiprintf_r+0xa4>
 8008630:	465b      	mov	r3, fp
 8008632:	4622      	mov	r2, r4
 8008634:	4629      	mov	r1, r5
 8008636:	4630      	mov	r0, r6
 8008638:	f7ff ffa2 	bl	8008580 <__sfputs_r>
 800863c:	3001      	adds	r0, #1
 800863e:	f000 80a7 	beq.w	8008790 <_vfiprintf_r+0x1ec>
 8008642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008644:	445a      	add	r2, fp
 8008646:	9209      	str	r2, [sp, #36]	@ 0x24
 8008648:	f89a 3000 	ldrb.w	r3, [sl]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 809f 	beq.w	8008790 <_vfiprintf_r+0x1ec>
 8008652:	2300      	movs	r3, #0
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800865c:	f10a 0a01 	add.w	sl, sl, #1
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008668:	931a      	str	r3, [sp, #104]	@ 0x68
 800866a:	4654      	mov	r4, sl
 800866c:	2205      	movs	r2, #5
 800866e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008672:	4853      	ldr	r0, [pc, #332]	@ (80087c0 <_vfiprintf_r+0x21c>)
 8008674:	f000 fb16 	bl	8008ca4 <memchr>
 8008678:	9a04      	ldr	r2, [sp, #16]
 800867a:	b9d8      	cbnz	r0, 80086b4 <_vfiprintf_r+0x110>
 800867c:	06d1      	lsls	r1, r2, #27
 800867e:	bf44      	itt	mi
 8008680:	2320      	movmi	r3, #32
 8008682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008686:	0713      	lsls	r3, r2, #28
 8008688:	bf44      	itt	mi
 800868a:	232b      	movmi	r3, #43	@ 0x2b
 800868c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008690:	f89a 3000 	ldrb.w	r3, [sl]
 8008694:	2b2a      	cmp	r3, #42	@ 0x2a
 8008696:	d015      	beq.n	80086c4 <_vfiprintf_r+0x120>
 8008698:	4654      	mov	r4, sl
 800869a:	2000      	movs	r0, #0
 800869c:	f04f 0c0a 	mov.w	ip, #10
 80086a0:	9a07      	ldr	r2, [sp, #28]
 80086a2:	4621      	mov	r1, r4
 80086a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a8:	3b30      	subs	r3, #48	@ 0x30
 80086aa:	2b09      	cmp	r3, #9
 80086ac:	d94b      	bls.n	8008746 <_vfiprintf_r+0x1a2>
 80086ae:	b1b0      	cbz	r0, 80086de <_vfiprintf_r+0x13a>
 80086b0:	9207      	str	r2, [sp, #28]
 80086b2:	e014      	b.n	80086de <_vfiprintf_r+0x13a>
 80086b4:	eba0 0308 	sub.w	r3, r0, r8
 80086b8:	fa09 f303 	lsl.w	r3, r9, r3
 80086bc:	4313      	orrs	r3, r2
 80086be:	46a2      	mov	sl, r4
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	e7d2      	b.n	800866a <_vfiprintf_r+0xc6>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	1d19      	adds	r1, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	9103      	str	r1, [sp, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bfbb      	ittet	lt
 80086d0:	425b      	neglt	r3, r3
 80086d2:	f042 0202 	orrlt.w	r2, r2, #2
 80086d6:	9307      	strge	r3, [sp, #28]
 80086d8:	9307      	strlt	r3, [sp, #28]
 80086da:	bfb8      	it	lt
 80086dc:	9204      	strlt	r2, [sp, #16]
 80086de:	7823      	ldrb	r3, [r4, #0]
 80086e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80086e2:	d10a      	bne.n	80086fa <_vfiprintf_r+0x156>
 80086e4:	7863      	ldrb	r3, [r4, #1]
 80086e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086e8:	d132      	bne.n	8008750 <_vfiprintf_r+0x1ac>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	3402      	adds	r4, #2
 80086ee:	1d1a      	adds	r2, r3, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	9203      	str	r2, [sp, #12]
 80086f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80087c4 <_vfiprintf_r+0x220>
 80086fe:	2203      	movs	r2, #3
 8008700:	4650      	mov	r0, sl
 8008702:	7821      	ldrb	r1, [r4, #0]
 8008704:	f000 face 	bl	8008ca4 <memchr>
 8008708:	b138      	cbz	r0, 800871a <_vfiprintf_r+0x176>
 800870a:	2240      	movs	r2, #64	@ 0x40
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	eba0 000a 	sub.w	r0, r0, sl
 8008712:	4082      	lsls	r2, r0
 8008714:	4313      	orrs	r3, r2
 8008716:	3401      	adds	r4, #1
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871e:	2206      	movs	r2, #6
 8008720:	4829      	ldr	r0, [pc, #164]	@ (80087c8 <_vfiprintf_r+0x224>)
 8008722:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008726:	f000 fabd 	bl	8008ca4 <memchr>
 800872a:	2800      	cmp	r0, #0
 800872c:	d03f      	beq.n	80087ae <_vfiprintf_r+0x20a>
 800872e:	4b27      	ldr	r3, [pc, #156]	@ (80087cc <_vfiprintf_r+0x228>)
 8008730:	bb1b      	cbnz	r3, 800877a <_vfiprintf_r+0x1d6>
 8008732:	9b03      	ldr	r3, [sp, #12]
 8008734:	3307      	adds	r3, #7
 8008736:	f023 0307 	bic.w	r3, r3, #7
 800873a:	3308      	adds	r3, #8
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008740:	443b      	add	r3, r7
 8008742:	9309      	str	r3, [sp, #36]	@ 0x24
 8008744:	e76a      	b.n	800861c <_vfiprintf_r+0x78>
 8008746:	460c      	mov	r4, r1
 8008748:	2001      	movs	r0, #1
 800874a:	fb0c 3202 	mla	r2, ip, r2, r3
 800874e:	e7a8      	b.n	80086a2 <_vfiprintf_r+0xfe>
 8008750:	2300      	movs	r3, #0
 8008752:	f04f 0c0a 	mov.w	ip, #10
 8008756:	4619      	mov	r1, r3
 8008758:	3401      	adds	r4, #1
 800875a:	9305      	str	r3, [sp, #20]
 800875c:	4620      	mov	r0, r4
 800875e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008762:	3a30      	subs	r2, #48	@ 0x30
 8008764:	2a09      	cmp	r2, #9
 8008766:	d903      	bls.n	8008770 <_vfiprintf_r+0x1cc>
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0c6      	beq.n	80086fa <_vfiprintf_r+0x156>
 800876c:	9105      	str	r1, [sp, #20]
 800876e:	e7c4      	b.n	80086fa <_vfiprintf_r+0x156>
 8008770:	4604      	mov	r4, r0
 8008772:	2301      	movs	r3, #1
 8008774:	fb0c 2101 	mla	r1, ip, r1, r2
 8008778:	e7f0      	b.n	800875c <_vfiprintf_r+0x1b8>
 800877a:	ab03      	add	r3, sp, #12
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	462a      	mov	r2, r5
 8008780:	4630      	mov	r0, r6
 8008782:	4b13      	ldr	r3, [pc, #76]	@ (80087d0 <_vfiprintf_r+0x22c>)
 8008784:	a904      	add	r1, sp, #16
 8008786:	f3af 8000 	nop.w
 800878a:	4607      	mov	r7, r0
 800878c:	1c78      	adds	r0, r7, #1
 800878e:	d1d6      	bne.n	800873e <_vfiprintf_r+0x19a>
 8008790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008792:	07d9      	lsls	r1, r3, #31
 8008794:	d405      	bmi.n	80087a2 <_vfiprintf_r+0x1fe>
 8008796:	89ab      	ldrh	r3, [r5, #12]
 8008798:	059a      	lsls	r2, r3, #22
 800879a:	d402      	bmi.n	80087a2 <_vfiprintf_r+0x1fe>
 800879c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800879e:	f7ff fcdd 	bl	800815c <__retarget_lock_release_recursive>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	065b      	lsls	r3, r3, #25
 80087a6:	f53f af1f 	bmi.w	80085e8 <_vfiprintf_r+0x44>
 80087aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087ac:	e71e      	b.n	80085ec <_vfiprintf_r+0x48>
 80087ae:	ab03      	add	r3, sp, #12
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	462a      	mov	r2, r5
 80087b4:	4630      	mov	r0, r6
 80087b6:	4b06      	ldr	r3, [pc, #24]	@ (80087d0 <_vfiprintf_r+0x22c>)
 80087b8:	a904      	add	r1, sp, #16
 80087ba:	f000 f87d 	bl	80088b8 <_printf_i>
 80087be:	e7e4      	b.n	800878a <_vfiprintf_r+0x1e6>
 80087c0:	08009110 	.word	0x08009110
 80087c4:	08009116 	.word	0x08009116
 80087c8:	0800911a 	.word	0x0800911a
 80087cc:	00000000 	.word	0x00000000
 80087d0:	08008581 	.word	0x08008581

080087d4 <_printf_common>:
 80087d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d8:	4616      	mov	r6, r2
 80087da:	4698      	mov	r8, r3
 80087dc:	688a      	ldr	r2, [r1, #8]
 80087de:	690b      	ldr	r3, [r1, #16]
 80087e0:	4607      	mov	r7, r0
 80087e2:	4293      	cmp	r3, r2
 80087e4:	bfb8      	it	lt
 80087e6:	4613      	movlt	r3, r2
 80087e8:	6033      	str	r3, [r6, #0]
 80087ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087ee:	460c      	mov	r4, r1
 80087f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087f4:	b10a      	cbz	r2, 80087fa <_printf_common+0x26>
 80087f6:	3301      	adds	r3, #1
 80087f8:	6033      	str	r3, [r6, #0]
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	0699      	lsls	r1, r3, #26
 80087fe:	bf42      	ittt	mi
 8008800:	6833      	ldrmi	r3, [r6, #0]
 8008802:	3302      	addmi	r3, #2
 8008804:	6033      	strmi	r3, [r6, #0]
 8008806:	6825      	ldr	r5, [r4, #0]
 8008808:	f015 0506 	ands.w	r5, r5, #6
 800880c:	d106      	bne.n	800881c <_printf_common+0x48>
 800880e:	f104 0a19 	add.w	sl, r4, #25
 8008812:	68e3      	ldr	r3, [r4, #12]
 8008814:	6832      	ldr	r2, [r6, #0]
 8008816:	1a9b      	subs	r3, r3, r2
 8008818:	42ab      	cmp	r3, r5
 800881a:	dc2b      	bgt.n	8008874 <_printf_common+0xa0>
 800881c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008820:	6822      	ldr	r2, [r4, #0]
 8008822:	3b00      	subs	r3, #0
 8008824:	bf18      	it	ne
 8008826:	2301      	movne	r3, #1
 8008828:	0692      	lsls	r2, r2, #26
 800882a:	d430      	bmi.n	800888e <_printf_common+0xba>
 800882c:	4641      	mov	r1, r8
 800882e:	4638      	mov	r0, r7
 8008830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008834:	47c8      	blx	r9
 8008836:	3001      	adds	r0, #1
 8008838:	d023      	beq.n	8008882 <_printf_common+0xae>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	6922      	ldr	r2, [r4, #16]
 800883e:	f003 0306 	and.w	r3, r3, #6
 8008842:	2b04      	cmp	r3, #4
 8008844:	bf14      	ite	ne
 8008846:	2500      	movne	r5, #0
 8008848:	6833      	ldreq	r3, [r6, #0]
 800884a:	f04f 0600 	mov.w	r6, #0
 800884e:	bf08      	it	eq
 8008850:	68e5      	ldreq	r5, [r4, #12]
 8008852:	f104 041a 	add.w	r4, r4, #26
 8008856:	bf08      	it	eq
 8008858:	1aed      	subeq	r5, r5, r3
 800885a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800885e:	bf08      	it	eq
 8008860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008864:	4293      	cmp	r3, r2
 8008866:	bfc4      	itt	gt
 8008868:	1a9b      	subgt	r3, r3, r2
 800886a:	18ed      	addgt	r5, r5, r3
 800886c:	42b5      	cmp	r5, r6
 800886e:	d11a      	bne.n	80088a6 <_printf_common+0xd2>
 8008870:	2000      	movs	r0, #0
 8008872:	e008      	b.n	8008886 <_printf_common+0xb2>
 8008874:	2301      	movs	r3, #1
 8008876:	4652      	mov	r2, sl
 8008878:	4641      	mov	r1, r8
 800887a:	4638      	mov	r0, r7
 800887c:	47c8      	blx	r9
 800887e:	3001      	adds	r0, #1
 8008880:	d103      	bne.n	800888a <_printf_common+0xb6>
 8008882:	f04f 30ff 	mov.w	r0, #4294967295
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	3501      	adds	r5, #1
 800888c:	e7c1      	b.n	8008812 <_printf_common+0x3e>
 800888e:	2030      	movs	r0, #48	@ 0x30
 8008890:	18e1      	adds	r1, r4, r3
 8008892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800889c:	4422      	add	r2, r4
 800889e:	3302      	adds	r3, #2
 80088a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088a4:	e7c2      	b.n	800882c <_printf_common+0x58>
 80088a6:	2301      	movs	r3, #1
 80088a8:	4622      	mov	r2, r4
 80088aa:	4641      	mov	r1, r8
 80088ac:	4638      	mov	r0, r7
 80088ae:	47c8      	blx	r9
 80088b0:	3001      	adds	r0, #1
 80088b2:	d0e6      	beq.n	8008882 <_printf_common+0xae>
 80088b4:	3601      	adds	r6, #1
 80088b6:	e7d9      	b.n	800886c <_printf_common+0x98>

080088b8 <_printf_i>:
 80088b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	7e0f      	ldrb	r7, [r1, #24]
 80088be:	4691      	mov	r9, r2
 80088c0:	2f78      	cmp	r7, #120	@ 0x78
 80088c2:	4680      	mov	r8, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	469a      	mov	sl, r3
 80088c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088ce:	d807      	bhi.n	80088e0 <_printf_i+0x28>
 80088d0:	2f62      	cmp	r7, #98	@ 0x62
 80088d2:	d80a      	bhi.n	80088ea <_printf_i+0x32>
 80088d4:	2f00      	cmp	r7, #0
 80088d6:	f000 80d1 	beq.w	8008a7c <_printf_i+0x1c4>
 80088da:	2f58      	cmp	r7, #88	@ 0x58
 80088dc:	f000 80b8 	beq.w	8008a50 <_printf_i+0x198>
 80088e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088e8:	e03a      	b.n	8008960 <_printf_i+0xa8>
 80088ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088ee:	2b15      	cmp	r3, #21
 80088f0:	d8f6      	bhi.n	80088e0 <_printf_i+0x28>
 80088f2:	a101      	add	r1, pc, #4	@ (adr r1, 80088f8 <_printf_i+0x40>)
 80088f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088f8:	08008951 	.word	0x08008951
 80088fc:	08008965 	.word	0x08008965
 8008900:	080088e1 	.word	0x080088e1
 8008904:	080088e1 	.word	0x080088e1
 8008908:	080088e1 	.word	0x080088e1
 800890c:	080088e1 	.word	0x080088e1
 8008910:	08008965 	.word	0x08008965
 8008914:	080088e1 	.word	0x080088e1
 8008918:	080088e1 	.word	0x080088e1
 800891c:	080088e1 	.word	0x080088e1
 8008920:	080088e1 	.word	0x080088e1
 8008924:	08008a63 	.word	0x08008a63
 8008928:	0800898f 	.word	0x0800898f
 800892c:	08008a1d 	.word	0x08008a1d
 8008930:	080088e1 	.word	0x080088e1
 8008934:	080088e1 	.word	0x080088e1
 8008938:	08008a85 	.word	0x08008a85
 800893c:	080088e1 	.word	0x080088e1
 8008940:	0800898f 	.word	0x0800898f
 8008944:	080088e1 	.word	0x080088e1
 8008948:	080088e1 	.word	0x080088e1
 800894c:	08008a25 	.word	0x08008a25
 8008950:	6833      	ldr	r3, [r6, #0]
 8008952:	1d1a      	adds	r2, r3, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6032      	str	r2, [r6, #0]
 8008958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800895c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008960:	2301      	movs	r3, #1
 8008962:	e09c      	b.n	8008a9e <_printf_i+0x1e6>
 8008964:	6833      	ldr	r3, [r6, #0]
 8008966:	6820      	ldr	r0, [r4, #0]
 8008968:	1d19      	adds	r1, r3, #4
 800896a:	6031      	str	r1, [r6, #0]
 800896c:	0606      	lsls	r6, r0, #24
 800896e:	d501      	bpl.n	8008974 <_printf_i+0xbc>
 8008970:	681d      	ldr	r5, [r3, #0]
 8008972:	e003      	b.n	800897c <_printf_i+0xc4>
 8008974:	0645      	lsls	r5, r0, #25
 8008976:	d5fb      	bpl.n	8008970 <_printf_i+0xb8>
 8008978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800897c:	2d00      	cmp	r5, #0
 800897e:	da03      	bge.n	8008988 <_printf_i+0xd0>
 8008980:	232d      	movs	r3, #45	@ 0x2d
 8008982:	426d      	negs	r5, r5
 8008984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008988:	230a      	movs	r3, #10
 800898a:	4858      	ldr	r0, [pc, #352]	@ (8008aec <_printf_i+0x234>)
 800898c:	e011      	b.n	80089b2 <_printf_i+0xfa>
 800898e:	6821      	ldr	r1, [r4, #0]
 8008990:	6833      	ldr	r3, [r6, #0]
 8008992:	0608      	lsls	r0, r1, #24
 8008994:	f853 5b04 	ldr.w	r5, [r3], #4
 8008998:	d402      	bmi.n	80089a0 <_printf_i+0xe8>
 800899a:	0649      	lsls	r1, r1, #25
 800899c:	bf48      	it	mi
 800899e:	b2ad      	uxthmi	r5, r5
 80089a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80089a2:	6033      	str	r3, [r6, #0]
 80089a4:	bf14      	ite	ne
 80089a6:	230a      	movne	r3, #10
 80089a8:	2308      	moveq	r3, #8
 80089aa:	4850      	ldr	r0, [pc, #320]	@ (8008aec <_printf_i+0x234>)
 80089ac:	2100      	movs	r1, #0
 80089ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089b2:	6866      	ldr	r6, [r4, #4]
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	60a6      	str	r6, [r4, #8]
 80089b8:	db05      	blt.n	80089c6 <_printf_i+0x10e>
 80089ba:	6821      	ldr	r1, [r4, #0]
 80089bc:	432e      	orrs	r6, r5
 80089be:	f021 0104 	bic.w	r1, r1, #4
 80089c2:	6021      	str	r1, [r4, #0]
 80089c4:	d04b      	beq.n	8008a5e <_printf_i+0x1a6>
 80089c6:	4616      	mov	r6, r2
 80089c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80089cc:	fb03 5711 	mls	r7, r3, r1, r5
 80089d0:	5dc7      	ldrb	r7, [r0, r7]
 80089d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089d6:	462f      	mov	r7, r5
 80089d8:	42bb      	cmp	r3, r7
 80089da:	460d      	mov	r5, r1
 80089dc:	d9f4      	bls.n	80089c8 <_printf_i+0x110>
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d10b      	bne.n	80089fa <_printf_i+0x142>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	07df      	lsls	r7, r3, #31
 80089e6:	d508      	bpl.n	80089fa <_printf_i+0x142>
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	6861      	ldr	r1, [r4, #4]
 80089ec:	4299      	cmp	r1, r3
 80089ee:	bfde      	ittt	le
 80089f0:	2330      	movle	r3, #48	@ 0x30
 80089f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089fa:	1b92      	subs	r2, r2, r6
 80089fc:	6122      	str	r2, [r4, #16]
 80089fe:	464b      	mov	r3, r9
 8008a00:	4621      	mov	r1, r4
 8008a02:	4640      	mov	r0, r8
 8008a04:	f8cd a000 	str.w	sl, [sp]
 8008a08:	aa03      	add	r2, sp, #12
 8008a0a:	f7ff fee3 	bl	80087d4 <_printf_common>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	d14a      	bne.n	8008aa8 <_printf_i+0x1f0>
 8008a12:	f04f 30ff 	mov.w	r0, #4294967295
 8008a16:	b004      	add	sp, #16
 8008a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	f043 0320 	orr.w	r3, r3, #32
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	2778      	movs	r7, #120	@ 0x78
 8008a26:	4832      	ldr	r0, [pc, #200]	@ (8008af0 <_printf_i+0x238>)
 8008a28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	6831      	ldr	r1, [r6, #0]
 8008a30:	061f      	lsls	r7, r3, #24
 8008a32:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a36:	d402      	bmi.n	8008a3e <_printf_i+0x186>
 8008a38:	065f      	lsls	r7, r3, #25
 8008a3a:	bf48      	it	mi
 8008a3c:	b2ad      	uxthmi	r5, r5
 8008a3e:	6031      	str	r1, [r6, #0]
 8008a40:	07d9      	lsls	r1, r3, #31
 8008a42:	bf44      	itt	mi
 8008a44:	f043 0320 	orrmi.w	r3, r3, #32
 8008a48:	6023      	strmi	r3, [r4, #0]
 8008a4a:	b11d      	cbz	r5, 8008a54 <_printf_i+0x19c>
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	e7ad      	b.n	80089ac <_printf_i+0xf4>
 8008a50:	4826      	ldr	r0, [pc, #152]	@ (8008aec <_printf_i+0x234>)
 8008a52:	e7e9      	b.n	8008a28 <_printf_i+0x170>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	f023 0320 	bic.w	r3, r3, #32
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	e7f6      	b.n	8008a4c <_printf_i+0x194>
 8008a5e:	4616      	mov	r6, r2
 8008a60:	e7bd      	b.n	80089de <_printf_i+0x126>
 8008a62:	6833      	ldr	r3, [r6, #0]
 8008a64:	6825      	ldr	r5, [r4, #0]
 8008a66:	1d18      	adds	r0, r3, #4
 8008a68:	6961      	ldr	r1, [r4, #20]
 8008a6a:	6030      	str	r0, [r6, #0]
 8008a6c:	062e      	lsls	r6, r5, #24
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	d501      	bpl.n	8008a76 <_printf_i+0x1be>
 8008a72:	6019      	str	r1, [r3, #0]
 8008a74:	e002      	b.n	8008a7c <_printf_i+0x1c4>
 8008a76:	0668      	lsls	r0, r5, #25
 8008a78:	d5fb      	bpl.n	8008a72 <_printf_i+0x1ba>
 8008a7a:	8019      	strh	r1, [r3, #0]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4616      	mov	r6, r2
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	e7bc      	b.n	80089fe <_printf_i+0x146>
 8008a84:	6833      	ldr	r3, [r6, #0]
 8008a86:	2100      	movs	r1, #0
 8008a88:	1d1a      	adds	r2, r3, #4
 8008a8a:	6032      	str	r2, [r6, #0]
 8008a8c:	681e      	ldr	r6, [r3, #0]
 8008a8e:	6862      	ldr	r2, [r4, #4]
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 f907 	bl	8008ca4 <memchr>
 8008a96:	b108      	cbz	r0, 8008a9c <_printf_i+0x1e4>
 8008a98:	1b80      	subs	r0, r0, r6
 8008a9a:	6060      	str	r0, [r4, #4]
 8008a9c:	6863      	ldr	r3, [r4, #4]
 8008a9e:	6123      	str	r3, [r4, #16]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aa6:	e7aa      	b.n	80089fe <_printf_i+0x146>
 8008aa8:	4632      	mov	r2, r6
 8008aaa:	4649      	mov	r1, r9
 8008aac:	4640      	mov	r0, r8
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	47d0      	blx	sl
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d0ad      	beq.n	8008a12 <_printf_i+0x15a>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	079b      	lsls	r3, r3, #30
 8008aba:	d413      	bmi.n	8008ae4 <_printf_i+0x22c>
 8008abc:	68e0      	ldr	r0, [r4, #12]
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	4298      	cmp	r0, r3
 8008ac2:	bfb8      	it	lt
 8008ac4:	4618      	movlt	r0, r3
 8008ac6:	e7a6      	b.n	8008a16 <_printf_i+0x15e>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4632      	mov	r2, r6
 8008acc:	4649      	mov	r1, r9
 8008ace:	4640      	mov	r0, r8
 8008ad0:	47d0      	blx	sl
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d09d      	beq.n	8008a12 <_printf_i+0x15a>
 8008ad6:	3501      	adds	r5, #1
 8008ad8:	68e3      	ldr	r3, [r4, #12]
 8008ada:	9903      	ldr	r1, [sp, #12]
 8008adc:	1a5b      	subs	r3, r3, r1
 8008ade:	42ab      	cmp	r3, r5
 8008ae0:	dcf2      	bgt.n	8008ac8 <_printf_i+0x210>
 8008ae2:	e7eb      	b.n	8008abc <_printf_i+0x204>
 8008ae4:	2500      	movs	r5, #0
 8008ae6:	f104 0619 	add.w	r6, r4, #25
 8008aea:	e7f5      	b.n	8008ad8 <_printf_i+0x220>
 8008aec:	08009121 	.word	0x08009121
 8008af0:	08009132 	.word	0x08009132

08008af4 <__swbuf_r>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	460e      	mov	r6, r1
 8008af8:	4614      	mov	r4, r2
 8008afa:	4605      	mov	r5, r0
 8008afc:	b118      	cbz	r0, 8008b06 <__swbuf_r+0x12>
 8008afe:	6a03      	ldr	r3, [r0, #32]
 8008b00:	b90b      	cbnz	r3, 8008b06 <__swbuf_r+0x12>
 8008b02:	f7ff f9db 	bl	8007ebc <__sinit>
 8008b06:	69a3      	ldr	r3, [r4, #24]
 8008b08:	60a3      	str	r3, [r4, #8]
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	071a      	lsls	r2, r3, #28
 8008b0e:	d501      	bpl.n	8008b14 <__swbuf_r+0x20>
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	b943      	cbnz	r3, 8008b26 <__swbuf_r+0x32>
 8008b14:	4621      	mov	r1, r4
 8008b16:	4628      	mov	r0, r5
 8008b18:	f000 f82a 	bl	8008b70 <__swsetup_r>
 8008b1c:	b118      	cbz	r0, 8008b26 <__swbuf_r+0x32>
 8008b1e:	f04f 37ff 	mov.w	r7, #4294967295
 8008b22:	4638      	mov	r0, r7
 8008b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	6922      	ldr	r2, [r4, #16]
 8008b2a:	b2f6      	uxtb	r6, r6
 8008b2c:	1a98      	subs	r0, r3, r2
 8008b2e:	6963      	ldr	r3, [r4, #20]
 8008b30:	4637      	mov	r7, r6
 8008b32:	4283      	cmp	r3, r0
 8008b34:	dc05      	bgt.n	8008b42 <__swbuf_r+0x4e>
 8008b36:	4621      	mov	r1, r4
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f7ff fcbb 	bl	80084b4 <_fflush_r>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d1ed      	bne.n	8008b1e <__swbuf_r+0x2a>
 8008b42:	68a3      	ldr	r3, [r4, #8]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	60a3      	str	r3, [r4, #8]
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	6022      	str	r2, [r4, #0]
 8008b4e:	701e      	strb	r6, [r3, #0]
 8008b50:	6962      	ldr	r2, [r4, #20]
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d004      	beq.n	8008b62 <__swbuf_r+0x6e>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	07db      	lsls	r3, r3, #31
 8008b5c:	d5e1      	bpl.n	8008b22 <__swbuf_r+0x2e>
 8008b5e:	2e0a      	cmp	r6, #10
 8008b60:	d1df      	bne.n	8008b22 <__swbuf_r+0x2e>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f7ff fca5 	bl	80084b4 <_fflush_r>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d0d9      	beq.n	8008b22 <__swbuf_r+0x2e>
 8008b6e:	e7d6      	b.n	8008b1e <__swbuf_r+0x2a>

08008b70 <__swsetup_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4b29      	ldr	r3, [pc, #164]	@ (8008c18 <__swsetup_r+0xa8>)
 8008b74:	4605      	mov	r5, r0
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	460c      	mov	r4, r1
 8008b7a:	b118      	cbz	r0, 8008b84 <__swsetup_r+0x14>
 8008b7c:	6a03      	ldr	r3, [r0, #32]
 8008b7e:	b90b      	cbnz	r3, 8008b84 <__swsetup_r+0x14>
 8008b80:	f7ff f99c 	bl	8007ebc <__sinit>
 8008b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b88:	0719      	lsls	r1, r3, #28
 8008b8a:	d422      	bmi.n	8008bd2 <__swsetup_r+0x62>
 8008b8c:	06da      	lsls	r2, r3, #27
 8008b8e:	d407      	bmi.n	8008ba0 <__swsetup_r+0x30>
 8008b90:	2209      	movs	r2, #9
 8008b92:	602a      	str	r2, [r5, #0]
 8008b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	81a3      	strh	r3, [r4, #12]
 8008b9e:	e033      	b.n	8008c08 <__swsetup_r+0x98>
 8008ba0:	0758      	lsls	r0, r3, #29
 8008ba2:	d512      	bpl.n	8008bca <__swsetup_r+0x5a>
 8008ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ba6:	b141      	cbz	r1, 8008bba <__swsetup_r+0x4a>
 8008ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bac:	4299      	cmp	r1, r3
 8008bae:	d002      	beq.n	8008bb6 <__swsetup_r+0x46>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7ff fb01 	bl	80081b8 <_free_r>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bc0:	81a3      	strh	r3, [r4, #12]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6063      	str	r3, [r4, #4]
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	f043 0308 	orr.w	r3, r3, #8
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	b94b      	cbnz	r3, 8008bea <__swsetup_r+0x7a>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be0:	d003      	beq.n	8008bea <__swsetup_r+0x7a>
 8008be2:	4621      	mov	r1, r4
 8008be4:	4628      	mov	r0, r5
 8008be6:	f000 f890 	bl	8008d0a <__smakebuf_r>
 8008bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bee:	f013 0201 	ands.w	r2, r3, #1
 8008bf2:	d00a      	beq.n	8008c0a <__swsetup_r+0x9a>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	60a2      	str	r2, [r4, #8]
 8008bf8:	6962      	ldr	r2, [r4, #20]
 8008bfa:	4252      	negs	r2, r2
 8008bfc:	61a2      	str	r2, [r4, #24]
 8008bfe:	6922      	ldr	r2, [r4, #16]
 8008c00:	b942      	cbnz	r2, 8008c14 <__swsetup_r+0xa4>
 8008c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c06:	d1c5      	bne.n	8008b94 <__swsetup_r+0x24>
 8008c08:	bd38      	pop	{r3, r4, r5, pc}
 8008c0a:	0799      	lsls	r1, r3, #30
 8008c0c:	bf58      	it	pl
 8008c0e:	6962      	ldrpl	r2, [r4, #20]
 8008c10:	60a2      	str	r2, [r4, #8]
 8008c12:	e7f4      	b.n	8008bfe <__swsetup_r+0x8e>
 8008c14:	2000      	movs	r0, #0
 8008c16:	e7f7      	b.n	8008c08 <__swsetup_r+0x98>
 8008c18:	20000050 	.word	0x20000050

08008c1c <_raise_r>:
 8008c1c:	291f      	cmp	r1, #31
 8008c1e:	b538      	push	{r3, r4, r5, lr}
 8008c20:	4605      	mov	r5, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	d904      	bls.n	8008c30 <_raise_r+0x14>
 8008c26:	2316      	movs	r3, #22
 8008c28:	6003      	str	r3, [r0, #0]
 8008c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c32:	b112      	cbz	r2, 8008c3a <_raise_r+0x1e>
 8008c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c38:	b94b      	cbnz	r3, 8008c4e <_raise_r+0x32>
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f000 f830 	bl	8008ca0 <_getpid_r>
 8008c40:	4622      	mov	r2, r4
 8008c42:	4601      	mov	r1, r0
 8008c44:	4628      	mov	r0, r5
 8008c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c4a:	f000 b817 	b.w	8008c7c <_kill_r>
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d00a      	beq.n	8008c68 <_raise_r+0x4c>
 8008c52:	1c59      	adds	r1, r3, #1
 8008c54:	d103      	bne.n	8008c5e <_raise_r+0x42>
 8008c56:	2316      	movs	r3, #22
 8008c58:	6003      	str	r3, [r0, #0]
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e7e7      	b.n	8008c2e <_raise_r+0x12>
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4620      	mov	r0, r4
 8008c62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c66:	4798      	blx	r3
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e7e0      	b.n	8008c2e <_raise_r+0x12>

08008c6c <raise>:
 8008c6c:	4b02      	ldr	r3, [pc, #8]	@ (8008c78 <raise+0xc>)
 8008c6e:	4601      	mov	r1, r0
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	f7ff bfd3 	b.w	8008c1c <_raise_r>
 8008c76:	bf00      	nop
 8008c78:	20000050 	.word	0x20000050

08008c7c <_kill_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4d06      	ldr	r5, [pc, #24]	@ (8008c9c <_kill_r+0x20>)
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	f7f9 f8b2 	bl	8001df2 <_kill>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d102      	bne.n	8008c98 <_kill_r+0x1c>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	b103      	cbz	r3, 8008c98 <_kill_r+0x1c>
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	bd38      	pop	{r3, r4, r5, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000504 	.word	0x20000504

08008ca0 <_getpid_r>:
 8008ca0:	f7f9 b8a0 	b.w	8001de4 <_getpid>

08008ca4 <memchr>:
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	b2c9      	uxtb	r1, r1
 8008caa:	4402      	add	r2, r0
 8008cac:	4293      	cmp	r3, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	d101      	bne.n	8008cb6 <memchr+0x12>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e003      	b.n	8008cbe <memchr+0x1a>
 8008cb6:	7804      	ldrb	r4, [r0, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	428c      	cmp	r4, r1
 8008cbc:	d1f6      	bne.n	8008cac <memchr+0x8>
 8008cbe:	bd10      	pop	{r4, pc}

08008cc0 <__swhatbuf_r>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	4615      	mov	r5, r2
 8008cca:	2900      	cmp	r1, #0
 8008ccc:	461e      	mov	r6, r3
 8008cce:	b096      	sub	sp, #88	@ 0x58
 8008cd0:	da0c      	bge.n	8008cec <__swhatbuf_r+0x2c>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cda:	bf14      	ite	ne
 8008cdc:	2340      	movne	r3, #64	@ 0x40
 8008cde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	6031      	str	r1, [r6, #0]
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	b016      	add	sp, #88	@ 0x58
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	466a      	mov	r2, sp
 8008cee:	f000 f849 	bl	8008d84 <_fstat_r>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	dbed      	blt.n	8008cd2 <__swhatbuf_r+0x12>
 8008cf6:	9901      	ldr	r1, [sp, #4]
 8008cf8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d00:	4259      	negs	r1, r3
 8008d02:	4159      	adcs	r1, r3
 8008d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d08:	e7eb      	b.n	8008ce2 <__swhatbuf_r+0x22>

08008d0a <__smakebuf_r>:
 8008d0a:	898b      	ldrh	r3, [r1, #12]
 8008d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d0e:	079d      	lsls	r5, r3, #30
 8008d10:	4606      	mov	r6, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	d507      	bpl.n	8008d26 <__smakebuf_r+0x1c>
 8008d16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	2301      	movs	r3, #1
 8008d20:	6163      	str	r3, [r4, #20]
 8008d22:	b003      	add	sp, #12
 8008d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d26:	466a      	mov	r2, sp
 8008d28:	ab01      	add	r3, sp, #4
 8008d2a:	f7ff ffc9 	bl	8008cc0 <__swhatbuf_r>
 8008d2e:	9f00      	ldr	r7, [sp, #0]
 8008d30:	4605      	mov	r5, r0
 8008d32:	4639      	mov	r1, r7
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff fab1 	bl	800829c <_malloc_r>
 8008d3a:	b948      	cbnz	r0, 8008d50 <__smakebuf_r+0x46>
 8008d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d40:	059a      	lsls	r2, r3, #22
 8008d42:	d4ee      	bmi.n	8008d22 <__smakebuf_r+0x18>
 8008d44:	f023 0303 	bic.w	r3, r3, #3
 8008d48:	f043 0302 	orr.w	r3, r3, #2
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	e7e2      	b.n	8008d16 <__smakebuf_r+0xc>
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	6020      	str	r0, [r4, #0]
 8008d60:	b15b      	cbz	r3, 8008d7a <__smakebuf_r+0x70>
 8008d62:	4630      	mov	r0, r6
 8008d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d68:	f000 f81e 	bl	8008da8 <_isatty_r>
 8008d6c:	b128      	cbz	r0, 8008d7a <__smakebuf_r+0x70>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	f023 0303 	bic.w	r3, r3, #3
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	431d      	orrs	r5, r3
 8008d7e:	81a5      	strh	r5, [r4, #12]
 8008d80:	e7cf      	b.n	8008d22 <__smakebuf_r+0x18>
	...

08008d84 <_fstat_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	2300      	movs	r3, #0
 8008d88:	4d06      	ldr	r5, [pc, #24]	@ (8008da4 <_fstat_r+0x20>)
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	4611      	mov	r1, r2
 8008d90:	602b      	str	r3, [r5, #0]
 8008d92:	f7f9 f88d 	bl	8001eb0 <_fstat>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d102      	bne.n	8008da0 <_fstat_r+0x1c>
 8008d9a:	682b      	ldr	r3, [r5, #0]
 8008d9c:	b103      	cbz	r3, 8008da0 <_fstat_r+0x1c>
 8008d9e:	6023      	str	r3, [r4, #0]
 8008da0:	bd38      	pop	{r3, r4, r5, pc}
 8008da2:	bf00      	nop
 8008da4:	20000504 	.word	0x20000504

08008da8 <_isatty_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	2300      	movs	r3, #0
 8008dac:	4d05      	ldr	r5, [pc, #20]	@ (8008dc4 <_isatty_r+0x1c>)
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	f7f9 f88b 	bl	8001ece <_isatty>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d102      	bne.n	8008dc2 <_isatty_r+0x1a>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	b103      	cbz	r3, 8008dc2 <_isatty_r+0x1a>
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	20000504 	.word	0x20000504

08008dc8 <fmaxf>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4604      	mov	r4, r0
 8008dcc:	460d      	mov	r5, r1
 8008dce:	f000 f825 	bl	8008e1c <__fpclassifyf>
 8008dd2:	b910      	cbnz	r0, 8008dda <fmaxf+0x12>
 8008dd4:	462c      	mov	r4, r5
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	bd38      	pop	{r3, r4, r5, pc}
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f000 f81e 	bl	8008e1c <__fpclassifyf>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d0f8      	beq.n	8008dd6 <fmaxf+0xe>
 8008de4:	4629      	mov	r1, r5
 8008de6:	4620      	mov	r0, r4
 8008de8:	f7f7 fe5e 	bl	8000aa8 <__aeabi_fcmpgt>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d0f1      	beq.n	8008dd4 <fmaxf+0xc>
 8008df0:	e7f1      	b.n	8008dd6 <fmaxf+0xe>

08008df2 <fminf>:
 8008df2:	b538      	push	{r3, r4, r5, lr}
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	f000 f810 	bl	8008e1c <__fpclassifyf>
 8008dfc:	b910      	cbnz	r0, 8008e04 <fminf+0x12>
 8008dfe:	462c      	mov	r4, r5
 8008e00:	4620      	mov	r0, r4
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	4628      	mov	r0, r5
 8008e06:	f000 f809 	bl	8008e1c <__fpclassifyf>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0f8      	beq.n	8008e00 <fminf+0xe>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7f7 fe2b 	bl	8000a6c <__aeabi_fcmplt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d0f1      	beq.n	8008dfe <fminf+0xc>
 8008e1a:	e7f1      	b.n	8008e00 <fminf+0xe>

08008e1c <__fpclassifyf>:
 8008e1c:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8008e20:	d00d      	beq.n	8008e3e <__fpclassifyf+0x22>
 8008e22:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008e26:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008e2a:	d30a      	bcc.n	8008e42 <__fpclassifyf+0x26>
 8008e2c:	4b07      	ldr	r3, [pc, #28]	@ (8008e4c <__fpclassifyf+0x30>)
 8008e2e:	1e42      	subs	r2, r0, #1
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d908      	bls.n	8008e46 <__fpclassifyf+0x2a>
 8008e34:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008e38:	4258      	negs	r0, r3
 8008e3a:	4158      	adcs	r0, r3
 8008e3c:	4770      	bx	lr
 8008e3e:	2002      	movs	r0, #2
 8008e40:	4770      	bx	lr
 8008e42:	2004      	movs	r0, #4
 8008e44:	4770      	bx	lr
 8008e46:	2003      	movs	r0, #3
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	007ffffe 	.word	0x007ffffe

08008e50 <round>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008e56:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8008e5a:	2a13      	cmp	r2, #19
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	460d      	mov	r5, r1
 8008e60:	460b      	mov	r3, r1
 8008e62:	dc1a      	bgt.n	8008e9a <round+0x4a>
 8008e64:	2a00      	cmp	r2, #0
 8008e66:	da0b      	bge.n	8008e80 <round+0x30>
 8008e68:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8008e6c:	3201      	adds	r2, #1
 8008e6e:	bf04      	itt	eq
 8008e70:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e74:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008e78:	2200      	movs	r2, #0
 8008e7a:	461d      	mov	r5, r3
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	e016      	b.n	8008eae <round+0x5e>
 8008e80:	4815      	ldr	r0, [pc, #84]	@ (8008ed8 <round+0x88>)
 8008e82:	4110      	asrs	r0, r2
 8008e84:	4001      	ands	r1, r0
 8008e86:	4321      	orrs	r1, r4
 8008e88:	d011      	beq.n	8008eae <round+0x5e>
 8008e8a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008e8e:	fa41 f202 	asr.w	r2, r1, r2
 8008e92:	4413      	add	r3, r2
 8008e94:	ea23 0300 	bic.w	r3, r3, r0
 8008e98:	e7ee      	b.n	8008e78 <round+0x28>
 8008e9a:	2a33      	cmp	r2, #51	@ 0x33
 8008e9c:	dd0a      	ble.n	8008eb4 <round+0x64>
 8008e9e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008ea2:	d104      	bne.n	8008eae <round+0x5e>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	f7f7 f957 	bl	8000158 <__adddf3>
 8008eaa:	4604      	mov	r4, r0
 8008eac:	460d      	mov	r5, r1
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008ebc:	40f8      	lsrs	r0, r7
 8008ebe:	4220      	tst	r0, r4
 8008ec0:	d0f5      	beq.n	8008eae <round+0x5e>
 8008ec2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	408a      	lsls	r2, r1
 8008eca:	1912      	adds	r2, r2, r4
 8008ecc:	bf28      	it	cs
 8008ece:	3301      	addcs	r3, #1
 8008ed0:	ea22 0200 	bic.w	r2, r2, r0
 8008ed4:	e7d1      	b.n	8008e7a <round+0x2a>
 8008ed6:	bf00      	nop
 8008ed8:	000fffff 	.word	0x000fffff

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	bf00      	nop
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr
