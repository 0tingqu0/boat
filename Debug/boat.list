
boat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c028  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800c138  0800c138  0000d138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d0  0800c5d0  0000e20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c5d0  0800c5d0  0000d5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5d8  0800c5d8  0000e20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5d8  0800c5d8  0000d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5dc  0800c5dc  0000d5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800c5e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  20000210  0800c7ec  0000e210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800c7ec  0000e964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cc2  00000000  00000000  0000e235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003419  00000000  00000000  00022ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00026310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb4  00000000  00000000  00027730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac33  00000000  00000000  000286e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001915d  00000000  00000000  00043317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920a9  00000000  00000000  0005c474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee51d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069ac  00000000  00000000  000ee560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f4f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c120 	.word	0x0800c120

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800c120 	.word	0x0800c120

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_d2lz>:
 80010e4:	b538      	push	{r3, r4, r5, lr}
 80010e6:	2200      	movs	r2, #0
 80010e8:	2300      	movs	r3, #0
 80010ea:	4604      	mov	r4, r0
 80010ec:	460d      	mov	r5, r1
 80010ee:	f7ff fc65 	bl	80009bc <__aeabi_dcmplt>
 80010f2:	b928      	cbnz	r0, 8001100 <__aeabi_d2lz+0x1c>
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010fc:	f000 b80a 	b.w	8001114 <__aeabi_d2ulz>
 8001100:	4620      	mov	r0, r4
 8001102:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001106:	f000 f805 	bl	8001114 <__aeabi_d2ulz>
 800110a:	4240      	negs	r0, r0
 800110c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001110:	bd38      	pop	{r3, r4, r5, pc}
 8001112:	bf00      	nop

08001114 <__aeabi_d2ulz>:
 8001114:	b5d0      	push	{r4, r6, r7, lr}
 8001116:	2200      	movs	r2, #0
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <__aeabi_d2ulz+0x34>)
 800111a:	4606      	mov	r6, r0
 800111c:	460f      	mov	r7, r1
 800111e:	f7ff f9db 	bl	80004d8 <__aeabi_dmul>
 8001122:	f7ff fc9b 	bl	8000a5c <__aeabi_d2uiz>
 8001126:	4604      	mov	r4, r0
 8001128:	f7ff f95c 	bl	80003e4 <__aeabi_ui2d>
 800112c:	2200      	movs	r2, #0
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <__aeabi_d2ulz+0x38>)
 8001130:	f7ff f9d2 	bl	80004d8 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4630      	mov	r0, r6
 800113a:	4639      	mov	r1, r7
 800113c:	f7ff f814 	bl	8000168 <__aeabi_dsub>
 8001140:	f7ff fc8c 	bl	8000a5c <__aeabi_d2uiz>
 8001144:	4621      	mov	r1, r4
 8001146:	bdd0      	pop	{r4, r6, r7, pc}
 8001148:	3df00000 	.word	0x3df00000
 800114c:	41f00000 	.word	0x41f00000

08001150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <MX_DMA_Init+0x78>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a1b      	ldr	r2, [pc, #108]	@ (80011c8 <MX_DMA_Init+0x78>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6153      	str	r3, [r2, #20]
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_DMA_Init+0x78>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	200c      	movs	r0, #12
 8001174:	f002 f995 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001178:	200c      	movs	r0, #12
 800117a:	f002 f9ae 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	200d      	movs	r0, #13
 8001184:	f002 f98d 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001188:	200d      	movs	r0, #13
 800118a:	f002 f9a6 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	200f      	movs	r0, #15
 8001194:	f002 f985 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001198:	200f      	movs	r0, #15
 800119a:	f002 f99e 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2010      	movs	r0, #16
 80011a4:	f002 f97d 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011a8:	2010      	movs	r0, #16
 80011aa:	f002 f996 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2011      	movs	r0, #17
 80011b4:	f002 f975 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80011b8:	2011      	movs	r0, #17
 80011ba:	f002 f98e 	bl	80034da <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <apply_deadzone>:
 *	应用死区处理
 * @param raw 原始输入值
 * @param processed 处理后的值
 */
static void apply_deadzone(int raw, int *processed)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	*processed = raw;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	601a      	str	r2, [r3, #0]

	// 中心死区
	if (abs(raw - CENTER) <= CENTER_DEADZONE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80011e2:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 80011e6:	db09      	blt.n	80011fc <apply_deadzone+0x30>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80011ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80011f0:	dc04      	bgt.n	80011fc <apply_deadzone+0x30>
	{
		*processed = CENTER;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011f8:	601a      	str	r2, [r3, #0]
	}
	else if (raw >= 4096 - EDGE_DEADZONE)
	{
		*processed = 4096;
	}
}
 80011fa:	e00f      	b.n	800121c <apply_deadzone+0x50>
	else if (raw <= EDGE_DEADZONE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b14      	cmp	r3, #20
 8001200:	dc03      	bgt.n	800120a <apply_deadzone+0x3e>
		*processed = 0;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	e008      	b.n	800121c <apply_deadzone+0x50>
	else if (raw >= 4096 - EDGE_DEADZONE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8001210:	4293      	cmp	r3, r2
 8001212:	dd03      	ble.n	800121c <apply_deadzone+0x50>
		*processed = 4096;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <speed_to_pwm>:
/* 速度转PWM值
 * @param speed 速度值 (-1.0到1.0)
 * @return PWM值 (0到100%)
 */
static int speed_to_pwm(float speed)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	float abs_speed = fabsf(speed);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001236:	60fb      	str	r3, [r7, #12]
	if (abs_speed <= 0)
 8001238:	f04f 0100 	mov.w	r1, #0
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f7ff ff33 	bl	80010a8 <__aeabi_fcmple>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <speed_to_pwm+0x24>
		return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e024      	b.n	8001296 <speed_to_pwm+0x6e>
	return (int)round(PWM_MIN + ((abs_speed - 1) / 99) * PWM_RANGE);
 800124c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff fc77 	bl	8000b44 <__aeabi_fsub>
 8001256:	4603      	mov	r3, r0
 8001258:	4911      	ldr	r1, [pc, #68]	@ (80012a0 <speed_to_pwm+0x78>)
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe30 	bl	8000ec0 <__aeabi_fdiv>
 8001260:	4603      	mov	r3, r0
 8001262:	4910      	ldr	r1, [pc, #64]	@ (80012a4 <speed_to_pwm+0x7c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fd77 	bl	8000d58 <__aeabi_fmul>
 800126a:	4603      	mov	r3, r0
 800126c:	490e      	ldr	r1, [pc, #56]	@ (80012a8 <speed_to_pwm+0x80>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fc6a 	bl	8000b48 <__addsf3>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8d6 	bl	8000428 <__aeabi_f2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f00a ff06 	bl	800c094 <round>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fbbc 	bl	8000a0c <__aeabi_d2iz>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	42c60000 	.word	0x42c60000
 80012a4:	428c0000 	.word	0x428c0000
 80012a8:	4414c000 	.word	0x4414c000

080012ac <motor_control>:
 *	@param motor 电机控制结构体
 *	@param speed 速度值 (-1.0到1.0)
 *   @return 无
 */
static void motor_control(MotorController *motor, float speed)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	// 计算PWM值
	int pwm = speed_to_pwm(speed);
 80012b6:	6838      	ldr	r0, [r7, #0]
 80012b8:	f7ff ffb6 	bl	8001228 <speed_to_pwm>
 80012bc:	60f8      	str	r0, [r7, #12]

	if (throttle_percent > 0)
 80012be:	4b7a      	ldr	r3, [pc, #488]	@ (80014a8 <motor_control+0x1fc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f04f 0100 	mov.w	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff02 	bl	80010d0 <__aeabi_fcmpgt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 809f 	beq.w	8001412 <motor_control+0x166>
	{
		if (speed >= 0)
 80012d4:	f04f 0100 	mov.w	r1, #0
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f7ff feef 	bl	80010bc <__aeabi_fcmpge>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d046      	beq.n	8001372 <motor_control+0xc6>
		{
			/* code */
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <motor_control+0x4c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f6:	e018      	b.n	800132a <motor_control+0x7e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d105      	bne.n	800130c <motor_control+0x60>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	6393      	str	r3, [r2, #56]	@ 0x38
 800130a:	e00e      	b.n	800132a <motor_control+0x7e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b08      	cmp	r3, #8
 8001312:	d105      	bne.n	8001320 <motor_control+0x74>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800131e:	e004      	b.n	800132a <motor_control+0x7e>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, pwm);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d105      	bne.n	800133e <motor_control+0x92>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	635a      	str	r2, [r3, #52]	@ 0x34
	else
	{
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
	}
}
 800133c:	e0b0      	b.n	80014a0 <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, pwm);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b04      	cmp	r3, #4
 8001344:	d105      	bne.n	8001352 <motor_control+0xa6>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001350:	e0a6      	b.n	80014a0 <motor_control+0x1f4>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2b08      	cmp	r3, #8
 8001358:	d105      	bne.n	8001366 <motor_control+0xba>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001364:	e09c      	b.n	80014a0 <motor_control+0x1f4>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001370:	e096      	b.n	80014a0 <motor_control+0x1f4>
		else if (speed <= 0)
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f7ff fe96 	bl	80010a8 <__aeabi_fcmple>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <motor_control+0xd8>
}
 8001382:	e08d      	b.n	80014a0 <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, pwm);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d105      	bne.n	8001398 <motor_control+0xec>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	635a      	str	r2, [r3, #52]	@ 0x34
 8001396:	e018      	b.n	80013ca <motor_control+0x11e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d105      	bne.n	80013ac <motor_control+0x100>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80013aa:	e00e      	b.n	80013ca <motor_control+0x11e>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d105      	bne.n	80013c0 <motor_control+0x114>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013be:	e004      	b.n	80013ca <motor_control+0x11e>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d105      	bne.n	80013de <motor_control+0x132>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2200      	movs	r2, #0
 80013da:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013dc:	e060      	b.n	80014a0 <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d105      	bne.n	80013f2 <motor_control+0x146>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	6393      	str	r3, [r2, #56]	@ 0x38
 80013f0:	e056      	b.n	80014a0 <motor_control+0x1f4>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d105      	bne.n	8001406 <motor_control+0x15a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2300      	movs	r3, #0
 8001402:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001404:	e04c      	b.n	80014a0 <motor_control+0x1f4>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001410:	e046      	b.n	80014a0 <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d105      	bne.n	8001426 <motor_control+0x17a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	635a      	str	r2, [r3, #52]	@ 0x34
 8001424:	e018      	b.n	8001458 <motor_control+0x1ac>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b04      	cmp	r3, #4
 800142c:	d105      	bne.n	800143a <motor_control+0x18e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2300      	movs	r3, #0
 8001436:	6393      	str	r3, [r2, #56]	@ 0x38
 8001438:	e00e      	b.n	8001458 <motor_control+0x1ac>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b08      	cmp	r3, #8
 8001440:	d105      	bne.n	800144e <motor_control+0x1a2>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2300      	movs	r3, #0
 800144a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800144c:	e004      	b.n	8001458 <motor_control+0x1ac>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d105      	bne.n	800146c <motor_control+0x1c0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800146a:	e019      	b.n	80014a0 <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d105      	bne.n	8001480 <motor_control+0x1d4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2300      	movs	r3, #0
 800147c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800147e:	e00f      	b.n	80014a0 <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d105      	bne.n	8001494 <motor_control+0x1e8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001492:	e005      	b.n	80014a0 <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800149e:	e7ff      	b.n	80014a0 <motor_control+0x1f4>
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000022c 	.word	0x2000022c

080014ac <update_motion_control>:

// 主控制函数
void update_motion_control(int *input_array)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	int x_processed, y_processed;  // 处理后的输入值
	float x_norm, y_norm;		   // 归一化后的输入值
	float left_speed, right_speed; // 左右电机速度

	// 1. 应用死区处理
	apply_deadzone(input_array[0], &x_processed);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f107 020c 	add.w	r2, r7, #12
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe84 	bl	80011cc <apply_deadzone>
	apply_deadzone(input_array[1], &y_processed);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3304      	adds	r3, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f107 0208 	add.w	r2, r7, #8
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fe7b 	bl	80011cc <apply_deadzone>

	// 2. 归一化处理 (-1.0到1.0范围)
	x_norm = (x_processed - CENTER) / (float)(CENTER - EDGE_DEADZONE);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fbe7 	bl	8000cb0 <__aeabi_i2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	495f      	ldr	r1, [pc, #380]	@ (8001664 <update_motion_control+0x1b8>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fcea 	bl	8000ec0 <__aeabi_fdiv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	61fb      	str	r3, [r7, #28]
	y_norm = (y_processed - CENTER) / (float)(CENTER - EDGE_DEADZONE);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fbda 	bl	8000cb0 <__aeabi_i2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4959      	ldr	r1, [pc, #356]	@ (8001664 <update_motion_control+0x1b8>)
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fcdd 	bl	8000ec0 <__aeabi_fdiv>
 8001506:	4603      	mov	r3, r0
 8001508:	61bb      	str	r3, [r7, #24]

	// 限制在[-1, 1]范围内
	x_norm = fmaxf(-1.0f, fminf(1.0f, x_norm));
 800150a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800150e:	69f8      	ldr	r0, [r7, #28]
 8001510:	f00a fd91 	bl	800c036 <fminf>
 8001514:	4603      	mov	r3, r0
 8001516:	4954      	ldr	r1, [pc, #336]	@ (8001668 <update_motion_control+0x1bc>)
 8001518:	4618      	mov	r0, r3
 800151a:	f00a fd77 	bl	800c00c <fmaxf>
 800151e:	61f8      	str	r0, [r7, #28]
	y_norm = fmaxf(-1.0f, fminf(1.0f, y_norm));
 8001520:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001524:	69b8      	ldr	r0, [r7, #24]
 8001526:	f00a fd86 	bl	800c036 <fminf>
 800152a:	4603      	mov	r3, r0
 800152c:	494e      	ldr	r1, [pc, #312]	@ (8001668 <update_motion_control+0x1bc>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00a fd6c 	bl	800c00c <fmaxf>
 8001534:	61b8      	str	r0, [r7, #24]

	// 3. 计算油门百分比 (0-100%)
	if (input_array[2] > CENTER && input_array[2] < (4096 - EDGE_DEADZONE))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3308      	adds	r3, #8
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001540:	dd24      	ble.n	800158c <update_motion_control+0xe0>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3308      	adds	r3, #8
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 800154c:	4293      	cmp	r3, r2
 800154e:	dc1d      	bgt.n	800158c <update_motion_control+0xe0>
	{
		throttle_percent = ((input_array[2] - 2048) / (float)2048) * 99 + 1; // 范围 在1到100之间
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3308      	adds	r3, #8
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fba8 	bl	8000cb0 <__aeabi_i2f>
 8001560:	4603      	mov	r3, r0
 8001562:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fcaa 	bl	8000ec0 <__aeabi_fdiv>
 800156c:	4603      	mov	r3, r0
 800156e:	493f      	ldr	r1, [pc, #252]	@ (800166c <update_motion_control+0x1c0>)
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fbf1 	bl	8000d58 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fae3 	bl	8000b48 <__addsf3>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b3a      	ldr	r3, [pc, #232]	@ (8001670 <update_motion_control+0x1c4>)
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e014      	b.n	80015b6 <update_motion_control+0x10a>
	}
	else if (input_array[2] >= (4096 - EDGE_DEADZONE))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3308      	adds	r3, #8
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8001596:	4293      	cmp	r3, r2
 8001598:	dd03      	ble.n	80015a2 <update_motion_control+0xf6>
	{
		throttle_percent = 100;
 800159a:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <update_motion_control+0x1c4>)
 800159c:	4a35      	ldr	r2, [pc, #212]	@ (8001674 <update_motion_control+0x1c8>)
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e009      	b.n	80015b6 <update_motion_control+0x10a>
	}
	else if (input_array[2] <= CENTER)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3308      	adds	r3, #8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015ac:	dc03      	bgt.n	80015b6 <update_motion_control+0x10a>
	{
		throttle_percent = 0;
 80015ae:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <update_motion_control+0x1c4>)
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
	}
	
	// 限制在[0, 100]范围内
	throttle_percent = fmaxf(0.0f, fminf(100.0f, throttle_percent));
 80015b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <update_motion_control+0x1c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	492e      	ldr	r1, [pc, #184]	@ (8001674 <update_motion_control+0x1c8>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f00a fd3a 	bl	800c036 <fminf>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00a fd1f 	bl	800c00c <fmaxf>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a27      	ldr	r2, [pc, #156]	@ (8001670 <update_motion_control+0x1c4>)
 80015d2:	6013      	str	r3, [r2, #0]

	// 4. 差速驱动计算
	left_speed = (y_norm + x_norm) * throttle_percent / 100.0f;	 // 左电机速度
 80015d4:	69f9      	ldr	r1, [r7, #28]
 80015d6:	69b8      	ldr	r0, [r7, #24]
 80015d8:	f7ff fab6 	bl	8000b48 <__addsf3>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <update_motion_control+0x1c4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f7ff fbb6 	bl	8000d58 <__aeabi_fmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4921      	ldr	r1, [pc, #132]	@ (8001674 <update_motion_control+0x1c8>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fc65 	bl	8000ec0 <__aeabi_fdiv>
 80015f6:	4603      	mov	r3, r0
 80015f8:	617b      	str	r3, [r7, #20]
	right_speed = (y_norm - x_norm) * throttle_percent / 100.0f; // 右电机速度
 80015fa:	69f9      	ldr	r1, [r7, #28]
 80015fc:	69b8      	ldr	r0, [r7, #24]
 80015fe:	f7ff faa1 	bl	8000b44 <__aeabi_fsub>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <update_motion_control+0x1c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f7ff fba3 	bl	8000d58 <__aeabi_fmul>
 8001612:	4603      	mov	r3, r0
 8001614:	4917      	ldr	r1, [pc, #92]	@ (8001674 <update_motion_control+0x1c8>)
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fc52 	bl	8000ec0 <__aeabi_fdiv>
 800161c:	4603      	mov	r3, r0
 800161e:	613b      	str	r3, [r7, #16]

	// 限幅处理 (确保在-100%到100%之间)
	left_speed = fmaxf(-1.0f, fminf(1.0f, left_speed));
 8001620:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001624:	6978      	ldr	r0, [r7, #20]
 8001626:	f00a fd06 	bl	800c036 <fminf>
 800162a:	4603      	mov	r3, r0
 800162c:	490e      	ldr	r1, [pc, #56]	@ (8001668 <update_motion_control+0x1bc>)
 800162e:	4618      	mov	r0, r3
 8001630:	f00a fcec 	bl	800c00c <fmaxf>
 8001634:	6178      	str	r0, [r7, #20]
	right_speed = fmaxf(-1.0f, fminf(1.0f, right_speed));
 8001636:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800163a:	6938      	ldr	r0, [r7, #16]
 800163c:	f00a fcfb 	bl	800c036 <fminf>
 8001640:	4603      	mov	r3, r0
 8001642:	4909      	ldr	r1, [pc, #36]	@ (8001668 <update_motion_control+0x1bc>)
 8001644:	4618      	mov	r0, r3
 8001646:	f00a fce1 	bl	800c00c <fmaxf>
 800164a:	6138      	str	r0, [r7, #16]

	// 5. 控制电机
	motor_control(&left_motor, left_speed);
 800164c:	6979      	ldr	r1, [r7, #20]
 800164e:	480a      	ldr	r0, [pc, #40]	@ (8001678 <update_motion_control+0x1cc>)
 8001650:	f7ff fe2c 	bl	80012ac <motor_control>
	motor_control(&right_motor, right_speed);
 8001654:	6939      	ldr	r1, [r7, #16]
 8001656:	4809      	ldr	r0, [pc, #36]	@ (800167c <update_motion_control+0x1d0>)
 8001658:	f7ff fe28 	bl	80012ac <motor_control>
}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	44fd8000 	.word	0x44fd8000
 8001668:	bf800000 	.word	0xbf800000
 800166c:	42c60000 	.word	0x42c60000
 8001670:	2000022c 	.word	0x2000022c
 8001674:	42c80000 	.word	0x42c80000
 8001678:	20000000 	.word	0x20000000
 800167c:	2000001c 	.word	0x2000001c

08001680 <quiescent>:

// 停止电机
void quiescent(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	motor_control(&left_motor, 0);
 8001684:	f04f 0100 	mov.w	r1, #0
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <quiescent+0x1c>)
 800168a:	f7ff fe0f 	bl	80012ac <motor_control>
	motor_control(&right_motor, 0);
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <quiescent+0x20>)
 8001694:	f7ff fe0a 	bl	80012ac <motor_control>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	2000001c 	.word	0x2000001c

080016a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b8:	4b4c      	ldr	r3, [pc, #304]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a4b      	ldr	r2, [pc, #300]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b49      	ldr	r3, [pc, #292]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d0:	4b46      	ldr	r3, [pc, #280]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a45      	ldr	r2, [pc, #276]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b43      	ldr	r3, [pc, #268]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b40      	ldr	r3, [pc, #256]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a3f      	ldr	r2, [pc, #252]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <MX_GPIO_Init+0x148>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b3a      	ldr	r3, [pc, #232]	@ (80017ec <MX_GPIO_Init+0x148>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a39      	ldr	r2, [pc, #228]	@ (80017ec <MX_GPIO_Init+0x148>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <MX_GPIO_Init+0x148>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800171e:	4834      	ldr	r0, [pc, #208]	@ (80017f0 <MX_GPIO_Init+0x14c>)
 8001720:	f002 fb28 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	210b      	movs	r1, #11
 8001728:	4832      	ldr	r0, [pc, #200]	@ (80017f4 <MX_GPIO_Init+0x150>)
 800172a:	f002 fb23 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800172e:	2200      	movs	r2, #0
 8001730:	f247 5130 	movw	r1, #30000	@ 0x7530
 8001734:	482f      	ldr	r0, [pc, #188]	@ (80017f4 <MX_GPIO_Init+0x150>)
 8001736:	f002 fb1d 	bl	8003d74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800173a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2302      	movs	r3, #2
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	4827      	ldr	r0, [pc, #156]	@ (80017f0 <MX_GPIO_Init+0x14c>)
 8001754:	f002 f98a 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8001758:	2310      	movs	r3, #16
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	4823      	ldr	r0, [pc, #140]	@ (80017f8 <MX_GPIO_Init+0x154>)
 800176c:	f002 f97e 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 8001770:	2303      	movs	r3, #3
 8001772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	481b      	ldr	r0, [pc, #108]	@ (80017f4 <MX_GPIO_Init+0x150>)
 8001788:	f002 f970 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800178c:	f247 4330 	movw	r3, #29744	@ 0x7430
 8001790:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2302      	movs	r3, #2
 800179c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4619      	mov	r1, r3
 80017a4:	4813      	ldr	r0, [pc, #76]	@ (80017f4 <MX_GPIO_Init+0x150>)
 80017a6:	f002 f961 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017aa:	2308      	movs	r3, #8
 80017ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4619      	mov	r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <MX_GPIO_Init+0x150>)
 80017c2:	f002 f953 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017cc:	2311      	movs	r3, #17
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_GPIO_Init+0x150>)
 80017e0:	f002 f944 	bl	8003a6c <HAL_GPIO_Init>

}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40011000 	.word	0x40011000
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	40010800 	.word	0x40010800

080017fc <GPS_Init>:
uint8_t gps_buffer[GPS_BUFFER_SIZE]; // GPS数据缓冲区
uint8_t gps_index = 0;               // 接收缓冲区索引
uint8_t GPS_timer[32];               // GPS定时器

void GPS_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart1, (uint8_t *)g_UartRxBuffer, 1); // 启动 DMA 接收
 8001800:	2201      	movs	r2, #1
 8001802:	4907      	ldr	r1, [pc, #28]	@ (8001820 <GPS_Init+0x24>)
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <GPS_Init+0x28>)
 8001806:	f006 fc5f 	bl	80080c8 <HAL_UART_Receive_DMA>
    memset(gps_buffer, 0, sizeof(gps_buffer));
 800180a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800180e:	2100      	movs	r1, #0
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <GPS_Init+0x2c>)
 8001812:	f008 faec 	bl	8009dee <memset>
    gps_index = 0;
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <GPS_Init+0x30>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000590 	.word	0x20000590
 8001824:	20000788 	.word	0x20000788
 8001828:	20000280 	.word	0x20000280
 800182c:	20000480 	.word	0x20000480

08001830 <parse_gnrmc>:
** 13. 校验和（*hh）
** @note 解析成功返回true，失败返回false
** @note 解析失败的原因可能是输入的NMEA句子格式不正确，或者字段数量不足
*/
bool parse_gnrmc(const char *nmea_sentence, GPS_Data_GNRMC *data)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b0ac      	sub	sp, #176	@ 0xb0
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
    if (strstr(nmea_sentence, "GNRMC") == NULL)
 800183a:	49b7      	ldr	r1, [pc, #732]	@ (8001b18 <parse_gnrmc+0x2e8>)
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f008 fb6d 	bl	8009f1c <strstr>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <parse_gnrmc+0x1c>
    {
        return false; // 非GNRMC协议
 8001848:	2300      	movs	r3, #0
 800184a:	e1f3      	b.n	8001c34 <parse_gnrmc+0x404>
    }

    char buffer[128];
    strncpy(buffer, nmea_sentence, sizeof(buffer));
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f008 faf1 	bl	8009e3c <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 800185a:	2300      	movs	r3, #0
 800185c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

    // 分割字段（逗号分隔）
    char *token = strtok(buffer, ",");
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	49ad      	ldr	r1, [pc, #692]	@ (8001b1c <parse_gnrmc+0x2ec>)
 8001866:	4618      	mov	r0, r3
 8001868:	f008 fafc 	bl	8009e64 <strtok>
 800186c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL)
 8001870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <parse_gnrmc+0x4c>
        return false;
 8001878:	2300      	movs	r3, #0
 800187a:	e1db      	b.n	8001c34 <parse_gnrmc+0x404>
    strncpy(data->protocol, token, sizeof(data->protocol) - 1);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2205      	movs	r2, #5
 8001880:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001884:	4618      	mov	r0, r3
 8001886:	f008 fad9 	bl	8009e3c <strncpy>

    // 1. UTC时间
    token = strtok(NULL, ",");
 800188a:	49a4      	ldr	r1, [pc, #656]	@ (8001b1c <parse_gnrmc+0x2ec>)
 800188c:	2000      	movs	r0, #0
 800188e:	f008 fae9 	bl	8009e64 <strtok>
 8001892:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL)
 8001896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <parse_gnrmc+0x72>
        return false;
 800189e:	2300      	movs	r3, #0
 80018a0:	e1c8      	b.n	8001c34 <parse_gnrmc+0x404>
    strncpy(data->utc_time, token, sizeof(data->utc_time) - 1);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3306      	adds	r3, #6
 80018a6:	2209      	movs	r2, #9
 80018a8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80018ac:	4618      	mov	r0, r3
 80018ae:	f008 fac5 	bl	8009e3c <strncpy>

    // 2. 状态
    token = strtok(NULL, ",");
 80018b2:	499a      	ldr	r1, [pc, #616]	@ (8001b1c <parse_gnrmc+0x2ec>)
 80018b4:	2000      	movs	r0, #0
 80018b6:	f008 fad5 	bl	8009e64 <strtok>
 80018ba:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL || (*token != 'A' && *token != 'V'))
 80018be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <parse_gnrmc+0xaa>
 80018c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b41      	cmp	r3, #65	@ 0x41
 80018ce:	d006      	beq.n	80018de <parse_gnrmc+0xae>
 80018d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b56      	cmp	r3, #86	@ 0x56
 80018d8:	d001      	beq.n	80018de <parse_gnrmc+0xae>
        return false;
 80018da:	2300      	movs	r3, #0
 80018dc:	e1aa      	b.n	8001c34 <parse_gnrmc+0x404>
    data->status = *token;
 80018de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	741a      	strb	r2, [r3, #16]

    // 3. 纬度（格式：ddmm.mmmm）
    token = strtok(NULL, ",");
 80018e8:	498c      	ldr	r1, [pc, #560]	@ (8001b1c <parse_gnrmc+0x2ec>)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f008 faba 	bl	8009e64 <strtok>
 80018f0:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL)
 80018f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <parse_gnrmc+0xd0>
        return false;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e199      	b.n	8001c34 <parse_gnrmc+0x404>
    double lat_deg = atof(token) / 100.0; // 转换为度
 8001900:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001904:	f007 faa6 	bl	8008e54 <atof>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b84      	ldr	r3, [pc, #528]	@ (8001b20 <parse_gnrmc+0x2f0>)
 800190e:	f7fe ff0d 	bl	800072c <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    int lat_deg_int = (int)lat_deg;
 800191a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800191e:	f7ff f875 	bl	8000a0c <__aeabi_d2iz>
 8001922:	4603      	mov	r3, r0
 8001924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    data->latitude = lat_deg_int + (lat_deg - lat_deg_int) * 100 / 60.0;
 8001928:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800192c:	f7fe fd6a 	bl	8000404 <__aeabi_i2d>
 8001930:	4604      	mov	r4, r0
 8001932:	460d      	mov	r5, r1
 8001934:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001938:	f7fe fd64 	bl	8000404 <__aeabi_i2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001944:	f7fe fc10 	bl	8000168 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b72      	ldr	r3, [pc, #456]	@ (8001b20 <parse_gnrmc+0x2f0>)
 8001956:	f7fe fdbf 	bl	80004d8 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b6f      	ldr	r3, [pc, #444]	@ (8001b24 <parse_gnrmc+0x2f4>)
 8001968:	f7fe fee0 	bl	800072c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fbfa 	bl	800016c <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // 4. 纬度方向
    token = strtok(NULL, ",");
 8001982:	4966      	ldr	r1, [pc, #408]	@ (8001b1c <parse_gnrmc+0x2ec>)
 8001984:	2000      	movs	r0, #0
 8001986:	f008 fa6d 	bl	8009e64 <strtok>
 800198a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL || (*token != 'N' && *token != 'S'))
 800198e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <parse_gnrmc+0x17a>
 8001996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b4e      	cmp	r3, #78	@ 0x4e
 800199e:	d006      	beq.n	80019ae <parse_gnrmc+0x17e>
 80019a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b53      	cmp	r3, #83	@ 0x53
 80019a8:	d001      	beq.n	80019ae <parse_gnrmc+0x17e>
        return false;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e142      	b.n	8001c34 <parse_gnrmc+0x404>
    data->lat_dir = *token;
 80019ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]

    // 5. 经度（格式：dddmm.mmmm）
    token = strtok(NULL, ",");
 80019ba:	4958      	ldr	r1, [pc, #352]	@ (8001b1c <parse_gnrmc+0x2ec>)
 80019bc:	2000      	movs	r0, #0
 80019be:	f008 fa51 	bl	8009e64 <strtok>
 80019c2:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL)
 80019c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <parse_gnrmc+0x1a2>
        return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e130      	b.n	8001c34 <parse_gnrmc+0x404>
    double lon_deg = atof(token) / 100.0;
 80019d2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80019d6:	f007 fa3d 	bl	8008e54 <atof>
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b50      	ldr	r3, [pc, #320]	@ (8001b20 <parse_gnrmc+0x2f0>)
 80019e0:	f7fe fea4 	bl	800072c <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    int lon_deg_int = (int)lon_deg;
 80019ec:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80019f0:	f7ff f80c 	bl	8000a0c <__aeabi_d2iz>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    data->longitude = lon_deg_int + (lon_deg - lon_deg_int) * 100 / 60.0;
 80019fa:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80019fe:	f7fe fd01 	bl	8000404 <__aeabi_i2d>
 8001a02:	4604      	mov	r4, r0
 8001a04:	460d      	mov	r5, r1
 8001a06:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001a0a:	f7fe fcfb 	bl	8000404 <__aeabi_i2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001a16:	f7fe fba7 	bl	8000168 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4b3e      	ldr	r3, [pc, #248]	@ (8001b20 <parse_gnrmc+0x2f0>)
 8001a28:	f7fe fd56 	bl	80004d8 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <parse_gnrmc+0x2f4>)
 8001a3a:	f7fe fe77 	bl	800072c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fb91 	bl	800016c <__adddf3>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	6839      	ldr	r1, [r7, #0]
 8001a50:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // 6. 经度方向
    token = strtok(NULL, ",");
 8001a54:	4931      	ldr	r1, [pc, #196]	@ (8001b1c <parse_gnrmc+0x2ec>)
 8001a56:	2000      	movs	r0, #0
 8001a58:	f008 fa04 	bl	8009e64 <strtok>
 8001a5c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL || (*token != 'E' && *token != 'W'))
 8001a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <parse_gnrmc+0x24c>
 8001a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b45      	cmp	r3, #69	@ 0x45
 8001a70:	d006      	beq.n	8001a80 <parse_gnrmc+0x250>
 8001a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b57      	cmp	r3, #87	@ 0x57
 8001a7a:	d001      	beq.n	8001a80 <parse_gnrmc+0x250>
        return false;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e0d9      	b.n	8001c34 <parse_gnrmc+0x404>
    data->lon_dir = *token;
 8001a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    // 7. 速度（节）
    token = strtok(NULL, ",");
 8001a8c:	4923      	ldr	r1, [pc, #140]	@ (8001b1c <parse_gnrmc+0x2ec>)
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f008 f9e8 	bl	8009e64 <strtok>
 8001a94:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL)
 8001a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <parse_gnrmc+0x274>
        return false;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e0c7      	b.n	8001c34 <parse_gnrmc+0x404>
    data->speed_knots = atof(token);
 8001aa4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001aa8:	f007 f9d4 	bl	8008e54 <atof>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7fe fff2 	bl	8000a9c <__aeabi_d2f>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34

    // 8. 航向（度）
    token = strtok(NULL, ",");
 8001abe:	4917      	ldr	r1, [pc, #92]	@ (8001b1c <parse_gnrmc+0x2ec>)
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f008 f9cf 	bl	8009e64 <strtok>
 8001ac6:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL)
 8001aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <parse_gnrmc+0x2a6>
        return false;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e0ae      	b.n	8001c34 <parse_gnrmc+0x404>
    data->course_deg = atof(token);
 8001ad6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001ada:	f007 f9bb 	bl	8008e54 <atof>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7fe ffd9 	bl	8000a9c <__aeabi_d2f>
 8001aea:	4602      	mov	r2, r0
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	639a      	str	r2, [r3, #56]	@ 0x38

    // 9. 日期（ddmmyy）
    token = strtok(NULL, ",");
 8001af0:	490a      	ldr	r1, [pc, #40]	@ (8001b1c <parse_gnrmc+0x2ec>)
 8001af2:	2000      	movs	r0, #0
 8001af4:	f008 f9b6 	bl	8009e64 <strtok>
 8001af8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token == NULL || strlen(token) != 6)
 8001afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <parse_gnrmc+0x2e2>
 8001b04:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001b08:	f7fe fb22 	bl	8000150 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d00a      	beq.n	8001b28 <parse_gnrmc+0x2f8>
        return false;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e08e      	b.n	8001c34 <parse_gnrmc+0x404>
 8001b16:	bf00      	nop
 8001b18:	0800c138 	.word	0x0800c138
 8001b1c:	0800c140 	.word	0x0800c140
 8001b20:	40590000 	.word	0x40590000
 8001b24:	404e0000 	.word	0x404e0000
    strncpy(data->date, token, sizeof(data->date) - 1);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	333c      	adds	r3, #60	@ 0x3c
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001b32:	4618      	mov	r0, r3
 8001b34:	f008 f982 	bl	8009e3c <strncpy>

    // 10. 磁偏角（可选字段）
    token = strtok(NULL, ",");
 8001b38:	4940      	ldr	r1, [pc, #256]	@ (8001c3c <parse_gnrmc+0x40c>)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f008 f992 	bl	8009e64 <strtok>
 8001b40:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (token != NULL)
 8001b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d051      	beq.n	8001bf0 <parse_gnrmc+0x3c0>
    {
        data->magnetic_var = atof(token);
 8001b4c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001b50:	f007 f980 	bl	8008e54 <atof>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7fe ff9e 	bl	8000a9c <__aeabi_d2f>
 8001b60:	4602      	mov	r2, r0
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44
        token = strtok(NULL, ","); // 可能是模式或校验和
 8001b66:	4935      	ldr	r1, [pc, #212]	@ (8001c3c <parse_gnrmc+0x40c>)
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f008 f97b 	bl	8009e64 <strtok>
 8001b6e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        if (token != NULL)
 8001b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03a      	beq.n	8001bf0 <parse_gnrmc+0x3c0>
        {
            // 检查是否为模式字段（单字符）
            if (strlen(token) == 1 && (*token == 'N' || *token == 'A' || *token == 'D' || *token == 'E'))
 8001b7a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001b7e:	f7fe fae7 	bl	8000150 <strlen>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d120      	bne.n	8001bca <parse_gnrmc+0x39a>
 8001b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001b90:	d00e      	beq.n	8001bb0 <parse_gnrmc+0x380>
 8001b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b41      	cmp	r3, #65	@ 0x41
 8001b9a:	d009      	beq.n	8001bb0 <parse_gnrmc+0x380>
 8001b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b44      	cmp	r3, #68	@ 0x44
 8001ba4:	d004      	beq.n	8001bb0 <parse_gnrmc+0x380>
 8001ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b45      	cmp	r3, #69	@ 0x45
 8001bae:	d10c      	bne.n	8001bca <parse_gnrmc+0x39a>
            {
                data->mode = *token;
 8001bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                token = strtok(NULL, "*"); // 跳转到校验和
 8001bbc:	4920      	ldr	r1, [pc, #128]	@ (8001c40 <parse_gnrmc+0x410>)
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f008 f950 	bl	8009e64 <strtok>
 8001bc4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8001bc8:	e012      	b.n	8001bf0 <parse_gnrmc+0x3c0>
            }
            else
            {
                // 无模式字段，token可能是校验和
                data->mode = 'N'; // 默认无定位
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	224e      	movs	r2, #78	@ 0x4e
 8001bce:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                if (strstr(token, "*") != NULL)
 8001bd2:	212a      	movs	r1, #42	@ 0x2a
 8001bd4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001bd8:	f008 f911 	bl	8009dfe <strchr>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d006      	beq.n	8001bf0 <parse_gnrmc+0x3c0>
                {
                    token = strtok(token, "*");
 8001be2:	4917      	ldr	r1, [pc, #92]	@ (8001c40 <parse_gnrmc+0x410>)
 8001be4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001be8:	f008 f93c 	bl	8009e64 <strtok>
 8001bec:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            }
        }
    }

    // 11. 校验和（*hh）
    if (token != NULL && strstr(token, "*") == token)
 8001bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d014      	beq.n	8001c22 <parse_gnrmc+0x3f2>
 8001bf8:	212a      	movs	r1, #42	@ 0x2a
 8001bfa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001bfe:	f008 f8fe 	bl	8009dfe <strchr>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d10a      	bne.n	8001c22 <parse_gnrmc+0x3f2>
    {
        strncpy(data->checksum, token + 1, sizeof(data->checksum) - 1);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f103 004a 	add.w	r0, r3, #74	@ 0x4a
 8001c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c16:	3301      	adds	r3, #1
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f008 f90e 	bl	8009e3c <strncpy>
 8001c20:	e003      	b.n	8001c2a <parse_gnrmc+0x3fa>
    }
    else
    {
        data->checksum[0] = '\0';
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    }
    gps_data.updata = 1;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <parse_gnrmc+0x414>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    return true;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	37b0      	adds	r7, #176	@ 0xb0
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3c:	0800c140 	.word	0x0800c140
 8001c40:	0800c144 	.word	0x0800c144
 8001c44:	20000230 	.word	0x20000230

08001c48 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c4e:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <MX_I2C1_Init+0x54>)
 8001c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <MX_I2C1_Init+0x58>)
 8001c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <MX_I2C1_Init+0x50>)
 8001c86:	f002 f8a7 	bl	8003dd8 <HAL_I2C_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c90:	f000 f9e5 	bl	800205e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200004a4 	.word	0x200004a4
 8001c9c:	40005400 	.word	0x40005400
 8001ca0:	00061a80 	.word	0x00061a80

08001ca4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a43      	ldr	r2, [pc, #268]	@ (8001dcc <HAL_I2C_MspInit+0x128>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d17f      	bne.n	8001dc4 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc4:	4b42      	ldr	r3, [pc, #264]	@ (8001dd0 <HAL_I2C_MspInit+0x12c>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a41      	ldr	r2, [pc, #260]	@ (8001dd0 <HAL_I2C_MspInit+0x12c>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd0 <HAL_I2C_MspInit+0x12c>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cdc:	23c0      	movs	r3, #192	@ 0xc0
 8001cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce0:	2312      	movs	r3, #18
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	4839      	ldr	r0, [pc, #228]	@ (8001dd4 <HAL_I2C_MspInit+0x130>)
 8001cf0:	f001 febc 	bl	8003a6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf4:	4b36      	ldr	r3, [pc, #216]	@ (8001dd0 <HAL_I2C_MspInit+0x12c>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a35      	ldr	r2, [pc, #212]	@ (8001dd0 <HAL_I2C_MspInit+0x12c>)
 8001cfa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <HAL_I2C_MspInit+0x12c>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001d0c:	4b32      	ldr	r3, [pc, #200]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d0e:	4a33      	ldr	r2, [pc, #204]	@ (8001ddc <HAL_I2C_MspInit+0x138>)
 8001d10:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d12:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d18:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d20:	2280      	movs	r2, #128	@ 0x80
 8001d22:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d24:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d30:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d36:	4b28      	ldr	r3, [pc, #160]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d3c:	4826      	ldr	r0, [pc, #152]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d3e:	f001 fbe7 	bl	8003510 <HAL_DMA_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001d48:	f000 f989 	bl	800205e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a22      	ldr	r2, [pc, #136]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d50:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d52:	4a21      	ldr	r2, [pc, #132]	@ (8001dd8 <HAL_I2C_MspInit+0x134>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001d58:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d5a:	4a22      	ldr	r2, [pc, #136]	@ (8001de4 <HAL_I2C_MspInit+0x140>)
 8001d5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d5e:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d60:	2210      	movs	r2, #16
 8001d62:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d6c:	2280      	movs	r2, #128	@ 0x80
 8001d6e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d82:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d88:	4815      	ldr	r0, [pc, #84]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d8a:	f001 fbc1 	bl	8003510 <HAL_DMA_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8001d94:	f000 f963 	bl	800205e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d9e:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <HAL_I2C_MspInit+0x13c>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	201f      	movs	r0, #31
 8001daa:	f001 fb7a 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dae:	201f      	movs	r0, #31
 8001db0:	f001 fb93 	bl	80034da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2020      	movs	r0, #32
 8001dba:	f001 fb72 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001dbe:	2020      	movs	r0, #32
 8001dc0:	f001 fb8b 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010c00 	.word	0x40010c00
 8001dd8:	200004f8 	.word	0x200004f8
 8001ddc:	40020080 	.word	0x40020080
 8001de0:	2000053c 	.word	0x2000053c
 8001de4:	4002006c 	.word	0x4002006c

08001de8 <parse_input_str>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void parse_input_str(char *str, int arr[4])
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  char *token = strtok(str, ",");
 8001df2:	4911      	ldr	r1, [pc, #68]	@ (8001e38 <parse_input_str+0x50>)
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f008 f835 	bl	8009e64 <strtok>
 8001dfa:	60f8      	str	r0, [r7, #12]
  for (int i = 0; i < 4 && token != NULL; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	e010      	b.n	8001e24 <parse_input_str+0x3c>
  {
    arr[i] = atoi(token);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	18d4      	adds	r4, r2, r3
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f007 f825 	bl	8008e5a <atoi>
 8001e10:	4603      	mov	r3, r0
 8001e12:	6023      	str	r3, [r4, #0]
    token = strtok(NULL, ",");
 8001e14:	4908      	ldr	r1, [pc, #32]	@ (8001e38 <parse_input_str+0x50>)
 8001e16:	2000      	movs	r0, #0
 8001e18:	f008 f824 	bl	8009e64 <strtok>
 8001e1c:	60f8      	str	r0, [r7, #12]
  for (int i = 0; i < 4 && token != NULL; i++)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	dc02      	bgt.n	8001e30 <parse_input_str+0x48>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e8      	bne.n	8001e02 <parse_input_str+0x1a>
  }
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	0800c148 	.word	0x0800c148

08001e3c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x88>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d135      	bne.n	8001eba <HAL_UART_RxCpltCallback+0x7e>
                     // 可以添加日志或错误标志
    }
    // 检查缓冲区是否溢出
    else if (gps_index < sizeof(gps_buffer))
    {
      if (g_UartRxBuffer[0] == '\n' && gps_buffer[gps_index - 1] == '\r')
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x8c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b0a      	cmp	r3, #10
 8001e54:	d11a      	bne.n	8001e8c <HAL_UART_RxCpltCallback+0x50>
 8001e56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <HAL_UART_RxCpltCallback+0x90>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x94>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	2b0d      	cmp	r3, #13
 8001e62:	d113      	bne.n	8001e8c <HAL_UART_RxCpltCallback+0x50>
      {
        // 处理接收到的数据
        gps_buffer[gps_index] = '\0'; // 添加字符串结束符
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <HAL_UART_RxCpltCallback+0x90>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x94>)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]
        parse_gnrmc((const char *)gps_buffer, &gps_data);
 8001e70:	4918      	ldr	r1, [pc, #96]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x98>)
 8001e72:	4817      	ldr	r0, [pc, #92]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x94>)
 8001e74:	f7ff fcdc 	bl	8001830 <parse_gnrmc>
        gps_index = 0; // 重置索引
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_UART_RxCpltCallback+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
        snprintf(GPS_timer, 32, "%s",&gps_buffer[0]); // 发送数据
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x94>)
 8001e80:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <HAL_UART_RxCpltCallback+0x9c>)
 8001e82:	2120      	movs	r1, #32
 8001e84:	4815      	ldr	r0, [pc, #84]	@ (8001edc <HAL_UART_RxCpltCallback+0xa0>)
 8001e86:	f007 ff39 	bl	8009cfc <sniprintf>
 8001e8a:	e00e      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x6e>
      
      }
      else if (g_UartRxBuffer[0] != '\0')
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x8c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_UART_RxCpltCallback+0x6e>
      {
        // 将接收到的数据存入缓冲区
        gps_buffer[gps_index++] = g_UartRxBuffer[0];
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_UART_RxCpltCallback+0x90>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	b2d1      	uxtb	r1, r2
 8001e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ecc <HAL_UART_RxCpltCallback+0x90>)
 8001e9e:	7011      	strb	r1, [r2, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x8c>)
 8001ea4:	7819      	ldrb	r1, [r3, #0]
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x94>)
 8001ea8:	5499      	strb	r1, [r3, r2]
      }
    }
    // 清除接收缓冲区（可选）
    g_UartRxBuffer[0] = '\0';
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x8c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

    // 重新启动DMA接收
    HAL_UART_Receive_DMA(&huart1, (uint8_t *)g_UartRxBuffer, 1);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4905      	ldr	r1, [pc, #20]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x8c>)
 8001eb4:	480a      	ldr	r0, [pc, #40]	@ (8001ee0 <HAL_UART_RxCpltCallback+0xa4>)
 8001eb6:	f006 f907 	bl	80080c8 <HAL_UART_Receive_DMA>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	20000590 	.word	0x20000590
 8001ecc:	20000480 	.word	0x20000480
 8001ed0:	20000280 	.word	0x20000280
 8001ed4:	20000230 	.word	0x20000230
 8001ed8:	0800c14c 	.word	0x0800c14c
 8001edc:	20000484 	.word	0x20000484
 8001ee0:	20000788 	.word	0x20000788

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t i = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	71fb      	strb	r3, [r7, #7]
  uint32_t j = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef2:	f001 f979 	bl	80031e8 <HAL_Init>
  /* USER CODE BEGIN Init */
  //  HAL_SYSTICK_IRQHandler();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef6:	f000 f86d 	bl	8001fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efa:	f7ff fbd3 	bl	80016a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001efe:	f7ff f927 	bl	8001150 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f02:	f7ff fea1 	bl	8001c48 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f06:	f000 fcbd 	bl	8002884 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001f0a:	f001 f89d 	bl	8003048 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001f0e:	f000 ff2d 	bl	8002d6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f12:	f000 ff7d 	bl	8002e10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // 启动定时器中断
  HAL_TIM_Base_Start_IT(&htim1);
 8001f16:	482a      	ldr	r0, [pc, #168]	@ (8001fc0 <main+0xdc>)
 8001f18:	f005 f974 	bl	8007204 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4829      	ldr	r0, [pc, #164]	@ (8001fc4 <main+0xe0>)
 8001f20:	f005 fa1a 	bl	8007358 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001f24:	2104      	movs	r1, #4
 8001f26:	4827      	ldr	r0, [pc, #156]	@ (8001fc4 <main+0xe0>)
 8001f28:	f005 fa16 	bl	8007358 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	4825      	ldr	r0, [pc, #148]	@ (8001fc4 <main+0xe0>)
 8001f30:	f005 fa12 	bl	8007358 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001f34:	210c      	movs	r1, #12
 8001f36:	4823      	ldr	r0, [pc, #140]	@ (8001fc4 <main+0xe0>)
 8001f38:	f005 fa0e 	bl	8007358 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // 设置占空比50%
 8001f3c:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <main+0xe0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2200      	movs	r2, #0
 8001f42:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // 设置占空比50%
 8001f44:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <main+0xe0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	639a      	str	r2, [r3, #56]	@ 0x38

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0); // 设置占空比50%
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <main+0xe0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0); // 设置占空比50%
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <main+0xe0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  //	OLED_Init();

  // RF24L01引脚初始化
  NRF24L01_Gpio_Init();
 8001f5c:	f000 fbf2 	bl	8002744 <NRF24L01_Gpio_Init>

  // 检测nRF24L01
  while (NRF24L01_check_DMA() == 0)
 8001f60:	bf00      	nop
 8001f62:	f000 fa2f 	bl	80023c4 <NRF24L01_check_DMA>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0fa      	beq.n	8001f62 <main+0x7e>
    ;
  RF24L01_Init_DMA();
 8001f6c:	f000 fc06 	bl	800277c <RF24L01_Init_DMA>
  RF24L01_Set_Mode_DMA(MODE_TX); // 发送模式
 8001f70:	2000      	movs	r0, #0
 8001f72:	f000 fab7 	bl	80024e4 <RF24L01_Set_Mode_DMA>

  GPS_Init(); // 初始化GPS数据结构体
 8001f76:	f7ff fc41 	bl	80017fc <GPS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     mode_change();
 8001f7a:	f000 fc65 	bl	8002848 <mode_change>
    if (0 != NRF24L01_RxPacket_DMA((uint8_t *)g_RF24L01RxBuffer)) // 接收字节
 8001f7e:	4812      	ldr	r0, [pc, #72]	@ (8001fc8 <main+0xe4>)
 8001f80:	f000 fb86 	bl	8002690 <NRF24L01_RxPacket_DMA>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <main+0xba>
    {
      parse_input_str(g_RF24L01RxBuffer, RX_BUFF); // 解析接收数据
 8001f8a:	4910      	ldr	r1, [pc, #64]	@ (8001fcc <main+0xe8>)
 8001f8c:	480e      	ldr	r0, [pc, #56]	@ (8001fc8 <main+0xe4>)
 8001f8e:	f7ff ff2b 	bl	8001de8 <parse_input_str>

      update_motion_control(RX_BUFF); // 更新电机控制
 8001f92:	480e      	ldr	r0, [pc, #56]	@ (8001fcc <main+0xe8>)
 8001f94:	f7ff fa8a 	bl	80014ac <update_motion_control>

      i = 0; // 计数器清零
 8001f98:	2300      	movs	r3, #0
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	e7ed      	b.n	8001f7a <main+0x96>

      // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    }
    else
    {
      i++;
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	71fb      	strb	r3, [r7, #7]
      conversion++; // nrf24l01转换标志
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <main+0xec>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <main+0xec>)
 8001fae:	701a      	strb	r2, [r3, #0]
      if (i >= 10)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	d9e1      	bls.n	8001f7a <main+0x96>
      {
        quiescent(); // 进入静止状态
 8001fb6:	f7ff fb63 	bl	8001680 <quiescent>
        i = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	71fb      	strb	r3, [r7, #7]
     mode_change();
 8001fbe:	e7dc      	b.n	8001f7a <main+0x96>
 8001fc0:	200006f8 	.word	0x200006f8
 8001fc4:	20000740 	.word	0x20000740
 8001fc8:	200005f4 	.word	0x200005f4
 8001fcc:	20000580 	.word	0x20000580
 8001fd0:	20000608 	.word	0x20000608

08001fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b090      	sub	sp, #64	@ 0x40
 8001fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	2228      	movs	r2, #40	@ 0x28
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f007 ff03 	bl	8009dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ffa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ffe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002004:	2301      	movs	r3, #1
 8002006:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002008:	2302      	movs	r3, #2
 800200a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800200c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002010:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002012:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fd2d 	bl	8005a7c <HAL_RCC_OscConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002028:	f000 f819 	bl	800205e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800202c:	230f      	movs	r3, #15
 800202e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002030:	2302      	movs	r3, #2
 8002032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800203c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2102      	movs	r1, #2
 8002046:	4618      	mov	r0, r3
 8002048:	f003 ff9a 	bl	8005f80 <HAL_RCC_ClockConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002052:	f000 f804 	bl	800205e <Error_Handler>
  }
}
 8002056:	bf00      	nop
 8002058:	3740      	adds	r7, #64	@ 0x40
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002062:	b672      	cpsid	i
}
 8002064:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002066:	bf00      	nop
 8002068:	e7fd      	b.n	8002066 <Error_Handler+0x8>
	...

0800206c <drv_spi_read_write_byte>:
 *         @TxByte: 发送的数据字节
 * @note  :非堵塞式，一旦等待超时，函数会自动退出
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte(uint8_t TxByte)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af02      	add	r7, sp, #8
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1, &TxByte, &rx_data, 1, HAL_MAX_DELAY);
 8002076:	f107 020f 	add.w	r2, r7, #15
 800207a:	1df9      	adds	r1, r7, #7
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2301      	movs	r3, #1
 8002084:	4803      	ldr	r0, [pc, #12]	@ (8002094 <drv_spi_read_write_byte+0x28>)
 8002086:	f004 f98d 	bl	80063a4 <HAL_SPI_TransmitReceive>
//    HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
//    while (HAL_SPI_GetState(&SPI1))!=HAL_SPI_STATE_READY);
	return rx_data;      //返回
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000060c 	.word	0x2000060c

08002098 <drv_spi_read_write_byte_dma>:
 *         @TxByte: 发送的数据字节
 * @note  :使用DMA进行SPI传输，需要等待传输完成
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte_dma(uint8_t TxByte)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_StatusTypeDef status;

	// 使用DMA进行SPI传输
	status = HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
 80020a2:	f107 020e 	add.w	r2, r7, #14
 80020a6:	1df9      	adds	r1, r7, #7
 80020a8:	2301      	movs	r3, #1
 80020aa:	480b      	ldr	r0, [pc, #44]	@ (80020d8 <drv_spi_read_write_byte_dma+0x40>)
 80020ac:	f004 fbd6 	bl	800685c <HAL_SPI_TransmitReceive_DMA>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <drv_spi_read_write_byte_dma+0x26>
	{
		// 处理错误情况
		Error_Handler();
 80020ba:	f7ff ffd0 	bl	800205e <Error_Handler>
	}

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80020be:	bf00      	nop
 80020c0:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <drv_spi_read_write_byte_dma+0x40>)
 80020c2:	f004 fdec 	bl	8006c9e <HAL_SPI_GetState>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d1f9      	bne.n	80020c0 <drv_spi_read_write_byte_dma+0x28>

	return rx_data;
 80020cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000060c 	.word	0x2000060c

080020dc <drv_spi_read_write_buffer_dma>:
/*​
 * @brief SPI DMA方式读写缓冲区
 */
HAL_StatusTypeDef drv_spi_read_write_buffer_dma(uint8_t *tx_buf,
        uint8_t *rx_buf, uint16_t len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf,
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	68f9      	ldr	r1, [r7, #12]
 80020f0:	4808      	ldr	r0, [pc, #32]	@ (8002114 <drv_spi_read_write_buffer_dma+0x38>)
 80020f2:	f004 fbb3 	bl	800685c <HAL_SPI_TransmitReceive_DMA>
 80020f6:	4603      	mov	r3, r0
 80020f8:	75fb      	strb	r3, [r7, #23]
	        rx_buf, len);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80020fa:	bf00      	nop
 80020fc:	4805      	ldr	r0, [pc, #20]	@ (8002114 <drv_spi_read_write_buffer_dma+0x38>)
 80020fe:	f004 fdce 	bl	8006c9e <HAL_SPI_GetState>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d1f9      	bne.n	80020fc <drv_spi_read_write_buffer_dma+0x20>
	return status;
 8002108:	7dfb      	ldrb	r3, [r7, #23]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000060c 	.word	0x2000060c

08002118 <NRF24L01_Read_Reg_DMA>:
 *         @RegAddr:寄存器地址
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:读取的数据
 */
uint8_t NRF24L01_Read_Reg_DMA(uint8_t RegAddr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[2] = { NRF_READ_REG | RegAddr, 0xFF };  // 命令+空数据
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	733b      	strb	r3, [r7, #12]
 8002126:	23ff      	movs	r3, #255	@ 0xff
 8002128:	737b      	strb	r3, [r7, #13]
	uint8_t rx_buf[2] = { 0 };                            // 接收缓冲区
 800212a:	2300      	movs	r3, #0
 800212c:	813b      	strh	r3, [r7, #8]

	RF24L01_SET_CS_LOW();          // 片选
 800212e:	2200      	movs	r2, #0
 8002130:	2102      	movs	r1, #2
 8002132:	480e      	ldr	r0, [pc, #56]	@ (800216c <NRF24L01_Read_Reg_DMA+0x54>)
 8002134:	f001 fe1e 	bl	8003d74 <HAL_GPIO_WritePin>

	// 使用DMA进行SPI传输
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8002138:	f107 0208 	add.w	r2, r7, #8
 800213c:	f107 010c 	add.w	r1, r7, #12
 8002140:	2302      	movs	r3, #2
 8002142:	480b      	ldr	r0, [pc, #44]	@ (8002170 <NRF24L01_Read_Reg_DMA+0x58>)
 8002144:	f004 fb8a 	bl	800685c <HAL_SPI_TransmitReceive_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002148:	bf00      	nop
 800214a:	4809      	ldr	r0, [pc, #36]	@ (8002170 <NRF24L01_Read_Reg_DMA+0x58>)
 800214c:	f004 fda7 	bl	8006c9e <HAL_SPI_GetState>
 8002150:	4603      	mov	r3, r0
 8002152:	2b01      	cmp	r3, #1
 8002154:	d1f9      	bne.n	800214a <NRF24L01_Read_Reg_DMA+0x32>

	RF24L01_SET_CS_HIGH();         // 取消片选
 8002156:	2201      	movs	r2, #1
 8002158:	2102      	movs	r1, #2
 800215a:	4804      	ldr	r0, [pc, #16]	@ (800216c <NRF24L01_Read_Reg_DMA+0x54>)
 800215c:	f001 fe0a 	bl	8003d74 <HAL_GPIO_WritePin>

	return rx_buf[1];              // 返回接收到的数据
 8002160:	7a7b      	ldrb	r3, [r7, #9]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40010c00 	.word	0x40010c00
 8002170:	2000060c 	.word	0x2000060c

08002174 <NRF24L01_Read_Buf_DMA>:
 *         @len: 数据长度
 * @note  :数据长度不超过255，地址在设备中有效
 * @retval:无
 */
void NRF24L01_Read_Buf_DMA(uint8_t RegAddr, uint8_t *pBuf, uint8_t len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b092      	sub	sp, #72	@ 0x48
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
 8002180:	4613      	mov	r3, r2
 8002182:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[32];  // 最大32字节
	uint8_t rx_buf[32];

	// 准备发送数据
	tx_buf[0] = NRF_READ_REG | RegAddr;
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	memset(&tx_buf[1], 0xFF, len);  // 填充0xFF用于读取
 800218a:	79ba      	ldrb	r2, [r7, #6]
 800218c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002190:	3301      	adds	r3, #1
 8002192:	21ff      	movs	r1, #255	@ 0xff
 8002194:	4618      	mov	r0, r3
 8002196:	f007 fe2a 	bl	8009dee <memset>

	RF24L01_SET_CS_LOW();          // 片选
 800219a:	2200      	movs	r2, #0
 800219c:	2102      	movs	r1, #2
 800219e:	480f      	ldr	r0, [pc, #60]	@ (80021dc <NRF24L01_Read_Buf_DMA+0x68>)
 80021a0:	f001 fde8 	bl	8003d74 <HAL_GPIO_WritePin>

	// 使用DMA批量传输
	drv_spi_read_write_buffer_dma(tx_buf, rx_buf, len + 1);
 80021a4:	79bb      	ldrb	r3, [r7, #6]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f107 0108 	add.w	r1, r7, #8
 80021b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff91 	bl	80020dc <drv_spi_read_write_buffer_dma>

	// 复制接收到的数据到输出缓冲区
	memcpy(pBuf, &rx_buf[1], len);
 80021ba:	79ba      	ldrb	r2, [r7, #6]
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	3301      	adds	r3, #1
 80021c2:	4619      	mov	r1, r3
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f007 ff32 	bl	800a02e <memcpy>

	RF24L01_SET_CS_HIGH();         // 取消片选
 80021ca:	2201      	movs	r2, #1
 80021cc:	2102      	movs	r1, #2
 80021ce:	4803      	ldr	r0, [pc, #12]	@ (80021dc <NRF24L01_Read_Buf_DMA+0x68>)
 80021d0:	f001 fdd0 	bl	8003d74 <HAL_GPIO_WritePin>
}
 80021d4:	bf00      	nop
 80021d6:	3748      	adds	r7, #72	@ 0x48
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010c00 	.word	0x40010c00

080021e0 <NRF24L01_Write_Reg_DMA>:
 *         @Value:要写入的值
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:无
 */
void NRF24L01_Write_Reg_DMA(uint8_t RegAddr, uint8_t Value)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	460a      	mov	r2, r1
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	4613      	mov	r3, r2
 80021ee:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[2] = { NRF_WRITE_REG | RegAddr, Value };  // 命令+数据
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f043 0320 	orr.w	r3, r3, #32
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	733b      	strb	r3, [r7, #12]
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();      // 片选
 80021fe:	2200      	movs	r2, #0
 8002200:	2102      	movs	r1, #2
 8002202:	480d      	ldr	r0, [pc, #52]	@ (8002238 <NRF24L01_Write_Reg_DMA+0x58>)
 8002204:	f001 fdb6 	bl	8003d74 <HAL_GPIO_WritePin>

	// 使用DMA进行SPI传输
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2202      	movs	r2, #2
 800220e:	4619      	mov	r1, r3
 8002210:	480a      	ldr	r0, [pc, #40]	@ (800223c <NRF24L01_Write_Reg_DMA+0x5c>)
 8002212:	f004 fa71 	bl	80066f8 <HAL_SPI_Transmit_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002216:	bf00      	nop
 8002218:	4808      	ldr	r0, [pc, #32]	@ (800223c <NRF24L01_Write_Reg_DMA+0x5c>)
 800221a:	f004 fd40 	bl	8006c9e <HAL_SPI_GetState>
 800221e:	4603      	mov	r3, r0
 8002220:	2b01      	cmp	r3, #1
 8002222:	d1f9      	bne.n	8002218 <NRF24L01_Write_Reg_DMA+0x38>

	RF24L01_SET_CS_HIGH();     // 取消片选
 8002224:	2201      	movs	r2, #1
 8002226:	2102      	movs	r1, #2
 8002228:	4803      	ldr	r0, [pc, #12]	@ (8002238 <NRF24L01_Write_Reg_DMA+0x58>)
 800222a:	f001 fda3 	bl	8003d74 <HAL_GPIO_WritePin>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40010c00 	.word	0x40010c00
 800223c:	2000060c 	.word	0x2000060c

08002240 <NRF24L01_Read_Status_Register>:
 * @param :无
 * @note  :无
 * @retval:RF24L01状态
 */
uint8_t NRF24L01_Read_Status_Register(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
	uint8_t Status;

	RF24L01_SET_CS_LOW();      //片选
 8002246:	2200      	movs	r2, #0
 8002248:	2102      	movs	r1, #2
 800224a:	4809      	ldr	r0, [pc, #36]	@ (8002270 <NRF24L01_Read_Status_Register+0x30>)
 800224c:	f001 fd92 	bl	8003d74 <HAL_GPIO_WritePin>

	Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS);  //读状态寄存器
 8002250:	2007      	movs	r0, #7
 8002252:	f7ff ff0b 	bl	800206c <drv_spi_read_write_byte>
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]

	RF24L01_SET_CS_HIGH();     //取消片选
 800225a:	2201      	movs	r2, #1
 800225c:	2102      	movs	r1, #2
 800225e:	4804      	ldr	r0, [pc, #16]	@ (8002270 <NRF24L01_Read_Status_Register+0x30>)
 8002260:	f001 fd88 	bl	8003d74 <HAL_GPIO_WritePin>

	return Status;
 8002264:	79fb      	ldrb	r3, [r7, #7]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40010c00 	.word	0x40010c00

08002274 <NRF24L01_Clear_IRQ_Flag>:
 @IRQ_Source:中断源
 * @note  :无
 * @retval:清除后状态寄存器的值
 */
uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); // 保留有效中断位
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002284:	71fb      	strb	r3, [r7, #7]
	status = NRF24L01_Read_Status_Register();                  // 读取当前状态
 8002286:	f7ff ffdb 	bl	8002240 <NRF24L01_Read_Status_Register>
 800228a:	4603      	mov	r3, r0
 800228c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // 拉低CSN
 800228e:	2200      	movs	r2, #0
 8002290:	2102      	movs	r1, #2
 8002292:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <NRF24L01_Clear_IRQ_Flag+0x50>)
 8002294:	f001 fd6e 	bl	8003d74 <HAL_GPIO_WritePin>
	drv_spi_read_write_byte(NRF_WRITE_REG + STATUS);          // 发送写命令
 8002298:	2027      	movs	r0, #39	@ 0x27
 800229a:	f7ff fee7 	bl	800206c <drv_spi_read_write_byte>
	drv_spi_read_write_byte(status | IRQ_Source);             // 写1清中断标志[1]
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fee0 	bl	800206c <drv_spi_read_write_byte>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // 拉高CSN
 80022ac:	2201      	movs	r2, #1
 80022ae:	2102      	movs	r1, #2
 80022b0:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <NRF24L01_Clear_IRQ_Flag+0x50>)
 80022b2:	f001 fd5f 	bl	8003d74 <HAL_GPIO_WritePin>

	return NRF24L01_Read_Status_Register();                   // 返回新状态
 80022b6:	f7ff ffc3 	bl	8002240 <NRF24L01_Read_Status_Register>
 80022ba:	4603      	mov	r3, r0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40010c00 	.word	0x40010c00

080022c8 <NRF24L01_Set_TxAddr_DMA>:
 * @param :
 *         @pAddr:地址存放地址
 *         @len:长度
 */
void NRF24L01_Set_TxAddr_DMA(uint8_t *pAddr, uint8_t len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
	uint8_t tx_buf[6];  // 命令+5字节地址

	len = (len > 5) ? 5 : len;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	bf28      	it	cs
 80022da:	2305      	movcs	r3, #5
 80022dc:	70fb      	strb	r3, [r7, #3]
	tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 80022de:	2330      	movs	r3, #48	@ 0x30
 80022e0:	723b      	strb	r3, [r7, #8]
	memcpy(&tx_buf[1], pAddr, len);
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	3301      	adds	r3, #1
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f007 fe9e 	bl	800a02e <memcpy>

	RF24L01_SET_CS_LOW();
 80022f2:	2200      	movs	r2, #0
 80022f4:	2102      	movs	r1, #2
 80022f6:	480e      	ldr	r0, [pc, #56]	@ (8002330 <NRF24L01_Set_TxAddr_DMA+0x68>)
 80022f8:	f001 fd3c 	bl	8003d74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, len + 1);
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	4619      	mov	r1, r3
 800230a:	480a      	ldr	r0, [pc, #40]	@ (8002334 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 800230c:	f004 f9f4 	bl	80066f8 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002310:	bf00      	nop
 8002312:	4808      	ldr	r0, [pc, #32]	@ (8002334 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8002314:	f004 fcc3 	bl	8006c9e <HAL_SPI_GetState>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d1f9      	bne.n	8002312 <NRF24L01_Set_TxAddr_DMA+0x4a>
	RF24L01_SET_CS_HIGH();
 800231e:	2201      	movs	r2, #1
 8002320:	2102      	movs	r1, #2
 8002322:	4803      	ldr	r0, [pc, #12]	@ (8002330 <NRF24L01_Set_TxAddr_DMA+0x68>)
 8002324:	f001 fd26 	bl	8003d74 <HAL_GPIO_WritePin>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40010c00 	.word	0x40010c00
 8002334:	2000060c 	.word	0x2000060c

08002338 <NRF24L01_Set_RxAddr_DMA>:
 *         @PipeNum:通道
 *         @pAddr:地址存放地址
 *         @Len:长度
 */
void NRF24L01_Set_RxAddr_DMA(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
 8002344:	4613      	mov	r3, r2
 8002346:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[6];  // 命令+5字节地址

	Len = (Len > 5) ? 5 : Len;
 8002348:	79bb      	ldrb	r3, [r7, #6]
 800234a:	2b05      	cmp	r3, #5
 800234c:	bf28      	it	cs
 800234e:	2305      	movcs	r3, #5
 8002350:	71bb      	strb	r3, [r7, #6]
	PipeNum = (PipeNum > 5) ? 5 : PipeNum;
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	2b05      	cmp	r3, #5
 8002356:	bf28      	it	cs
 8002358:	2305      	movcs	r3, #5
 800235a:	71fb      	strb	r3, [r7, #7]

	tx_buf[0] = NRF_WRITE_REG | (RX_ADDR_P0 + PipeNum);
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	330a      	adds	r3, #10
 8002360:	b2db      	uxtb	r3, r3
 8002362:	b25b      	sxtb	r3, r3
 8002364:	f043 0320 	orr.w	r3, r3, #32
 8002368:	b25b      	sxtb	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	723b      	strb	r3, [r7, #8]
	memcpy(&tx_buf[1], pAddr, Len);
 800236e:	79ba      	ldrb	r2, [r7, #6]
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	3301      	adds	r3, #1
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f007 fe58 	bl	800a02e <memcpy>

	RF24L01_SET_CS_LOW();
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	480e      	ldr	r0, [pc, #56]	@ (80023bc <NRF24L01_Set_RxAddr_DMA+0x84>)
 8002384:	f001 fcf6 	bl	8003d74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, Len + 1);
 8002388:	79bb      	ldrb	r3, [r7, #6]
 800238a:	b29b      	uxth	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	4619      	mov	r1, r3
 8002396:	480a      	ldr	r0, [pc, #40]	@ (80023c0 <NRF24L01_Set_RxAddr_DMA+0x88>)
 8002398:	f004 f9ae 	bl	80066f8 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800239c:	bf00      	nop
 800239e:	4808      	ldr	r0, [pc, #32]	@ (80023c0 <NRF24L01_Set_RxAddr_DMA+0x88>)
 80023a0:	f004 fc7d 	bl	8006c9e <HAL_SPI_GetState>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d1f9      	bne.n	800239e <NRF24L01_Set_RxAddr_DMA+0x66>
	RF24L01_SET_CS_HIGH();
 80023aa:	2201      	movs	r2, #1
 80023ac:	2102      	movs	r1, #2
 80023ae:	4803      	ldr	r0, [pc, #12]	@ (80023bc <NRF24L01_Set_RxAddr_DMA+0x84>)
 80023b0:	f001 fce0 	bl	8003d74 <HAL_GPIO_WritePin>
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40010c00 	.word	0x40010c00
 80023c0:	2000060c 	.word	0x2000060c

080023c4 <NRF24L01_check_DMA>:
 * @param :无
 * @note  :使用DMA进行SPI传输检测模块
 * @retval:检测结果(0:失败, 1:成功)
 */
uint8_t NRF24L01_check_DMA(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t buf[5] = { 0xA5, 0xA5, 0xA5, 0xA5, 0xA5 };
 80023ca:	4a42      	ldr	r2, [pc, #264]	@ (80024d4 <NRF24L01_check_DMA+0x110>)
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d4:	6018      	str	r0, [r3, #0]
 80023d6:	3304      	adds	r3, #4
 80023d8:	7019      	strb	r1, [r3, #0]
	uint8_t tx_buf[6], rx_buf[6];
	uint32_t start_time = HAL_GetTick();
 80023da:	f000 ff5d 	bl	8003298 <HAL_GetTick>
 80023de:	61b8      	str	r0, [r7, #24]

	while (1)
	{
		// 使用DMA写入地址
		tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 80023e0:	2330      	movs	r3, #48	@ 0x30
 80023e2:	723b      	strb	r3, [r7, #8]
		memcpy(&tx_buf[1], buf, 5);
 80023e4:	f107 0309 	add.w	r3, r7, #9
 80023e8:	f107 0210 	add.w	r2, r7, #16
 80023ec:	6810      	ldr	r0, [r2, #0]
 80023ee:	6018      	str	r0, [r3, #0]
 80023f0:	7912      	ldrb	r2, [r2, #4]
 80023f2:	711a      	strb	r2, [r3, #4]

		RF24L01_SET_CS_LOW();
 80023f4:	2200      	movs	r2, #0
 80023f6:	2102      	movs	r1, #2
 80023f8:	4837      	ldr	r0, [pc, #220]	@ (80024d8 <NRF24L01_check_DMA+0x114>)
 80023fa:	f001 fcbb 	bl	8003d74 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 6);
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	2206      	movs	r2, #6
 8002404:	4619      	mov	r1, r3
 8002406:	4835      	ldr	r0, [pc, #212]	@ (80024dc <NRF24L01_check_DMA+0x118>)
 8002408:	f004 f976 	bl	80066f8 <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800240c:	bf00      	nop
 800240e:	4833      	ldr	r0, [pc, #204]	@ (80024dc <NRF24L01_check_DMA+0x118>)
 8002410:	f004 fc45 	bl	8006c9e <HAL_SPI_GetState>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d1f9      	bne.n	800240e <NRF24L01_check_DMA+0x4a>
		RF24L01_SET_CS_HIGH();
 800241a:	2201      	movs	r2, #1
 800241c:	2102      	movs	r1, #2
 800241e:	482e      	ldr	r0, [pc, #184]	@ (80024d8 <NRF24L01_check_DMA+0x114>)
 8002420:	f001 fca8 	bl	8003d74 <HAL_GPIO_WritePin>

		// 使用DMA读取地址
		tx_buf[0] = NRF_READ_REG | TX_ADDR;
 8002424:	2310      	movs	r3, #16
 8002426:	723b      	strb	r3, [r7, #8]
		memset(&tx_buf[1], 0xFF, 5);
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	3301      	adds	r3, #1
 800242e:	2205      	movs	r2, #5
 8002430:	21ff      	movs	r1, #255	@ 0xff
 8002432:	4618      	mov	r0, r3
 8002434:	f007 fcdb 	bl	8009dee <memset>

		RF24L01_SET_CS_LOW();
 8002438:	2200      	movs	r2, #0
 800243a:	2102      	movs	r1, #2
 800243c:	4826      	ldr	r0, [pc, #152]	@ (80024d8 <NRF24L01_check_DMA+0x114>)
 800243e:	f001 fc99 	bl	8003d74 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 6);
 8002442:	463a      	mov	r2, r7
 8002444:	f107 0108 	add.w	r1, r7, #8
 8002448:	2306      	movs	r3, #6
 800244a:	4824      	ldr	r0, [pc, #144]	@ (80024dc <NRF24L01_check_DMA+0x118>)
 800244c:	f004 fa06 	bl	800685c <HAL_SPI_TransmitReceive_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002450:	bf00      	nop
 8002452:	4822      	ldr	r0, [pc, #136]	@ (80024dc <NRF24L01_check_DMA+0x118>)
 8002454:	f004 fc23 	bl	8006c9e <HAL_SPI_GetState>
 8002458:	4603      	mov	r3, r0
 800245a:	2b01      	cmp	r3, #1
 800245c:	d1f9      	bne.n	8002452 <NRF24L01_check_DMA+0x8e>
		RF24L01_SET_CS_HIGH();
 800245e:	2201      	movs	r2, #1
 8002460:	2102      	movs	r1, #2
 8002462:	481d      	ldr	r0, [pc, #116]	@ (80024d8 <NRF24L01_check_DMA+0x114>)
 8002464:	f001 fc86 	bl	8003d74 <HAL_GPIO_WritePin>

		// 比较结果
		for (i = 0; i < 5; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	77fb      	strb	r3, [r7, #31]
 800246c:	e00f      	b.n	800248e <NRF24L01_check_DMA+0xca>
		{
			if (buf[i] != rx_buf[i + 1])
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	3320      	adds	r3, #32
 8002472:	443b      	add	r3, r7
 8002474:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002478:	7ffb      	ldrb	r3, [r7, #31]
 800247a:	3301      	adds	r3, #1
 800247c:	3320      	adds	r3, #32
 800247e:	443b      	add	r3, r7
 8002480:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002484:	429a      	cmp	r2, r3
 8002486:	d106      	bne.n	8002496 <NRF24L01_check_DMA+0xd2>
		for (i = 0; i < 5; i++)
 8002488:	7ffb      	ldrb	r3, [r7, #31]
 800248a:	3301      	adds	r3, #1
 800248c:	77fb      	strb	r3, [r7, #31]
 800248e:	7ffb      	ldrb	r3, [r7, #31]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d9ec      	bls.n	800246e <NRF24L01_check_DMA+0xaa>
 8002494:	e000      	b.n	8002498 <NRF24L01_check_DMA+0xd4>
			{
				break;
 8002496:	bf00      	nop
			}
		}

		if (i == 5)
 8002498:	7ffb      	ldrb	r3, [r7, #31]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d101      	bne.n	80024a2 <NRF24L01_check_DMA+0xde>
		{
			return 1; // 检测成功
 800249e:	2301      	movs	r3, #1
 80024a0:	e013      	b.n	80024ca <NRF24L01_check_DMA+0x106>
		}

		// 超时处理(5秒超时)
		if (HAL_GetTick() - start_time > 5000)
 80024a2:	f000 fef9 	bl	8003298 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <NRF24L01_check_DMA+0xf4>
		{
			return 0; // 检测失败
 80024b4:	2300      	movs	r3, #0
 80024b6:	e008      	b.n	80024ca <NRF24L01_check_DMA+0x106>
		}

		// 错误指示
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80024b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024bc:	4808      	ldr	r0, [pc, #32]	@ (80024e0 <NRF24L01_check_DMA+0x11c>)
 80024be:	f001 fc71 	bl	8003da4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80024c2:	2064      	movs	r0, #100	@ 0x64
 80024c4:	f000 fef2 	bl	80032ac <HAL_Delay>
		tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 80024c8:	e78a      	b.n	80023e0 <NRF24L01_check_DMA+0x1c>
	}
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	0800c16c 	.word	0x0800c16c
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	2000060c 	.word	0x2000060c
 80024e0:	40011000 	.word	0x40011000

080024e4 <RF24L01_Set_Mode_DMA>:
 *         @Mode:模式发送模式或接收模式
 * @note  :使用DMA进行寄存器读写
 * @retval:无
 */
void RF24L01_Set_Mode_DMA(nRf24l01ModeType Mode)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[2], rx_buf[2];

	// 使用DMA读取CONFIG寄存器
	tx_buf[0] = NRF_READ_REG | CONFIG;
 80024ee:	2300      	movs	r3, #0
 80024f0:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0xFF;
 80024f2:	23ff      	movs	r3, #255	@ 0xff
 80024f4:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();
 80024f6:	2200      	movs	r2, #0
 80024f8:	2102      	movs	r1, #2
 80024fa:	4824      	ldr	r0, [pc, #144]	@ (800258c <RF24L01_Set_Mode_DMA+0xa8>)
 80024fc:	f001 fc3a 	bl	8003d74 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8002500:	f107 0208 	add.w	r2, r7, #8
 8002504:	f107 010c 	add.w	r1, r7, #12
 8002508:	2302      	movs	r3, #2
 800250a:	4821      	ldr	r0, [pc, #132]	@ (8002590 <RF24L01_Set_Mode_DMA+0xac>)
 800250c:	f004 f9a6 	bl	800685c <HAL_SPI_TransmitReceive_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002510:	bf00      	nop
 8002512:	481f      	ldr	r0, [pc, #124]	@ (8002590 <RF24L01_Set_Mode_DMA+0xac>)
 8002514:	f004 fbc3 	bl	8006c9e <HAL_SPI_GetState>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d1f9      	bne.n	8002512 <RF24L01_Set_Mode_DMA+0x2e>
	RF24L01_SET_CS_HIGH();
 800251e:	2201      	movs	r2, #1
 8002520:	2102      	movs	r1, #2
 8002522:	481a      	ldr	r0, [pc, #104]	@ (800258c <RF24L01_Set_Mode_DMA+0xa8>)
 8002524:	f001 fc26 	bl	8003d74 <HAL_GPIO_WritePin>

	uint8_t controlreg = rx_buf[1];
 8002528:	7a7b      	ldrb	r3, [r7, #9]
 800252a:	73fb      	strb	r3, [r7, #15]

	// 修改模式位
	if (Mode == MODE_TX)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <RF24L01_Set_Mode_DMA+0x58>
	{
		controlreg &= ~(1 << PRIM_RX);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e006      	b.n	800254a <RF24L01_Set_Mode_DMA+0x66>
	}
	else if (Mode == MODE_RX)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d103      	bne.n	800254a <RF24L01_Set_Mode_DMA+0x66>
	{
		controlreg |= (1 << PRIM_RX);
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
	}

	// 使用DMA写入CONFIG寄存器
	tx_buf[0] = NRF_WRITE_REG | CONFIG;
 800254a:	2320      	movs	r3, #32
 800254c:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = controlreg;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();
 8002552:	2200      	movs	r2, #0
 8002554:	2102      	movs	r1, #2
 8002556:	480d      	ldr	r0, [pc, #52]	@ (800258c <RF24L01_Set_Mode_DMA+0xa8>)
 8002558:	f001 fc0c 	bl	8003d74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	2202      	movs	r2, #2
 8002562:	4619      	mov	r1, r3
 8002564:	480a      	ldr	r0, [pc, #40]	@ (8002590 <RF24L01_Set_Mode_DMA+0xac>)
 8002566:	f004 f8c7 	bl	80066f8 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800256a:	bf00      	nop
 800256c:	4808      	ldr	r0, [pc, #32]	@ (8002590 <RF24L01_Set_Mode_DMA+0xac>)
 800256e:	f004 fb96 	bl	8006c9e <HAL_SPI_GetState>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d1f9      	bne.n	800256c <RF24L01_Set_Mode_DMA+0x88>
	RF24L01_SET_CS_HIGH();
 8002578:	2201      	movs	r2, #1
 800257a:	2102      	movs	r1, #2
 800257c:	4803      	ldr	r0, [pc, #12]	@ (800258c <RF24L01_Set_Mode_DMA+0xa8>)
 800257e:	f001 fbf9 	bl	8003d74 <HAL_GPIO_WritePin>
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40010c00 	.word	0x40010c00
 8002590:	2000060c 	.word	0x2000060c

08002594 <NRF24L01_TxPacket_DMA>:
 *         MAX_TX：达到最大重发次数
 *         TX_OK：发送完成
 *         0xFF:其他原因
 */
uint8_t NRF24L01_TxPacket_DMA(uint8_t *txbuf, uint8_t Length)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
	uint8_t l_Status = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	75fb      	strb	r3, [r7, #23]
	uint32_t start_time = HAL_GetTick();
 80025a4:	f000 fe78 	bl	8003298 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]
	uint8_t tx_cmd = WR_TX_PLOAD;
 80025aa:	23a0      	movs	r3, #160	@ 0xa0
 80025ac:	73fb      	strb	r3, [r7, #15]

	// 清空TX FIFO
	RF24L01_SET_CS_LOW();
 80025ae:	2200      	movs	r2, #0
 80025b0:	2102      	movs	r1, #2
 80025b2:	4834      	ldr	r0, [pc, #208]	@ (8002684 <NRF24L01_TxPacket_DMA+0xf0>)
 80025b4:	f001 fbde 	bl	8003d74 <HAL_GPIO_WritePin>
	drv_spi_read_write_byte_dma(FLUSH_TX);
 80025b8:	20e1      	movs	r0, #225	@ 0xe1
 80025ba:	f7ff fd6d 	bl	8002098 <drv_spi_read_write_byte_dma>
	RF24L01_SET_CS_HIGH();
 80025be:	2201      	movs	r2, #1
 80025c0:	2102      	movs	r1, #2
 80025c2:	4830      	ldr	r0, [pc, #192]	@ (8002684 <NRF24L01_TxPacket_DMA+0xf0>)
 80025c4:	f001 fbd6 	bl	8003d74 <HAL_GPIO_WritePin>

	RF24L01_SET_CE_LOW();
 80025c8:	2200      	movs	r2, #0
 80025ca:	2101      	movs	r1, #1
 80025cc:	482d      	ldr	r0, [pc, #180]	@ (8002684 <NRF24L01_TxPacket_DMA+0xf0>)
 80025ce:	f001 fbd1 	bl	8003d74 <HAL_GPIO_WritePin>

	// 使用DMA发送数据
	RF24L01_SET_CS_LOW();
 80025d2:	2200      	movs	r2, #0
 80025d4:	2102      	movs	r1, #2
 80025d6:	482b      	ldr	r0, [pc, #172]	@ (8002684 <NRF24L01_TxPacket_DMA+0xf0>)
 80025d8:	f001 fbcc 	bl	8003d74 <HAL_GPIO_WritePin>

	// 先发送命令字节
	drv_spi_read_write_byte_dma(tx_cmd);
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fd5a 	bl	8002098 <drv_spi_read_write_byte_dma>

	// 然后使用DMA发送数据负载
	HAL_SPI_Transmit_DMA(&hspi1, txbuf, Length);
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4826      	ldr	r0, [pc, #152]	@ (8002688 <NRF24L01_TxPacket_DMA+0xf4>)
 80025ee:	f004 f883 	bl	80066f8 <HAL_SPI_Transmit_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80025f2:	bf00      	nop
 80025f4:	4824      	ldr	r0, [pc, #144]	@ (8002688 <NRF24L01_TxPacket_DMA+0xf4>)
 80025f6:	f004 fb52 	bl	8006c9e <HAL_SPI_GetState>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d1f9      	bne.n	80025f4 <NRF24L01_TxPacket_DMA+0x60>

	RF24L01_SET_CS_HIGH();
 8002600:	2201      	movs	r2, #1
 8002602:	2102      	movs	r1, #2
 8002604:	481f      	ldr	r0, [pc, #124]	@ (8002684 <NRF24L01_TxPacket_DMA+0xf0>)
 8002606:	f001 fbb5 	bl	8003d74 <HAL_GPIO_WritePin>
	RF24L01_SET_CE_HIGH();  // 启动发送
 800260a:	2201      	movs	r2, #1
 800260c:	2101      	movs	r1, #1
 800260e:	481d      	ldr	r0, [pc, #116]	@ (8002684 <NRF24L01_TxPacket_DMA+0xf0>)
 8002610:	f001 fbb0 	bl	8003d74 <HAL_GPIO_WritePin>

	// 等待传输完成或超时
	while (RF24L01_GET_IRQ_STATUS() != 0)
 8002614:	e00e      	b.n	8002634 <NRF24L01_TxPacket_DMA+0xa0>
	{
		if (HAL_GetTick() - start_time > 100)  // 500ms超时
 8002616:	f000 fe3f 	bl	8003298 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	@ 0x64
 8002622:	d907      	bls.n	8002634 <NRF24L01_TxPacket_DMA+0xa0>
		{
			NRF24L01_Gpio_Init();
 8002624:	f000 f88e 	bl	8002744 <NRF24L01_Gpio_Init>
			RF24L01_Init_DMA();
 8002628:	f000 f8a8 	bl	800277c <RF24L01_Init_DMA>
			RF24L01_Set_Mode_DMA(MODE_TX);
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff ff59 	bl	80024e4 <RF24L01_Set_Mode_DMA>
			break;
 8002632:	e005      	b.n	8002640 <NRF24L01_TxPacket_DMA+0xac>
	while (RF24L01_GET_IRQ_STATUS() != 0)
 8002634:	4b15      	ldr	r3, [pc, #84]	@ (800268c <NRF24L01_TxPacket_DMA+0xf8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b10      	cmp	r3, #16
 800263e:	d0ea      	beq.n	8002616 <NRF24L01_TxPacket_DMA+0x82>
		}
	}

	// 读取并清除状态
	l_Status = NRF24L01_Read_Reg_DMA(STATUS);
 8002640:	2007      	movs	r0, #7
 8002642:	f7ff fd69 	bl	8002118 <NRF24L01_Read_Reg_DMA>
 8002646:	4603      	mov	r3, r0
 8002648:	75fb      	strb	r3, [r7, #23]
	NRF24L01_Write_Reg_DMA(STATUS, l_Status);
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	4619      	mov	r1, r3
 800264e:	2007      	movs	r0, #7
 8002650:	f7ff fdc6 	bl	80021e0 <NRF24L01_Write_Reg_DMA>

	if (l_Status & MAX_TX) // 达到最大重发次数
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <NRF24L01_TxPacket_DMA+0xd6>
	{
		NRF24L01_Write_Reg_DMA(FLUSH_TX, 0xff);
 800265e:	21ff      	movs	r1, #255	@ 0xff
 8002660:	20e1      	movs	r0, #225	@ 0xe1
 8002662:	f7ff fdbd 	bl	80021e0 <NRF24L01_Write_Reg_DMA>
		return MAX_TX;
 8002666:	2310      	movs	r3, #16
 8002668:	e007      	b.n	800267a <NRF24L01_TxPacket_DMA+0xe6>
	}
	if (l_Status & TX_OK)  // 发送完成
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <NRF24L01_TxPacket_DMA+0xe4>
	{
		return TX_OK;
 8002674:	2320      	movs	r3, #32
 8002676:	e000      	b.n	800267a <NRF24L01_TxPacket_DMA+0xe6>
	}

	return 0xFF;  // 其他原因发送失败
 8002678:	23ff      	movs	r3, #255	@ 0xff
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40010c00 	.word	0x40010c00
 8002688:	2000060c 	.word	0x2000060c
 800268c:	40010800 	.word	0x40010800

08002690 <NRF24L01_RxPacket_DMA>:
 *         @rxbuf:接收数据存放地址
 * @note  :无
 * @retval:接收的数据个数
 */
uint8_t NRF24L01_RxPacket_DMA(uint8_t *rxbuf)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	uint8_t l_Status = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	75fb      	strb	r3, [r7, #23]
	uint32_t start_time = HAL_GetTick();
 800269c:	f000 fdfc 	bl	8003298 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]
	uint8_t l_RxLength = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]

	RF24L01_SET_CS_LOW();      //片选
 80026a6:	2200      	movs	r2, #0
 80026a8:	2102      	movs	r1, #2
 80026aa:	4824      	ldr	r0, [pc, #144]	@ (800273c <NRF24L01_RxPacket_DMA+0xac>)
 80026ac:	f001 fb62 	bl	8003d74 <HAL_GPIO_WritePin>
	drv_spi_read_write_byte_dma( FLUSH_RX);
 80026b0:	20e2      	movs	r0, #226	@ 0xe2
 80026b2:	f7ff fcf1 	bl	8002098 <drv_spi_read_write_byte_dma>
	RF24L01_SET_CS_HIGH();
 80026b6:	2201      	movs	r2, #1
 80026b8:	2102      	movs	r1, #2
 80026ba:	4820      	ldr	r0, [pc, #128]	@ (800273c <NRF24L01_RxPacket_DMA+0xac>)
 80026bc:	f001 fb5a 	bl	8003d74 <HAL_GPIO_WritePin>

	// 等待传输完成或超时
		while (RF24L01_GET_IRQ_STATUS() != 0)
 80026c0:	e011      	b.n	80026e6 <NRF24L01_RxPacket_DMA+0x56>
		{
			if (HAL_GetTick() - start_time > 100)  // 500ms超时
 80026c2:	f000 fde9 	bl	8003298 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	@ 0x64
 80026ce:	d907      	bls.n	80026e0 <NRF24L01_RxPacket_DMA+0x50>
			{
				NRF24L01_Gpio_Init();
 80026d0:	f000 f838 	bl	8002744 <NRF24L01_Gpio_Init>
				RF24L01_Init_DMA();
 80026d4:	f000 f852 	bl	800277c <RF24L01_Init_DMA>
				RF24L01_Set_Mode_DMA(MODE_RX);
 80026d8:	2001      	movs	r0, #1
 80026da:	f7ff ff03 	bl	80024e4 <RF24L01_Set_Mode_DMA>
				break;
 80026de:	e008      	b.n	80026f2 <NRF24L01_RxPacket_DMA+0x62>
			}
			HAL_Delay(1);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f000 fde3 	bl	80032ac <HAL_Delay>
		while (RF24L01_GET_IRQ_STATUS() != 0)
 80026e6:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <NRF24L01_RxPacket_DMA+0xb0>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d0e7      	beq.n	80026c2 <NRF24L01_RxPacket_DMA+0x32>
		}

	l_Status = NRF24L01_Read_Reg_DMA( STATUS);     //读状态寄存器
 80026f2:	2007      	movs	r0, #7
 80026f4:	f7ff fd10 	bl	8002118 <NRF24L01_Read_Reg_DMA>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]
	NRF24L01_Write_Reg_DMA( STATUS, l_Status);      //清中断标志
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	4619      	mov	r1, r3
 8002700:	2007      	movs	r0, #7
 8002702:	f7ff fd6d 	bl	80021e0 <NRF24L01_Write_Reg_DMA>
	if (l_Status & RX_OK)   //接收到数据
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d010      	beq.n	8002732 <NRF24L01_RxPacket_DMA+0xa2>
	{
		l_RxLength = NRF24L01_Read_Reg_DMA( R_RX_PL_WID);      //读取接收到的数据个数
 8002710:	2060      	movs	r0, #96	@ 0x60
 8002712:	f7ff fd01 	bl	8002118 <NRF24L01_Read_Reg_DMA>
 8002716:	4603      	mov	r3, r0
 8002718:	73fb      	strb	r3, [r7, #15]
		NRF24L01_Read_Buf_DMA( RD_RX_PLOAD, rxbuf, l_RxLength);  //接收到数据
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	461a      	mov	r2, r3
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	2061      	movs	r0, #97	@ 0x61
 8002722:	f7ff fd27 	bl	8002174 <NRF24L01_Read_Buf_DMA>
		NRF24L01_Write_Reg_DMA( FLUSH_RX, 0xff);                //清除RX FIFO
 8002726:	21ff      	movs	r1, #255	@ 0xff
 8002728:	20e2      	movs	r0, #226	@ 0xe2
 800272a:	f7ff fd59 	bl	80021e0 <NRF24L01_Write_Reg_DMA>
		return l_RxLength;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	e000      	b.n	8002734 <NRF24L01_RxPacket_DMA+0xa4>
	}

	return 0;               //没有收到数据
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40010c00 	.word	0x40010c00
 8002740:	40010800 	.word	0x40010800

08002744 <NRF24L01_Gpio_Init>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void NRF24L01_Gpio_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	2101      	movs	r1, #1
 800274c:	4809      	ldr	r0, [pc, #36]	@ (8002774 <NRF24L01_Gpio_Init+0x30>)
 800274e:	f001 fb11 	bl	8003d74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002752:	2201      	movs	r2, #1
 8002754:	2110      	movs	r1, #16
 8002756:	4808      	ldr	r0, [pc, #32]	@ (8002778 <NRF24L01_Gpio_Init+0x34>)
 8002758:	f001 fb0c 	bl	8003d74 <HAL_GPIO_WritePin>

	RF24L01_SET_CE_LOW();      //??24L01
 800275c:	2200      	movs	r2, #0
 800275e:	2101      	movs	r1, #1
 8002760:	4804      	ldr	r0, [pc, #16]	@ (8002774 <NRF24L01_Gpio_Init+0x30>)
 8002762:	f001 fb07 	bl	8003d74 <HAL_GPIO_WritePin>
	RF24L01_SET_CS_HIGH();     //??SPI??
 8002766:	2201      	movs	r2, #1
 8002768:	2102      	movs	r1, #2
 800276a:	4802      	ldr	r0, [pc, #8]	@ (8002774 <NRF24L01_Gpio_Init+0x30>)
 800276c:	f001 fb02 	bl	8003d74 <HAL_GPIO_WritePin>

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40010c00 	.word	0x40010c00
 8002778:	40010800 	.word	0x40010800

0800277c <RF24L01_Init_DMA>:
 * @param :无
 * @note  :使用DMA批量配置寄存器，提高初始化速度
 * @retval:无
 */
void RF24L01_Init_DMA(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
	uint8_t addr[5] = { INIT_ADDR };
 8002782:	4a2d      	ldr	r2, [pc, #180]	@ (8002838 <RF24L01_Init_DMA+0xbc>)
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	e892 0003 	ldmia.w	r2, {r0, r1}
 800278a:	6018      	str	r0, [r3, #0]
 800278c:	3304      	adds	r3, #4
 800278e:	7019      	strb	r1, [r3, #0]

	// 初始化状态
	RF24L01_SET_CE_HIGH();
 8002790:	2201      	movs	r2, #1
 8002792:	2101      	movs	r1, #1
 8002794:	4829      	ldr	r0, [pc, #164]	@ (800283c <RF24L01_Init_DMA+0xc0>)
 8002796:	f001 faed 	bl	8003d74 <HAL_GPIO_WritePin>
	NRF24L01_Clear_IRQ_Flag(IRQ_ALL);
 800279a:	2070      	movs	r0, #112	@ 0x70
 800279c:	f7ff fd6a 	bl	8002274 <NRF24L01_Clear_IRQ_Flag>
	                AW_5BYTES },
	        { SETUP_RETR, ARD_4000US | (REPEAT_CNT & 0x0F) }, { RF_CH, 60 }, {
	                RF_SETUP, 0x26 } };

	// 使用DMA批量写入寄存器配置
	for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e036      	b.n	8002814 <RF24L01_Init_DMA+0x98>
	{
		uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 80027a6:	4a26      	ldr	r2, [pc, #152]	@ (8002840 <RF24L01_Init_DMA+0xc4>)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	703b      	strb	r3, [r7, #0]
		        init_config[i].val };
 80027b6:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <RF24L01_Init_DMA+0xc4>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	785b      	ldrb	r3, [r3, #1]
		uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 80027c0:	707b      	strb	r3, [r7, #1]

		RF24L01_SET_CS_LOW();
 80027c2:	2200      	movs	r2, #0
 80027c4:	2102      	movs	r1, #2
 80027c6:	481d      	ldr	r0, [pc, #116]	@ (800283c <RF24L01_Init_DMA+0xc0>)
 80027c8:	f001 fad4 	bl	8003d74 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 80027cc:	463b      	mov	r3, r7
 80027ce:	2202      	movs	r2, #2
 80027d0:	4619      	mov	r1, r3
 80027d2:	481c      	ldr	r0, [pc, #112]	@ (8002844 <RF24L01_Init_DMA+0xc8>)
 80027d4:	f003 ff90 	bl	80066f8 <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80027d8:	bf00      	nop
 80027da:	481a      	ldr	r0, [pc, #104]	@ (8002844 <RF24L01_Init_DMA+0xc8>)
 80027dc:	f004 fa5f 	bl	8006c9e <HAL_SPI_GetState>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d1f9      	bne.n	80027da <RF24L01_Init_DMA+0x5e>
		RF24L01_SET_CS_HIGH();
 80027e6:	2201      	movs	r2, #1
 80027e8:	2102      	movs	r1, #2
 80027ea:	4814      	ldr	r0, [pc, #80]	@ (800283c <RF24L01_Init_DMA+0xc0>)
 80027ec:	f001 fac2 	bl	8003d74 <HAL_GPIO_WritePin>

		// 添加必要的延时(某些寄存器写入后需要稳定时间)
		if (init_config[i].reg == CONFIG || init_config[i].reg == RF_SETUP)
 80027f0:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <RF24L01_Init_DMA+0xc4>)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <RF24L01_Init_DMA+0x8c>
 80027fc:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <RF24L01_Init_DMA+0xc4>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d102      	bne.n	800280e <RF24L01_Init_DMA+0x92>
		{
			HAL_Delay(1);
 8002808:	2001      	movs	r0, #1
 800280a:	f000 fd4f 	bl	80032ac <HAL_Delay>
	for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3301      	adds	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b08      	cmp	r3, #8
 8002818:	d9c5      	bls.n	80027a6 <RF24L01_Init_DMA+0x2a>
		}
	}

	// 设置地址(使用DMA版本)
	NRF24L01_Set_TxAddr_DMA(&addr[0], 5);       // 设置TX地址
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2105      	movs	r1, #5
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fd52 	bl	80022c8 <NRF24L01_Set_TxAddr_DMA>
	NRF24L01_Set_RxAddr_DMA(0, &addr[0], 5);    // 设置RX地址
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2205      	movs	r2, #5
 8002828:	4619      	mov	r1, r3
 800282a:	2000      	movs	r0, #0
 800282c:	f7ff fd84 	bl	8002338 <NRF24L01_Set_RxAddr_DMA>

	// 可选的速度和功率设置
	// NRF24L01_Set_Speed_DMA(SPEED_1M);
	// NRF24L01_Set_Power_DMA(POWER_F18DBM);
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	0800c174 	.word	0x0800c174
 800283c:	40010c00 	.word	0x40010c00
 8002840:	0800c17c 	.word	0x0800c17c
 8002844:	2000060c 	.word	0x2000060c

08002848 <mode_change>:

void mode_change(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	 RF24L01_Set_Mode_DMA(MODE_TX); // 发送模式
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fe49 	bl	80024e4 <RF24L01_Set_Mode_DMA>
        // snprintf(GPS_timer, 512, "%s:%s:%s\r\n", hh, mm, ss); // 格式化为 hh:mm:ss.sss
        // do
        // {
          // snprintf(GPS_timer, 32, "%c \r\n", gps_data.status); // 发送数据

          if (NRF24L01_TxPacket_DMA(GPS_timer, 20) == TX_OK) // 发送数据
 8002852:	2114      	movs	r1, #20
 8002854:	4808      	ldr	r0, [pc, #32]	@ (8002878 <mode_change+0x30>)
 8002856:	f7ff fe9d 	bl	8002594 <NRF24L01_TxPacket_DMA>
 800285a:	4603      	mov	r3, r0
 800285c:	2b20      	cmp	r3, #32
 800285e:	d106      	bne.n	800286e <mode_change+0x26>
          {
            conversion = 0; // 重置转换标志
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <mode_change+0x34>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
            gps_data.updata = 0;
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <mode_change+0x38>)
 8002868:	2200      	movs	r2, #0
 800286a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			// break; // 发送成功，退出循环
		  }
        // } while (1); // 发送数据

        RF24L01_Set_Mode_DMA(MODE_RX); // 接收模式
 800286e:	2001      	movs	r0, #1
 8002870:	f7ff fe38 	bl	80024e4 <RF24L01_Set_Mode_DMA>
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000484 	.word	0x20000484
 800287c:	20000608 	.word	0x20000608
 8002880:	20000230 	.word	0x20000230

08002884 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002888:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <MX_SPI1_Init+0x64>)
 800288a:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <MX_SPI1_Init+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800288e:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <MX_SPI1_Init+0x64>)
 8002890:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002896:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <MX_SPI1_Init+0x64>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <MX_SPI1_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a2:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028b8:	2218      	movs	r2, #24
 80028ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028be:	2200      	movs	r2, #0
 80028c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c8:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028d0:	220a      	movs	r2, #10
 80028d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028d4:	4804      	ldr	r0, [pc, #16]	@ (80028e8 <MX_SPI1_Init+0x64>)
 80028d6:	f003 fce1 	bl	800629c <HAL_SPI_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028e0:	f7ff fbbd 	bl	800205e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	2000060c 	.word	0x2000060c
 80028ec:	40013000 	.word	0x40013000

080028f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a47      	ldr	r2, [pc, #284]	@ (8002a28 <HAL_SPI_MspInit+0x138>)
 800290c:	4293      	cmp	r3, r2
 800290e:	f040 8086 	bne.w	8002a1e <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002912:	4b46      	ldr	r3, [pc, #280]	@ (8002a2c <HAL_SPI_MspInit+0x13c>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4a45      	ldr	r2, [pc, #276]	@ (8002a2c <HAL_SPI_MspInit+0x13c>)
 8002918:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800291c:	6193      	str	r3, [r2, #24]
 800291e:	4b43      	ldr	r3, [pc, #268]	@ (8002a2c <HAL_SPI_MspInit+0x13c>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b40      	ldr	r3, [pc, #256]	@ (8002a2c <HAL_SPI_MspInit+0x13c>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a2c <HAL_SPI_MspInit+0x13c>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6193      	str	r3, [r2, #24]
 8002936:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_SPI_MspInit+0x13c>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002942:	23a0      	movs	r3, #160	@ 0xa0
 8002944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	f107 0310 	add.w	r3, r7, #16
 8002952:	4619      	mov	r1, r3
 8002954:	4836      	ldr	r0, [pc, #216]	@ (8002a30 <HAL_SPI_MspInit+0x140>)
 8002956:	f001 f889 	bl	8003a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800295a:	2340      	movs	r3, #64	@ 0x40
 800295c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	4619      	mov	r1, r3
 800296c:	4830      	ldr	r0, [pc, #192]	@ (8002a30 <HAL_SPI_MspInit+0x140>)
 800296e:	f001 f87d 	bl	8003a6c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002972:	4b30      	ldr	r3, [pc, #192]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 8002974:	4a30      	ldr	r2, [pc, #192]	@ (8002a38 <HAL_SPI_MspInit+0x148>)
 8002976:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002978:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 800297a:	2200      	movs	r2, #0
 800297c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002984:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 8002986:	2280      	movs	r2, #128	@ 0x80
 8002988:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002990:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 8002992:	2200      	movs	r2, #0
 8002994:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002996:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800299c:	4b25      	ldr	r3, [pc, #148]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 800299e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80029a4:	4823      	ldr	r0, [pc, #140]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 80029a6:	f000 fdb3 	bl	8003510 <HAL_DMA_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80029b0:	f7ff fb55 	bl	800205e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 80029b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80029ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <HAL_SPI_MspInit+0x144>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80029c0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <HAL_SPI_MspInit+0x150>)
 80029c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029c8:	2210      	movs	r2, #16
 80029ca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029d4:	2280      	movs	r2, #128	@ 0x80
 80029d6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d8:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029de:	4b17      	ldr	r3, [pc, #92]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80029e4:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80029ea:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80029f2:	4812      	ldr	r0, [pc, #72]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 80029f4:	f000 fd8c 	bl	8003510 <HAL_DMA_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80029fe:	f7ff fb2e 	bl	800205e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 8002a06:	649a      	str	r2, [r3, #72]	@ 0x48
 8002a08:	4a0c      	ldr	r2, [pc, #48]	@ (8002a3c <HAL_SPI_MspInit+0x14c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	2023      	movs	r0, #35	@ 0x23
 8002a14:	f000 fd45 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a18:	2023      	movs	r0, #35	@ 0x23
 8002a1a:	f000 fd5e 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40013000 	.word	0x40013000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010800 	.word	0x40010800
 8002a34:	20000664 	.word	0x20000664
 8002a38:	4002001c 	.word	0x4002001c
 8002a3c:	200006a8 	.word	0x200006a8
 8002a40:	40020030 	.word	0x40020030

08002a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_MspInit+0x5c>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <HAL_MspInit+0x5c>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6193      	str	r3, [r2, #24]
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <HAL_MspInit+0x5c>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_MspInit+0x5c>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa0 <HAL_MspInit+0x5c>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a6c:	61d3      	str	r3, [r2, #28]
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_MspInit+0x5c>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_MspInit+0x60>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	4a04      	ldr	r2, [pc, #16]	@ (8002aa4 <HAL_MspInit+0x60>)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <NMI_Handler+0x4>

08002ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <HardFault_Handler+0x4>

08002ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002abc:	bf00      	nop
 8002abe:	e7fd      	b.n	8002abc <MemManage_Handler+0x4>

08002ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <BusFault_Handler+0x4>

08002ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <UsageFault_Handler+0x4>

08002ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af8:	f000 fbbc 	bl	8003274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002b04:	4802      	ldr	r0, [pc, #8]	@ (8002b10 <DMA1_Channel2_IRQHandler+0x10>)
 8002b06:	f000 fe71 	bl	80037ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000664 	.word	0x20000664

08002b14 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b18:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <DMA1_Channel3_IRQHandler+0x10>)
 8002b1a:	f000 fe67 	bl	80037ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200006a8 	.word	0x200006a8

08002b28 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b2c:	4802      	ldr	r0, [pc, #8]	@ (8002b38 <DMA1_Channel5_IRQHandler+0x10>)
 8002b2e:	f000 fe5d 	bl	80037ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200007d0 	.word	0x200007d0

08002b3c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002b40:	4802      	ldr	r0, [pc, #8]	@ (8002b4c <DMA1_Channel6_IRQHandler+0x10>)
 8002b42:	f000 fe53 	bl	80037ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000053c 	.word	0x2000053c

08002b50 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002b54:	4802      	ldr	r0, [pc, #8]	@ (8002b60 <DMA1_Channel7_IRQHandler+0x10>)
 8002b56:	f000 fe49 	bl	80037ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200004f8 	.word	0x200004f8

08002b64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b68:	4802      	ldr	r0, [pc, #8]	@ (8002b74 <TIM1_UP_IRQHandler+0x10>)
 8002b6a:	f004 fc97 	bl	800749c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200006f8 	.word	0x200006f8

08002b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b7c:	4802      	ldr	r0, [pc, #8]	@ (8002b88 <TIM2_IRQHandler+0x10>)
 8002b7e:	f004 fc8d 	bl	800749c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000740 	.word	0x20000740

08002b8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b90:	4802      	ldr	r0, [pc, #8]	@ (8002b9c <I2C1_EV_IRQHandler+0x10>)
 8002b92:	f001 fa79 	bl	8004088 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200004a4 	.word	0x200004a4

08002ba0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ba4:	4802      	ldr	r0, [pc, #8]	@ (8002bb0 <I2C1_ER_IRQHandler+0x10>)
 8002ba6:	f001 fbe0 	bl	800436a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200004a4 	.word	0x200004a4

08002bb4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002bb8:	4802      	ldr	r0, [pc, #8]	@ (8002bc4 <SPI1_IRQHandler+0x10>)
 8002bba:	f003 ff4b 	bl	8006a54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000060c 	.word	0x2000060c

08002bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bcc:	4802      	ldr	r0, [pc, #8]	@ (8002bd8 <USART1_IRQHandler+0x10>)
 8002bce:	f005 faa1 	bl	8008114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000788 	.word	0x20000788

08002bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <_kill>:

int _kill(int pid, int sig)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bf4:	f007 f9ee 	bl	8009fd4 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2216      	movs	r2, #22
 8002bfc:	601a      	str	r2, [r3, #0]
  return -1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_exit>:

void _exit (int status)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c12:	f04f 31ff 	mov.w	r1, #4294967295
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ffe7 	bl	8002bea <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <_exit+0x12>

08002c20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e00a      	b.n	8002c48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c32:	f3af 8000 	nop.w
 8002c36:	4601      	mov	r1, r0
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	60ba      	str	r2, [r7, #8]
 8002c3e:	b2ca      	uxtb	r2, r1
 8002c40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3301      	adds	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dbf0      	blt.n	8002c32 <_read+0x12>
  }

  return len;
 8002c50:	687b      	ldr	r3, [r7, #4]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e009      	b.n	8002c80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	60ba      	str	r2, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	dbf1      	blt.n	8002c6c <_write+0x12>
  }
  return len;
 8002c88:	687b      	ldr	r3, [r7, #4]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_close>:

int _close(int file)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cb8:	605a      	str	r2, [r3, #4]
  return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <_isatty>:

int _isatty(int file)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
	...

08002cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cfc:	4a14      	ldr	r2, [pc, #80]	@ (8002d50 <_sbrk+0x5c>)
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <_sbrk+0x60>)
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d10:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <_sbrk+0x64>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	@ (8002d5c <_sbrk+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d16:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <_sbrk+0x64>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d207      	bcs.n	8002d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d24:	f007 f956 	bl	8009fd4 <__errno>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d32:	e009      	b.n	8002d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d34:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <_sbrk+0x64>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	4a05      	ldr	r2, [pc, #20]	@ (8002d58 <_sbrk+0x64>)
 8002d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20005000 	.word	0x20005000
 8002d54:	00000400 	.word	0x00000400
 8002d58:	200006ec 	.word	0x200006ec
 8002d5c:	20000968 	.word	0x20000968

08002d60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d80:	463b      	mov	r3, r7
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002d8a:	4a20      	ldr	r2, [pc, #128]	@ (8002e0c <MX_TIM1_Init+0xa0>)
 8002d8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002d90:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8002d94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002d9e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002da2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da4:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002daa:	4b17      	ldr	r3, [pc, #92]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002db0:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002db2:	2280      	movs	r2, #128	@ 0x80
 8002db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002db6:	4814      	ldr	r0, [pc, #80]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002db8:	f004 f9d5 	bl	8007166 <HAL_TIM_Base_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002dc2:	f7ff f94c 	bl	800205e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480d      	ldr	r0, [pc, #52]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002dd4:	f004 fd14 	bl	8007800 <HAL_TIM_ConfigClockSource>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002dde:	f7ff f93e 	bl	800205e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dea:	463b      	mov	r3, r7
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	@ (8002e08 <MX_TIM1_Init+0x9c>)
 8002df0:	f005 f8aa 	bl	8007f48 <HAL_TIMEx_MasterConfigSynchronization>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002dfa:	f7ff f930 	bl	800205e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200006f8 	.word	0x200006f8
 8002e0c:	40012c00 	.word	0x40012c00

08002e10 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08e      	sub	sp, #56	@ 0x38
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e24:	f107 0320 	add.w	r3, r7, #32
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
 8002e3c:	615a      	str	r2, [r3, #20]
 8002e3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e40:	4b44      	ldr	r3, [pc, #272]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e48:	4b42      	ldr	r3, [pc, #264]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4e:	4b41      	ldr	r3, [pc, #260]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8002e54:	4b3f      	ldr	r3, [pc, #252]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e56:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8002e5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e62:	4b3c      	ldr	r3, [pc, #240]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e64:	2280      	movs	r2, #128	@ 0x80
 8002e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e68:	483a      	ldr	r0, [pc, #232]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e6a:	f004 f97c 	bl	8007166 <HAL_TIM_Base_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002e74:	f7ff f8f3 	bl	800205e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e82:	4619      	mov	r1, r3
 8002e84:	4833      	ldr	r0, [pc, #204]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e86:	f004 fcbb 	bl	8007800 <HAL_TIM_ConfigClockSource>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002e90:	f7ff f8e5 	bl	800205e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e94:	482f      	ldr	r0, [pc, #188]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002e96:	f004 fa07 	bl	80072a8 <HAL_TIM_PWM_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ea0:	f7ff f8dd 	bl	800205e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eac:	f107 0320 	add.w	r3, r7, #32
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4828      	ldr	r0, [pc, #160]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002eb4:	f005 f848 	bl	8007f48 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002ebe:	f7ff f8ce 	bl	800205e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ec2:	2360      	movs	r3, #96	@ 0x60
 8002ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = Rpwm_in1;
 8002ec6:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <MX_TIM2_Init+0x148>)
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4619      	mov	r1, r3
 8002edc:	481d      	ldr	r0, [pc, #116]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002ede:	f004 fbcd 	bl	800767c <HAL_TIM_PWM_ConfigChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002ee8:	f7ff f8b9 	bl	800205e <Error_Handler>
  }
  sConfigOC.Pulse = Rpwm_in2;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <MX_TIM2_Init+0x14c>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4816      	ldr	r0, [pc, #88]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002efc:	f004 fbbe 	bl	800767c <HAL_TIM_PWM_ConfigChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8002f06:	f7ff f8aa 	bl	800205e <Error_Handler>
  }
  sConfigOC.Pulse = Lpwm_in1;
 8002f0a:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <MX_TIM2_Init+0x150>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	2208      	movs	r2, #8
 8002f16:	4619      	mov	r1, r3
 8002f18:	480e      	ldr	r0, [pc, #56]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002f1a:	f004 fbaf 	bl	800767c <HAL_TIM_PWM_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8002f24:	f7ff f89b 	bl	800205e <Error_Handler>
  }
  sConfigOC.Pulse = Lpwm_in2;
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <MX_TIM2_Init+0x154>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	220c      	movs	r2, #12
 8002f34:	4619      	mov	r1, r3
 8002f36:	4807      	ldr	r0, [pc, #28]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002f38:	f004 fba0 	bl	800767c <HAL_TIM_PWM_ConfigChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 8002f42:	f7ff f88c 	bl	800205e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f46:	4803      	ldr	r0, [pc, #12]	@ (8002f54 <MX_TIM2_Init+0x144>)
 8002f48:	f000 f84e 	bl	8002fe8 <HAL_TIM_MspPostInit>

}
 8002f4c:	bf00      	nop
 8002f4e:	3738      	adds	r7, #56	@ 0x38
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000740 	.word	0x20000740
 8002f58:	200006f0 	.word	0x200006f0
 8002f5c:	200006f2 	.word	0x200006f2
 8002f60:	200006f4 	.word	0x200006f4
 8002f64:	200006f6 	.word	0x200006f6

08002f68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe0 <HAL_TIM_Base_MspInit+0x78>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d114      	bne.n	8002fa4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	4a19      	ldr	r2, [pc, #100]	@ (8002fe4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f84:	6193      	str	r3, [r2, #24]
 8002f86:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <HAL_TIM_Base_MspInit+0x7c>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2019      	movs	r0, #25
 8002f98:	f000 fa83 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002f9c:	2019      	movs	r0, #25
 8002f9e:	f000 fa9c 	bl	80034da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002fa2:	e018      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fac:	d113      	bne.n	8002fd6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <HAL_TIM_Base_MspInit+0x7c>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe4 <HAL_TIM_Base_MspInit+0x7c>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	61d3      	str	r3, [r2, #28]
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <HAL_TIM_Base_MspInit+0x7c>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	201c      	movs	r0, #28
 8002fcc:	f000 fa69 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fd0:	201c      	movs	r0, #28
 8002fd2:	f000 fa82 	bl	80034da <HAL_NVIC_EnableIRQ>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d117      	bne.n	8003038 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003008:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <HAL_TIM_MspPostInit+0x58>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4a0c      	ldr	r2, [pc, #48]	@ (8003040 <HAL_TIM_MspPostInit+0x58>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6193      	str	r3, [r2, #24]
 8003014:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <HAL_TIM_MspPostInit+0x58>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Rpwm_in1_Pin|Rpwm_in2_Pin|Lpwm_in1_Pin|Lpwm_in2_Pin;
 8003020:	230f      	movs	r3, #15
 8003022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003028:	2302      	movs	r3, #2
 800302a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	4619      	mov	r1, r3
 8003032:	4804      	ldr	r0, [pc, #16]	@ (8003044 <HAL_TIM_MspPostInit+0x5c>)
 8003034:	f000 fd1a 	bl	8003a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003038:	bf00      	nop
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	40010800 	.word	0x40010800

08003048 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 800304e:	4a12      	ldr	r2, [pc, #72]	@ (8003098 <MX_USART1_UART_Init+0x50>)
 8003050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 8003054:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800305a:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 8003062:	2200      	movs	r2, #0
 8003064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003066:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800306c:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 800306e:	220c      	movs	r2, #12
 8003070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 8003074:	2200      	movs	r2, #0
 8003076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 800307a:	2200      	movs	r2, #0
 800307c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800307e:	4805      	ldr	r0, [pc, #20]	@ (8003094 <MX_USART1_UART_Init+0x4c>)
 8003080:	f004 ffd2 	bl	8008028 <HAL_UART_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800308a:	f7fe ffe8 	bl	800205e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000788 	.word	0x20000788
 8003098:	40013800 	.word	0x40013800

0800309c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0310 	add.w	r3, r7, #16
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a34      	ldr	r2, [pc, #208]	@ (8003188 <HAL_UART_MspInit+0xec>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d160      	bne.n	800317e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030bc:	4b33      	ldr	r3, [pc, #204]	@ (800318c <HAL_UART_MspInit+0xf0>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a32      	ldr	r2, [pc, #200]	@ (800318c <HAL_UART_MspInit+0xf0>)
 80030c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b30      	ldr	r3, [pc, #192]	@ (800318c <HAL_UART_MspInit+0xf0>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d4:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_UART_MspInit+0xf0>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4a2c      	ldr	r2, [pc, #176]	@ (800318c <HAL_UART_MspInit+0xf0>)
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	6193      	str	r3, [r2, #24]
 80030e0:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <HAL_UART_MspInit+0xf0>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	4619      	mov	r1, r3
 8003100:	4823      	ldr	r0, [pc, #140]	@ (8003190 <HAL_UART_MspInit+0xf4>)
 8003102:	f000 fcb3 	bl	8003a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800310a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	4619      	mov	r1, r3
 800311a:	481d      	ldr	r0, [pc, #116]	@ (8003190 <HAL_UART_MspInit+0xf4>)
 800311c:	f000 fca6 	bl	8003a6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003120:	4b1c      	ldr	r3, [pc, #112]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 8003122:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_UART_MspInit+0xfc>)
 8003124:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003126:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003132:	4b18      	ldr	r3, [pc, #96]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 8003134:	2280      	movs	r2, #128	@ 0x80
 8003136:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003138:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800313e:	4b15      	ldr	r3, [pc, #84]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 8003140:	2200      	movs	r2, #0
 8003142:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003144:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 8003146:	2200      	movs	r2, #0
 8003148:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800314a:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 800314c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003150:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003152:	4810      	ldr	r0, [pc, #64]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 8003154:	f000 f9dc 	bl	8003510 <HAL_DMA_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800315e:	f7fe ff7e 	bl	800205e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a0b      	ldr	r2, [pc, #44]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 8003166:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003168:	4a0a      	ldr	r2, [pc, #40]	@ (8003194 <HAL_UART_MspInit+0xf8>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2025      	movs	r0, #37	@ 0x25
 8003174:	f000 f995 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003178:	2025      	movs	r0, #37	@ 0x25
 800317a:	f000 f9ae 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800317e:	bf00      	nop
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40013800 	.word	0x40013800
 800318c:	40021000 	.word	0x40021000
 8003190:	40010800 	.word	0x40010800
 8003194:	200007d0 	.word	0x200007d0
 8003198:	40020058 	.word	0x40020058

0800319c <Reset_Handler>:
 800319c:	f7ff fde0 	bl	8002d60 <SystemInit>
 80031a0:	480b      	ldr	r0, [pc, #44]	@ (80031d0 <LoopFillZerobss+0xe>)
 80031a2:	490c      	ldr	r1, [pc, #48]	@ (80031d4 <LoopFillZerobss+0x12>)
 80031a4:	4a0c      	ldr	r2, [pc, #48]	@ (80031d8 <LoopFillZerobss+0x16>)
 80031a6:	2300      	movs	r3, #0
 80031a8:	e002      	b.n	80031b0 <LoopCopyDataInit>

080031aa <CopyDataInit>:
 80031aa:	58d4      	ldr	r4, [r2, r3]
 80031ac:	50c4      	str	r4, [r0, r3]
 80031ae:	3304      	adds	r3, #4

080031b0 <LoopCopyDataInit>:
 80031b0:	18c4      	adds	r4, r0, r3
 80031b2:	428c      	cmp	r4, r1
 80031b4:	d3f9      	bcc.n	80031aa <CopyDataInit>
 80031b6:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <LoopFillZerobss+0x1a>)
 80031b8:	4c09      	ldr	r4, [pc, #36]	@ (80031e0 <LoopFillZerobss+0x1e>)
 80031ba:	2300      	movs	r3, #0
 80031bc:	e001      	b.n	80031c2 <LoopFillZerobss>

080031be <FillZerobss>:
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	3204      	adds	r2, #4

080031c2 <LoopFillZerobss>:
 80031c2:	42a2      	cmp	r2, r4
 80031c4:	d3fb      	bcc.n	80031be <FillZerobss>
 80031c6:	f006 ff0b 	bl	8009fe0 <__libc_init_array>
 80031ca:	f7fe fe8b 	bl	8001ee4 <main>
 80031ce:	4770      	bx	lr
 80031d0:	20000000 	.word	0x20000000
 80031d4:	2000020c 	.word	0x2000020c
 80031d8:	0800c5e0 	.word	0x0800c5e0
 80031dc:	20000210 	.word	0x20000210
 80031e0:	20000964 	.word	0x20000964

080031e4 <ADC1_2_IRQHandler>:
 80031e4:	e7fe      	b.n	80031e4 <ADC1_2_IRQHandler>
	...

080031e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ec:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <HAL_Init+0x28>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a07      	ldr	r2, [pc, #28]	@ (8003210 <HAL_Init+0x28>)
 80031f2:	f043 0310 	orr.w	r3, r3, #16
 80031f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f8:	2003      	movs	r0, #3
 80031fa:	f000 f947 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031fe:	200f      	movs	r0, #15
 8003200:	f000 f808 	bl	8003214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003204:	f7ff fc1e 	bl	8002a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40022000 	.word	0x40022000

08003214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800321c:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <HAL_InitTick+0x54>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b12      	ldr	r3, [pc, #72]	@ (800326c <HAL_InitTick+0x58>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	4619      	mov	r1, r3
 8003226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800322a:	fbb3 f3f1 	udiv	r3, r3, r1
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f95f 	bl	80034f6 <HAL_SYSTICK_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e00e      	b.n	8003260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b0f      	cmp	r3, #15
 8003246:	d80a      	bhi.n	800325e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003248:	2200      	movs	r2, #0
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	f000 f927 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003254:	4a06      	ldr	r2, [pc, #24]	@ (8003270 <HAL_InitTick+0x5c>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e000      	b.n	8003260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000038 	.word	0x20000038
 800326c:	20000040 	.word	0x20000040
 8003270:	2000003c 	.word	0x2000003c

08003274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_IncTick+0x1c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <HAL_IncTick+0x20>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4413      	add	r3, r2
 8003284:	4a03      	ldr	r2, [pc, #12]	@ (8003294 <HAL_IncTick+0x20>)
 8003286:	6013      	str	r3, [r2, #0]
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	20000040 	.word	0x20000040
 8003294:	20000814 	.word	0x20000814

08003298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return uwTick;
 800329c:	4b02      	ldr	r3, [pc, #8]	@ (80032a8 <HAL_GetTick+0x10>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	20000814 	.word	0x20000814

080032ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff fff0 	bl	8003298 <HAL_GetTick>
 80032b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d005      	beq.n	80032d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_Delay+0x44>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032d2:	bf00      	nop
 80032d4:	f7ff ffe0 	bl	8003298 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d8f7      	bhi.n	80032d4 <HAL_Delay+0x28>
  {
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000040 	.word	0x20000040

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800331c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	@ (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db0b      	blt.n	8003382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	4906      	ldr	r1, [pc, #24]	@ (800338c <__NVIC_EnableIRQ+0x34>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	e000e100 	.word	0xe000e100

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db0a      	blt.n	80033ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	490c      	ldr	r1, [pc, #48]	@ (80033dc <__NVIC_SetPriority+0x4c>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	440b      	add	r3, r1
 80033b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b8:	e00a      	b.n	80033d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4908      	ldr	r1, [pc, #32]	@ (80033e0 <__NVIC_SetPriority+0x50>)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3b04      	subs	r3, #4
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	440b      	add	r3, r1
 80033ce:	761a      	strb	r2, [r3, #24]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	@ 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f1c3 0307 	rsb	r3, r3, #7
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf28      	it	cs
 8003402:	2304      	movcs	r3, #4
 8003404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3304      	adds	r3, #4
 800340a:	2b06      	cmp	r3, #6
 800340c:	d902      	bls.n	8003414 <NVIC_EncodePriority+0x30>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3b03      	subs	r3, #3
 8003412:	e000      	b.n	8003416 <NVIC_EncodePriority+0x32>
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800342c:	f04f 31ff 	mov.w	r1, #4294967295
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43d9      	mvns	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	4313      	orrs	r3, r2
         );
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	@ 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff90 	bl	8003390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff2d 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff42 	bl	800333c <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff90 	bl	80033e4 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5f 	bl	8003390 <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff35 	bl	8003358 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffa2 	bl	8003448 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e043      	b.n	80035ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	4b22      	ldr	r3, [pc, #136]	@ (80035b8 <HAL_DMA_Init+0xa8>)
 800352e:	4413      	add	r3, r2
 8003530:	4a22      	ldr	r2, [pc, #136]	@ (80035bc <HAL_DMA_Init+0xac>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	009a      	lsls	r2, r3, #2
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1f      	ldr	r2, [pc, #124]	@ (80035c0 <HAL_DMA_Init+0xb0>)
 8003542:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800355a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800355e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	bffdfff8 	.word	0xbffdfff8
 80035bc:	cccccccd 	.word	0xcccccccd
 80035c0:	40020000 	.word	0x40020000

080035c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Start_IT+0x20>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e04b      	b.n	800367c <HAL_DMA_Start_IT+0xb8>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d13a      	bne.n	800366e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f9f8 	bl	8003a12 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 020e 	orr.w	r2, r2, #14
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e00f      	b.n	800365c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 020a 	orr.w	r2, r2, #10
 800365a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e005      	b.n	800367a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d008      	beq.n	80036ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2204      	movs	r2, #4
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e020      	b.n	80036f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 020e 	bic.w	r2, r2, #14
 80036bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d6:	2101      	movs	r1, #1
 80036d8:	fa01 f202 	lsl.w	r2, r1, r2
 80036dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d005      	beq.n	8003720 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2204      	movs	r2, #4
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e051      	b.n	80037c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 020e 	bic.w	r2, r2, #14
 800372e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a22      	ldr	r2, [pc, #136]	@ (80037d0 <HAL_DMA_Abort_IT+0xd4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d029      	beq.n	800379e <HAL_DMA_Abort_IT+0xa2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a21      	ldr	r2, [pc, #132]	@ (80037d4 <HAL_DMA_Abort_IT+0xd8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d022      	beq.n	800379a <HAL_DMA_Abort_IT+0x9e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1f      	ldr	r2, [pc, #124]	@ (80037d8 <HAL_DMA_Abort_IT+0xdc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01a      	beq.n	8003794 <HAL_DMA_Abort_IT+0x98>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1e      	ldr	r2, [pc, #120]	@ (80037dc <HAL_DMA_Abort_IT+0xe0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d012      	beq.n	800378e <HAL_DMA_Abort_IT+0x92>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1c      	ldr	r2, [pc, #112]	@ (80037e0 <HAL_DMA_Abort_IT+0xe4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00a      	beq.n	8003788 <HAL_DMA_Abort_IT+0x8c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_DMA_Abort_IT+0xe8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d102      	bne.n	8003782 <HAL_DMA_Abort_IT+0x86>
 800377c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003780:	e00e      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 8003782:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003786:	e00b      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 8003788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800378c:	e008      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 800378e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003792:	e005      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 8003794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003798:	e002      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 800379a:	2310      	movs	r3, #16
 800379c:	e000      	b.n	80037a0 <HAL_DMA_Abort_IT+0xa4>
 800379e:	2301      	movs	r3, #1
 80037a0:	4a11      	ldr	r2, [pc, #68]	@ (80037e8 <HAL_DMA_Abort_IT+0xec>)
 80037a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
    } 
  }
  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40020008 	.word	0x40020008
 80037d4:	4002001c 	.word	0x4002001c
 80037d8:	40020030 	.word	0x40020030
 80037dc:	40020044 	.word	0x40020044
 80037e0:	40020058 	.word	0x40020058
 80037e4:	4002006c 	.word	0x4002006c
 80037e8:	40020000 	.word	0x40020000

080037ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2204      	movs	r2, #4
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d04f      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xc8>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d04a      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a66      	ldr	r2, [pc, #408]	@ (80039dc <HAL_DMA_IRQHandler+0x1f0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d029      	beq.n	800389a <HAL_DMA_IRQHandler+0xae>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a65      	ldr	r2, [pc, #404]	@ (80039e0 <HAL_DMA_IRQHandler+0x1f4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_DMA_IRQHandler+0xaa>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a63      	ldr	r2, [pc, #396]	@ (80039e4 <HAL_DMA_IRQHandler+0x1f8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01a      	beq.n	8003890 <HAL_DMA_IRQHandler+0xa4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a62      	ldr	r2, [pc, #392]	@ (80039e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d012      	beq.n	800388a <HAL_DMA_IRQHandler+0x9e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a60      	ldr	r2, [pc, #384]	@ (80039ec <HAL_DMA_IRQHandler+0x200>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x98>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a5f      	ldr	r2, [pc, #380]	@ (80039f0 <HAL_DMA_IRQHandler+0x204>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d102      	bne.n	800387e <HAL_DMA_IRQHandler+0x92>
 8003878:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800387c:	e00e      	b.n	800389c <HAL_DMA_IRQHandler+0xb0>
 800387e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003882:	e00b      	b.n	800389c <HAL_DMA_IRQHandler+0xb0>
 8003884:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003888:	e008      	b.n	800389c <HAL_DMA_IRQHandler+0xb0>
 800388a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800388e:	e005      	b.n	800389c <HAL_DMA_IRQHandler+0xb0>
 8003890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003894:	e002      	b.n	800389c <HAL_DMA_IRQHandler+0xb0>
 8003896:	2340      	movs	r3, #64	@ 0x40
 8003898:	e000      	b.n	800389c <HAL_DMA_IRQHandler+0xb0>
 800389a:	2304      	movs	r3, #4
 800389c:	4a55      	ldr	r2, [pc, #340]	@ (80039f4 <HAL_DMA_IRQHandler+0x208>)
 800389e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8094 	beq.w	80039d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038b2:	e08e      	b.n	80039d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	2202      	movs	r2, #2
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d056      	beq.n	8003972 <HAL_DMA_IRQHandler+0x186>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d051      	beq.n	8003972 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020a 	bic.w	r2, r2, #10
 80038ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a38      	ldr	r2, [pc, #224]	@ (80039dc <HAL_DMA_IRQHandler+0x1f0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d029      	beq.n	8003952 <HAL_DMA_IRQHandler+0x166>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a37      	ldr	r2, [pc, #220]	@ (80039e0 <HAL_DMA_IRQHandler+0x1f4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_DMA_IRQHandler+0x162>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a35      	ldr	r2, [pc, #212]	@ (80039e4 <HAL_DMA_IRQHandler+0x1f8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01a      	beq.n	8003948 <HAL_DMA_IRQHandler+0x15c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a34      	ldr	r2, [pc, #208]	@ (80039e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d012      	beq.n	8003942 <HAL_DMA_IRQHandler+0x156>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a32      	ldr	r2, [pc, #200]	@ (80039ec <HAL_DMA_IRQHandler+0x200>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00a      	beq.n	800393c <HAL_DMA_IRQHandler+0x150>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a31      	ldr	r2, [pc, #196]	@ (80039f0 <HAL_DMA_IRQHandler+0x204>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d102      	bne.n	8003936 <HAL_DMA_IRQHandler+0x14a>
 8003930:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003934:	e00e      	b.n	8003954 <HAL_DMA_IRQHandler+0x168>
 8003936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800393a:	e00b      	b.n	8003954 <HAL_DMA_IRQHandler+0x168>
 800393c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003940:	e008      	b.n	8003954 <HAL_DMA_IRQHandler+0x168>
 8003942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003946:	e005      	b.n	8003954 <HAL_DMA_IRQHandler+0x168>
 8003948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800394c:	e002      	b.n	8003954 <HAL_DMA_IRQHandler+0x168>
 800394e:	2320      	movs	r3, #32
 8003950:	e000      	b.n	8003954 <HAL_DMA_IRQHandler+0x168>
 8003952:	2302      	movs	r3, #2
 8003954:	4a27      	ldr	r2, [pc, #156]	@ (80039f4 <HAL_DMA_IRQHandler+0x208>)
 8003956:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	d034      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003970:	e02f      	b.n	80039d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	2208      	movs	r2, #8
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d028      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x1e8>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d023      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 020e 	bic.w	r2, r2, #14
 800399a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	2101      	movs	r1, #1
 80039a6:	fa01 f202 	lsl.w	r2, r1, r2
 80039aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
    }
  }
  return;
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
}
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40020008 	.word	0x40020008
 80039e0:	4002001c 	.word	0x4002001c
 80039e4:	40020030 	.word	0x40020030
 80039e8:	40020044 	.word	0x40020044
 80039ec:	40020058 	.word	0x40020058
 80039f0:	4002006c 	.word	0x4002006c
 80039f4:	40020000 	.word	0x40020000

080039f8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a06:	b2db      	uxtb	r3, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a28:	2101      	movs	r1, #1
 8003a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d108      	bne.n	8003a52 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a50:	e007      	b.n	8003a62 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	60da      	str	r2, [r3, #12]
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b08b      	sub	sp, #44	@ 0x2c
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a7e:	e169      	b.n	8003d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a80:	2201      	movs	r2, #1
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	f040 8158 	bne.w	8003d4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a9a      	ldr	r2, [pc, #616]	@ (8003d0c <HAL_GPIO_Init+0x2a0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d05e      	beq.n	8003b66 <HAL_GPIO_Init+0xfa>
 8003aa8:	4a98      	ldr	r2, [pc, #608]	@ (8003d0c <HAL_GPIO_Init+0x2a0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d875      	bhi.n	8003b9a <HAL_GPIO_Init+0x12e>
 8003aae:	4a98      	ldr	r2, [pc, #608]	@ (8003d10 <HAL_GPIO_Init+0x2a4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d058      	beq.n	8003b66 <HAL_GPIO_Init+0xfa>
 8003ab4:	4a96      	ldr	r2, [pc, #600]	@ (8003d10 <HAL_GPIO_Init+0x2a4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d86f      	bhi.n	8003b9a <HAL_GPIO_Init+0x12e>
 8003aba:	4a96      	ldr	r2, [pc, #600]	@ (8003d14 <HAL_GPIO_Init+0x2a8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d052      	beq.n	8003b66 <HAL_GPIO_Init+0xfa>
 8003ac0:	4a94      	ldr	r2, [pc, #592]	@ (8003d14 <HAL_GPIO_Init+0x2a8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d869      	bhi.n	8003b9a <HAL_GPIO_Init+0x12e>
 8003ac6:	4a94      	ldr	r2, [pc, #592]	@ (8003d18 <HAL_GPIO_Init+0x2ac>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04c      	beq.n	8003b66 <HAL_GPIO_Init+0xfa>
 8003acc:	4a92      	ldr	r2, [pc, #584]	@ (8003d18 <HAL_GPIO_Init+0x2ac>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d863      	bhi.n	8003b9a <HAL_GPIO_Init+0x12e>
 8003ad2:	4a92      	ldr	r2, [pc, #584]	@ (8003d1c <HAL_GPIO_Init+0x2b0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d046      	beq.n	8003b66 <HAL_GPIO_Init+0xfa>
 8003ad8:	4a90      	ldr	r2, [pc, #576]	@ (8003d1c <HAL_GPIO_Init+0x2b0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d85d      	bhi.n	8003b9a <HAL_GPIO_Init+0x12e>
 8003ade:	2b12      	cmp	r3, #18
 8003ae0:	d82a      	bhi.n	8003b38 <HAL_GPIO_Init+0xcc>
 8003ae2:	2b12      	cmp	r3, #18
 8003ae4:	d859      	bhi.n	8003b9a <HAL_GPIO_Init+0x12e>
 8003ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <HAL_GPIO_Init+0x80>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003b67 	.word	0x08003b67
 8003af0:	08003b41 	.word	0x08003b41
 8003af4:	08003b53 	.word	0x08003b53
 8003af8:	08003b95 	.word	0x08003b95
 8003afc:	08003b9b 	.word	0x08003b9b
 8003b00:	08003b9b 	.word	0x08003b9b
 8003b04:	08003b9b 	.word	0x08003b9b
 8003b08:	08003b9b 	.word	0x08003b9b
 8003b0c:	08003b9b 	.word	0x08003b9b
 8003b10:	08003b9b 	.word	0x08003b9b
 8003b14:	08003b9b 	.word	0x08003b9b
 8003b18:	08003b9b 	.word	0x08003b9b
 8003b1c:	08003b9b 	.word	0x08003b9b
 8003b20:	08003b9b 	.word	0x08003b9b
 8003b24:	08003b9b 	.word	0x08003b9b
 8003b28:	08003b9b 	.word	0x08003b9b
 8003b2c:	08003b9b 	.word	0x08003b9b
 8003b30:	08003b49 	.word	0x08003b49
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	4a79      	ldr	r2, [pc, #484]	@ (8003d20 <HAL_GPIO_Init+0x2b4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b3e:	e02c      	b.n	8003b9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	623b      	str	r3, [r7, #32]
          break;
 8003b46:	e029      	b.n	8003b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	623b      	str	r3, [r7, #32]
          break;
 8003b50:	e024      	b.n	8003b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	3308      	adds	r3, #8
 8003b58:	623b      	str	r3, [r7, #32]
          break;
 8003b5a:	e01f      	b.n	8003b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	330c      	adds	r3, #12
 8003b62:	623b      	str	r3, [r7, #32]
          break;
 8003b64:	e01a      	b.n	8003b9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b6e:	2304      	movs	r3, #4
 8003b70:	623b      	str	r3, [r7, #32]
          break;
 8003b72:	e013      	b.n	8003b9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d105      	bne.n	8003b88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	611a      	str	r2, [r3, #16]
          break;
 8003b86:	e009      	b.n	8003b9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b88:	2308      	movs	r3, #8
 8003b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	615a      	str	r2, [r3, #20]
          break;
 8003b92:	e003      	b.n	8003b9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
          break;
 8003b98:	e000      	b.n	8003b9c <HAL_GPIO_Init+0x130>
          break;
 8003b9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2bff      	cmp	r3, #255	@ 0xff
 8003ba0:	d801      	bhi.n	8003ba6 <HAL_GPIO_Init+0x13a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	e001      	b.n	8003baa <HAL_GPIO_Init+0x13e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2bff      	cmp	r3, #255	@ 0xff
 8003bb0:	d802      	bhi.n	8003bb8 <HAL_GPIO_Init+0x14c>
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	e002      	b.n	8003bbe <HAL_GPIO_Init+0x152>
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	3b08      	subs	r3, #8
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	210f      	movs	r1, #15
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	401a      	ands	r2, r3
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80b1 	beq.w	8003d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bec:	4b4d      	ldr	r3, [pc, #308]	@ (8003d24 <HAL_GPIO_Init+0x2b8>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8003d24 <HAL_GPIO_Init+0x2b8>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6193      	str	r3, [r2, #24]
 8003bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8003d24 <HAL_GPIO_Init+0x2b8>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c04:	4a48      	ldr	r2, [pc, #288]	@ (8003d28 <HAL_GPIO_Init+0x2bc>)
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	220f      	movs	r2, #15
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4013      	ands	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <HAL_GPIO_Init+0x2c0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_GPIO_Init+0x1ec>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3f      	ldr	r2, [pc, #252]	@ (8003d30 <HAL_GPIO_Init+0x2c4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00d      	beq.n	8003c54 <HAL_GPIO_Init+0x1e8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d34 <HAL_GPIO_Init+0x2c8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <HAL_GPIO_Init+0x1e4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a3d      	ldr	r2, [pc, #244]	@ (8003d38 <HAL_GPIO_Init+0x2cc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <HAL_GPIO_Init+0x1e0>
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e006      	b.n	8003c5a <HAL_GPIO_Init+0x1ee>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	e004      	b.n	8003c5a <HAL_GPIO_Init+0x1ee>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e002      	b.n	8003c5a <HAL_GPIO_Init+0x1ee>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_GPIO_Init+0x1ee>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	f002 0203 	and.w	r2, r2, #3
 8003c60:	0092      	lsls	r2, r2, #2
 8003c62:	4093      	lsls	r3, r2
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c6a:	492f      	ldr	r1, [pc, #188]	@ (8003d28 <HAL_GPIO_Init+0x2bc>)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d006      	beq.n	8003c92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c84:	4b2d      	ldr	r3, [pc, #180]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	492c      	ldr	r1, [pc, #176]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]
 8003c90:	e006      	b.n	8003ca0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c92:	4b2a      	ldr	r3, [pc, #168]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	4928      	ldr	r1, [pc, #160]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d006      	beq.n	8003cba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cac:	4b23      	ldr	r3, [pc, #140]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	4922      	ldr	r1, [pc, #136]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
 8003cb8:	e006      	b.n	8003cc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cba:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	491e      	ldr	r1, [pc, #120]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d006      	beq.n	8003ce2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cd4:	4b19      	ldr	r3, [pc, #100]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	4918      	ldr	r1, [pc, #96]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
 8003ce0:	e006      	b.n	8003cf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ce2:	4b16      	ldr	r3, [pc, #88]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	4914      	ldr	r1, [pc, #80]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d021      	beq.n	8003d40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	490e      	ldr	r1, [pc, #56]	@ (8003d3c <HAL_GPIO_Init+0x2d0>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]
 8003d08:	e021      	b.n	8003d4e <HAL_GPIO_Init+0x2e2>
 8003d0a:	bf00      	nop
 8003d0c:	10320000 	.word	0x10320000
 8003d10:	10310000 	.word	0x10310000
 8003d14:	10220000 	.word	0x10220000
 8003d18:	10210000 	.word	0x10210000
 8003d1c:	10120000 	.word	0x10120000
 8003d20:	10110000 	.word	0x10110000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	40010800 	.word	0x40010800
 8003d30:	40010c00 	.word	0x40010c00
 8003d34:	40011000 	.word	0x40011000
 8003d38:	40011400 	.word	0x40011400
 8003d3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d40:	4b0b      	ldr	r3, [pc, #44]	@ (8003d70 <HAL_GPIO_Init+0x304>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	4909      	ldr	r1, [pc, #36]	@ (8003d70 <HAL_GPIO_Init+0x304>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	3301      	adds	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f47f ae8e 	bne.w	8003a80 <HAL_GPIO_Init+0x14>
  }
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	372c      	adds	r7, #44	@ 0x2c
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	40010400 	.word	0x40010400

08003d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
 8003d80:	4613      	mov	r3, r2
 8003d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d84:	787b      	ldrb	r3, [r7, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d90:	e003      	b.n	8003d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	611a      	str	r2, [r3, #16]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	041a      	lsls	r2, r3, #16
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	43d9      	mvns	r1, r3
 8003dc2:	887b      	ldrh	r3, [r7, #2]
 8003dc4:	400b      	ands	r3, r1
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	611a      	str	r2, [r3, #16]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e12b      	b.n	8004042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd ff50 	bl	8001ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	@ 0x24
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f002 f9e8 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8003e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4a81      	ldr	r2, [pc, #516]	@ (800404c <HAL_I2C_Init+0x274>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d807      	bhi.n	8003e5c <HAL_I2C_Init+0x84>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a80      	ldr	r2, [pc, #512]	@ (8004050 <HAL_I2C_Init+0x278>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e006      	b.n	8003e6a <HAL_I2C_Init+0x92>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a7d      	ldr	r2, [pc, #500]	@ (8004054 <HAL_I2C_Init+0x27c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bf94      	ite	ls
 8003e64:	2301      	movls	r3, #1
 8003e66:	2300      	movhi	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0e7      	b.n	8004042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a78      	ldr	r2, [pc, #480]	@ (8004058 <HAL_I2C_Init+0x280>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	0c9b      	lsrs	r3, r3, #18
 8003e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a6a      	ldr	r2, [pc, #424]	@ (800404c <HAL_I2C_Init+0x274>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d802      	bhi.n	8003eac <HAL_I2C_Init+0xd4>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	e009      	b.n	8003ec0 <HAL_I2C_Init+0xe8>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	4a69      	ldr	r2, [pc, #420]	@ (800405c <HAL_I2C_Init+0x284>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ed2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	495c      	ldr	r1, [pc, #368]	@ (800404c <HAL_I2C_Init+0x274>)
 8003edc:	428b      	cmp	r3, r1
 8003ede:	d819      	bhi.n	8003f14 <HAL_I2C_Init+0x13c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1e59      	subs	r1, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eee:	1c59      	adds	r1, r3, #1
 8003ef0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_I2C_Init+0x138>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1e59      	subs	r1, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0e:	e051      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f10:	2304      	movs	r3, #4
 8003f12:	e04f      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d111      	bne.n	8003f40 <HAL_I2C_Init+0x168>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e58      	subs	r0, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	440b      	add	r3, r1
 8003f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e012      	b.n	8003f66 <HAL_I2C_Init+0x18e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e58      	subs	r0, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	0099      	lsls	r1, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Init+0x196>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e022      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10e      	bne.n	8003f94 <HAL_I2C_Init+0x1bc>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1e58      	subs	r0, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	440b      	add	r3, r1
 8003f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f92:	e00f      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	0099      	lsls	r1, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	6809      	ldr	r1, [r1, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fe2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6911      	ldr	r1, [r2, #16]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	000186a0 	.word	0x000186a0
 8004050:	001e847f 	.word	0x001e847f
 8004054:	003d08ff 	.word	0x003d08ff
 8004058:	431bde83 	.word	0x431bde83
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004072:	2b80      	cmp	r3, #128	@ 0x80
 8004074:	d103      	bne.n	800407e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	611a      	str	r2, [r3, #16]
  }
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d003      	beq.n	80040c0 <HAL_I2C_EV_IRQHandler+0x38>
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b40      	cmp	r3, #64	@ 0x40
 80040bc:	f040 80c1 	bne.w	8004242 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80040e0:	d003      	beq.n	80040ea <HAL_I2C_EV_IRQHandler+0x62>
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80040e8:	d101      	bne.n	80040ee <HAL_I2C_EV_IRQHandler+0x66>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_I2C_EV_IRQHandler+0x68>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	f000 8132 	beq.w	800435a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_I2C_EV_IRQHandler+0x92>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	0a5b      	lsrs	r3, r3, #9
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d006      	beq.n	800411a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f001 fc9b 	bl	8005a48 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fd99 	bl	8004c4a <I2C_Master_SB>
 8004118:	e092      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	08db      	lsrs	r3, r3, #3
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_I2C_EV_IRQHandler+0xb2>
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	0a5b      	lsrs	r3, r3, #9
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fe0e 	bl	8004d54 <I2C_Master_ADD10>
 8004138:	e082      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_I2C_EV_IRQHandler+0xd2>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	0a5b      	lsrs	r3, r3, #9
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fe27 	bl	8004da6 <I2C_Master_ADDR>
 8004158:	e072      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d03b      	beq.n	80041de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004174:	f000 80f3 	beq.w	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	09db      	lsrs	r3, r3, #7
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00f      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	0a9b      	lsrs	r3, r3, #10
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	089b      	lsrs	r3, r3, #2
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d103      	bne.n	80041a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f9f1 	bl	8004584 <I2C_MasterTransmit_TXE>
 80041a2:	e04d      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80d6 	beq.w	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	0a5b      	lsrs	r3, r3, #9
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80cf 	beq.w	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041c0:	7bbb      	ldrb	r3, [r7, #14]
 80041c2:	2b21      	cmp	r3, #33	@ 0x21
 80041c4:	d103      	bne.n	80041ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa78 	bl	80046bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041cc:	e0c7      	b.n	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	f040 80c4 	bne.w	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fae6 	bl	80047a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041dc:	e0bf      	b.n	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ec:	f000 80b7 	beq.w	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00f      	beq.n	800421c <HAL_I2C_EV_IRQHandler+0x194>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <HAL_I2C_EV_IRQHandler+0x194>
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fb5f 	bl	80048d8 <I2C_MasterReceive_RXNE>
 800421a:	e011      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 809a 	beq.w	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	0a5b      	lsrs	r3, r3, #9
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8093 	beq.w	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fc15 	bl	8004a68 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423e:	e08e      	b.n	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004240:	e08d      	b.n	800435e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e007      	b.n	8004264 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d012      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x20e>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	0a5b      	lsrs	r3, r3, #9
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00c      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800428c:	69b9      	ldr	r1, [r7, #24]
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 ffe0 	bl	8005254 <I2C_Slave_ADDR>
 8004294:	e066      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	0a5b      	lsrs	r3, r3, #9
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f001 f81a 	bl	80052e8 <I2C_Slave_STOPF>
 80042b4:	e056      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042b6:	7bbb      	ldrb	r3, [r7, #14]
 80042b8:	2b21      	cmp	r3, #33	@ 0x21
 80042ba:	d002      	beq.n	80042c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80042bc:	7bbb      	ldrb	r3, [r7, #14]
 80042be:	2b29      	cmp	r3, #41	@ 0x29
 80042c0:	d125      	bne.n	800430e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	09db      	lsrs	r3, r3, #7
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00f      	beq.n	80042ee <HAL_I2C_EV_IRQHandler+0x266>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	0a9b      	lsrs	r3, r3, #10
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_I2C_EV_IRQHandler+0x266>
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fef8 	bl	80050dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042ec:	e039      	b.n	8004362 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d033      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0x2da>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	0a5b      	lsrs	r3, r3, #9
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02d      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 ff25 	bl	8005156 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800430c:	e029      	b.n	8004362 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00f      	beq.n	800433a <HAL_I2C_EV_IRQHandler+0x2b2>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	0a9b      	lsrs	r3, r3, #10
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 ff2f 	bl	8005196 <I2C_SlaveReceive_RXNE>
 8004338:	e014      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00e      	beq.n	8004364 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	0a5b      	lsrs	r3, r3, #9
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 ff5d 	bl	8005212 <I2C_SlaveReceive_BTF>
 8004358:	e004      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004362:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b08a      	sub	sp, #40	@ 0x28
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800438c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_I2C_ER_IRQHandler+0x5e>
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d010      	beq.n	80043c8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043b6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043c6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	0a5b      	lsrs	r3, r3, #9
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <HAL_I2C_ER_IRQHandler+0x88>
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	f043 0302 	orr.w	r3, r3, #2
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80043f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	0a9b      	lsrs	r3, r3, #10
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03f      	beq.n	800447e <HAL_I2C_ER_IRQHandler+0x114>
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	0a1b      	lsrs	r3, r3, #8
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d039      	beq.n	800447e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800440a:	7efb      	ldrb	r3, [r7, #27]
 800440c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004424:	7ebb      	ldrb	r3, [r7, #26]
 8004426:	2b20      	cmp	r3, #32
 8004428:	d112      	bne.n	8004450 <HAL_I2C_ER_IRQHandler+0xe6>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10f      	bne.n	8004450 <HAL_I2C_ER_IRQHandler+0xe6>
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	2b21      	cmp	r3, #33	@ 0x21
 8004434:	d008      	beq.n	8004448 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b29      	cmp	r3, #41	@ 0x29
 800443a:	d005      	beq.n	8004448 <HAL_I2C_ER_IRQHandler+0xde>
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	2b28      	cmp	r3, #40	@ 0x28
 8004440:	d106      	bne.n	8004450 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b21      	cmp	r3, #33	@ 0x21
 8004446:	d103      	bne.n	8004450 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f001 f87d 	bl	8005548 <I2C_Slave_AF>
 800444e:	e016      	b.n	800447e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004458:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004462:	7efb      	ldrb	r3, [r7, #27]
 8004464:	2b10      	cmp	r3, #16
 8004466:	d002      	beq.n	800446e <HAL_I2C_ER_IRQHandler+0x104>
 8004468:	7efb      	ldrb	r3, [r7, #27]
 800446a:	2b40      	cmp	r3, #64	@ 0x40
 800446c:	d107      	bne.n	800447e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	0adb      	lsrs	r3, r3, #11
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <HAL_I2C_ER_IRQHandler+0x13e>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d008      	beq.n	80044a8 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	f043 0308 	orr.w	r3, r3, #8
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80044a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f001 f8b8 	bl	8005630 <I2C_ITError>
  }
}
 80044c0:	bf00      	nop
 80044c2:	3728      	adds	r7, #40	@ 0x28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
 800451c:	4613      	mov	r3, r2
 800451e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004592:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800459a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d150      	bne.n	800464c <I2C_MasterTransmit_TXE+0xc8>
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b21      	cmp	r3, #33	@ 0x21
 80045ae:	d14d      	bne.n	800464c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d01d      	beq.n	80045f2 <I2C_MasterTransmit_TXE+0x6e>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d01a      	beq.n	80045f2 <I2C_MasterTransmit_TXE+0x6e>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045c2:	d016      	beq.n	80045f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2211      	movs	r2, #17
 80045d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ff6c 	bl	80044c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045f0:	e060      	b.n	80046b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004600:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004610:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b40      	cmp	r3, #64	@ 0x40
 800462a:	d107      	bne.n	800463c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff81 	bl	800453c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800463a:	e03b      	b.n	80046b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff3f 	bl	80044c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800464a:	e033      	b.n	80046b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b21      	cmp	r3, #33	@ 0x21
 8004650:	d005      	beq.n	800465e <I2C_MasterTransmit_TXE+0xda>
 8004652:	7bbb      	ldrb	r3, [r7, #14]
 8004654:	2b40      	cmp	r3, #64	@ 0x40
 8004656:	d12d      	bne.n	80046b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b22      	cmp	r3, #34	@ 0x22
 800465c:	d12a      	bne.n	80046b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d108      	bne.n	800467a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004676:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004678:	e01c      	b.n	80046b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d103      	bne.n	800468e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f88e 	bl	80047a8 <I2C_MemoryTransmit_TXE_BTF>
}
 800468c:	e012      	b.n	80046b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80046b2:	e7ff      	b.n	80046b4 <I2C_MasterTransmit_TXE+0x130>
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b21      	cmp	r3, #33	@ 0x21
 80046d4:	d164      	bne.n	80047a0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d012      	beq.n	8004706 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004704:	e04c      	b.n	80047a0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d01d      	beq.n	8004748 <I2C_MasterTransmit_BTF+0x8c>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b20      	cmp	r3, #32
 8004710:	d01a      	beq.n	8004748 <I2C_MasterTransmit_BTF+0x8c>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004718:	d016      	beq.n	8004748 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004728:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2211      	movs	r2, #17
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff fec1 	bl	80044c8 <HAL_I2C_MasterTxCpltCallback>
}
 8004746:	e02b      	b.n	80047a0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004756:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004766:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b40      	cmp	r3, #64	@ 0x40
 8004780:	d107      	bne.n	8004792 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fed6 	bl	800453c <HAL_I2C_MemTxCpltCallback>
}
 8004790:	e006      	b.n	80047a0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff fe94 	bl	80044c8 <HAL_I2C_MasterTxCpltCallback>
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d11d      	bne.n	80047fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10b      	bne.n	80047e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80047de:	e077      	b.n	80048d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	121b      	asrs	r3, r3, #8
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80047fa:	e069      	b.n	80048d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10b      	bne.n	800481c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004808:	b2da      	uxtb	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800481a:	e059      	b.n	80048d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004820:	2b02      	cmp	r3, #2
 8004822:	d152      	bne.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b22      	cmp	r3, #34	@ 0x22
 8004828:	d10d      	bne.n	8004846 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004838:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004844:	e044      	b.n	80048d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b21      	cmp	r3, #33	@ 0x21
 8004854:	d112      	bne.n	800487c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800487a:	e029      	b.n	80048d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d124      	bne.n	80048d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b21      	cmp	r3, #33	@ 0x21
 800488a:	d121      	bne.n	80048d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800489a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fe3a 	bl	800453c <HAL_I2C_MemTxCpltCallback>
}
 80048c8:	e002      	b.n	80048d0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fbc8 	bl	8004060 <I2C_Flush_DR>
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b22      	cmp	r3, #34	@ 0x22
 80048ea:	f040 80b9 	bne.w	8004a60 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d921      	bls.n	8004946 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b03      	cmp	r3, #3
 8004930:	f040 8096 	bne.w	8004a60 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004942:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004944:	e08c      	b.n	8004a60 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	2b02      	cmp	r3, #2
 800494c:	d07f      	beq.n	8004a4e <I2C_MasterReceive_RXNE+0x176>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d002      	beq.n	800495a <I2C_MasterReceive_RXNE+0x82>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d179      	bne.n	8004a4e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f001 f842 	bl	80059e4 <I2C_WaitOnSTOPRequestThroughIT>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d14c      	bne.n	8004a00 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004974:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004984:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b40      	cmp	r3, #64	@ 0x40
 80049be:	d10a      	bne.n	80049d6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fdbd 	bl	800454e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049d4:	e044      	b.n	8004a60 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d002      	beq.n	80049ea <I2C_MasterReceive_RXNE+0x112>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d103      	bne.n	80049f2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80049f0:	e002      	b.n	80049f8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2212      	movs	r2, #18
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fd6e 	bl	80044da <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049fe:	e02f      	b.n	8004a60 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fd8a 	bl	8004560 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a4c:	e008      	b.n	8004a60 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a5c:	605a      	str	r2, [r3, #4]
}
 8004a5e:	e7ff      	b.n	8004a60 <I2C_MasterReceive_RXNE+0x188>
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d11b      	bne.n	8004ab8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a8e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ab6:	e0c4      	b.n	8004c42 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d129      	bne.n	8004b16 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d00a      	beq.n	8004aee <I2C_MasterReceive_BTF+0x86>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d007      	beq.n	8004aee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b14:	e095      	b.n	8004c42 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d17d      	bne.n	8004c1c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <I2C_MasterReceive_BTF+0xc4>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d108      	bne.n	8004b3e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e016      	b.n	8004b6c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d002      	beq.n	8004b4a <I2C_MasterReceive_BTF+0xe2>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d108      	bne.n	8004b5c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e007      	b.n	8004b6c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004bc6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d10a      	bne.n	8004bf2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fcaf 	bl	800454e <HAL_I2C_MemRxCpltCallback>
}
 8004bf0:	e027      	b.n	8004c42 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d002      	beq.n	8004c06 <I2C_MasterReceive_BTF+0x19e>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d103      	bne.n	8004c0e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c0c:	e002      	b.n	8004c14 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2212      	movs	r2, #18
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff fc60 	bl	80044da <HAL_I2C_MasterRxCpltCallback>
}
 8004c1a:	e012      	b.n	8004c42 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b40      	cmp	r3, #64	@ 0x40
 8004c5c:	d117      	bne.n	8004c8e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c76:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c78:	e067      	b.n	8004d4a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]
}
 8004c8c:	e05d      	b.n	8004d4a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c96:	d133      	bne.n	8004d00 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b21      	cmp	r3, #33	@ 0x21
 8004ca2:	d109      	bne.n	8004cb8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cb4:	611a      	str	r2, [r3, #16]
 8004cb6:	e008      	b.n	8004cca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <I2C_Master_SB+0x92>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d108      	bne.n	8004cee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d032      	beq.n	8004d4a <I2C_Master_SB+0x100>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d02d      	beq.n	8004d4a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfc:	605a      	str	r2, [r3, #4]
}
 8004cfe:	e024      	b.n	8004d4a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10e      	bne.n	8004d26 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	11db      	asrs	r3, r3, #7
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 0306 	and.w	r3, r3, #6
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f063 030f 	orn	r3, r3, #15
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]
}
 8004d24:	e011      	b.n	8004d4a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d10d      	bne.n	8004d4a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	11db      	asrs	r3, r3, #7
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	f003 0306 	and.w	r3, r3, #6
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f063 030e 	orn	r3, r3, #14
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	611a      	str	r2, [r3, #16]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <I2C_Master_ADD10+0x26>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d108      	bne.n	8004d8c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <I2C_Master_ADD10+0x48>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d9a:	605a      	str	r2, [r3, #4]
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b091      	sub	sp, #68	@ 0x44
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004db4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b22      	cmp	r3, #34	@ 0x22
 8004dce:	f040 8174 	bne.w	80050ba <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <I2C_Master_ADDR+0x54>
 8004dda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004dde:	2b40      	cmp	r3, #64	@ 0x40
 8004de0:	d10b      	bne.n	8004dfa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de2:	2300      	movs	r3, #0
 8004de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	e16b      	b.n	80050d2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d11d      	bne.n	8004e3e <I2C_Master_ADDR+0x98>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e0a:	d118      	bne.n	8004e3e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e30:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e3c:	e149      	b.n	80050d2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d113      	bne.n	8004e70 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e120      	b.n	80050b2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	f040 808a 	bne.w	8004f90 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e82:	d137      	bne.n	8004ef4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e92:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea2:	d113      	bne.n	8004ecc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	e0f2      	b.n	80050b2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ecc:	2300      	movs	r3, #0
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	623b      	str	r3, [r7, #32]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e0de      	b.n	80050b2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d02e      	beq.n	8004f58 <I2C_Master_ADDR+0x1b2>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d02b      	beq.n	8004f58 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f02:	2b12      	cmp	r3, #18
 8004f04:	d102      	bne.n	8004f0c <I2C_Master_ADDR+0x166>
 8004f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d125      	bne.n	8004f58 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d00e      	beq.n	8004f30 <I2C_Master_ADDR+0x18a>
 8004f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d00b      	beq.n	8004f30 <I2C_Master_ADDR+0x18a>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d008      	beq.n	8004f30 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e007      	b.n	8004f40 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f3e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	e0ac      	b.n	80050b2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e090      	b.n	80050b2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d158      	bne.n	800504c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d021      	beq.n	8004fe4 <I2C_Master_ADDR+0x23e>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d01e      	beq.n	8004fe4 <I2C_Master_ADDR+0x23e>
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d01b      	beq.n	8004fe4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e012      	b.n	800500a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ff2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005018:	d14b      	bne.n	80050b2 <I2C_Master_ADDR+0x30c>
 800501a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005020:	d00b      	beq.n	800503a <I2C_Master_ADDR+0x294>
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	2b01      	cmp	r3, #1
 8005026:	d008      	beq.n	800503a <I2C_Master_ADDR+0x294>
 8005028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502a:	2b08      	cmp	r3, #8
 800502c:	d005      	beq.n	800503a <I2C_Master_ADDR+0x294>
 800502e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005030:	2b10      	cmp	r3, #16
 8005032:	d002      	beq.n	800503a <I2C_Master_ADDR+0x294>
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	2b20      	cmp	r3, #32
 8005038:	d13b      	bne.n	80050b2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	e032      	b.n	80050b2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800505a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506a:	d117      	bne.n	800509c <I2C_Master_ADDR+0x2f6>
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005072:	d00b      	beq.n	800508c <I2C_Master_ADDR+0x2e6>
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	2b01      	cmp	r3, #1
 8005078:	d008      	beq.n	800508c <I2C_Master_ADDR+0x2e6>
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	2b08      	cmp	r3, #8
 800507e:	d005      	beq.n	800508c <I2C_Master_ADDR+0x2e6>
 8005080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005082:	2b10      	cmp	r3, #16
 8005084:	d002      	beq.n	800508c <I2C_Master_ADDR+0x2e6>
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	2b20      	cmp	r3, #32
 800508a:	d107      	bne.n	800509c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800509a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80050b8:	e00b      	b.n	80050d2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
}
 80050d0:	e7ff      	b.n	80050d2 <I2C_Master_ADDR+0x32c>
 80050d2:	bf00      	nop
 80050d4:	3744      	adds	r7, #68	@ 0x44
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d02b      	beq.n	800514e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d114      	bne.n	800514e <I2C_SlaveTransmit_TXE+0x72>
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b29      	cmp	r3, #41	@ 0x29
 8005128:	d111      	bne.n	800514e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005138:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2221      	movs	r2, #33	@ 0x21
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2228      	movs	r2, #40	@ 0x28
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff f9cf 	bl	80044ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d011      	beq.n	800518c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d02c      	beq.n	800520a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d114      	bne.n	800520a <I2C_SlaveReceive_RXNE+0x74>
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e4:	d111      	bne.n	800520a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2222      	movs	r2, #34	@ 0x22
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2228      	movs	r2, #40	@ 0x28
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff f97a 	bl	80044fe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d012      	beq.n	800524a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800526e:	2b28      	cmp	r3, #40	@ 0x28
 8005270:	d127      	bne.n	80052c2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005280:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	09db      	lsrs	r3, r3, #7
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	81bb      	strh	r3, [r7, #12]
 80052a4:	e002      	b.n	80052ac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80052b4:	89ba      	ldrh	r2, [r7, #12]
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff f928 	bl	8004510 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80052c0:	e00e      	b.n	80052e0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005306:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005308:	2300      	movs	r3, #0
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005334:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005344:	d172      	bne.n	800542c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	2b22      	cmp	r3, #34	@ 0x22
 800534a:	d002      	beq.n	8005352 <I2C_Slave_STOPF+0x6a>
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005350:	d135      	bne.n	80053be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	f043 0204 	orr.w	r2, r3, #4
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005384:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fb34 	bl	80039f8 <HAL_DMA_GetState>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d049      	beq.n	800542a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	4a69      	ldr	r2, [pc, #420]	@ (8005540 <I2C_Slave_STOPF+0x258>)
 800539c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe f9aa 	bl	80036fc <HAL_DMA_Abort_IT>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d03d      	beq.n	800542a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053b8:	4610      	mov	r0, r2
 80053ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053bc:	e035      	b.n	800542a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	f043 0204 	orr.w	r2, r3, #4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe fafe 	bl	80039f8 <HAL_DMA_GetState>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d014      	beq.n	800542c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005406:	4a4e      	ldr	r2, [pc, #312]	@ (8005540 <I2C_Slave_STOPF+0x258>)
 8005408:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe f974 	bl	80036fc <HAL_DMA_Abort_IT>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
 8005428:	e000      	b.n	800542c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800542a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d03e      	beq.n	80054b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d112      	bne.n	800546a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b40      	cmp	r3, #64	@ 0x40
 8005476:	d112      	bne.n	800549e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	f043 0204 	orr.w	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f8b7 	bl	8005630 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80054c2:	e039      	b.n	8005538 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80054c8:	d109      	bne.n	80054de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2228      	movs	r2, #40	@ 0x28
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff f810 	bl	80044fe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b28      	cmp	r3, #40	@ 0x28
 80054e8:	d111      	bne.n	800550e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a15      	ldr	r2, [pc, #84]	@ (8005544 <I2C_Slave_STOPF+0x25c>)
 80054ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff f80f 	bl	800452a <HAL_I2C_ListenCpltCallback>
}
 800550c:	e014      	b.n	8005538 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	2b22      	cmp	r3, #34	@ 0x22
 8005514:	d002      	beq.n	800551c <I2C_Slave_STOPF+0x234>
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b22      	cmp	r3, #34	@ 0x22
 800551a:	d10d      	bne.n	8005538 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fe ffe3 	bl	80044fe <HAL_I2C_SlaveRxCpltCallback>
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	08005895 	.word	0x08005895
 8005544:	ffff0000 	.word	0xffff0000

08005548 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005556:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d002      	beq.n	800556a <I2C_Slave_AF+0x22>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b20      	cmp	r3, #32
 8005568:	d129      	bne.n	80055be <I2C_Slave_AF+0x76>
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b28      	cmp	r3, #40	@ 0x28
 800556e:	d126      	bne.n	80055be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a2e      	ldr	r2, [pc, #184]	@ (800562c <I2C_Slave_AF+0xe4>)
 8005574:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005584:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800558e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fe ffb7 	bl	800452a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80055bc:	e031      	b.n	8005622 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b21      	cmp	r3, #33	@ 0x21
 80055c2:	d129      	bne.n	8005618 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a19      	ldr	r2, [pc, #100]	@ (800562c <I2C_Slave_AF+0xe4>)
 80055c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2221      	movs	r2, #33	@ 0x21
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005608:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fe fd28 	bl	8004060 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fe ff6b 	bl	80044ec <HAL_I2C_SlaveTxCpltCallback>
}
 8005616:	e004      	b.n	8005622 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005620:	615a      	str	r2, [r3, #20]
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	ffff0000 	.word	0xffff0000

08005630 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005646:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005648:	7bbb      	ldrb	r3, [r7, #14]
 800564a:	2b10      	cmp	r3, #16
 800564c:	d002      	beq.n	8005654 <I2C_ITError+0x24>
 800564e:	7bbb      	ldrb	r3, [r7, #14]
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d10a      	bne.n	800566a <I2C_ITError+0x3a>
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b22      	cmp	r3, #34	@ 0x22
 8005658:	d107      	bne.n	800566a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005668:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005670:	2b28      	cmp	r3, #40	@ 0x28
 8005672:	d107      	bne.n	8005684 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2228      	movs	r2, #40	@ 0x28
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005682:	e015      	b.n	80056b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005692:	d00a      	beq.n	80056aa <I2C_ITError+0x7a>
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b60      	cmp	r3, #96	@ 0x60
 8005698:	d007      	beq.n	80056aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056be:	d162      	bne.n	8005786 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d020      	beq.n	8005720 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e2:	4a6a      	ldr	r2, [pc, #424]	@ (800588c <I2C_ITError+0x25c>)
 80056e4:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe f806 	bl	80036fc <HAL_DMA_Abort_IT>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 8089 	beq.w	800580a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800571a:	4610      	mov	r0, r2
 800571c:	4798      	blx	r3
 800571e:	e074      	b.n	800580a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	4a59      	ldr	r2, [pc, #356]	@ (800588c <I2C_ITError+0x25c>)
 8005726:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572c:	4618      	mov	r0, r3
 800572e:	f7fd ffe5 	bl	80036fc <HAL_DMA_Abort_IT>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d068      	beq.n	800580a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005742:	2b40      	cmp	r3, #64	@ 0x40
 8005744:	d10b      	bne.n	800575e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005780:	4610      	mov	r0, r2
 8005782:	4798      	blx	r3
 8005784:	e041      	b.n	800580a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b60      	cmp	r3, #96	@ 0x60
 8005790:	d125      	bne.n	80057de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057aa:	2b40      	cmp	r3, #64	@ 0x40
 80057ac:	d10b      	bne.n	80057c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0201 	bic.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fe fecb 	bl	8004572 <HAL_I2C_AbortCpltCallback>
 80057dc:	e015      	b.n	800580a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d10b      	bne.n	8005804 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7fe feab 	bl	8004560 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10e      	bne.n	8005838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005834:	2b00      	cmp	r3, #0
 8005836:	d007      	beq.n	8005848 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005846:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b04      	cmp	r3, #4
 800585a:	d113      	bne.n	8005884 <I2C_ITError+0x254>
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b28      	cmp	r3, #40	@ 0x28
 8005860:	d110      	bne.n	8005884 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a0a      	ldr	r2, [pc, #40]	@ (8005890 <I2C_ITError+0x260>)
 8005866:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fe fe53 	bl	800452a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	08005895 	.word	0x08005895
 8005890:	ffff0000 	.word	0xffff0000

08005894 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058ae:	4b4b      	ldr	r3, [pc, #300]	@ (80059dc <I2C_DMAAbort+0x148>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	08db      	lsrs	r3, r3, #3
 80058b4:	4a4a      	ldr	r2, [pc, #296]	@ (80059e0 <I2C_DMAAbort+0x14c>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0a1a      	lsrs	r2, r3, #8
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	00da      	lsls	r2, r3, #3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80058da:	e00a      	b.n	80058f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3b01      	subs	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f0:	d0ea      	beq.n	80058c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fe:	2200      	movs	r2, #0
 8005900:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590e:	2200      	movs	r2, #0
 8005910:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005920:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005934:	2200      	movs	r2, #0
 8005936:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	2200      	movs	r2, #0
 8005946:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0201 	bic.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b60      	cmp	r3, #96	@ 0x60
 8005962:	d10e      	bne.n	8005982 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2200      	movs	r2, #0
 8005978:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800597a:	6978      	ldr	r0, [r7, #20]
 800597c:	f7fe fdf9 	bl	8004572 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005980:	e027      	b.n	80059d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005988:	2b28      	cmp	r3, #40	@ 0x28
 800598a:	d117      	bne.n	80059bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2200      	movs	r2, #0
 80059b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2228      	movs	r2, #40	@ 0x28
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059ba:	e007      	b.n	80059cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80059cc:	6978      	ldr	r0, [r7, #20]
 80059ce:	f7fe fdc7 	bl	8004560 <HAL_I2C_ErrorCallback>
}
 80059d2:	bf00      	nop
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000038 	.word	0x20000038
 80059e0:	14f8b589 	.word	0x14f8b589

080059e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059f0:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	08db      	lsrs	r3, r3, #3
 80059f6:	4a13      	ldr	r2, [pc, #76]	@ (8005a44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	0a1a      	lsrs	r2, r3, #8
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d107      	bne.n	8005a22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e008      	b.n	8005a34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a30:	d0e9      	beq.n	8005a06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20000038 	.word	0x20000038
 8005a44:	14f8b589 	.word	0x14f8b589

08005a48 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005a58:	d103      	bne.n	8005a62 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a60:	e007      	b.n	8005a72 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a66:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005a6a:	d102      	bne.n	8005a72 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2208      	movs	r2, #8
 8005a70:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e272      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8087 	beq.w	8005baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a9c:	4b92      	ldr	r3, [pc, #584]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 030c 	and.w	r3, r3, #12
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d00c      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 030c 	and.w	r3, r3, #12
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d112      	bne.n	8005ada <HAL_RCC_OscConfig+0x5e>
 8005ab4:	4b8c      	ldr	r3, [pc, #560]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ac0:	d10b      	bne.n	8005ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac2:	4b89      	ldr	r3, [pc, #548]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d06c      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x12c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d168      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e24c      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae2:	d106      	bne.n	8005af2 <HAL_RCC_OscConfig+0x76>
 8005ae4:	4b80      	ldr	r3, [pc, #512]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a7f      	ldr	r2, [pc, #508]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	e02e      	b.n	8005b50 <HAL_RCC_OscConfig+0xd4>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0x98>
 8005afa:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a7a      	ldr	r2, [pc, #488]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b78      	ldr	r3, [pc, #480]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a77      	ldr	r2, [pc, #476]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e01d      	b.n	8005b50 <HAL_RCC_OscConfig+0xd4>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RCC_OscConfig+0xbc>
 8005b1e:	4b72      	ldr	r3, [pc, #456]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a71      	ldr	r2, [pc, #452]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e00b      	b.n	8005b50 <HAL_RCC_OscConfig+0xd4>
 8005b38:	4b6b      	ldr	r3, [pc, #428]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	4b68      	ldr	r3, [pc, #416]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a67      	ldr	r2, [pc, #412]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d013      	beq.n	8005b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b58:	f7fd fb9e 	bl	8003298 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b60:	f7fd fb9a 	bl	8003298 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b64      	cmp	r3, #100	@ 0x64
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e200      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b72:	4b5d      	ldr	r3, [pc, #372]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0xe4>
 8005b7e:	e014      	b.n	8005baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fd fb8a 	bl	8003298 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b88:	f7fd fb86 	bl	8003298 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b64      	cmp	r3, #100	@ 0x64
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e1ec      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9a:	4b53      	ldr	r3, [pc, #332]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x10c>
 8005ba6:	e000      	b.n	8005baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d063      	beq.n	8005c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005bc2:	4b49      	ldr	r3, [pc, #292]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d11c      	bne.n	8005c08 <HAL_RCC_OscConfig+0x18c>
 8005bce:	4b46      	ldr	r3, [pc, #280]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d116      	bne.n	8005c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bda:	4b43      	ldr	r3, [pc, #268]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x176>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d001      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e1c0      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4939      	ldr	r1, [pc, #228]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c06:	e03a      	b.n	8005c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d020      	beq.n	8005c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c10:	4b36      	ldr	r3, [pc, #216]	@ (8005cec <HAL_RCC_OscConfig+0x270>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c16:	f7fd fb3f 	bl	8003298 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c1e:	f7fd fb3b 	bl	8003298 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e1a1      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c30:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4927      	ldr	r1, [pc, #156]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	600b      	str	r3, [r1, #0]
 8005c50:	e015      	b.n	8005c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c52:	4b26      	ldr	r3, [pc, #152]	@ (8005cec <HAL_RCC_OscConfig+0x270>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fd fb1e 	bl	8003298 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c60:	f7fd fb1a 	bl	8003298 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e180      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d03a      	beq.n	8005d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d019      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c92:	4b17      	ldr	r3, [pc, #92]	@ (8005cf0 <HAL_RCC_OscConfig+0x274>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c98:	f7fd fafe 	bl	8003298 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca0:	f7fd fafa 	bl	8003298 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e160      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	f000 face 	bl	8006260 <RCC_Delay>
 8005cc4:	e01c      	b.n	8005d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf0 <HAL_RCC_OscConfig+0x274>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ccc:	f7fd fae4 	bl	8003298 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd2:	e00f      	b.n	8005cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd4:	f7fd fae0 	bl	8003298 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d908      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e146      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
 8005ce6:	bf00      	nop
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	42420000 	.word	0x42420000
 8005cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf4:	4b92      	ldr	r3, [pc, #584]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e9      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80a6 	beq.w	8005e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d12:	4b8b      	ldr	r3, [pc, #556]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10d      	bne.n	8005d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1e:	4b88      	ldr	r3, [pc, #544]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	4a87      	ldr	r2, [pc, #540]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d28:	61d3      	str	r3, [r2, #28]
 8005d2a:	4b85      	ldr	r3, [pc, #532]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3a:	4b82      	ldr	r3, [pc, #520]	@ (8005f44 <HAL_RCC_OscConfig+0x4c8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d118      	bne.n	8005d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d46:	4b7f      	ldr	r3, [pc, #508]	@ (8005f44 <HAL_RCC_OscConfig+0x4c8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f44 <HAL_RCC_OscConfig+0x4c8>)
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d52:	f7fd faa1 	bl	8003298 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5a:	f7fd fa9d 	bl	8003298 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b64      	cmp	r3, #100	@ 0x64
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e103      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6c:	4b75      	ldr	r3, [pc, #468]	@ (8005f44 <HAL_RCC_OscConfig+0x4c8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d106      	bne.n	8005d8e <HAL_RCC_OscConfig+0x312>
 8005d80:	4b6f      	ldr	r3, [pc, #444]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	4a6e      	ldr	r2, [pc, #440]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	6213      	str	r3, [r2, #32]
 8005d8c:	e02d      	b.n	8005dea <HAL_RCC_OscConfig+0x36e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <HAL_RCC_OscConfig+0x334>
 8005d96:	4b6a      	ldr	r3, [pc, #424]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	4a69      	ldr	r2, [pc, #420]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	6213      	str	r3, [r2, #32]
 8005da2:	4b67      	ldr	r3, [pc, #412]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	4a66      	ldr	r2, [pc, #408]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	6213      	str	r3, [r2, #32]
 8005dae:	e01c      	b.n	8005dea <HAL_RCC_OscConfig+0x36e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b05      	cmp	r3, #5
 8005db6:	d10c      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x356>
 8005db8:	4b61      	ldr	r3, [pc, #388]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	4a60      	ldr	r2, [pc, #384]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005dbe:	f043 0304 	orr.w	r3, r3, #4
 8005dc2:	6213      	str	r3, [r2, #32]
 8005dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	6213      	str	r3, [r2, #32]
 8005dd0:	e00b      	b.n	8005dea <HAL_RCC_OscConfig+0x36e>
 8005dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	6213      	str	r3, [r2, #32]
 8005dde:	4b58      	ldr	r3, [pc, #352]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	4a57      	ldr	r2, [pc, #348]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005de4:	f023 0304 	bic.w	r3, r3, #4
 8005de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d015      	beq.n	8005e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df2:	f7fd fa51 	bl	8003298 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df8:	e00a      	b.n	8005e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fd fa4d 	bl	8003298 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e0b1      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e10:	4b4b      	ldr	r3, [pc, #300]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0ee      	beq.n	8005dfa <HAL_RCC_OscConfig+0x37e>
 8005e1c:	e014      	b.n	8005e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e1e:	f7fd fa3b 	bl	8003298 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e24:	e00a      	b.n	8005e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e26:	f7fd fa37 	bl	8003298 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e09b      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e3c:	4b40      	ldr	r3, [pc, #256]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1ee      	bne.n	8005e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d105      	bne.n	8005e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	4a3b      	ldr	r2, [pc, #236]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 8087 	beq.w	8005f72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e64:	4b36      	ldr	r3, [pc, #216]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 030c 	and.w	r3, r3, #12
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d061      	beq.n	8005f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d146      	bne.n	8005f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e78:	4b33      	ldr	r3, [pc, #204]	@ (8005f48 <HAL_RCC_OscConfig+0x4cc>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7e:	f7fd fa0b 	bl	8003298 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e86:	f7fd fa07 	bl	8003298 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e06d      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e98:	4b29      	ldr	r3, [pc, #164]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f0      	bne.n	8005e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eac:	d108      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005eae:	4b24      	ldr	r3, [pc, #144]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4921      	ldr	r1, [pc, #132]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a19      	ldr	r1, [r3, #32]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	491b      	ldr	r1, [pc, #108]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f48 <HAL_RCC_OscConfig+0x4cc>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ede:	f7fd f9db 	bl	8003298 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee6:	f7fd f9d7 	bl	8003298 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e03d      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ef8:	4b11      	ldr	r3, [pc, #68]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x46a>
 8005f04:	e035      	b.n	8005f72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f06:	4b10      	ldr	r3, [pc, #64]	@ (8005f48 <HAL_RCC_OscConfig+0x4cc>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0c:	f7fd f9c4 	bl	8003298 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fd f9c0 	bl	8003298 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e026      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f26:	4b06      	ldr	r3, [pc, #24]	@ (8005f40 <HAL_RCC_OscConfig+0x4c4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x498>
 8005f32:	e01e      	b.n	8005f72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e019      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40007000 	.word	0x40007000
 8005f48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <HAL_RCC_OscConfig+0x500>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d001      	beq.n	8005f72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40021000 	.word	0x40021000

08005f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0d0      	b.n	8006136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f94:	4b6a      	ldr	r3, [pc, #424]	@ (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d910      	bls.n	8005fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa2:	4b67      	ldr	r3, [pc, #412]	@ (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f023 0207 	bic.w	r2, r3, #7
 8005faa:	4965      	ldr	r1, [pc, #404]	@ (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb2:	4b63      	ldr	r3, [pc, #396]	@ (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0b8      	b.n	8006136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d020      	beq.n	8006012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fdc:	4b59      	ldr	r3, [pc, #356]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4a58      	ldr	r2, [pc, #352]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ff4:	4b53      	ldr	r3, [pc, #332]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4a52      	ldr	r2, [pc, #328]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006000:	4b50      	ldr	r3, [pc, #320]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	494d      	ldr	r1, [pc, #308]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 800600e:	4313      	orrs	r3, r2
 8006010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d040      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d107      	bne.n	8006036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006026:	4b47      	ldr	r3, [pc, #284]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d115      	bne.n	800605e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e07f      	b.n	8006136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d107      	bne.n	800604e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603e:	4b41      	ldr	r3, [pc, #260]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e073      	b.n	8006136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800604e:	4b3d      	ldr	r3, [pc, #244]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e06b      	b.n	8006136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800605e:	4b39      	ldr	r3, [pc, #228]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f023 0203 	bic.w	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4936      	ldr	r1, [pc, #216]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	4313      	orrs	r3, r2
 800606e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006070:	f7fd f912 	bl	8003298 <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006076:	e00a      	b.n	800608e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006078:	f7fd f90e 	bl	8003298 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e053      	b.n	8006136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	4b2d      	ldr	r3, [pc, #180]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 020c 	and.w	r2, r3, #12
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	429a      	cmp	r2, r3
 800609e:	d1eb      	bne.n	8006078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060a0:	4b27      	ldr	r3, [pc, #156]	@ (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d210      	bcs.n	80060d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ae:	4b24      	ldr	r3, [pc, #144]	@ (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 0207 	bic.w	r2, r3, #7
 80060b6:	4922      	ldr	r1, [pc, #136]	@ (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060be:	4b20      	ldr	r3, [pc, #128]	@ (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d001      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e032      	b.n	8006136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060dc:	4b19      	ldr	r3, [pc, #100]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4916      	ldr	r1, [pc, #88]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060fa:	4b12      	ldr	r3, [pc, #72]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	490e      	ldr	r1, [pc, #56]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 800610a:	4313      	orrs	r3, r2
 800610c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800610e:	f000 f821 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8006112:	4602      	mov	r2, r0
 8006114:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	490a      	ldr	r1, [pc, #40]	@ (8006148 <HAL_RCC_ClockConfig+0x1c8>)
 8006120:	5ccb      	ldrb	r3, [r1, r3]
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	4a09      	ldr	r2, [pc, #36]	@ (800614c <HAL_RCC_ClockConfig+0x1cc>)
 8006128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800612a:	4b09      	ldr	r3, [pc, #36]	@ (8006150 <HAL_RCC_ClockConfig+0x1d0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fd f870 	bl	8003214 <HAL_InitTick>

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40022000 	.word	0x40022000
 8006144:	40021000 	.word	0x40021000
 8006148:	0800c190 	.word	0x0800c190
 800614c:	20000038 	.word	0x20000038
 8006150:	2000003c 	.word	0x2000003c

08006154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	2300      	movs	r3, #0
 8006168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800616e:	4b1e      	ldr	r3, [pc, #120]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f003 030c 	and.w	r3, r3, #12
 800617a:	2b04      	cmp	r3, #4
 800617c:	d002      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0x30>
 800617e:	2b08      	cmp	r3, #8
 8006180:	d003      	beq.n	800618a <HAL_RCC_GetSysClockFreq+0x36>
 8006182:	e027      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006184:	4b19      	ldr	r3, [pc, #100]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x98>)
 8006186:	613b      	str	r3, [r7, #16]
      break;
 8006188:	e027      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	0c9b      	lsrs	r3, r3, #18
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	4a17      	ldr	r2, [pc, #92]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006194:	5cd3      	ldrb	r3, [r2, r3]
 8006196:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d010      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061a2:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	0c5b      	lsrs	r3, r3, #17
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	4a11      	ldr	r2, [pc, #68]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80061ae:	5cd3      	ldrb	r3, [r2, r3]
 80061b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a0d      	ldr	r2, [pc, #52]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x98>)
 80061b6:	fb03 f202 	mul.w	r2, r3, r2
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e004      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a0c      	ldr	r2, [pc, #48]	@ (80061f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	613b      	str	r3, [r7, #16]
      break;
 80061d2:	e002      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061d4:	4b05      	ldr	r3, [pc, #20]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x98>)
 80061d6:	613b      	str	r3, [r7, #16]
      break;
 80061d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061da:	693b      	ldr	r3, [r7, #16]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	007a1200 	.word	0x007a1200
 80061f0:	0800c1a8 	.word	0x0800c1a8
 80061f4:	0800c1b8 	.word	0x0800c1b8
 80061f8:	003d0900 	.word	0x003d0900

080061fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006200:	4b02      	ldr	r3, [pc, #8]	@ (800620c <HAL_RCC_GetHCLKFreq+0x10>)
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr
 800620c:	20000038 	.word	0x20000038

08006210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006214:	f7ff fff2 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 8006218:	4602      	mov	r2, r0
 800621a:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	4903      	ldr	r1, [pc, #12]	@ (8006234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006226:	5ccb      	ldrb	r3, [r1, r3]
 8006228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40021000 	.word	0x40021000
 8006234:	0800c1a0 	.word	0x0800c1a0

08006238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800623c:	f7ff ffde 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	0adb      	lsrs	r3, r3, #11
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	@ (800625c <HAL_RCC_GetPCLK2Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40021000 	.word	0x40021000
 800625c:	0800c1a0 	.word	0x0800c1a0

08006260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006268:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <RCC_Delay+0x34>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a0a      	ldr	r2, [pc, #40]	@ (8006298 <RCC_Delay+0x38>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	0a5b      	lsrs	r3, r3, #9
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800627c:	bf00      	nop
  }
  while (Delay --);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1e5a      	subs	r2, r3, #1
 8006282:	60fa      	str	r2, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f9      	bne.n	800627c <RCC_Delay+0x1c>
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr
 8006294:	20000038 	.word	0x20000038
 8006298:	10624dd3 	.word	0x10624dd3

0800629c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e076      	b.n	800639c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d108      	bne.n	80062c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062be:	d009      	beq.n	80062d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	61da      	str	r2, [r3, #28]
 80062c6:	e005      	b.n	80062d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fc fafe 	bl	80028f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800630a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006358:	ea42 0103 	orr.w	r1, r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006360:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	0c1a      	lsrs	r2, r3, #16
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f002 0204 	and.w	r2, r2, #4
 800637a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69da      	ldr	r2, [r3, #28]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800638a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	@ 0x28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063b2:	2301      	movs	r3, #1
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b6:	f7fc ff6f 	bl	8003298 <HAL_GetTick>
 80063ba:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063c2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80063ca:	887b      	ldrh	r3, [r7, #2]
 80063cc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063ce:	7ffb      	ldrb	r3, [r7, #31]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d00c      	beq.n	80063ee <HAL_SPI_TransmitReceive+0x4a>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063da:	d106      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x46>
 80063e4:	7ffb      	ldrb	r3, [r7, #31]
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d001      	beq.n	80063ee <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
 80063ec:	e17f      	b.n	80066ee <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x5c>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x5c>
 80063fa:	887b      	ldrh	r3, [r7, #2]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e174      	b.n	80066ee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x6e>
 800640e:	2302      	movs	r3, #2
 8006410:	e16d      	b.n	80066ee <HAL_SPI_TransmitReceive+0x34a>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b04      	cmp	r3, #4
 8006424:	d003      	beq.n	800642e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2205      	movs	r2, #5
 800642a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	887a      	ldrh	r2, [r7, #2]
 800643e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	887a      	ldrh	r2, [r7, #2]
 8006444:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	887a      	ldrh	r2, [r7, #2]
 8006456:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d007      	beq.n	8006482 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800648a:	d17e      	bne.n	800658a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_SPI_TransmitReceive+0xf6>
 8006494:	8afb      	ldrh	r3, [r7, #22]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d16c      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649e:	881a      	ldrh	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064aa:	1c9a      	adds	r2, r3, #2
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064be:	e059      	b.n	8006574 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d11b      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x162>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d016      	beq.n	8006506 <HAL_SPI_TransmitReceive+0x162>
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d113      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ee:	1c9a      	adds	r2, r3, #2
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d119      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x1a4>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d014      	beq.n	8006548 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	b292      	uxth	r2, r2
 800652a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006530:	1c9a      	adds	r2, r3, #2
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006544:	2301      	movs	r3, #1
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006548:	f7fc fea6 	bl	8003298 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006554:	429a      	cmp	r2, r3
 8006556:	d80d      	bhi.n	8006574 <HAL_SPI_TransmitReceive+0x1d0>
 8006558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d009      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e0bc      	b.n	80066ee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1a0      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x11c>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d19b      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x11c>
 8006588:	e082      	b.n	8006690 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <HAL_SPI_TransmitReceive+0x1f4>
 8006592:	8afb      	ldrh	r3, [r7, #22]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d171      	bne.n	800667c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	7812      	ldrb	r2, [r2, #0]
 80065a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065be:	e05d      	b.n	800667c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d11c      	bne.n	8006608 <HAL_SPI_TransmitReceive+0x264>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d017      	beq.n	8006608 <HAL_SPI_TransmitReceive+0x264>
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d114      	bne.n	8006608 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	330c      	adds	r3, #12
 80065e8:	7812      	ldrb	r2, [r2, #0]
 80065ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	d119      	bne.n	800664a <HAL_SPI_TransmitReceive+0x2a6>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d014      	beq.n	800664a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006646:	2301      	movs	r3, #1
 8006648:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800664a:	f7fc fe25 	bl	8003298 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006656:	429a      	cmp	r2, r3
 8006658:	d803      	bhi.n	8006662 <HAL_SPI_TransmitReceive+0x2be>
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d102      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x2c4>
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e038      	b.n	80066ee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d19c      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x21c>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d197      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fd35 	bl	8007104 <SPI_EndRxTxTransaction>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e01d      	b.n	80066ee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ba:	2300      	movs	r3, #0
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
  }
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3728      	adds	r7, #40	@ 0x28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b01      	cmp	r3, #1
 8006710:	d001      	beq.n	8006716 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006712:	2302      	movs	r3, #2
 8006714:	e097      	b.n	8006846 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_SPI_Transmit_DMA+0x2a>
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e08f      	b.n	8006846 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_SPI_Transmit_DMA+0x3c>
 8006730:	2302      	movs	r3, #2
 8006732:	e088      	b.n	8006846 <HAL_SPI_Transmit_DMA+0x14e>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2203      	movs	r2, #3
 8006740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	88fa      	ldrh	r2, [r7, #6]
 8006754:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	88fa      	ldrh	r2, [r7, #6]
 800675a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006782:	d10f      	bne.n	80067a4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006792:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a8:	4a29      	ldr	r2, [pc, #164]	@ (8006850 <HAL_SPI_Transmit_DMA+0x158>)
 80067aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b0:	4a28      	ldr	r2, [pc, #160]	@ (8006854 <HAL_SPI_Transmit_DMA+0x15c>)
 80067b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b8:	4a27      	ldr	r2, [pc, #156]	@ (8006858 <HAL_SPI_Transmit_DMA+0x160>)
 80067ba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c0:	2200      	movs	r2, #0
 80067c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067cc:	4619      	mov	r1, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067dc:	f7fc fef2 	bl	80035c4 <HAL_DMA_Start_IT>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ea:	f043 0210 	orr.w	r2, r3, #16
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e023      	b.n	8006846 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006808:	2b40      	cmp	r3, #64	@ 0x40
 800680a:	d007      	beq.n	800681c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800681a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0220 	orr.w	r2, r2, #32
 8006832:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0202 	orr.w	r2, r2, #2
 8006842:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	08006e93 	.word	0x08006e93
 8006854:	08006cb9 	.word	0x08006cb9
 8006858:	08006ee7 	.word	0x08006ee7

0800685c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006870:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d00c      	beq.n	8006898 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006884:	d106      	bne.n	8006894 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <HAL_SPI_TransmitReceive_DMA+0x38>
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	2b04      	cmp	r3, #4
 8006892:	d001      	beq.n	8006898 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
 8006896:	e0cf      	b.n	8006a38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_SPI_TransmitReceive_DMA+0x4e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_SPI_TransmitReceive_DMA+0x4e>
 80068a4:	887b      	ldrh	r3, [r7, #2]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e0c4      	b.n	8006a38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_SPI_TransmitReceive_DMA+0x60>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e0bd      	b.n	8006a38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d003      	beq.n	80068d8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2205      	movs	r2, #5
 80068d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	887a      	ldrh	r2, [r7, #2]
 80068e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	887a      	ldrh	r2, [r7, #2]
 80068ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	887a      	ldrh	r2, [r7, #2]
 80068fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	887a      	ldrh	r2, [r7, #2]
 8006900:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b04      	cmp	r3, #4
 8006918:	d108      	bne.n	800692c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691e:	4a48      	ldr	r2, [pc, #288]	@ (8006a40 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006920:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006926:	4a47      	ldr	r2, [pc, #284]	@ (8006a44 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006928:	629a      	str	r2, [r3, #40]	@ 0x28
 800692a:	e007      	b.n	800693c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006930:	4a45      	ldr	r2, [pc, #276]	@ (8006a48 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006938:	4a44      	ldr	r2, [pc, #272]	@ (8006a4c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800693a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006940:	4a43      	ldr	r2, [pc, #268]	@ (8006a50 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006942:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006948:	2200      	movs	r2, #0
 800694a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330c      	adds	r3, #12
 8006956:	4619      	mov	r1, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006962:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006964:	f7fc fe2e 	bl	80035c4 <HAL_DMA_Start_IT>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006972:	f043 0210 	orr.w	r2, r3, #16
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e058      	b.n	8006a38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800699a:	2200      	movs	r2, #0
 800699c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069a2:	2200      	movs	r2, #0
 80069a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069aa:	2200      	movs	r2, #0
 80069ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b2:	2200      	movs	r2, #0
 80069b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	4619      	mov	r1, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069ce:	f7fc fdf9 	bl	80035c4 <HAL_DMA_Start_IT>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069dc:	f043 0210 	orr.w	r2, r3, #16
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e023      	b.n	8006a38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fa:	2b40      	cmp	r3, #64	@ 0x40
 80069fc:	d007      	beq.n	8006a0e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a0c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0220 	orr.w	r2, r2, #32
 8006a24:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0202 	orr.w	r2, r2, #2
 8006a34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	08006eaf 	.word	0x08006eaf
 8006a44:	08006d5f 	.word	0x08006d5f
 8006a48:	08006ecb 	.word	0x08006ecb
 8006a4c:	08006e05 	.word	0x08006e05
 8006a50:	08006ee7 	.word	0x08006ee7

08006a54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	099b      	lsrs	r3, r3, #6
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	099b      	lsrs	r3, r3, #6
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
    return;
 8006a96:	e0be      	b.n	8006c16 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	085b      	lsrs	r3, r3, #1
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <HAL_SPI_IRQHandler+0x66>
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	09db      	lsrs	r3, r3, #7
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
    return;
 8006ab8:	e0ad      	b.n	8006c16 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d106      	bne.n	8006ad4 <HAL_SPI_IRQHandler+0x80>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	099b      	lsrs	r3, r3, #6
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80a1 	beq.w	8006c16 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 809a 	beq.w	8006c16 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	099b      	lsrs	r3, r3, #6
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d023      	beq.n	8006b36 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d011      	beq.n	8006b1e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f043 0204 	orr.w	r2, r3, #4
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	e00b      	b.n	8006b36 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	693b      	ldr	r3, [r7, #16]
        return;
 8006b34:	e06f      	b.n	8006c16 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d014      	beq.n	8006b6c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	f043 0201 	orr.w	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d04f      	beq.n	8006c14 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b82:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <HAL_SPI_IRQHandler+0x14c>
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d034      	beq.n	8006c0a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0203 	bic.w	r2, r2, #3
 8006bae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d011      	beq.n	8006bdc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bbc:	4a17      	ldr	r2, [pc, #92]	@ (8006c1c <HAL_SPI_IRQHandler+0x1c8>)
 8006bbe:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fc fd99 	bl	80036fc <HAL_DMA_Abort_IT>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d016      	beq.n	8006c12 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be8:	4a0c      	ldr	r2, [pc, #48]	@ (8006c1c <HAL_SPI_IRQHandler+0x1c8>)
 8006bea:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fc fd83 	bl	80036fc <HAL_DMA_Abort_IT>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006c08:	e003      	b.n	8006c12 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f83e 	bl	8006c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c10:	e000      	b.n	8006c14 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006c12:	bf00      	nop
    return;
 8006c14:	bf00      	nop
  }
}
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	08006f27 	.word	0x08006f27

08006c20 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr

08006c32 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr

08006c56 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr

08006c7a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cac:	b2db      	uxtb	r3, r3
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cc6:	f7fc fae7 	bl	8003298 <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d03b      	beq.n	8006d52 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0220 	bic.w	r2, r2, #32
 8006ce8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0202 	bic.w	r2, r2, #2
 8006cf8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	2164      	movs	r1, #100	@ 0x64
 8006cfe:	6978      	ldr	r0, [r7, #20]
 8006d00:	f000 fa00 	bl	8007104 <SPI_EndRxTxTransaction>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0e:	f043 0220 	orr.w	r2, r3, #32
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2200      	movs	r2, #0
 8006d38:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d4a:	6978      	ldr	r0, [r7, #20]
 8006d4c:	f7ff ff9e 	bl	8006c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d50:	e002      	b.n	8006d58 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006d52:	6978      	ldr	r0, [r7, #20]
 8006d54:	f7ff ff64 	bl	8006c20 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d6c:	f7fc fa94 	bl	8003298 <HAL_GetTick>
 8006d70:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d03b      	beq.n	8006df8 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0220 	bic.w	r2, r2, #32
 8006d8e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10d      	bne.n	8006db4 <SPI_DMAReceiveCplt+0x56>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006da0:	d108      	bne.n	8006db4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0203 	bic.w	r2, r2, #3
 8006db0:	605a      	str	r2, [r3, #4]
 8006db2:	e007      	b.n	8006dc4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	2164      	movs	r1, #100	@ 0x64
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f949 	bl	8007060 <SPI_EndRxTransaction>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f7ff ff4b 	bl	8006c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006df6:	e002      	b.n	8006dfe <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff ff1a 	bl	8006c32 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e12:	f7fc fa41 	bl	8003298 <HAL_GetTick>
 8006e16:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d02f      	beq.n	8006e86 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0220 	bic.w	r2, r2, #32
 8006e34:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	2164      	movs	r1, #100	@ 0x64
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f962 	bl	8007104 <SPI_EndRxTxTransaction>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4a:	f043 0220 	orr.w	r2, r3, #32
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0203 	bic.w	r2, r2, #3
 8006e60:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff ff04 	bl	8006c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006e84:	e002      	b.n	8006e8c <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff fedc 	bl	8006c44 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7ff fed8 	bl	8006c56 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ea6:	bf00      	nop
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff fed3 	bl	8006c68 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff fece 	bl	8006c7a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0203 	bic.w	r2, r2, #3
 8006f02:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f08:	f043 0210 	orr.w	r2, r3, #16
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff feb7 	bl	8006c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f1e:	bf00      	nop
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7ff fea3 	bl	8006c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f46:	bf00      	nop
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f60:	f7fc f99a 	bl	8003298 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f70:	f7fc f992 	bl	8003298 <HAL_GetTick>
 8006f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f76:	4b39      	ldr	r3, [pc, #228]	@ (800705c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	015b      	lsls	r3, r3, #5
 8006f7c:	0d1b      	lsrs	r3, r3, #20
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	fb02 f303 	mul.w	r3, r2, r3
 8006f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f86:	e054      	b.n	8007032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8e:	d050      	beq.n	8007032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f90:	f7fc f982 	bl	8003298 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d902      	bls.n	8006fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d13d      	bne.n	8007022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fbe:	d111      	bne.n	8006fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc8:	d004      	beq.n	8006fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd2:	d107      	bne.n	8006fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fec:	d10f      	bne.n	800700e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800700c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e017      	b.n	8007052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	3b01      	subs	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4013      	ands	r3, r2
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	429a      	cmp	r2, r3
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	429a      	cmp	r2, r3
 800704e:	d19b      	bne.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000038 	.word	0x20000038

08007060 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007074:	d111      	bne.n	800709a <SPI_EndRxTransaction+0x3a>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800707e:	d004      	beq.n	800708a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007088:	d107      	bne.n	800709a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007098:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070a2:	d117      	bne.n	80070d4 <SPI_EndRxTransaction+0x74>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ac:	d112      	bne.n	80070d4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	2101      	movs	r1, #1
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff ff49 	bl	8006f50 <SPI_WaitFlagStateUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01a      	beq.n	80070fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c8:	f043 0220 	orr.w	r2, r3, #32
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e013      	b.n	80070fc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	2180      	movs	r1, #128	@ 0x80
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7ff ff36 	bl	8006f50 <SPI_WaitFlagStateUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d007      	beq.n	80070fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ee:	f043 0220 	orr.w	r2, r3, #32
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e000      	b.n	80070fc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2201      	movs	r2, #1
 8007118:	2102      	movs	r1, #2
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff ff18 	bl	8006f50 <SPI_WaitFlagStateUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e013      	b.n	800715e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2200      	movs	r2, #0
 800713e:	2180      	movs	r1, #128	@ 0x80
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7ff ff05 	bl	8006f50 <SPI_WaitFlagStateUntilTimeout>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007150:	f043 0220 	orr.w	r2, r3, #32
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e000      	b.n	800715e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e041      	b.n	80071fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7fb feeb 	bl	8002f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	4619      	mov	r1, r3
 80071a4:	4610      	mov	r0, r2
 80071a6:	f000 fc1f 	bl	80079e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d001      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e03a      	b.n	8007292 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a18      	ldr	r2, [pc, #96]	@ (800729c <HAL_TIM_Base_Start_IT+0x98>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00e      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x58>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007246:	d009      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x58>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a14      	ldr	r2, [pc, #80]	@ (80072a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x58>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a13      	ldr	r2, [pc, #76]	@ (80072a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d111      	bne.n	8007280 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b06      	cmp	r3, #6
 800726c:	d010      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727e:	e007      	b.n	8007290 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800

080072a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e041      	b.n	800733e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f839 	bl	8007346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f000 fb7e 	bl	80079e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <HAL_TIM_PWM_Start+0x24>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	bf14      	ite	ne
 8007374:	2301      	movne	r3, #1
 8007376:	2300      	moveq	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	e022      	b.n	80073c2 <HAL_TIM_PWM_Start+0x6a>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b04      	cmp	r3, #4
 8007380:	d109      	bne.n	8007396 <HAL_TIM_PWM_Start+0x3e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	bf14      	ite	ne
 800738e:	2301      	movne	r3, #1
 8007390:	2300      	moveq	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	e015      	b.n	80073c2 <HAL_TIM_PWM_Start+0x6a>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b08      	cmp	r3, #8
 800739a:	d109      	bne.n	80073b0 <HAL_TIM_PWM_Start+0x58>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	e008      	b.n	80073c2 <HAL_TIM_PWM_Start+0x6a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	bf14      	ite	ne
 80073bc:	2301      	movne	r3, #1
 80073be:	2300      	moveq	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e05e      	b.n	8007488 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <HAL_TIM_PWM_Start+0x82>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073d8:	e013      	b.n	8007402 <HAL_TIM_PWM_Start+0xaa>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d104      	bne.n	80073ea <HAL_TIM_PWM_Start+0x92>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073e8:	e00b      	b.n	8007402 <HAL_TIM_PWM_Start+0xaa>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d104      	bne.n	80073fa <HAL_TIM_PWM_Start+0xa2>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073f8:	e003      	b.n	8007402 <HAL_TIM_PWM_Start+0xaa>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2202      	movs	r2, #2
 80073fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2201      	movs	r2, #1
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fd78 	bl	8007f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a1e      	ldr	r2, [pc, #120]	@ (8007490 <HAL_TIM_PWM_Start+0x138>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d107      	bne.n	800742a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007428:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a18      	ldr	r2, [pc, #96]	@ (8007490 <HAL_TIM_PWM_Start+0x138>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_TIM_PWM_Start+0xfa>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743c:	d009      	beq.n	8007452 <HAL_TIM_PWM_Start+0xfa>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a14      	ldr	r2, [pc, #80]	@ (8007494 <HAL_TIM_PWM_Start+0x13c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_TIM_PWM_Start+0xfa>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a12      	ldr	r2, [pc, #72]	@ (8007498 <HAL_TIM_PWM_Start+0x140>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d111      	bne.n	8007476 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b06      	cmp	r3, #6
 8007462:	d010      	beq.n	8007486 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0201 	orr.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007474:	e007      	b.n	8007486 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f042 0201 	orr.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40012c00 	.word	0x40012c00
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800

0800749c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d020      	beq.n	8007500 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01b      	beq.n	8007500 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0202 	mvn.w	r2, #2
 80074d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa63 	bl	80079b2 <HAL_TIM_IC_CaptureCallback>
 80074ec:	e005      	b.n	80074fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa56 	bl	80079a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa65 	bl	80079c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d020      	beq.n	800754c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d01b      	beq.n	800754c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0204 	mvn.w	r2, #4
 800751c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2202      	movs	r2, #2
 8007522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa3d 	bl	80079b2 <HAL_TIM_IC_CaptureCallback>
 8007538:	e005      	b.n	8007546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa30 	bl	80079a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa3f 	bl	80079c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d020      	beq.n	8007598 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01b      	beq.n	8007598 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0208 	mvn.w	r2, #8
 8007568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2204      	movs	r2, #4
 800756e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa17 	bl	80079b2 <HAL_TIM_IC_CaptureCallback>
 8007584:	e005      	b.n	8007592 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa0a 	bl	80079a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fa19 	bl	80079c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f003 0310 	and.w	r3, r3, #16
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d020      	beq.n	80075e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01b      	beq.n	80075e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0210 	mvn.w	r2, #16
 80075b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2208      	movs	r2, #8
 80075ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9f1 	bl	80079b2 <HAL_TIM_IC_CaptureCallback>
 80075d0:	e005      	b.n	80075de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f9e4 	bl	80079a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f9f3 	bl	80079c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00c      	beq.n	8007608 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f06f 0201 	mvn.w	r2, #1
 8007600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f9c3 	bl	800798e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00c      	beq.n	800762c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fcf5 	bl	8008016 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00c      	beq.n	8007650 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9c3 	bl	80079d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00c      	beq.n	8007674 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0220 	mvn.w	r2, #32
 800766c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fcc8 	bl	8008004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007696:	2302      	movs	r3, #2
 8007698:	e0ae      	b.n	80077f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b0c      	cmp	r3, #12
 80076a6:	f200 809f 	bhi.w	80077e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076aa:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076e5 	.word	0x080076e5
 80076b4:	080077e9 	.word	0x080077e9
 80076b8:	080077e9 	.word	0x080077e9
 80076bc:	080077e9 	.word	0x080077e9
 80076c0:	08007725 	.word	0x08007725
 80076c4:	080077e9 	.word	0x080077e9
 80076c8:	080077e9 	.word	0x080077e9
 80076cc:	080077e9 	.word	0x080077e9
 80076d0:	08007767 	.word	0x08007767
 80076d4:	080077e9 	.word	0x080077e9
 80076d8:	080077e9 	.word	0x080077e9
 80076dc:	080077e9 	.word	0x080077e9
 80076e0:	080077a7 	.word	0x080077a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f9ea 	bl	8007ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0208 	orr.w	r2, r2, #8
 80076fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0204 	bic.w	r2, r2, #4
 800770e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6999      	ldr	r1, [r3, #24]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	619a      	str	r2, [r3, #24]
      break;
 8007722:	e064      	b.n	80077ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fa30 	bl	8007b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800773e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800774e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6999      	ldr	r1, [r3, #24]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	021a      	lsls	r2, r3, #8
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	619a      	str	r2, [r3, #24]
      break;
 8007764:	e043      	b.n	80077ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fa79 	bl	8007c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69da      	ldr	r2, [r3, #28]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0208 	orr.w	r2, r2, #8
 8007780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0204 	bic.w	r2, r2, #4
 8007790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69d9      	ldr	r1, [r3, #28]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	61da      	str	r2, [r3, #28]
      break;
 80077a4:	e023      	b.n	80077ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fac3 	bl	8007d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69da      	ldr	r2, [r3, #28]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69d9      	ldr	r1, [r3, #28]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	021a      	lsls	r2, r3, #8
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	61da      	str	r2, [r3, #28]
      break;
 80077e6:	e002      	b.n	80077ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
      break;
 80077ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_TIM_ConfigClockSource+0x1c>
 8007818:	2302      	movs	r3, #2
 800781a:	e0b4      	b.n	8007986 <HAL_TIM_ConfigClockSource+0x186>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800783a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007854:	d03e      	beq.n	80078d4 <HAL_TIM_ConfigClockSource+0xd4>
 8007856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800785a:	f200 8087 	bhi.w	800796c <HAL_TIM_ConfigClockSource+0x16c>
 800785e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007862:	f000 8086 	beq.w	8007972 <HAL_TIM_ConfigClockSource+0x172>
 8007866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800786a:	d87f      	bhi.n	800796c <HAL_TIM_ConfigClockSource+0x16c>
 800786c:	2b70      	cmp	r3, #112	@ 0x70
 800786e:	d01a      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0xa6>
 8007870:	2b70      	cmp	r3, #112	@ 0x70
 8007872:	d87b      	bhi.n	800796c <HAL_TIM_ConfigClockSource+0x16c>
 8007874:	2b60      	cmp	r3, #96	@ 0x60
 8007876:	d050      	beq.n	800791a <HAL_TIM_ConfigClockSource+0x11a>
 8007878:	2b60      	cmp	r3, #96	@ 0x60
 800787a:	d877      	bhi.n	800796c <HAL_TIM_ConfigClockSource+0x16c>
 800787c:	2b50      	cmp	r3, #80	@ 0x50
 800787e:	d03c      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0xfa>
 8007880:	2b50      	cmp	r3, #80	@ 0x50
 8007882:	d873      	bhi.n	800796c <HAL_TIM_ConfigClockSource+0x16c>
 8007884:	2b40      	cmp	r3, #64	@ 0x40
 8007886:	d058      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x13a>
 8007888:	2b40      	cmp	r3, #64	@ 0x40
 800788a:	d86f      	bhi.n	800796c <HAL_TIM_ConfigClockSource+0x16c>
 800788c:	2b30      	cmp	r3, #48	@ 0x30
 800788e:	d064      	beq.n	800795a <HAL_TIM_ConfigClockSource+0x15a>
 8007890:	2b30      	cmp	r3, #48	@ 0x30
 8007892:	d86b      	bhi.n	800796c <HAL_TIM_ConfigClockSource+0x16c>
 8007894:	2b20      	cmp	r3, #32
 8007896:	d060      	beq.n	800795a <HAL_TIM_ConfigClockSource+0x15a>
 8007898:	2b20      	cmp	r3, #32
 800789a:	d867      	bhi.n	800796c <HAL_TIM_ConfigClockSource+0x16c>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d05c      	beq.n	800795a <HAL_TIM_ConfigClockSource+0x15a>
 80078a0:	2b10      	cmp	r3, #16
 80078a2:	d05a      	beq.n	800795a <HAL_TIM_ConfigClockSource+0x15a>
 80078a4:	e062      	b.n	800796c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078b6:	f000 fb04 	bl	8007ec2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	609a      	str	r2, [r3, #8]
      break;
 80078d2:	e04f      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078e4:	f000 faed 	bl	8007ec2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689a      	ldr	r2, [r3, #8]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078f6:	609a      	str	r2, [r3, #8]
      break;
 80078f8:	e03c      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007906:	461a      	mov	r2, r3
 8007908:	f000 fa64 	bl	8007dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2150      	movs	r1, #80	@ 0x50
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fabb 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 8007918:	e02c      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007926:	461a      	mov	r2, r3
 8007928:	f000 fa82 	bl	8007e30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2160      	movs	r1, #96	@ 0x60
 8007932:	4618      	mov	r0, r3
 8007934:	f000 faab 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 8007938:	e01c      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007946:	461a      	mov	r2, r3
 8007948:	f000 fa44 	bl	8007dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2140      	movs	r1, #64	@ 0x40
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fa9b 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 8007958:	e00c      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	4610      	mov	r0, r2
 8007966:	f000 fa92 	bl	8007e8e <TIM_ITRx_SetConfig>
      break;
 800796a:	e003      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
      break;
 8007970:	e000      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr

080079b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	bc80      	pop	{r7}
 80079c2:	4770      	bx	lr

080079c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr

080079d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr

080079e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a2f      	ldr	r2, [pc, #188]	@ (8007ab8 <TIM_Base_SetConfig+0xd0>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00b      	beq.n	8007a18 <TIM_Base_SetConfig+0x30>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a06:	d007      	beq.n	8007a18 <TIM_Base_SetConfig+0x30>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007abc <TIM_Base_SetConfig+0xd4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_Base_SetConfig+0x30>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac0 <TIM_Base_SetConfig+0xd8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d108      	bne.n	8007a2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a22      	ldr	r2, [pc, #136]	@ (8007ab8 <TIM_Base_SetConfig+0xd0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <TIM_Base_SetConfig+0x62>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a38:	d007      	beq.n	8007a4a <TIM_Base_SetConfig+0x62>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <TIM_Base_SetConfig+0xd4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_Base_SetConfig+0x62>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac0 <TIM_Base_SetConfig+0xd8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d108      	bne.n	8007a5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a0d      	ldr	r2, [pc, #52]	@ (8007ab8 <TIM_Base_SetConfig+0xd0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d103      	bne.n	8007a90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	691a      	ldr	r2, [r3, #16]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f023 0201 	bic.w	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	611a      	str	r2, [r3, #16]
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800

08007ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f023 0201 	bic.w	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f023 0302 	bic.w	r3, r3, #2
 8007b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007b8c <TIM_OC1_SetConfig+0xc8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10c      	bne.n	8007b3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0308 	bic.w	r3, r3, #8
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f023 0304 	bic.w	r3, r3, #4
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a13      	ldr	r2, [pc, #76]	@ (8007b8c <TIM_OC1_SetConfig+0xc8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d111      	bne.n	8007b66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	621a      	str	r2, [r3, #32]
}
 8007b80:	bf00      	nop
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40012c00 	.word	0x40012c00

08007b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f023 0210 	bic.w	r2, r3, #16
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f023 0320 	bic.w	r3, r3, #32
 8007bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1d      	ldr	r2, [pc, #116]	@ (8007c60 <TIM_OC2_SetConfig+0xd0>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10d      	bne.n	8007c0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a14      	ldr	r2, [pc, #80]	@ (8007c60 <TIM_OC2_SetConfig+0xd0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d113      	bne.n	8007c3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr
 8007c60:	40012c00 	.word	0x40012c00

08007c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007d34 <TIM_OC3_SetConfig+0xd0>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d10d      	bne.n	8007cde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a14      	ldr	r2, [pc, #80]	@ (8007d34 <TIM_OC3_SetConfig+0xd0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d113      	bne.n	8007d0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	621a      	str	r2, [r3, #32]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bc80      	pop	{r7}
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40012c00 	.word	0x40012c00

08007d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	021b      	lsls	r3, r3, #8
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	031b      	lsls	r3, r3, #12
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a0f      	ldr	r2, [pc, #60]	@ (8007dd0 <TIM_OC4_SetConfig+0x98>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d109      	bne.n	8007dac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	019b      	lsls	r3, r3, #6
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr
 8007dd0:	40012c00 	.word	0x40012c00

08007dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f023 0201 	bic.w	r2, r3, #1
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f023 030a 	bic.w	r3, r3, #10
 8007e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	621a      	str	r2, [r3, #32]
}
 8007e26:	bf00      	nop
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr

08007e30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f023 0210 	bic.w	r2, r3, #16
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	031b      	lsls	r3, r3, #12
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	621a      	str	r2, [r3, #32]
}
 8007e84:	bf00      	nop
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr

08007e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f043 0307 	orr.w	r3, r3, #7
 8007eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	609a      	str	r2, [r3, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr

08007ec2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b087      	sub	sp, #28
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007edc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	021a      	lsls	r2, r3, #8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	609a      	str	r2, [r3, #8]
}
 8007ef6:	bf00      	nop
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bc80      	pop	{r7}
 8007efe:	4770      	bx	lr

08007f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	2201      	movs	r2, #1
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	401a      	ands	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	fa01 f303 	lsl.w	r3, r1, r3
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr

08007f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e046      	b.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a16      	ldr	r2, [pc, #88]	@ (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00e      	beq.n	8007fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fac:	d009      	beq.n	8007fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a12      	ldr	r2, [pc, #72]	@ (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a10      	ldr	r2, [pc, #64]	@ (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d10c      	bne.n	8007fdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr
 8007ff8:	40012c00 	.word	0x40012c00
 8007ffc:	40000400 	.word	0x40000400
 8008000:	40000800 	.word	0x40000800

08008004 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr

08008016 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e042      	b.n	80080c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fb f824 	bl	800309c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2224      	movs	r2, #36	@ 0x24
 8008058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800806a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fe63 	bl	8008d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	695a      	ldr	r2, [r3, #20]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d112      	bne.n	8008108 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <HAL_UART_Receive_DMA+0x26>
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e00b      	b.n	800810a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	461a      	mov	r2, r3
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fbbe 	bl	8008880 <UART_Start_Receive_DMA>
 8008104:	4603      	mov	r3, r0
 8008106:	e000      	b.n	800810a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008108:	2302      	movs	r3, #2
  }
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b0ba      	sub	sp, #232	@ 0xe8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800813a:	2300      	movs	r3, #0
 800813c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008140:	2300      	movs	r3, #0
 8008142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800814a:	f003 030f 	and.w	r3, r3, #15
 800814e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10f      	bne.n	800817a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800815a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <HAL_UART_IRQHandler+0x66>
 8008166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fd22 	bl	8008bbc <UART_Receive_IT>
      return;
 8008178:	e25b      	b.n	8008632 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800817a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 80de 	beq.w	8008340 <HAL_UART_IRQHandler+0x22c>
 8008184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008194:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80d1 	beq.w	8008340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800819e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00b      	beq.n	80081c2 <HAL_UART_IRQHandler+0xae>
 80081aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ba:	f043 0201 	orr.w	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00b      	beq.n	80081e6 <HAL_UART_IRQHandler+0xd2>
 80081ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081de:	f043 0202 	orr.w	r2, r3, #2
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <HAL_UART_IRQHandler+0xf6>
 80081f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008202:	f043 0204 	orr.w	r2, r3, #4
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d011      	beq.n	800823a <HAL_UART_IRQHandler+0x126>
 8008216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d105      	bne.n	800822e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008232:	f043 0208 	orr.w	r2, r3, #8
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 81f2 	beq.w	8008628 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008248:	f003 0320 	and.w	r3, r3, #32
 800824c:	2b00      	cmp	r3, #0
 800824e:	d008      	beq.n	8008262 <HAL_UART_IRQHandler+0x14e>
 8008250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fcad 	bl	8008bbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826c:	2b00      	cmp	r3, #0
 800826e:	bf14      	ite	ne
 8008270:	2301      	movne	r3, #1
 8008272:	2300      	moveq	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d103      	bne.n	800828e <HAL_UART_IRQHandler+0x17a>
 8008286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d04f      	beq.n	800832e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fbb7 	bl	8008a02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d041      	beq.n	8008326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3314      	adds	r3, #20
 80082a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3314      	adds	r3, #20
 80082ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80082d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80082da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80082e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1d9      	bne.n	80082a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d013      	beq.n	800831e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fa:	4a7e      	ldr	r2, [pc, #504]	@ (80084f4 <HAL_UART_IRQHandler+0x3e0>)
 80082fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008302:	4618      	mov	r0, r3
 8008304:	f7fb f9fa 	bl	80036fc <HAL_DMA_Abort_IT>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d016      	beq.n	800833c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	e00e      	b.n	800833c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f99c 	bl	800865c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008324:	e00a      	b.n	800833c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f998 	bl	800865c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832c:	e006      	b.n	800833c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f994 	bl	800865c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800833a:	e175      	b.n	8008628 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800833c:	bf00      	nop
    return;
 800833e:	e173      	b.n	8008628 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008344:	2b01      	cmp	r3, #1
 8008346:	f040 814f 	bne.w	80085e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800834e:	f003 0310 	and.w	r3, r3, #16
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 8148 	beq.w	80085e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 8141 	beq.w	80085e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008366:	2300      	movs	r3, #0
 8008368:	60bb      	str	r3, [r7, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60bb      	str	r3, [r7, #8]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	60bb      	str	r3, [r7, #8]
 800837a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 80b6 	beq.w	80084f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8145 	beq.w	800862c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083aa:	429a      	cmp	r2, r3
 80083ac:	f080 813e 	bcs.w	800862c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	2b20      	cmp	r3, #32
 80083c0:	f000 8088 	beq.w	80084d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	330c      	adds	r3, #12
 80083ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	330c      	adds	r3, #12
 80083ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80083f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80083f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80083fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1d9      	bne.n	80083c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3314      	adds	r3, #20
 8008416:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008420:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008422:	f023 0301 	bic.w	r3, r3, #1
 8008426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3314      	adds	r3, #20
 8008430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008434:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008438:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800843c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e1      	bne.n	8008410 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3314      	adds	r3, #20
 8008452:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800845c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800845e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3314      	adds	r3, #20
 800846c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008470:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008472:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008476:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800847e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e3      	bne.n	800844c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	330c      	adds	r3, #12
 8008498:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084a4:	f023 0310 	bic.w	r3, r3, #16
 80084a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	330c      	adds	r3, #12
 80084b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80084b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80084b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e3      	bne.n	8008492 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fb f8d8 	bl	8003684 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f8bf 	bl	800866e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084f0:	e09c      	b.n	800862c <HAL_UART_IRQHandler+0x518>
 80084f2:	bf00      	nop
 80084f4:	08008ac7 	.word	0x08008ac7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008500:	b29b      	uxth	r3, r3
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800850c:	b29b      	uxth	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 808e 	beq.w	8008630 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8089 	beq.w	8008630 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	330c      	adds	r3, #12
 8008524:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800852e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	330c      	adds	r3, #12
 800853e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008542:	647a      	str	r2, [r7, #68]	@ 0x44
 8008544:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e3      	bne.n	800851e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3314      	adds	r3, #20
 800855c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	623b      	str	r3, [r7, #32]
   return(result);
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	f023 0301 	bic.w	r3, r3, #1
 800856c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3314      	adds	r3, #20
 8008576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800857a:	633a      	str	r2, [r7, #48]	@ 0x30
 800857c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e3      	bne.n	8008556 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0310 	bic.w	r3, r3, #16
 80085b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	330c      	adds	r3, #12
 80085bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80085c0:	61fa      	str	r2, [r7, #28]
 80085c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	69b9      	ldr	r1, [r7, #24]
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	617b      	str	r3, [r7, #20]
   return(result);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e3      	bne.n	800859c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f844 	bl	800866e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085e6:	e023      	b.n	8008630 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d009      	beq.n	8008608 <HAL_UART_IRQHandler+0x4f4>
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fa74 	bl	8008aee <UART_Transmit_IT>
    return;
 8008606:	e014      	b.n	8008632 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00e      	beq.n	8008632 <HAL_UART_IRQHandler+0x51e>
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d008      	beq.n	8008632 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fab3 	bl	8008b8c <UART_EndTransmit_IT>
    return;
 8008626:	e004      	b.n	8008632 <HAL_UART_IRQHandler+0x51e>
    return;
 8008628:	bf00      	nop
 800862a:	e002      	b.n	8008632 <HAL_UART_IRQHandler+0x51e>
      return;
 800862c:	bf00      	nop
 800862e:	e000      	b.n	8008632 <HAL_UART_IRQHandler+0x51e>
      return;
 8008630:	bf00      	nop
  }
}
 8008632:	37e8      	adds	r7, #232	@ 0xe8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	bc80      	pop	{r7}
 8008648:	4770      	bx	lr

0800864a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr

0800866e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b09c      	sub	sp, #112	@ 0x70
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008690:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0320 	and.w	r3, r3, #32
 800869c:	2b00      	cmp	r3, #0
 800869e:	d172      	bne.n	8008786 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80086a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086a2:	2200      	movs	r2, #0
 80086a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	330c      	adds	r3, #12
 80086ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80086c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80086c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e5      	bne.n	80086a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3314      	adds	r3, #20
 80086e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ec:	f023 0301 	bic.w	r3, r3, #1
 80086f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80086f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3314      	adds	r3, #20
 80086f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80086fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80086fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e5      	bne.n	80086da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800870e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3314      	adds	r3, #20
 8008714:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	623b      	str	r3, [r7, #32]
   return(result);
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008724:	663b      	str	r3, [r7, #96]	@ 0x60
 8008726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3314      	adds	r3, #20
 800872c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800872e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008744:	2220      	movs	r2, #32
 8008746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800874a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800874c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874e:	2b01      	cmp	r3, #1
 8008750:	d119      	bne.n	8008786 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	330c      	adds	r3, #12
 8008758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	60fb      	str	r3, [r7, #12]
   return(result);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f023 0310 	bic.w	r3, r3, #16
 8008768:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800876a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	330c      	adds	r3, #12
 8008770:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008772:	61fa      	str	r2, [r7, #28]
 8008774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	69b9      	ldr	r1, [r7, #24]
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	617b      	str	r3, [r7, #20]
   return(result);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e5      	bne.n	8008752 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008788:	2200      	movs	r2, #0
 800878a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800878e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008790:	2b01      	cmp	r3, #1
 8008792:	d106      	bne.n	80087a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008796:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008798:	4619      	mov	r1, r3
 800879a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800879c:	f7ff ff67 	bl	800866e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087a0:	e002      	b.n	80087a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80087a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087a4:	f7f9 fb4a 	bl	8001e3c <HAL_UART_RxCpltCallback>
}
 80087a8:	bf00      	nop
 80087aa:	3770      	adds	r7, #112	@ 0x70
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d108      	bne.n	80087de <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087d0:	085b      	lsrs	r3, r3, #1
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	4619      	mov	r1, r3
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff ff49 	bl	800866e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087dc:	e002      	b.n	80087e4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff ff33 	bl	800864a <HAL_UART_RxHalfCpltCallback>
}
 80087e4:	bf00      	nop
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008808:	2b00      	cmp	r3, #0
 800880a:	bf14      	ite	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2300      	moveq	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b21      	cmp	r3, #33	@ 0x21
 800881e:	d108      	bne.n	8008832 <UART_DMAError+0x46>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2200      	movs	r2, #0
 800882a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800882c:	68b8      	ldr	r0, [r7, #8]
 800882e:	f000 f8c1 	bl	80089b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	bf14      	ite	ne
 8008840:	2301      	movne	r3, #1
 8008842:	2300      	moveq	r3, #0
 8008844:	b2db      	uxtb	r3, r3
 8008846:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b22      	cmp	r3, #34	@ 0x22
 8008852:	d108      	bne.n	8008866 <UART_DMAError+0x7a>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008860:	68b8      	ldr	r0, [r7, #8]
 8008862:	f000 f8ce 	bl	8008a02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800886a:	f043 0210 	orr.w	r2, r3, #16
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008872:	68b8      	ldr	r0, [r7, #8]
 8008874:	f7ff fef2 	bl	800865c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b098      	sub	sp, #96	@ 0x60
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	88fa      	ldrh	r2, [r7, #6]
 8008898:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2222      	movs	r2, #34	@ 0x22
 80088a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ac:	4a3e      	ldr	r2, [pc, #248]	@ (80089a8 <UART_Start_Receive_DMA+0x128>)
 80088ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b4:	4a3d      	ldr	r2, [pc, #244]	@ (80089ac <UART_Start_Receive_DMA+0x12c>)
 80088b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088bc:	4a3c      	ldr	r2, [pc, #240]	@ (80089b0 <UART_Start_Receive_DMA+0x130>)
 80088be:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c4:	2200      	movs	r2, #0
 80088c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80088c8:	f107 0308 	add.w	r3, r7, #8
 80088cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3304      	adds	r3, #4
 80088d8:	4619      	mov	r1, r3
 80088da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	f7fa fe70 	bl	80035c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80088e4:	2300      	movs	r3, #0
 80088e6:	613b      	str	r3, [r7, #16]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	613b      	str	r3, [r7, #16]
 80088f8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d019      	beq.n	8008936 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008918:	65bb      	str	r3, [r7, #88]	@ 0x58
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	330c      	adds	r3, #12
 8008920:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008922:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008924:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e5      	bne.n	8008902 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3314      	adds	r3, #20
 800893c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	f043 0301 	orr.w	r3, r3, #1
 800894c:	657b      	str	r3, [r7, #84]	@ 0x54
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3314      	adds	r3, #20
 8008954:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008956:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008958:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800895c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e5      	bne.n	8008936 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3314      	adds	r3, #20
 8008970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	617b      	str	r3, [r7, #20]
   return(result);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008980:	653b      	str	r3, [r7, #80]	@ 0x50
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3314      	adds	r3, #20
 8008988:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800898a:	627a      	str	r2, [r7, #36]	@ 0x24
 800898c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	6a39      	ldr	r1, [r7, #32]
 8008990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	61fb      	str	r3, [r7, #28]
   return(result);
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e5      	bne.n	800896a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3760      	adds	r7, #96	@ 0x60
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	08008685 	.word	0x08008685
 80089ac:	080087b1 	.word	0x080087b1
 80089b0:	080087ed 	.word	0x080087ed

080089b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b089      	sub	sp, #36	@ 0x24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	330c      	adds	r3, #12
 80089c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80089d2:	61fb      	str	r3, [r7, #28]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	330c      	adds	r3, #12
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	61ba      	str	r2, [r7, #24]
 80089de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e5      	bne.n	80089bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80089f8:	bf00      	nop
 80089fa:	3724      	adds	r7, #36	@ 0x24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr

08008a02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b095      	sub	sp, #84	@ 0x54
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	330c      	adds	r3, #12
 8008a10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e5      	bne.n	8008a0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3314      	adds	r3, #20
 8008a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	f023 0301 	bic.w	r3, r3, #1
 8008a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3314      	adds	r3, #20
 8008a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e5      	bne.n	8008a3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d119      	bne.n	8008aae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	330c      	adds	r3, #12
 8008a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f023 0310 	bic.w	r3, r3, #16
 8008a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	330c      	adds	r3, #12
 8008a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a9a:	61ba      	str	r2, [r7, #24]
 8008a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6979      	ldr	r1, [r7, #20]
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e5      	bne.n	8008a7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008abc:	bf00      	nop
 8008abe:	3754      	adds	r7, #84	@ 0x54
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr

08008ac6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7ff fdbb 	bl	800865c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b085      	sub	sp, #20
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b21      	cmp	r3, #33	@ 0x21
 8008b00:	d13e      	bne.n	8008b80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b0a:	d114      	bne.n	8008b36 <UART_Transmit_IT+0x48>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d110      	bne.n	8008b36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	1c9a      	adds	r2, r3, #2
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	621a      	str	r2, [r3, #32]
 8008b34:	e008      	b.n	8008b48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	1c59      	adds	r1, r3, #1
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6211      	str	r1, [r2, #32]
 8008b40:	781a      	ldrb	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	4619      	mov	r1, r3
 8008b56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10f      	bne.n	8008b7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	e000      	b.n	8008b82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b80:	2302      	movs	r3, #2
  }
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr

08008b8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ba2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff fd43 	bl	8008638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08c      	sub	sp, #48	@ 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b22      	cmp	r3, #34	@ 0x22
 8008bce:	f040 80ae 	bne.w	8008d2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bda:	d117      	bne.n	8008c0c <UART_Receive_IT+0x50>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d113      	bne.n	8008c0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c04:	1c9a      	adds	r2, r3, #2
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c0a:	e026      	b.n	8008c5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c1e:	d007      	beq.n	8008c30 <UART_Receive_IT+0x74>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <UART_Receive_IT+0x82>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d106      	bne.n	8008c3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e008      	b.n	8008c50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	4619      	mov	r1, r3
 8008c68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d15d      	bne.n	8008d2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0220 	bic.w	r2, r2, #32
 8008c7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0201 	bic.w	r2, r2, #1
 8008c9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d135      	bne.n	8008d20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f023 0310 	bic.w	r3, r3, #16
 8008cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	330c      	adds	r3, #12
 8008cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cda:	623a      	str	r2, [r7, #32]
 8008cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cde:	69f9      	ldr	r1, [r7, #28]
 8008ce0:	6a3a      	ldr	r2, [r7, #32]
 8008ce2:	e841 2300 	strex	r3, r2, [r1]
 8008ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e5      	bne.n	8008cba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	d10a      	bne.n	8008d12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff fca8 	bl	800866e <HAL_UARTEx_RxEventCallback>
 8008d1e:	e002      	b.n	8008d26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7f9 f88b 	bl	8001e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	e002      	b.n	8008d30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e000      	b.n	8008d30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008d2e:	2302      	movs	r3, #2
  }
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3730      	adds	r7, #48	@ 0x30
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008d72:	f023 030c 	bic.w	r3, r3, #12
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	430b      	orrs	r3, r1
 8008d7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008e4c <UART_SetConfig+0x114>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d103      	bne.n	8008da8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008da0:	f7fd fa4a 	bl	8006238 <HAL_RCC_GetPCLK2Freq>
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	e002      	b.n	8008dae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008da8:	f7fd fa32 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8008dac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009a      	lsls	r2, r3, #2
 8008db8:	441a      	add	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc4:	4a22      	ldr	r2, [pc, #136]	@ (8008e50 <UART_SetConfig+0x118>)
 8008dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dca:	095b      	lsrs	r3, r3, #5
 8008dcc:	0119      	lsls	r1, r3, #4
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009a      	lsls	r2, r3, #2
 8008dd8:	441a      	add	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008de4:	4b1a      	ldr	r3, [pc, #104]	@ (8008e50 <UART_SetConfig+0x118>)
 8008de6:	fba3 0302 	umull	r0, r3, r3, r2
 8008dea:	095b      	lsrs	r3, r3, #5
 8008dec:	2064      	movs	r0, #100	@ 0x64
 8008dee:	fb00 f303 	mul.w	r3, r0, r3
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	3332      	adds	r3, #50	@ 0x32
 8008df8:	4a15      	ldr	r2, [pc, #84]	@ (8008e50 <UART_SetConfig+0x118>)
 8008dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfe:	095b      	lsrs	r3, r3, #5
 8008e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e04:	4419      	add	r1, r3
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009a      	lsls	r2, r3, #2
 8008e10:	441a      	add	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008e50 <UART_SetConfig+0x118>)
 8008e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	2064      	movs	r0, #100	@ 0x64
 8008e26:	fb00 f303 	mul.w	r3, r0, r3
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	3332      	adds	r3, #50	@ 0x32
 8008e30:	4a07      	ldr	r2, [pc, #28]	@ (8008e50 <UART_SetConfig+0x118>)
 8008e32:	fba2 2303 	umull	r2, r3, r2, r3
 8008e36:	095b      	lsrs	r3, r3, #5
 8008e38:	f003 020f 	and.w	r2, r3, #15
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	440a      	add	r2, r1
 8008e42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	40013800 	.word	0x40013800
 8008e50:	51eb851f 	.word	0x51eb851f

08008e54 <atof>:
 8008e54:	2100      	movs	r1, #0
 8008e56:	f000 bdff 	b.w	8009a58 <strtod>

08008e5a <atoi>:
 8008e5a:	220a      	movs	r2, #10
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f000 be81 	b.w	8009b64 <strtol>

08008e62 <sulp>:
 8008e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	460f      	mov	r7, r1
 8008e68:	4690      	mov	r8, r2
 8008e6a:	f002 f8c9 	bl	800b000 <__ulp>
 8008e6e:	4604      	mov	r4, r0
 8008e70:	460d      	mov	r5, r1
 8008e72:	f1b8 0f00 	cmp.w	r8, #0
 8008e76:	d011      	beq.n	8008e9c <sulp+0x3a>
 8008e78:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008e7c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dd0b      	ble.n	8008e9c <sulp+0x3a>
 8008e84:	2400      	movs	r4, #0
 8008e86:	051b      	lsls	r3, r3, #20
 8008e88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e8c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e90:	4622      	mov	r2, r4
 8008e92:	462b      	mov	r3, r5
 8008e94:	f7f7 fb20 	bl	80004d8 <__aeabi_dmul>
 8008e98:	4604      	mov	r4, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea4:	0000      	movs	r0, r0
	...

08008ea8 <_strtod_l>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	b09f      	sub	sp, #124	@ 0x7c
 8008eae:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008eb6:	f04f 0a00 	mov.w	sl, #0
 8008eba:	f04f 0b00 	mov.w	fp, #0
 8008ebe:	460a      	mov	r2, r1
 8008ec0:	9005      	str	r0, [sp, #20]
 8008ec2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ec4:	7811      	ldrb	r1, [r2, #0]
 8008ec6:	292b      	cmp	r1, #43	@ 0x2b
 8008ec8:	d048      	beq.n	8008f5c <_strtod_l+0xb4>
 8008eca:	d836      	bhi.n	8008f3a <_strtod_l+0x92>
 8008ecc:	290d      	cmp	r1, #13
 8008ece:	d830      	bhi.n	8008f32 <_strtod_l+0x8a>
 8008ed0:	2908      	cmp	r1, #8
 8008ed2:	d830      	bhi.n	8008f36 <_strtod_l+0x8e>
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	d039      	beq.n	8008f4c <_strtod_l+0xa4>
 8008ed8:	2200      	movs	r2, #0
 8008eda:	920e      	str	r2, [sp, #56]	@ 0x38
 8008edc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008ede:	782a      	ldrb	r2, [r5, #0]
 8008ee0:	2a30      	cmp	r2, #48	@ 0x30
 8008ee2:	f040 80b0 	bne.w	8009046 <_strtod_l+0x19e>
 8008ee6:	786a      	ldrb	r2, [r5, #1]
 8008ee8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008eec:	2a58      	cmp	r2, #88	@ 0x58
 8008eee:	d16c      	bne.n	8008fca <_strtod_l+0x122>
 8008ef0:	9302      	str	r3, [sp, #8]
 8008ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef4:	4a8f      	ldr	r2, [pc, #572]	@ (8009134 <_strtod_l+0x28c>)
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	ab1a      	add	r3, sp, #104	@ 0x68
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	9805      	ldr	r0, [sp, #20]
 8008efe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f00:	a919      	add	r1, sp, #100	@ 0x64
 8008f02:	f001 f977 	bl	800a1f4 <__gethex>
 8008f06:	f010 060f 	ands.w	r6, r0, #15
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	d005      	beq.n	8008f1a <_strtod_l+0x72>
 8008f0e:	2e06      	cmp	r6, #6
 8008f10:	d126      	bne.n	8008f60 <_strtod_l+0xb8>
 8008f12:	2300      	movs	r3, #0
 8008f14:	3501      	adds	r5, #1
 8008f16:	9519      	str	r5, [sp, #100]	@ 0x64
 8008f18:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 8582 	bne.w	8009a26 <_strtod_l+0xb7e>
 8008f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f24:	b1bb      	cbz	r3, 8008f56 <_strtod_l+0xae>
 8008f26:	4650      	mov	r0, sl
 8008f28:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008f2c:	b01f      	add	sp, #124	@ 0x7c
 8008f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f32:	2920      	cmp	r1, #32
 8008f34:	d1d0      	bne.n	8008ed8 <_strtod_l+0x30>
 8008f36:	3201      	adds	r2, #1
 8008f38:	e7c3      	b.n	8008ec2 <_strtod_l+0x1a>
 8008f3a:	292d      	cmp	r1, #45	@ 0x2d
 8008f3c:	d1cc      	bne.n	8008ed8 <_strtod_l+0x30>
 8008f3e:	2101      	movs	r1, #1
 8008f40:	910e      	str	r1, [sp, #56]	@ 0x38
 8008f42:	1c51      	adds	r1, r2, #1
 8008f44:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f46:	7852      	ldrb	r2, [r2, #1]
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	d1c7      	bne.n	8008edc <_strtod_l+0x34>
 8008f4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f4e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f040 8566 	bne.w	8009a22 <_strtod_l+0xb7a>
 8008f56:	4650      	mov	r0, sl
 8008f58:	4659      	mov	r1, fp
 8008f5a:	e7e7      	b.n	8008f2c <_strtod_l+0x84>
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	e7ef      	b.n	8008f40 <_strtod_l+0x98>
 8008f60:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f62:	b13a      	cbz	r2, 8008f74 <_strtod_l+0xcc>
 8008f64:	2135      	movs	r1, #53	@ 0x35
 8008f66:	a81c      	add	r0, sp, #112	@ 0x70
 8008f68:	f002 f93a 	bl	800b1e0 <__copybits>
 8008f6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f6e:	9805      	ldr	r0, [sp, #20]
 8008f70:	f001 fd1a 	bl	800a9a8 <_Bfree>
 8008f74:	3e01      	subs	r6, #1
 8008f76:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f78:	2e04      	cmp	r6, #4
 8008f7a:	d806      	bhi.n	8008f8a <_strtod_l+0xe2>
 8008f7c:	e8df f006 	tbb	[pc, r6]
 8008f80:	201d0314 	.word	0x201d0314
 8008f84:	14          	.byte	0x14
 8008f85:	00          	.byte	0x00
 8008f86:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f8a:	05e1      	lsls	r1, r4, #23
 8008f8c:	bf48      	it	mi
 8008f8e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f96:	0d1b      	lsrs	r3, r3, #20
 8008f98:	051b      	lsls	r3, r3, #20
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1bd      	bne.n	8008f1a <_strtod_l+0x72>
 8008f9e:	f001 f819 	bl	8009fd4 <__errno>
 8008fa2:	2322      	movs	r3, #34	@ 0x22
 8008fa4:	6003      	str	r3, [r0, #0]
 8008fa6:	e7b8      	b.n	8008f1a <_strtod_l+0x72>
 8008fa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008fac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008fb0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008fb4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008fb8:	e7e7      	b.n	8008f8a <_strtod_l+0xe2>
 8008fba:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009138 <_strtod_l+0x290>
 8008fbe:	e7e4      	b.n	8008f8a <_strtod_l+0xe2>
 8008fc0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008fc4:	f04f 3aff 	mov.w	sl, #4294967295
 8008fc8:	e7df      	b.n	8008f8a <_strtod_l+0xe2>
 8008fca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	2b30      	cmp	r3, #48	@ 0x30
 8008fd4:	d0f9      	beq.n	8008fca <_strtod_l+0x122>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d09f      	beq.n	8008f1a <_strtod_l+0x72>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	2700      	movs	r7, #0
 8008fde:	220a      	movs	r2, #10
 8008fe0:	46b9      	mov	r9, r7
 8008fe2:	9308      	str	r3, [sp, #32]
 8008fe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fe6:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008fe8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fea:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008fec:	7805      	ldrb	r5, [r0, #0]
 8008fee:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ff2:	b2d9      	uxtb	r1, r3
 8008ff4:	2909      	cmp	r1, #9
 8008ff6:	d928      	bls.n	800904a <_strtod_l+0x1a2>
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	4950      	ldr	r1, [pc, #320]	@ (800913c <_strtod_l+0x294>)
 8008ffc:	f000 ff0c 	bl	8009e18 <strncmp>
 8009000:	2800      	cmp	r0, #0
 8009002:	d032      	beq.n	800906a <_strtod_l+0x1c2>
 8009004:	2000      	movs	r0, #0
 8009006:	462a      	mov	r2, r5
 8009008:	4603      	mov	r3, r0
 800900a:	464d      	mov	r5, r9
 800900c:	900a      	str	r0, [sp, #40]	@ 0x28
 800900e:	2a65      	cmp	r2, #101	@ 0x65
 8009010:	d001      	beq.n	8009016 <_strtod_l+0x16e>
 8009012:	2a45      	cmp	r2, #69	@ 0x45
 8009014:	d114      	bne.n	8009040 <_strtod_l+0x198>
 8009016:	b91d      	cbnz	r5, 8009020 <_strtod_l+0x178>
 8009018:	9a08      	ldr	r2, [sp, #32]
 800901a:	4302      	orrs	r2, r0
 800901c:	d096      	beq.n	8008f4c <_strtod_l+0xa4>
 800901e:	2500      	movs	r5, #0
 8009020:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009022:	1c62      	adds	r2, r4, #1
 8009024:	9219      	str	r2, [sp, #100]	@ 0x64
 8009026:	7862      	ldrb	r2, [r4, #1]
 8009028:	2a2b      	cmp	r2, #43	@ 0x2b
 800902a:	d07a      	beq.n	8009122 <_strtod_l+0x27a>
 800902c:	2a2d      	cmp	r2, #45	@ 0x2d
 800902e:	d07e      	beq.n	800912e <_strtod_l+0x286>
 8009030:	f04f 0c00 	mov.w	ip, #0
 8009034:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009038:	2909      	cmp	r1, #9
 800903a:	f240 8085 	bls.w	8009148 <_strtod_l+0x2a0>
 800903e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009040:	f04f 0800 	mov.w	r8, #0
 8009044:	e0a5      	b.n	8009192 <_strtod_l+0x2ea>
 8009046:	2300      	movs	r3, #0
 8009048:	e7c8      	b.n	8008fdc <_strtod_l+0x134>
 800904a:	f1b9 0f08 	cmp.w	r9, #8
 800904e:	bfd8      	it	le
 8009050:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009052:	f100 0001 	add.w	r0, r0, #1
 8009056:	bfd6      	itet	le
 8009058:	fb02 3301 	mlale	r3, r2, r1, r3
 800905c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009060:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009062:	f109 0901 	add.w	r9, r9, #1
 8009066:	9019      	str	r0, [sp, #100]	@ 0x64
 8009068:	e7bf      	b.n	8008fea <_strtod_l+0x142>
 800906a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009070:	785a      	ldrb	r2, [r3, #1]
 8009072:	f1b9 0f00 	cmp.w	r9, #0
 8009076:	d03b      	beq.n	80090f0 <_strtod_l+0x248>
 8009078:	464d      	mov	r5, r9
 800907a:	900a      	str	r0, [sp, #40]	@ 0x28
 800907c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009080:	2b09      	cmp	r3, #9
 8009082:	d912      	bls.n	80090aa <_strtod_l+0x202>
 8009084:	2301      	movs	r3, #1
 8009086:	e7c2      	b.n	800900e <_strtod_l+0x166>
 8009088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800908a:	3001      	adds	r0, #1
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009090:	785a      	ldrb	r2, [r3, #1]
 8009092:	2a30      	cmp	r2, #48	@ 0x30
 8009094:	d0f8      	beq.n	8009088 <_strtod_l+0x1e0>
 8009096:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800909a:	2b08      	cmp	r3, #8
 800909c:	f200 84c8 	bhi.w	8009a30 <_strtod_l+0xb88>
 80090a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80090a2:	2000      	movs	r0, #0
 80090a4:	4605      	mov	r5, r0
 80090a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80090aa:	3a30      	subs	r2, #48	@ 0x30
 80090ac:	f100 0301 	add.w	r3, r0, #1
 80090b0:	d018      	beq.n	80090e4 <_strtod_l+0x23c>
 80090b2:	462e      	mov	r6, r5
 80090b4:	f04f 0e0a 	mov.w	lr, #10
 80090b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090ba:	4419      	add	r1, r3
 80090bc:	910a      	str	r1, [sp, #40]	@ 0x28
 80090be:	1c71      	adds	r1, r6, #1
 80090c0:	eba1 0c05 	sub.w	ip, r1, r5
 80090c4:	4563      	cmp	r3, ip
 80090c6:	dc15      	bgt.n	80090f4 <_strtod_l+0x24c>
 80090c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80090cc:	182b      	adds	r3, r5, r0
 80090ce:	2b08      	cmp	r3, #8
 80090d0:	f105 0501 	add.w	r5, r5, #1
 80090d4:	4405      	add	r5, r0
 80090d6:	dc1a      	bgt.n	800910e <_strtod_l+0x266>
 80090d8:	230a      	movs	r3, #10
 80090da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090dc:	fb03 2301 	mla	r3, r3, r1, r2
 80090e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090e2:	2300      	movs	r3, #0
 80090e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090e6:	4618      	mov	r0, r3
 80090e8:	1c51      	adds	r1, r2, #1
 80090ea:	9119      	str	r1, [sp, #100]	@ 0x64
 80090ec:	7852      	ldrb	r2, [r2, #1]
 80090ee:	e7c5      	b.n	800907c <_strtod_l+0x1d4>
 80090f0:	4648      	mov	r0, r9
 80090f2:	e7ce      	b.n	8009092 <_strtod_l+0x1ea>
 80090f4:	2e08      	cmp	r6, #8
 80090f6:	dc05      	bgt.n	8009104 <_strtod_l+0x25c>
 80090f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090fa:	fb0e f606 	mul.w	r6, lr, r6
 80090fe:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009100:	460e      	mov	r6, r1
 8009102:	e7dc      	b.n	80090be <_strtod_l+0x216>
 8009104:	2910      	cmp	r1, #16
 8009106:	bfd8      	it	le
 8009108:	fb0e f707 	mulle.w	r7, lr, r7
 800910c:	e7f8      	b.n	8009100 <_strtod_l+0x258>
 800910e:	2b0f      	cmp	r3, #15
 8009110:	bfdc      	itt	le
 8009112:	230a      	movle	r3, #10
 8009114:	fb03 2707 	mlale	r7, r3, r7, r2
 8009118:	e7e3      	b.n	80090e2 <_strtod_l+0x23a>
 800911a:	2300      	movs	r3, #0
 800911c:	930a      	str	r3, [sp, #40]	@ 0x28
 800911e:	2301      	movs	r3, #1
 8009120:	e77a      	b.n	8009018 <_strtod_l+0x170>
 8009122:	f04f 0c00 	mov.w	ip, #0
 8009126:	1ca2      	adds	r2, r4, #2
 8009128:	9219      	str	r2, [sp, #100]	@ 0x64
 800912a:	78a2      	ldrb	r2, [r4, #2]
 800912c:	e782      	b.n	8009034 <_strtod_l+0x18c>
 800912e:	f04f 0c01 	mov.w	ip, #1
 8009132:	e7f8      	b.n	8009126 <_strtod_l+0x27e>
 8009134:	0800c390 	.word	0x0800c390
 8009138:	7ff00000 	.word	0x7ff00000
 800913c:	0800c1ba 	.word	0x0800c1ba
 8009140:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009142:	1c51      	adds	r1, r2, #1
 8009144:	9119      	str	r1, [sp, #100]	@ 0x64
 8009146:	7852      	ldrb	r2, [r2, #1]
 8009148:	2a30      	cmp	r2, #48	@ 0x30
 800914a:	d0f9      	beq.n	8009140 <_strtod_l+0x298>
 800914c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009150:	2908      	cmp	r1, #8
 8009152:	f63f af75 	bhi.w	8009040 <_strtod_l+0x198>
 8009156:	f04f 080a 	mov.w	r8, #10
 800915a:	3a30      	subs	r2, #48	@ 0x30
 800915c:	9209      	str	r2, [sp, #36]	@ 0x24
 800915e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009160:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009162:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009164:	1c56      	adds	r6, r2, #1
 8009166:	9619      	str	r6, [sp, #100]	@ 0x64
 8009168:	7852      	ldrb	r2, [r2, #1]
 800916a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800916e:	f1be 0f09 	cmp.w	lr, #9
 8009172:	d939      	bls.n	80091e8 <_strtod_l+0x340>
 8009174:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009176:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800917a:	1a76      	subs	r6, r6, r1
 800917c:	2e08      	cmp	r6, #8
 800917e:	dc03      	bgt.n	8009188 <_strtod_l+0x2e0>
 8009180:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009182:	4588      	cmp	r8, r1
 8009184:	bfa8      	it	ge
 8009186:	4688      	movge	r8, r1
 8009188:	f1bc 0f00 	cmp.w	ip, #0
 800918c:	d001      	beq.n	8009192 <_strtod_l+0x2ea>
 800918e:	f1c8 0800 	rsb	r8, r8, #0
 8009192:	2d00      	cmp	r5, #0
 8009194:	d14e      	bne.n	8009234 <_strtod_l+0x38c>
 8009196:	9908      	ldr	r1, [sp, #32]
 8009198:	4308      	orrs	r0, r1
 800919a:	f47f aebe 	bne.w	8008f1a <_strtod_l+0x72>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f47f aed4 	bne.w	8008f4c <_strtod_l+0xa4>
 80091a4:	2a69      	cmp	r2, #105	@ 0x69
 80091a6:	d028      	beq.n	80091fa <_strtod_l+0x352>
 80091a8:	dc25      	bgt.n	80091f6 <_strtod_l+0x34e>
 80091aa:	2a49      	cmp	r2, #73	@ 0x49
 80091ac:	d025      	beq.n	80091fa <_strtod_l+0x352>
 80091ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80091b0:	f47f aecc 	bne.w	8008f4c <_strtod_l+0xa4>
 80091b4:	4999      	ldr	r1, [pc, #612]	@ (800941c <_strtod_l+0x574>)
 80091b6:	a819      	add	r0, sp, #100	@ 0x64
 80091b8:	f001 fa3e 	bl	800a638 <__match>
 80091bc:	2800      	cmp	r0, #0
 80091be:	f43f aec5 	beq.w	8008f4c <_strtod_l+0xa4>
 80091c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b28      	cmp	r3, #40	@ 0x28
 80091c8:	d12e      	bne.n	8009228 <_strtod_l+0x380>
 80091ca:	4995      	ldr	r1, [pc, #596]	@ (8009420 <_strtod_l+0x578>)
 80091cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80091ce:	a819      	add	r0, sp, #100	@ 0x64
 80091d0:	f001 fa46 	bl	800a660 <__hexnan>
 80091d4:	2805      	cmp	r0, #5
 80091d6:	d127      	bne.n	8009228 <_strtod_l+0x380>
 80091d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80091da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80091de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80091e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80091e6:	e698      	b.n	8008f1a <_strtod_l+0x72>
 80091e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091ea:	fb08 2101 	mla	r1, r8, r1, r2
 80091ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80091f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80091f4:	e7b5      	b.n	8009162 <_strtod_l+0x2ba>
 80091f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80091f8:	e7da      	b.n	80091b0 <_strtod_l+0x308>
 80091fa:	498a      	ldr	r1, [pc, #552]	@ (8009424 <_strtod_l+0x57c>)
 80091fc:	a819      	add	r0, sp, #100	@ 0x64
 80091fe:	f001 fa1b 	bl	800a638 <__match>
 8009202:	2800      	cmp	r0, #0
 8009204:	f43f aea2 	beq.w	8008f4c <_strtod_l+0xa4>
 8009208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800920a:	4987      	ldr	r1, [pc, #540]	@ (8009428 <_strtod_l+0x580>)
 800920c:	3b01      	subs	r3, #1
 800920e:	a819      	add	r0, sp, #100	@ 0x64
 8009210:	9319      	str	r3, [sp, #100]	@ 0x64
 8009212:	f001 fa11 	bl	800a638 <__match>
 8009216:	b910      	cbnz	r0, 800921e <_strtod_l+0x376>
 8009218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800921a:	3301      	adds	r3, #1
 800921c:	9319      	str	r3, [sp, #100]	@ 0x64
 800921e:	f04f 0a00 	mov.w	sl, #0
 8009222:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800942c <_strtod_l+0x584>
 8009226:	e678      	b.n	8008f1a <_strtod_l+0x72>
 8009228:	4881      	ldr	r0, [pc, #516]	@ (8009430 <_strtod_l+0x588>)
 800922a:	f000 ff0f 	bl	800a04c <nan>
 800922e:	4682      	mov	sl, r0
 8009230:	468b      	mov	fp, r1
 8009232:	e672      	b.n	8008f1a <_strtod_l+0x72>
 8009234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009236:	f1b9 0f00 	cmp.w	r9, #0
 800923a:	bf08      	it	eq
 800923c:	46a9      	moveq	r9, r5
 800923e:	eba8 0303 	sub.w	r3, r8, r3
 8009242:	2d10      	cmp	r5, #16
 8009244:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009246:	462c      	mov	r4, r5
 8009248:	9309      	str	r3, [sp, #36]	@ 0x24
 800924a:	bfa8      	it	ge
 800924c:	2410      	movge	r4, #16
 800924e:	f7f7 f8c9 	bl	80003e4 <__aeabi_ui2d>
 8009252:	2d09      	cmp	r5, #9
 8009254:	4682      	mov	sl, r0
 8009256:	468b      	mov	fp, r1
 8009258:	dc11      	bgt.n	800927e <_strtod_l+0x3d6>
 800925a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925c:	2b00      	cmp	r3, #0
 800925e:	f43f ae5c 	beq.w	8008f1a <_strtod_l+0x72>
 8009262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009264:	dd76      	ble.n	8009354 <_strtod_l+0x4ac>
 8009266:	2b16      	cmp	r3, #22
 8009268:	dc5d      	bgt.n	8009326 <_strtod_l+0x47e>
 800926a:	4972      	ldr	r1, [pc, #456]	@ (8009434 <_strtod_l+0x58c>)
 800926c:	4652      	mov	r2, sl
 800926e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009272:	465b      	mov	r3, fp
 8009274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009278:	f7f7 f92e 	bl	80004d8 <__aeabi_dmul>
 800927c:	e7d7      	b.n	800922e <_strtod_l+0x386>
 800927e:	4b6d      	ldr	r3, [pc, #436]	@ (8009434 <_strtod_l+0x58c>)
 8009280:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009284:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009288:	f7f7 f926 	bl	80004d8 <__aeabi_dmul>
 800928c:	4682      	mov	sl, r0
 800928e:	4638      	mov	r0, r7
 8009290:	468b      	mov	fp, r1
 8009292:	f7f7 f8a7 	bl	80003e4 <__aeabi_ui2d>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4650      	mov	r0, sl
 800929c:	4659      	mov	r1, fp
 800929e:	f7f6 ff65 	bl	800016c <__adddf3>
 80092a2:	2d0f      	cmp	r5, #15
 80092a4:	4682      	mov	sl, r0
 80092a6:	468b      	mov	fp, r1
 80092a8:	ddd7      	ble.n	800925a <_strtod_l+0x3b2>
 80092aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ac:	1b2c      	subs	r4, r5, r4
 80092ae:	441c      	add	r4, r3
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	f340 8093 	ble.w	80093dc <_strtod_l+0x534>
 80092b6:	f014 030f 	ands.w	r3, r4, #15
 80092ba:	d00a      	beq.n	80092d2 <_strtod_l+0x42a>
 80092bc:	495d      	ldr	r1, [pc, #372]	@ (8009434 <_strtod_l+0x58c>)
 80092be:	4652      	mov	r2, sl
 80092c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c8:	465b      	mov	r3, fp
 80092ca:	f7f7 f905 	bl	80004d8 <__aeabi_dmul>
 80092ce:	4682      	mov	sl, r0
 80092d0:	468b      	mov	fp, r1
 80092d2:	f034 040f 	bics.w	r4, r4, #15
 80092d6:	d073      	beq.n	80093c0 <_strtod_l+0x518>
 80092d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80092dc:	dd49      	ble.n	8009372 <_strtod_l+0x4ca>
 80092de:	2400      	movs	r4, #0
 80092e0:	46a0      	mov	r8, r4
 80092e2:	46a1      	mov	r9, r4
 80092e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80092e6:	2322      	movs	r3, #34	@ 0x22
 80092e8:	f04f 0a00 	mov.w	sl, #0
 80092ec:	9a05      	ldr	r2, [sp, #20]
 80092ee:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800942c <_strtod_l+0x584>
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f43f ae0f 	beq.w	8008f1a <_strtod_l+0x72>
 80092fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092fe:	9805      	ldr	r0, [sp, #20]
 8009300:	f001 fb52 	bl	800a9a8 <_Bfree>
 8009304:	4649      	mov	r1, r9
 8009306:	9805      	ldr	r0, [sp, #20]
 8009308:	f001 fb4e 	bl	800a9a8 <_Bfree>
 800930c:	4641      	mov	r1, r8
 800930e:	9805      	ldr	r0, [sp, #20]
 8009310:	f001 fb4a 	bl	800a9a8 <_Bfree>
 8009314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009316:	9805      	ldr	r0, [sp, #20]
 8009318:	f001 fb46 	bl	800a9a8 <_Bfree>
 800931c:	4621      	mov	r1, r4
 800931e:	9805      	ldr	r0, [sp, #20]
 8009320:	f001 fb42 	bl	800a9a8 <_Bfree>
 8009324:	e5f9      	b.n	8008f1a <_strtod_l+0x72>
 8009326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009328:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800932c:	4293      	cmp	r3, r2
 800932e:	dbbc      	blt.n	80092aa <_strtod_l+0x402>
 8009330:	4c40      	ldr	r4, [pc, #256]	@ (8009434 <_strtod_l+0x58c>)
 8009332:	f1c5 050f 	rsb	r5, r5, #15
 8009336:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800933a:	4652      	mov	r2, sl
 800933c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009340:	465b      	mov	r3, fp
 8009342:	f7f7 f8c9 	bl	80004d8 <__aeabi_dmul>
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	1b5d      	subs	r5, r3, r5
 800934a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800934e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009352:	e791      	b.n	8009278 <_strtod_l+0x3d0>
 8009354:	3316      	adds	r3, #22
 8009356:	dba8      	blt.n	80092aa <_strtod_l+0x402>
 8009358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800935a:	4650      	mov	r0, sl
 800935c:	eba3 0808 	sub.w	r8, r3, r8
 8009360:	4b34      	ldr	r3, [pc, #208]	@ (8009434 <_strtod_l+0x58c>)
 8009362:	4659      	mov	r1, fp
 8009364:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009368:	e9d8 2300 	ldrd	r2, r3, [r8]
 800936c:	f7f7 f9de 	bl	800072c <__aeabi_ddiv>
 8009370:	e75d      	b.n	800922e <_strtod_l+0x386>
 8009372:	2300      	movs	r3, #0
 8009374:	4650      	mov	r0, sl
 8009376:	4659      	mov	r1, fp
 8009378:	461e      	mov	r6, r3
 800937a:	4f2f      	ldr	r7, [pc, #188]	@ (8009438 <_strtod_l+0x590>)
 800937c:	1124      	asrs	r4, r4, #4
 800937e:	2c01      	cmp	r4, #1
 8009380:	dc21      	bgt.n	80093c6 <_strtod_l+0x51e>
 8009382:	b10b      	cbz	r3, 8009388 <_strtod_l+0x4e0>
 8009384:	4682      	mov	sl, r0
 8009386:	468b      	mov	fp, r1
 8009388:	492b      	ldr	r1, [pc, #172]	@ (8009438 <_strtod_l+0x590>)
 800938a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800938e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009392:	4652      	mov	r2, sl
 8009394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009398:	465b      	mov	r3, fp
 800939a:	f7f7 f89d 	bl	80004d8 <__aeabi_dmul>
 800939e:	4b23      	ldr	r3, [pc, #140]	@ (800942c <_strtod_l+0x584>)
 80093a0:	460a      	mov	r2, r1
 80093a2:	400b      	ands	r3, r1
 80093a4:	4925      	ldr	r1, [pc, #148]	@ (800943c <_strtod_l+0x594>)
 80093a6:	4682      	mov	sl, r0
 80093a8:	428b      	cmp	r3, r1
 80093aa:	d898      	bhi.n	80092de <_strtod_l+0x436>
 80093ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80093b0:	428b      	cmp	r3, r1
 80093b2:	bf86      	itte	hi
 80093b4:	f04f 3aff 	movhi.w	sl, #4294967295
 80093b8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009440 <_strtod_l+0x598>
 80093bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80093c0:	2300      	movs	r3, #0
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	e076      	b.n	80094b4 <_strtod_l+0x60c>
 80093c6:	07e2      	lsls	r2, r4, #31
 80093c8:	d504      	bpl.n	80093d4 <_strtod_l+0x52c>
 80093ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ce:	f7f7 f883 	bl	80004d8 <__aeabi_dmul>
 80093d2:	2301      	movs	r3, #1
 80093d4:	3601      	adds	r6, #1
 80093d6:	1064      	asrs	r4, r4, #1
 80093d8:	3708      	adds	r7, #8
 80093da:	e7d0      	b.n	800937e <_strtod_l+0x4d6>
 80093dc:	d0f0      	beq.n	80093c0 <_strtod_l+0x518>
 80093de:	4264      	negs	r4, r4
 80093e0:	f014 020f 	ands.w	r2, r4, #15
 80093e4:	d00a      	beq.n	80093fc <_strtod_l+0x554>
 80093e6:	4b13      	ldr	r3, [pc, #76]	@ (8009434 <_strtod_l+0x58c>)
 80093e8:	4650      	mov	r0, sl
 80093ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ee:	4659      	mov	r1, fp
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f7f7 f99a 	bl	800072c <__aeabi_ddiv>
 80093f8:	4682      	mov	sl, r0
 80093fa:	468b      	mov	fp, r1
 80093fc:	1124      	asrs	r4, r4, #4
 80093fe:	d0df      	beq.n	80093c0 <_strtod_l+0x518>
 8009400:	2c1f      	cmp	r4, #31
 8009402:	dd1f      	ble.n	8009444 <_strtod_l+0x59c>
 8009404:	2400      	movs	r4, #0
 8009406:	46a0      	mov	r8, r4
 8009408:	46a1      	mov	r9, r4
 800940a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800940c:	2322      	movs	r3, #34	@ 0x22
 800940e:	9a05      	ldr	r2, [sp, #20]
 8009410:	f04f 0a00 	mov.w	sl, #0
 8009414:	f04f 0b00 	mov.w	fp, #0
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	e76b      	b.n	80092f4 <_strtod_l+0x44c>
 800941c:	0800c1c5 	.word	0x0800c1c5
 8009420:	0800c37c 	.word	0x0800c37c
 8009424:	0800c1bc 	.word	0x0800c1bc
 8009428:	0800c1bf 	.word	0x0800c1bf
 800942c:	7ff00000 	.word	0x7ff00000
 8009430:	0800c27c 	.word	0x0800c27c
 8009434:	0800c508 	.word	0x0800c508
 8009438:	0800c4e0 	.word	0x0800c4e0
 800943c:	7ca00000 	.word	0x7ca00000
 8009440:	7fefffff 	.word	0x7fefffff
 8009444:	f014 0310 	ands.w	r3, r4, #16
 8009448:	bf18      	it	ne
 800944a:	236a      	movne	r3, #106	@ 0x6a
 800944c:	4650      	mov	r0, sl
 800944e:	9308      	str	r3, [sp, #32]
 8009450:	4659      	mov	r1, fp
 8009452:	2300      	movs	r3, #0
 8009454:	4e77      	ldr	r6, [pc, #476]	@ (8009634 <_strtod_l+0x78c>)
 8009456:	07e7      	lsls	r7, r4, #31
 8009458:	d504      	bpl.n	8009464 <_strtod_l+0x5bc>
 800945a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800945e:	f7f7 f83b 	bl	80004d8 <__aeabi_dmul>
 8009462:	2301      	movs	r3, #1
 8009464:	1064      	asrs	r4, r4, #1
 8009466:	f106 0608 	add.w	r6, r6, #8
 800946a:	d1f4      	bne.n	8009456 <_strtod_l+0x5ae>
 800946c:	b10b      	cbz	r3, 8009472 <_strtod_l+0x5ca>
 800946e:	4682      	mov	sl, r0
 8009470:	468b      	mov	fp, r1
 8009472:	9b08      	ldr	r3, [sp, #32]
 8009474:	b1b3      	cbz	r3, 80094a4 <_strtod_l+0x5fc>
 8009476:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800947a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800947e:	2b00      	cmp	r3, #0
 8009480:	4659      	mov	r1, fp
 8009482:	dd0f      	ble.n	80094a4 <_strtod_l+0x5fc>
 8009484:	2b1f      	cmp	r3, #31
 8009486:	dd58      	ble.n	800953a <_strtod_l+0x692>
 8009488:	2b34      	cmp	r3, #52	@ 0x34
 800948a:	bfd8      	it	le
 800948c:	f04f 33ff 	movle.w	r3, #4294967295
 8009490:	f04f 0a00 	mov.w	sl, #0
 8009494:	bfcf      	iteee	gt
 8009496:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800949a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800949e:	4093      	lslle	r3, r2
 80094a0:	ea03 0b01 	andle.w	fp, r3, r1
 80094a4:	2200      	movs	r2, #0
 80094a6:	2300      	movs	r3, #0
 80094a8:	4650      	mov	r0, sl
 80094aa:	4659      	mov	r1, fp
 80094ac:	f7f7 fa7c 	bl	80009a8 <__aeabi_dcmpeq>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d1a7      	bne.n	8009404 <_strtod_l+0x55c>
 80094b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b6:	464a      	mov	r2, r9
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80094bc:	462b      	mov	r3, r5
 80094be:	9805      	ldr	r0, [sp, #20]
 80094c0:	f001 fada 	bl	800aa78 <__s2b>
 80094c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f43f af09 	beq.w	80092de <_strtod_l+0x436>
 80094cc:	2400      	movs	r4, #0
 80094ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	eba3 0308 	sub.w	r3, r3, r8
 80094d8:	bfa8      	it	ge
 80094da:	2300      	movge	r3, #0
 80094dc:	46a0      	mov	r8, r4
 80094de:	9312      	str	r3, [sp, #72]	@ 0x48
 80094e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80094e4:	9316      	str	r3, [sp, #88]	@ 0x58
 80094e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094e8:	9805      	ldr	r0, [sp, #20]
 80094ea:	6859      	ldr	r1, [r3, #4]
 80094ec:	f001 fa1c 	bl	800a928 <_Balloc>
 80094f0:	4681      	mov	r9, r0
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f43f aef7 	beq.w	80092e6 <_strtod_l+0x43e>
 80094f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094fa:	300c      	adds	r0, #12
 80094fc:	691a      	ldr	r2, [r3, #16]
 80094fe:	f103 010c 	add.w	r1, r3, #12
 8009502:	3202      	adds	r2, #2
 8009504:	0092      	lsls	r2, r2, #2
 8009506:	f000 fd92 	bl	800a02e <memcpy>
 800950a:	ab1c      	add	r3, sp, #112	@ 0x70
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	4652      	mov	r2, sl
 8009514:	465b      	mov	r3, fp
 8009516:	9805      	ldr	r0, [sp, #20]
 8009518:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800951c:	f001 fdd8 	bl	800b0d0 <__d2b>
 8009520:	901a      	str	r0, [sp, #104]	@ 0x68
 8009522:	2800      	cmp	r0, #0
 8009524:	f43f aedf 	beq.w	80092e6 <_strtod_l+0x43e>
 8009528:	2101      	movs	r1, #1
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	f001 fb3a 	bl	800aba4 <__i2b>
 8009530:	4680      	mov	r8, r0
 8009532:	b948      	cbnz	r0, 8009548 <_strtod_l+0x6a0>
 8009534:	f04f 0800 	mov.w	r8, #0
 8009538:	e6d5      	b.n	80092e6 <_strtod_l+0x43e>
 800953a:	f04f 32ff 	mov.w	r2, #4294967295
 800953e:	fa02 f303 	lsl.w	r3, r2, r3
 8009542:	ea03 0a0a 	and.w	sl, r3, sl
 8009546:	e7ad      	b.n	80094a4 <_strtod_l+0x5fc>
 8009548:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800954a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800954c:	2d00      	cmp	r5, #0
 800954e:	bfab      	itete	ge
 8009550:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009552:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009554:	18ef      	addge	r7, r5, r3
 8009556:	1b5e      	sublt	r6, r3, r5
 8009558:	9b08      	ldr	r3, [sp, #32]
 800955a:	bfa8      	it	ge
 800955c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800955e:	eba5 0503 	sub.w	r5, r5, r3
 8009562:	4415      	add	r5, r2
 8009564:	4b34      	ldr	r3, [pc, #208]	@ (8009638 <_strtod_l+0x790>)
 8009566:	f105 35ff 	add.w	r5, r5, #4294967295
 800956a:	bfb8      	it	lt
 800956c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800956e:	429d      	cmp	r5, r3
 8009570:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009574:	da50      	bge.n	8009618 <_strtod_l+0x770>
 8009576:	1b5b      	subs	r3, r3, r5
 8009578:	2b1f      	cmp	r3, #31
 800957a:	f04f 0101 	mov.w	r1, #1
 800957e:	eba2 0203 	sub.w	r2, r2, r3
 8009582:	dc3d      	bgt.n	8009600 <_strtod_l+0x758>
 8009584:	fa01 f303 	lsl.w	r3, r1, r3
 8009588:	9313      	str	r3, [sp, #76]	@ 0x4c
 800958a:	2300      	movs	r3, #0
 800958c:	9310      	str	r3, [sp, #64]	@ 0x40
 800958e:	18bd      	adds	r5, r7, r2
 8009590:	9b08      	ldr	r3, [sp, #32]
 8009592:	42af      	cmp	r7, r5
 8009594:	4416      	add	r6, r2
 8009596:	441e      	add	r6, r3
 8009598:	463b      	mov	r3, r7
 800959a:	bfa8      	it	ge
 800959c:	462b      	movge	r3, r5
 800959e:	42b3      	cmp	r3, r6
 80095a0:	bfa8      	it	ge
 80095a2:	4633      	movge	r3, r6
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bfc2      	ittt	gt
 80095a8:	1aed      	subgt	r5, r5, r3
 80095aa:	1af6      	subgt	r6, r6, r3
 80095ac:	1aff      	subgt	r7, r7, r3
 80095ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	dd16      	ble.n	80095e2 <_strtod_l+0x73a>
 80095b4:	4641      	mov	r1, r8
 80095b6:	461a      	mov	r2, r3
 80095b8:	9805      	ldr	r0, [sp, #20]
 80095ba:	f001 fbab 	bl	800ad14 <__pow5mult>
 80095be:	4680      	mov	r8, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d0b7      	beq.n	8009534 <_strtod_l+0x68c>
 80095c4:	4601      	mov	r1, r0
 80095c6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095c8:	9805      	ldr	r0, [sp, #20]
 80095ca:	f001 fb01 	bl	800abd0 <__multiply>
 80095ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f43f ae88 	beq.w	80092e6 <_strtod_l+0x43e>
 80095d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095d8:	9805      	ldr	r0, [sp, #20]
 80095da:	f001 f9e5 	bl	800a9a8 <_Bfree>
 80095de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80095e2:	2d00      	cmp	r5, #0
 80095e4:	dc1d      	bgt.n	8009622 <_strtod_l+0x77a>
 80095e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dd27      	ble.n	800963c <_strtod_l+0x794>
 80095ec:	4649      	mov	r1, r9
 80095ee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80095f0:	9805      	ldr	r0, [sp, #20]
 80095f2:	f001 fb8f 	bl	800ad14 <__pow5mult>
 80095f6:	4681      	mov	r9, r0
 80095f8:	bb00      	cbnz	r0, 800963c <_strtod_l+0x794>
 80095fa:	f04f 0900 	mov.w	r9, #0
 80095fe:	e672      	b.n	80092e6 <_strtod_l+0x43e>
 8009600:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009604:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009608:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800960c:	35e2      	adds	r5, #226	@ 0xe2
 800960e:	fa01 f305 	lsl.w	r3, r1, r5
 8009612:	9310      	str	r3, [sp, #64]	@ 0x40
 8009614:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009616:	e7ba      	b.n	800958e <_strtod_l+0x6e6>
 8009618:	2300      	movs	r3, #0
 800961a:	9310      	str	r3, [sp, #64]	@ 0x40
 800961c:	2301      	movs	r3, #1
 800961e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009620:	e7b5      	b.n	800958e <_strtod_l+0x6e6>
 8009622:	462a      	mov	r2, r5
 8009624:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009626:	9805      	ldr	r0, [sp, #20]
 8009628:	f001 fbce 	bl	800adc8 <__lshift>
 800962c:	901a      	str	r0, [sp, #104]	@ 0x68
 800962e:	2800      	cmp	r0, #0
 8009630:	d1d9      	bne.n	80095e6 <_strtod_l+0x73e>
 8009632:	e658      	b.n	80092e6 <_strtod_l+0x43e>
 8009634:	0800c3a8 	.word	0x0800c3a8
 8009638:	fffffc02 	.word	0xfffffc02
 800963c:	2e00      	cmp	r6, #0
 800963e:	dd07      	ble.n	8009650 <_strtod_l+0x7a8>
 8009640:	4649      	mov	r1, r9
 8009642:	4632      	mov	r2, r6
 8009644:	9805      	ldr	r0, [sp, #20]
 8009646:	f001 fbbf 	bl	800adc8 <__lshift>
 800964a:	4681      	mov	r9, r0
 800964c:	2800      	cmp	r0, #0
 800964e:	d0d4      	beq.n	80095fa <_strtod_l+0x752>
 8009650:	2f00      	cmp	r7, #0
 8009652:	dd08      	ble.n	8009666 <_strtod_l+0x7be>
 8009654:	4641      	mov	r1, r8
 8009656:	463a      	mov	r2, r7
 8009658:	9805      	ldr	r0, [sp, #20]
 800965a:	f001 fbb5 	bl	800adc8 <__lshift>
 800965e:	4680      	mov	r8, r0
 8009660:	2800      	cmp	r0, #0
 8009662:	f43f ae40 	beq.w	80092e6 <_strtod_l+0x43e>
 8009666:	464a      	mov	r2, r9
 8009668:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800966a:	9805      	ldr	r0, [sp, #20]
 800966c:	f001 fc34 	bl	800aed8 <__mdiff>
 8009670:	4604      	mov	r4, r0
 8009672:	2800      	cmp	r0, #0
 8009674:	f43f ae37 	beq.w	80092e6 <_strtod_l+0x43e>
 8009678:	68c3      	ldr	r3, [r0, #12]
 800967a:	4641      	mov	r1, r8
 800967c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800967e:	2300      	movs	r3, #0
 8009680:	60c3      	str	r3, [r0, #12]
 8009682:	f001 fc0d 	bl	800aea0 <__mcmp>
 8009686:	2800      	cmp	r0, #0
 8009688:	da3d      	bge.n	8009706 <_strtod_l+0x85e>
 800968a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800968c:	ea53 030a 	orrs.w	r3, r3, sl
 8009690:	d163      	bne.n	800975a <_strtod_l+0x8b2>
 8009692:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009696:	2b00      	cmp	r3, #0
 8009698:	d15f      	bne.n	800975a <_strtod_l+0x8b2>
 800969a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800969e:	0d1b      	lsrs	r3, r3, #20
 80096a0:	051b      	lsls	r3, r3, #20
 80096a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80096a6:	d958      	bls.n	800975a <_strtod_l+0x8b2>
 80096a8:	6963      	ldr	r3, [r4, #20]
 80096aa:	b913      	cbnz	r3, 80096b2 <_strtod_l+0x80a>
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	dd53      	ble.n	800975a <_strtod_l+0x8b2>
 80096b2:	4621      	mov	r1, r4
 80096b4:	2201      	movs	r2, #1
 80096b6:	9805      	ldr	r0, [sp, #20]
 80096b8:	f001 fb86 	bl	800adc8 <__lshift>
 80096bc:	4641      	mov	r1, r8
 80096be:	4604      	mov	r4, r0
 80096c0:	f001 fbee 	bl	800aea0 <__mcmp>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	dd48      	ble.n	800975a <_strtod_l+0x8b2>
 80096c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096cc:	9a08      	ldr	r2, [sp, #32]
 80096ce:	0d1b      	lsrs	r3, r3, #20
 80096d0:	051b      	lsls	r3, r3, #20
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	d062      	beq.n	800979c <_strtod_l+0x8f4>
 80096d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80096da:	d85f      	bhi.n	800979c <_strtod_l+0x8f4>
 80096dc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80096e0:	f67f ae94 	bls.w	800940c <_strtod_l+0x564>
 80096e4:	4650      	mov	r0, sl
 80096e6:	4659      	mov	r1, fp
 80096e8:	4ba3      	ldr	r3, [pc, #652]	@ (8009978 <_strtod_l+0xad0>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	f7f6 fef4 	bl	80004d8 <__aeabi_dmul>
 80096f0:	4ba2      	ldr	r3, [pc, #648]	@ (800997c <_strtod_l+0xad4>)
 80096f2:	4682      	mov	sl, r0
 80096f4:	400b      	ands	r3, r1
 80096f6:	468b      	mov	fp, r1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f47f adff 	bne.w	80092fc <_strtod_l+0x454>
 80096fe:	2322      	movs	r3, #34	@ 0x22
 8009700:	9a05      	ldr	r2, [sp, #20]
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	e5fa      	b.n	80092fc <_strtod_l+0x454>
 8009706:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800970a:	d165      	bne.n	80097d8 <_strtod_l+0x930>
 800970c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800970e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009712:	b35a      	cbz	r2, 800976c <_strtod_l+0x8c4>
 8009714:	4a9a      	ldr	r2, [pc, #616]	@ (8009980 <_strtod_l+0xad8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d12b      	bne.n	8009772 <_strtod_l+0x8ca>
 800971a:	9b08      	ldr	r3, [sp, #32]
 800971c:	4651      	mov	r1, sl
 800971e:	b303      	cbz	r3, 8009762 <_strtod_l+0x8ba>
 8009720:	465a      	mov	r2, fp
 8009722:	4b96      	ldr	r3, [pc, #600]	@ (800997c <_strtod_l+0xad4>)
 8009724:	4013      	ands	r3, r2
 8009726:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800972a:	f04f 32ff 	mov.w	r2, #4294967295
 800972e:	d81b      	bhi.n	8009768 <_strtod_l+0x8c0>
 8009730:	0d1b      	lsrs	r3, r3, #20
 8009732:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009736:	fa02 f303 	lsl.w	r3, r2, r3
 800973a:	4299      	cmp	r1, r3
 800973c:	d119      	bne.n	8009772 <_strtod_l+0x8ca>
 800973e:	4b91      	ldr	r3, [pc, #580]	@ (8009984 <_strtod_l+0xadc>)
 8009740:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009742:	429a      	cmp	r2, r3
 8009744:	d102      	bne.n	800974c <_strtod_l+0x8a4>
 8009746:	3101      	adds	r1, #1
 8009748:	f43f adcd 	beq.w	80092e6 <_strtod_l+0x43e>
 800974c:	f04f 0a00 	mov.w	sl, #0
 8009750:	4b8a      	ldr	r3, [pc, #552]	@ (800997c <_strtod_l+0xad4>)
 8009752:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009754:	401a      	ands	r2, r3
 8009756:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800975a:	9b08      	ldr	r3, [sp, #32]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1c1      	bne.n	80096e4 <_strtod_l+0x83c>
 8009760:	e5cc      	b.n	80092fc <_strtod_l+0x454>
 8009762:	f04f 33ff 	mov.w	r3, #4294967295
 8009766:	e7e8      	b.n	800973a <_strtod_l+0x892>
 8009768:	4613      	mov	r3, r2
 800976a:	e7e6      	b.n	800973a <_strtod_l+0x892>
 800976c:	ea53 030a 	orrs.w	r3, r3, sl
 8009770:	d0aa      	beq.n	80096c8 <_strtod_l+0x820>
 8009772:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009774:	b1db      	cbz	r3, 80097ae <_strtod_l+0x906>
 8009776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009778:	4213      	tst	r3, r2
 800977a:	d0ee      	beq.n	800975a <_strtod_l+0x8b2>
 800977c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800977e:	4650      	mov	r0, sl
 8009780:	4659      	mov	r1, fp
 8009782:	9a08      	ldr	r2, [sp, #32]
 8009784:	b1bb      	cbz	r3, 80097b6 <_strtod_l+0x90e>
 8009786:	f7ff fb6c 	bl	8008e62 <sulp>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009792:	f7f6 fceb 	bl	800016c <__adddf3>
 8009796:	4682      	mov	sl, r0
 8009798:	468b      	mov	fp, r1
 800979a:	e7de      	b.n	800975a <_strtod_l+0x8b2>
 800979c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80097a0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80097a4:	f04f 3aff 	mov.w	sl, #4294967295
 80097a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80097ac:	e7d5      	b.n	800975a <_strtod_l+0x8b2>
 80097ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097b0:	ea13 0f0a 	tst.w	r3, sl
 80097b4:	e7e1      	b.n	800977a <_strtod_l+0x8d2>
 80097b6:	f7ff fb54 	bl	8008e62 <sulp>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097c2:	f7f6 fcd1 	bl	8000168 <__aeabi_dsub>
 80097c6:	2200      	movs	r2, #0
 80097c8:	2300      	movs	r3, #0
 80097ca:	4682      	mov	sl, r0
 80097cc:	468b      	mov	fp, r1
 80097ce:	f7f7 f8eb 	bl	80009a8 <__aeabi_dcmpeq>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d0c1      	beq.n	800975a <_strtod_l+0x8b2>
 80097d6:	e619      	b.n	800940c <_strtod_l+0x564>
 80097d8:	4641      	mov	r1, r8
 80097da:	4620      	mov	r0, r4
 80097dc:	f001 fcd0 	bl	800b180 <__ratio>
 80097e0:	2200      	movs	r2, #0
 80097e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097e6:	4606      	mov	r6, r0
 80097e8:	460f      	mov	r7, r1
 80097ea:	f7f7 f8f1 	bl	80009d0 <__aeabi_dcmple>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d06d      	beq.n	80098ce <_strtod_l+0xa26>
 80097f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d178      	bne.n	80098ea <_strtod_l+0xa42>
 80097f8:	f1ba 0f00 	cmp.w	sl, #0
 80097fc:	d156      	bne.n	80098ac <_strtod_l+0xa04>
 80097fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009804:	2b00      	cmp	r3, #0
 8009806:	d158      	bne.n	80098ba <_strtod_l+0xa12>
 8009808:	2200      	movs	r2, #0
 800980a:	4630      	mov	r0, r6
 800980c:	4639      	mov	r1, r7
 800980e:	4b5e      	ldr	r3, [pc, #376]	@ (8009988 <_strtod_l+0xae0>)
 8009810:	f7f7 f8d4 	bl	80009bc <__aeabi_dcmplt>
 8009814:	2800      	cmp	r0, #0
 8009816:	d157      	bne.n	80098c8 <_strtod_l+0xa20>
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	2200      	movs	r2, #0
 800981e:	4b5b      	ldr	r3, [pc, #364]	@ (800998c <_strtod_l+0xae4>)
 8009820:	f7f6 fe5a 	bl	80004d8 <__aeabi_dmul>
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800982c:	9606      	str	r6, [sp, #24]
 800982e:	9307      	str	r3, [sp, #28]
 8009830:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009834:	4d51      	ldr	r5, [pc, #324]	@ (800997c <_strtod_l+0xad4>)
 8009836:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800983a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800983c:	401d      	ands	r5, r3
 800983e:	4b54      	ldr	r3, [pc, #336]	@ (8009990 <_strtod_l+0xae8>)
 8009840:	429d      	cmp	r5, r3
 8009842:	f040 80ab 	bne.w	800999c <_strtod_l+0xaf4>
 8009846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009848:	4650      	mov	r0, sl
 800984a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800984e:	4659      	mov	r1, fp
 8009850:	f001 fbd6 	bl	800b000 <__ulp>
 8009854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009858:	f7f6 fe3e 	bl	80004d8 <__aeabi_dmul>
 800985c:	4652      	mov	r2, sl
 800985e:	465b      	mov	r3, fp
 8009860:	f7f6 fc84 	bl	800016c <__adddf3>
 8009864:	460b      	mov	r3, r1
 8009866:	4945      	ldr	r1, [pc, #276]	@ (800997c <_strtod_l+0xad4>)
 8009868:	4a4a      	ldr	r2, [pc, #296]	@ (8009994 <_strtod_l+0xaec>)
 800986a:	4019      	ands	r1, r3
 800986c:	4291      	cmp	r1, r2
 800986e:	4682      	mov	sl, r0
 8009870:	d942      	bls.n	80098f8 <_strtod_l+0xa50>
 8009872:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009874:	4b43      	ldr	r3, [pc, #268]	@ (8009984 <_strtod_l+0xadc>)
 8009876:	429a      	cmp	r2, r3
 8009878:	d103      	bne.n	8009882 <_strtod_l+0x9da>
 800987a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800987c:	3301      	adds	r3, #1
 800987e:	f43f ad32 	beq.w	80092e6 <_strtod_l+0x43e>
 8009882:	f04f 3aff 	mov.w	sl, #4294967295
 8009886:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8009984 <_strtod_l+0xadc>
 800988a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800988c:	9805      	ldr	r0, [sp, #20]
 800988e:	f001 f88b 	bl	800a9a8 <_Bfree>
 8009892:	4649      	mov	r1, r9
 8009894:	9805      	ldr	r0, [sp, #20]
 8009896:	f001 f887 	bl	800a9a8 <_Bfree>
 800989a:	4641      	mov	r1, r8
 800989c:	9805      	ldr	r0, [sp, #20]
 800989e:	f001 f883 	bl	800a9a8 <_Bfree>
 80098a2:	4621      	mov	r1, r4
 80098a4:	9805      	ldr	r0, [sp, #20]
 80098a6:	f001 f87f 	bl	800a9a8 <_Bfree>
 80098aa:	e61c      	b.n	80094e6 <_strtod_l+0x63e>
 80098ac:	f1ba 0f01 	cmp.w	sl, #1
 80098b0:	d103      	bne.n	80098ba <_strtod_l+0xa12>
 80098b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f43f ada9 	beq.w	800940c <_strtod_l+0x564>
 80098ba:	2200      	movs	r2, #0
 80098bc:	4b36      	ldr	r3, [pc, #216]	@ (8009998 <_strtod_l+0xaf0>)
 80098be:	2600      	movs	r6, #0
 80098c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098c4:	4f30      	ldr	r7, [pc, #192]	@ (8009988 <_strtod_l+0xae0>)
 80098c6:	e7b3      	b.n	8009830 <_strtod_l+0x988>
 80098c8:	2600      	movs	r6, #0
 80098ca:	4f30      	ldr	r7, [pc, #192]	@ (800998c <_strtod_l+0xae4>)
 80098cc:	e7ac      	b.n	8009828 <_strtod_l+0x980>
 80098ce:	4630      	mov	r0, r6
 80098d0:	4639      	mov	r1, r7
 80098d2:	4b2e      	ldr	r3, [pc, #184]	@ (800998c <_strtod_l+0xae4>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	f7f6 fdff 	bl	80004d8 <__aeabi_dmul>
 80098da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098dc:	4606      	mov	r6, r0
 80098de:	460f      	mov	r7, r1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0a1      	beq.n	8009828 <_strtod_l+0x980>
 80098e4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80098e8:	e7a2      	b.n	8009830 <_strtod_l+0x988>
 80098ea:	2200      	movs	r2, #0
 80098ec:	4b26      	ldr	r3, [pc, #152]	@ (8009988 <_strtod_l+0xae0>)
 80098ee:	4616      	mov	r6, r2
 80098f0:	461f      	mov	r7, r3
 80098f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098f6:	e79b      	b.n	8009830 <_strtod_l+0x988>
 80098f8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098fc:	9b08      	ldr	r3, [sp, #32]
 80098fe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1c1      	bne.n	800988a <_strtod_l+0x9e2>
 8009906:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800990a:	0d1b      	lsrs	r3, r3, #20
 800990c:	051b      	lsls	r3, r3, #20
 800990e:	429d      	cmp	r5, r3
 8009910:	d1bb      	bne.n	800988a <_strtod_l+0x9e2>
 8009912:	4630      	mov	r0, r6
 8009914:	4639      	mov	r1, r7
 8009916:	f7f7 fbe5 	bl	80010e4 <__aeabi_d2lz>
 800991a:	f7f6 fdaf 	bl	800047c <__aeabi_l2d>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4630      	mov	r0, r6
 8009924:	4639      	mov	r1, r7
 8009926:	f7f6 fc1f 	bl	8000168 <__aeabi_dsub>
 800992a:	460b      	mov	r3, r1
 800992c:	4602      	mov	r2, r0
 800992e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009932:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009938:	ea46 060a 	orr.w	r6, r6, sl
 800993c:	431e      	orrs	r6, r3
 800993e:	d06a      	beq.n	8009a16 <_strtod_l+0xb6e>
 8009940:	a309      	add	r3, pc, #36	@ (adr r3, 8009968 <_strtod_l+0xac0>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f7 f839 	bl	80009bc <__aeabi_dcmplt>
 800994a:	2800      	cmp	r0, #0
 800994c:	f47f acd6 	bne.w	80092fc <_strtod_l+0x454>
 8009950:	a307      	add	r3, pc, #28	@ (adr r3, 8009970 <_strtod_l+0xac8>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800995a:	f7f7 f84d 	bl	80009f8 <__aeabi_dcmpgt>
 800995e:	2800      	cmp	r0, #0
 8009960:	d093      	beq.n	800988a <_strtod_l+0x9e2>
 8009962:	e4cb      	b.n	80092fc <_strtod_l+0x454>
 8009964:	f3af 8000 	nop.w
 8009968:	94a03595 	.word	0x94a03595
 800996c:	3fdfffff 	.word	0x3fdfffff
 8009970:	35afe535 	.word	0x35afe535
 8009974:	3fe00000 	.word	0x3fe00000
 8009978:	39500000 	.word	0x39500000
 800997c:	7ff00000 	.word	0x7ff00000
 8009980:	000fffff 	.word	0x000fffff
 8009984:	7fefffff 	.word	0x7fefffff
 8009988:	3ff00000 	.word	0x3ff00000
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	7fe00000 	.word	0x7fe00000
 8009994:	7c9fffff 	.word	0x7c9fffff
 8009998:	bff00000 	.word	0xbff00000
 800999c:	9b08      	ldr	r3, [sp, #32]
 800999e:	b323      	cbz	r3, 80099ea <_strtod_l+0xb42>
 80099a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80099a4:	d821      	bhi.n	80099ea <_strtod_l+0xb42>
 80099a6:	a328      	add	r3, pc, #160	@ (adr r3, 8009a48 <_strtod_l+0xba0>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	4630      	mov	r0, r6
 80099ae:	4639      	mov	r1, r7
 80099b0:	f7f7 f80e 	bl	80009d0 <__aeabi_dcmple>
 80099b4:	b1a0      	cbz	r0, 80099e0 <_strtod_l+0xb38>
 80099b6:	4639      	mov	r1, r7
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7f7 f84f 	bl	8000a5c <__aeabi_d2uiz>
 80099be:	2801      	cmp	r0, #1
 80099c0:	bf38      	it	cc
 80099c2:	2001      	movcc	r0, #1
 80099c4:	f7f6 fd0e 	bl	80003e4 <__aeabi_ui2d>
 80099c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ca:	4606      	mov	r6, r0
 80099cc:	460f      	mov	r7, r1
 80099ce:	b9fb      	cbnz	r3, 8009a10 <_strtod_l+0xb68>
 80099d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80099d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80099d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80099dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099e6:	1b5b      	subs	r3, r3, r5
 80099e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80099ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099f2:	f001 fb05 	bl	800b000 <__ulp>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4650      	mov	r0, sl
 80099fc:	4659      	mov	r1, fp
 80099fe:	f7f6 fd6b 	bl	80004d8 <__aeabi_dmul>
 8009a02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009a06:	f7f6 fbb1 	bl	800016c <__adddf3>
 8009a0a:	4682      	mov	sl, r0
 8009a0c:	468b      	mov	fp, r1
 8009a0e:	e775      	b.n	80098fc <_strtod_l+0xa54>
 8009a10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009a14:	e7e0      	b.n	80099d8 <_strtod_l+0xb30>
 8009a16:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a50 <_strtod_l+0xba8>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f7f6 ffce 	bl	80009bc <__aeabi_dcmplt>
 8009a20:	e79d      	b.n	800995e <_strtod_l+0xab6>
 8009a22:	2300      	movs	r3, #0
 8009a24:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a28:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	f7ff ba79 	b.w	8008f22 <_strtod_l+0x7a>
 8009a30:	2a65      	cmp	r2, #101	@ 0x65
 8009a32:	f43f ab72 	beq.w	800911a <_strtod_l+0x272>
 8009a36:	2a45      	cmp	r2, #69	@ 0x45
 8009a38:	f43f ab6f 	beq.w	800911a <_strtod_l+0x272>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f7ff bbaa 	b.w	8009196 <_strtod_l+0x2ee>
 8009a42:	bf00      	nop
 8009a44:	f3af 8000 	nop.w
 8009a48:	ffc00000 	.word	0xffc00000
 8009a4c:	41dfffff 	.word	0x41dfffff
 8009a50:	94a03595 	.word	0x94a03595
 8009a54:	3fcfffff 	.word	0x3fcfffff

08009a58 <strtod>:
 8009a58:	460a      	mov	r2, r1
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	4802      	ldr	r0, [pc, #8]	@ (8009a68 <strtod+0x10>)
 8009a5e:	4b03      	ldr	r3, [pc, #12]	@ (8009a6c <strtod+0x14>)
 8009a60:	6800      	ldr	r0, [r0, #0]
 8009a62:	f7ff ba21 	b.w	8008ea8 <_strtod_l>
 8009a66:	bf00      	nop
 8009a68:	200001bc 	.word	0x200001bc
 8009a6c:	20000050 	.word	0x20000050

08009a70 <_strtol_l.isra.0>:
 8009a70:	2b24      	cmp	r3, #36	@ 0x24
 8009a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a76:	4686      	mov	lr, r0
 8009a78:	4690      	mov	r8, r2
 8009a7a:	d801      	bhi.n	8009a80 <_strtol_l.isra.0+0x10>
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d106      	bne.n	8009a8e <_strtol_l.isra.0+0x1e>
 8009a80:	f000 faa8 	bl	8009fd4 <__errno>
 8009a84:	2316      	movs	r3, #22
 8009a86:	6003      	str	r3, [r0, #0]
 8009a88:	2000      	movs	r0, #0
 8009a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8e:	460d      	mov	r5, r1
 8009a90:	4833      	ldr	r0, [pc, #204]	@ (8009b60 <_strtol_l.isra.0+0xf0>)
 8009a92:	462a      	mov	r2, r5
 8009a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a98:	5d06      	ldrb	r6, [r0, r4]
 8009a9a:	f016 0608 	ands.w	r6, r6, #8
 8009a9e:	d1f8      	bne.n	8009a92 <_strtol_l.isra.0+0x22>
 8009aa0:	2c2d      	cmp	r4, #45	@ 0x2d
 8009aa2:	d110      	bne.n	8009ac6 <_strtol_l.isra.0+0x56>
 8009aa4:	2601      	movs	r6, #1
 8009aa6:	782c      	ldrb	r4, [r5, #0]
 8009aa8:	1c95      	adds	r5, r2, #2
 8009aaa:	f033 0210 	bics.w	r2, r3, #16
 8009aae:	d115      	bne.n	8009adc <_strtol_l.isra.0+0x6c>
 8009ab0:	2c30      	cmp	r4, #48	@ 0x30
 8009ab2:	d10d      	bne.n	8009ad0 <_strtol_l.isra.0+0x60>
 8009ab4:	782a      	ldrb	r2, [r5, #0]
 8009ab6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009aba:	2a58      	cmp	r2, #88	@ 0x58
 8009abc:	d108      	bne.n	8009ad0 <_strtol_l.isra.0+0x60>
 8009abe:	786c      	ldrb	r4, [r5, #1]
 8009ac0:	3502      	adds	r5, #2
 8009ac2:	2310      	movs	r3, #16
 8009ac4:	e00a      	b.n	8009adc <_strtol_l.isra.0+0x6c>
 8009ac6:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ac8:	bf04      	itt	eq
 8009aca:	782c      	ldrbeq	r4, [r5, #0]
 8009acc:	1c95      	addeq	r5, r2, #2
 8009ace:	e7ec      	b.n	8009aaa <_strtol_l.isra.0+0x3a>
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1f6      	bne.n	8009ac2 <_strtol_l.isra.0+0x52>
 8009ad4:	2c30      	cmp	r4, #48	@ 0x30
 8009ad6:	bf14      	ite	ne
 8009ad8:	230a      	movne	r3, #10
 8009ada:	2308      	moveq	r3, #8
 8009adc:	2200      	movs	r2, #0
 8009ade:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ae2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ae6:	fbbc f9f3 	udiv	r9, ip, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	fb03 ca19 	mls	sl, r3, r9, ip
 8009af0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009af4:	2f09      	cmp	r7, #9
 8009af6:	d80f      	bhi.n	8009b18 <_strtol_l.isra.0+0xa8>
 8009af8:	463c      	mov	r4, r7
 8009afa:	42a3      	cmp	r3, r4
 8009afc:	dd1b      	ble.n	8009b36 <_strtol_l.isra.0+0xc6>
 8009afe:	1c57      	adds	r7, r2, #1
 8009b00:	d007      	beq.n	8009b12 <_strtol_l.isra.0+0xa2>
 8009b02:	4581      	cmp	r9, r0
 8009b04:	d314      	bcc.n	8009b30 <_strtol_l.isra.0+0xc0>
 8009b06:	d101      	bne.n	8009b0c <_strtol_l.isra.0+0x9c>
 8009b08:	45a2      	cmp	sl, r4
 8009b0a:	db11      	blt.n	8009b30 <_strtol_l.isra.0+0xc0>
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	fb00 4003 	mla	r0, r0, r3, r4
 8009b12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b16:	e7eb      	b.n	8009af0 <_strtol_l.isra.0+0x80>
 8009b18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b1c:	2f19      	cmp	r7, #25
 8009b1e:	d801      	bhi.n	8009b24 <_strtol_l.isra.0+0xb4>
 8009b20:	3c37      	subs	r4, #55	@ 0x37
 8009b22:	e7ea      	b.n	8009afa <_strtol_l.isra.0+0x8a>
 8009b24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b28:	2f19      	cmp	r7, #25
 8009b2a:	d804      	bhi.n	8009b36 <_strtol_l.isra.0+0xc6>
 8009b2c:	3c57      	subs	r4, #87	@ 0x57
 8009b2e:	e7e4      	b.n	8009afa <_strtol_l.isra.0+0x8a>
 8009b30:	f04f 32ff 	mov.w	r2, #4294967295
 8009b34:	e7ed      	b.n	8009b12 <_strtol_l.isra.0+0xa2>
 8009b36:	1c53      	adds	r3, r2, #1
 8009b38:	d108      	bne.n	8009b4c <_strtol_l.isra.0+0xdc>
 8009b3a:	2322      	movs	r3, #34	@ 0x22
 8009b3c:	4660      	mov	r0, ip
 8009b3e:	f8ce 3000 	str.w	r3, [lr]
 8009b42:	f1b8 0f00 	cmp.w	r8, #0
 8009b46:	d0a0      	beq.n	8009a8a <_strtol_l.isra.0+0x1a>
 8009b48:	1e69      	subs	r1, r5, #1
 8009b4a:	e006      	b.n	8009b5a <_strtol_l.isra.0+0xea>
 8009b4c:	b106      	cbz	r6, 8009b50 <_strtol_l.isra.0+0xe0>
 8009b4e:	4240      	negs	r0, r0
 8009b50:	f1b8 0f00 	cmp.w	r8, #0
 8009b54:	d099      	beq.n	8009a8a <_strtol_l.isra.0+0x1a>
 8009b56:	2a00      	cmp	r2, #0
 8009b58:	d1f6      	bne.n	8009b48 <_strtol_l.isra.0+0xd8>
 8009b5a:	f8c8 1000 	str.w	r1, [r8]
 8009b5e:	e794      	b.n	8009a8a <_strtol_l.isra.0+0x1a>
 8009b60:	0800c3d1 	.word	0x0800c3d1

08009b64 <strtol>:
 8009b64:	4613      	mov	r3, r2
 8009b66:	460a      	mov	r2, r1
 8009b68:	4601      	mov	r1, r0
 8009b6a:	4802      	ldr	r0, [pc, #8]	@ (8009b74 <strtol+0x10>)
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f7ff bf7f 	b.w	8009a70 <_strtol_l.isra.0>
 8009b72:	bf00      	nop
 8009b74:	200001bc 	.word	0x200001bc

08009b78 <std>:
 8009b78:	2300      	movs	r3, #0
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b86:	6083      	str	r3, [r0, #8]
 8009b88:	8181      	strh	r1, [r0, #12]
 8009b8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b8c:	81c2      	strh	r2, [r0, #14]
 8009b8e:	6183      	str	r3, [r0, #24]
 8009b90:	4619      	mov	r1, r3
 8009b92:	2208      	movs	r2, #8
 8009b94:	305c      	adds	r0, #92	@ 0x5c
 8009b96:	f000 f92a 	bl	8009dee <memset>
 8009b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd0 <std+0x58>)
 8009b9c:	6224      	str	r4, [r4, #32]
 8009b9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd4 <std+0x5c>)
 8009ba2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd8 <std+0x60>)
 8009ba6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8009bdc <std+0x64>)
 8009baa:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bac:	4b0c      	ldr	r3, [pc, #48]	@ (8009be0 <std+0x68>)
 8009bae:	429c      	cmp	r4, r3
 8009bb0:	d006      	beq.n	8009bc0 <std+0x48>
 8009bb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009bb6:	4294      	cmp	r4, r2
 8009bb8:	d002      	beq.n	8009bc0 <std+0x48>
 8009bba:	33d0      	adds	r3, #208	@ 0xd0
 8009bbc:	429c      	cmp	r4, r3
 8009bbe:	d105      	bne.n	8009bcc <std+0x54>
 8009bc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc8:	f000 ba2e 	b.w	800a028 <__retarget_lock_init_recursive>
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	08009d69 	.word	0x08009d69
 8009bd4:	08009d8b 	.word	0x08009d8b
 8009bd8:	08009dc3 	.word	0x08009dc3
 8009bdc:	08009de7 	.word	0x08009de7
 8009be0:	20000818 	.word	0x20000818

08009be4 <stdio_exit_handler>:
 8009be4:	4a02      	ldr	r2, [pc, #8]	@ (8009bf0 <stdio_exit_handler+0xc>)
 8009be6:	4903      	ldr	r1, [pc, #12]	@ (8009bf4 <stdio_exit_handler+0x10>)
 8009be8:	4803      	ldr	r0, [pc, #12]	@ (8009bf8 <stdio_exit_handler+0x14>)
 8009bea:	f000 b869 	b.w	8009cc0 <_fwalk_sglue>
 8009bee:	bf00      	nop
 8009bf0:	20000044 	.word	0x20000044
 8009bf4:	0800b951 	.word	0x0800b951
 8009bf8:	200001c0 	.word	0x200001c0

08009bfc <cleanup_stdio>:
 8009bfc:	6841      	ldr	r1, [r0, #4]
 8009bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009c30 <cleanup_stdio+0x34>)
 8009c00:	b510      	push	{r4, lr}
 8009c02:	4299      	cmp	r1, r3
 8009c04:	4604      	mov	r4, r0
 8009c06:	d001      	beq.n	8009c0c <cleanup_stdio+0x10>
 8009c08:	f001 fea2 	bl	800b950 <_fflush_r>
 8009c0c:	68a1      	ldr	r1, [r4, #8]
 8009c0e:	4b09      	ldr	r3, [pc, #36]	@ (8009c34 <cleanup_stdio+0x38>)
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d002      	beq.n	8009c1a <cleanup_stdio+0x1e>
 8009c14:	4620      	mov	r0, r4
 8009c16:	f001 fe9b 	bl	800b950 <_fflush_r>
 8009c1a:	68e1      	ldr	r1, [r4, #12]
 8009c1c:	4b06      	ldr	r3, [pc, #24]	@ (8009c38 <cleanup_stdio+0x3c>)
 8009c1e:	4299      	cmp	r1, r3
 8009c20:	d004      	beq.n	8009c2c <cleanup_stdio+0x30>
 8009c22:	4620      	mov	r0, r4
 8009c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c28:	f001 be92 	b.w	800b950 <_fflush_r>
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	bf00      	nop
 8009c30:	20000818 	.word	0x20000818
 8009c34:	20000880 	.word	0x20000880
 8009c38:	200008e8 	.word	0x200008e8

08009c3c <global_stdio_init.part.0>:
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c6c <global_stdio_init.part.0+0x30>)
 8009c40:	4c0b      	ldr	r4, [pc, #44]	@ (8009c70 <global_stdio_init.part.0+0x34>)
 8009c42:	4a0c      	ldr	r2, [pc, #48]	@ (8009c74 <global_stdio_init.part.0+0x38>)
 8009c44:	4620      	mov	r0, r4
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	2104      	movs	r1, #4
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f7ff ff94 	bl	8009b78 <std>
 8009c50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c54:	2201      	movs	r2, #1
 8009c56:	2109      	movs	r1, #9
 8009c58:	f7ff ff8e 	bl	8009b78 <std>
 8009c5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c60:	2202      	movs	r2, #2
 8009c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c66:	2112      	movs	r1, #18
 8009c68:	f7ff bf86 	b.w	8009b78 <std>
 8009c6c:	20000950 	.word	0x20000950
 8009c70:	20000818 	.word	0x20000818
 8009c74:	08009be5 	.word	0x08009be5

08009c78 <__sfp_lock_acquire>:
 8009c78:	4801      	ldr	r0, [pc, #4]	@ (8009c80 <__sfp_lock_acquire+0x8>)
 8009c7a:	f000 b9d6 	b.w	800a02a <__retarget_lock_acquire_recursive>
 8009c7e:	bf00      	nop
 8009c80:	20000959 	.word	0x20000959

08009c84 <__sfp_lock_release>:
 8009c84:	4801      	ldr	r0, [pc, #4]	@ (8009c8c <__sfp_lock_release+0x8>)
 8009c86:	f000 b9d1 	b.w	800a02c <__retarget_lock_release_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	20000959 	.word	0x20000959

08009c90 <__sinit>:
 8009c90:	b510      	push	{r4, lr}
 8009c92:	4604      	mov	r4, r0
 8009c94:	f7ff fff0 	bl	8009c78 <__sfp_lock_acquire>
 8009c98:	6a23      	ldr	r3, [r4, #32]
 8009c9a:	b11b      	cbz	r3, 8009ca4 <__sinit+0x14>
 8009c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ca0:	f7ff bff0 	b.w	8009c84 <__sfp_lock_release>
 8009ca4:	4b04      	ldr	r3, [pc, #16]	@ (8009cb8 <__sinit+0x28>)
 8009ca6:	6223      	str	r3, [r4, #32]
 8009ca8:	4b04      	ldr	r3, [pc, #16]	@ (8009cbc <__sinit+0x2c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1f5      	bne.n	8009c9c <__sinit+0xc>
 8009cb0:	f7ff ffc4 	bl	8009c3c <global_stdio_init.part.0>
 8009cb4:	e7f2      	b.n	8009c9c <__sinit+0xc>
 8009cb6:	bf00      	nop
 8009cb8:	08009bfd 	.word	0x08009bfd
 8009cbc:	20000950 	.word	0x20000950

08009cc0 <_fwalk_sglue>:
 8009cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	4688      	mov	r8, r1
 8009cc8:	4614      	mov	r4, r2
 8009cca:	2600      	movs	r6, #0
 8009ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8009cd4:	d505      	bpl.n	8009ce2 <_fwalk_sglue+0x22>
 8009cd6:	6824      	ldr	r4, [r4, #0]
 8009cd8:	2c00      	cmp	r4, #0
 8009cda:	d1f7      	bne.n	8009ccc <_fwalk_sglue+0xc>
 8009cdc:	4630      	mov	r0, r6
 8009cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d907      	bls.n	8009cf8 <_fwalk_sglue+0x38>
 8009ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cec:	3301      	adds	r3, #1
 8009cee:	d003      	beq.n	8009cf8 <_fwalk_sglue+0x38>
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	47c0      	blx	r8
 8009cf6:	4306      	orrs	r6, r0
 8009cf8:	3568      	adds	r5, #104	@ 0x68
 8009cfa:	e7e9      	b.n	8009cd0 <_fwalk_sglue+0x10>

08009cfc <sniprintf>:
 8009cfc:	b40c      	push	{r2, r3}
 8009cfe:	b530      	push	{r4, r5, lr}
 8009d00:	4b18      	ldr	r3, [pc, #96]	@ (8009d64 <sniprintf+0x68>)
 8009d02:	1e0c      	subs	r4, r1, #0
 8009d04:	681d      	ldr	r5, [r3, #0]
 8009d06:	b09d      	sub	sp, #116	@ 0x74
 8009d08:	da08      	bge.n	8009d1c <sniprintf+0x20>
 8009d0a:	238b      	movs	r3, #139	@ 0x8b
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	b01d      	add	sp, #116	@ 0x74
 8009d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d18:	b002      	add	sp, #8
 8009d1a:	4770      	bx	lr
 8009d1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009d2a:	bf0c      	ite	eq
 8009d2c:	4623      	moveq	r3, r4
 8009d2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	9307      	str	r3, [sp, #28]
 8009d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d3a:	9002      	str	r0, [sp, #8]
 8009d3c:	9006      	str	r0, [sp, #24]
 8009d3e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d42:	4628      	mov	r0, r5
 8009d44:	ab21      	add	r3, sp, #132	@ 0x84
 8009d46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d48:	a902      	add	r1, sp, #8
 8009d4a:	9301      	str	r3, [sp, #4]
 8009d4c:	f001 faf4 	bl	800b338 <_svfiprintf_r>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	bfbc      	itt	lt
 8009d54:	238b      	movlt	r3, #139	@ 0x8b
 8009d56:	602b      	strlt	r3, [r5, #0]
 8009d58:	2c00      	cmp	r4, #0
 8009d5a:	d0da      	beq.n	8009d12 <sniprintf+0x16>
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	9b02      	ldr	r3, [sp, #8]
 8009d60:	701a      	strb	r2, [r3, #0]
 8009d62:	e7d6      	b.n	8009d12 <sniprintf+0x16>
 8009d64:	200001bc 	.word	0x200001bc

08009d68 <__sread>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d70:	f000 f90c 	bl	8009f8c <_read_r>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	bfab      	itete	ge
 8009d78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d7c:	181b      	addge	r3, r3, r0
 8009d7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d82:	bfac      	ite	ge
 8009d84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d86:	81a3      	strhlt	r3, [r4, #12]
 8009d88:	bd10      	pop	{r4, pc}

08009d8a <__swrite>:
 8009d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8e:	461f      	mov	r7, r3
 8009d90:	898b      	ldrh	r3, [r1, #12]
 8009d92:	4605      	mov	r5, r0
 8009d94:	05db      	lsls	r3, r3, #23
 8009d96:	460c      	mov	r4, r1
 8009d98:	4616      	mov	r6, r2
 8009d9a:	d505      	bpl.n	8009da8 <__swrite+0x1e>
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da4:	f000 f8e0 	bl	8009f68 <_lseek_r>
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	4632      	mov	r2, r6
 8009dac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	4628      	mov	r0, r5
 8009db4:	463b      	mov	r3, r7
 8009db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	f000 b8f7 	b.w	8009fb0 <_write_r>

08009dc2 <__sseek>:
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dca:	f000 f8cd 	bl	8009f68 <_lseek_r>
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	bf15      	itete	ne
 8009dd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009dd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009dde:	81a3      	strheq	r3, [r4, #12]
 8009de0:	bf18      	it	ne
 8009de2:	81a3      	strhne	r3, [r4, #12]
 8009de4:	bd10      	pop	{r4, pc}

08009de6 <__sclose>:
 8009de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dea:	f000 b8ad 	b.w	8009f48 <_close_r>

08009dee <memset>:
 8009dee:	4603      	mov	r3, r0
 8009df0:	4402      	add	r2, r0
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d100      	bne.n	8009df8 <memset+0xa>
 8009df6:	4770      	bx	lr
 8009df8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dfc:	e7f9      	b.n	8009df2 <memset+0x4>

08009dfe <strchr>:
 8009dfe:	4603      	mov	r3, r0
 8009e00:	b2c9      	uxtb	r1, r1
 8009e02:	4618      	mov	r0, r3
 8009e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e08:	b112      	cbz	r2, 8009e10 <strchr+0x12>
 8009e0a:	428a      	cmp	r2, r1
 8009e0c:	d1f9      	bne.n	8009e02 <strchr+0x4>
 8009e0e:	4770      	bx	lr
 8009e10:	2900      	cmp	r1, #0
 8009e12:	bf18      	it	ne
 8009e14:	2000      	movne	r0, #0
 8009e16:	4770      	bx	lr

08009e18 <strncmp>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	b16a      	cbz	r2, 8009e38 <strncmp+0x20>
 8009e1c:	3901      	subs	r1, #1
 8009e1e:	1884      	adds	r4, r0, r2
 8009e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d103      	bne.n	8009e34 <strncmp+0x1c>
 8009e2c:	42a0      	cmp	r0, r4
 8009e2e:	d001      	beq.n	8009e34 <strncmp+0x1c>
 8009e30:	2a00      	cmp	r2, #0
 8009e32:	d1f5      	bne.n	8009e20 <strncmp+0x8>
 8009e34:	1ad0      	subs	r0, r2, r3
 8009e36:	bd10      	pop	{r4, pc}
 8009e38:	4610      	mov	r0, r2
 8009e3a:	e7fc      	b.n	8009e36 <strncmp+0x1e>

08009e3c <strncpy>:
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	b510      	push	{r4, lr}
 8009e40:	3901      	subs	r1, #1
 8009e42:	b132      	cbz	r2, 8009e52 <strncpy+0x16>
 8009e44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e48:	3a01      	subs	r2, #1
 8009e4a:	f803 4b01 	strb.w	r4, [r3], #1
 8009e4e:	2c00      	cmp	r4, #0
 8009e50:	d1f7      	bne.n	8009e42 <strncpy+0x6>
 8009e52:	2100      	movs	r1, #0
 8009e54:	441a      	add	r2, r3
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d100      	bne.n	8009e5c <strncpy+0x20>
 8009e5a:	bd10      	pop	{r4, pc}
 8009e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009e60:	e7f9      	b.n	8009e56 <strncpy+0x1a>
	...

08009e64 <strtok>:
 8009e64:	4b16      	ldr	r3, [pc, #88]	@ (8009ec0 <strtok+0x5c>)
 8009e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6a:	681f      	ldr	r7, [r3, #0]
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009e70:	460e      	mov	r6, r1
 8009e72:	b9ec      	cbnz	r4, 8009eb0 <strtok+0x4c>
 8009e74:	2050      	movs	r0, #80	@ 0x50
 8009e76:	f000 fc8f 	bl	800a798 <malloc>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	6478      	str	r0, [r7, #68]	@ 0x44
 8009e7e:	b920      	cbnz	r0, 8009e8a <strtok+0x26>
 8009e80:	215b      	movs	r1, #91	@ 0x5b
 8009e82:	4b10      	ldr	r3, [pc, #64]	@ (8009ec4 <strtok+0x60>)
 8009e84:	4810      	ldr	r0, [pc, #64]	@ (8009ec8 <strtok+0x64>)
 8009e86:	f000 f8e7 	bl	800a058 <__assert_func>
 8009e8a:	e9c0 4400 	strd	r4, r4, [r0]
 8009e8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009e92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009e96:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009e9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009e9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009ea2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009ea6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009eaa:	6184      	str	r4, [r0, #24]
 8009eac:	7704      	strb	r4, [r0, #28]
 8009eae:	6244      	str	r4, [r0, #36]	@ 0x24
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ebc:	f000 b806 	b.w	8009ecc <__strtok_r>
 8009ec0:	200001bc 	.word	0x200001bc
 8009ec4:	0800c1c8 	.word	0x0800c1c8
 8009ec8:	0800c1df 	.word	0x0800c1df

08009ecc <__strtok_r>:
 8009ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ece:	4604      	mov	r4, r0
 8009ed0:	b908      	cbnz	r0, 8009ed6 <__strtok_r+0xa>
 8009ed2:	6814      	ldr	r4, [r2, #0]
 8009ed4:	b144      	cbz	r4, 8009ee8 <__strtok_r+0x1c>
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009ede:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009ee2:	b91e      	cbnz	r6, 8009eec <__strtok_r+0x20>
 8009ee4:	b965      	cbnz	r5, 8009f00 <__strtok_r+0x34>
 8009ee6:	6015      	str	r5, [r2, #0]
 8009ee8:	2000      	movs	r0, #0
 8009eea:	e005      	b.n	8009ef8 <__strtok_r+0x2c>
 8009eec:	42b5      	cmp	r5, r6
 8009eee:	d1f6      	bne.n	8009ede <__strtok_r+0x12>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f0      	bne.n	8009ed6 <__strtok_r+0xa>
 8009ef4:	6014      	str	r4, [r2, #0]
 8009ef6:	7003      	strb	r3, [r0, #0]
 8009ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efa:	461c      	mov	r4, r3
 8009efc:	e00c      	b.n	8009f18 <__strtok_r+0x4c>
 8009efe:	b91d      	cbnz	r5, 8009f08 <__strtok_r+0x3c>
 8009f00:	460e      	mov	r6, r1
 8009f02:	4627      	mov	r7, r4
 8009f04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f08:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009f0c:	42ab      	cmp	r3, r5
 8009f0e:	d1f6      	bne.n	8009efe <__strtok_r+0x32>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0f2      	beq.n	8009efa <__strtok_r+0x2e>
 8009f14:	2300      	movs	r3, #0
 8009f16:	703b      	strb	r3, [r7, #0]
 8009f18:	6014      	str	r4, [r2, #0]
 8009f1a:	e7ed      	b.n	8009ef8 <__strtok_r+0x2c>

08009f1c <strstr>:
 8009f1c:	780a      	ldrb	r2, [r1, #0]
 8009f1e:	b570      	push	{r4, r5, r6, lr}
 8009f20:	b96a      	cbnz	r2, 8009f3e <strstr+0x22>
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d109      	bne.n	8009f3c <strstr+0x20>
 8009f28:	460c      	mov	r4, r1
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d0f6      	beq.n	8009f22 <strstr+0x6>
 8009f34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009f38:	429e      	cmp	r6, r3
 8009f3a:	d0f7      	beq.n	8009f2c <strstr+0x10>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	7803      	ldrb	r3, [r0, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1ef      	bne.n	8009f24 <strstr+0x8>
 8009f44:	4618      	mov	r0, r3
 8009f46:	e7ec      	b.n	8009f22 <strstr+0x6>

08009f48 <_close_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	4d05      	ldr	r5, [pc, #20]	@ (8009f64 <_close_r+0x1c>)
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	f7f8 fe9d 	bl	8002c92 <_close>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_close_r+0x1a>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_close_r+0x1a>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	20000954 	.word	0x20000954

08009f68 <_lseek_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	4611      	mov	r1, r2
 8009f70:	2200      	movs	r2, #0
 8009f72:	4d05      	ldr	r5, [pc, #20]	@ (8009f88 <_lseek_r+0x20>)
 8009f74:	602a      	str	r2, [r5, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	f7f8 feaf 	bl	8002cda <_lseek>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_lseek_r+0x1e>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_lseek_r+0x1e>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	20000954 	.word	0x20000954

08009f8c <_read_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	2200      	movs	r2, #0
 8009f96:	4d05      	ldr	r5, [pc, #20]	@ (8009fac <_read_r+0x20>)
 8009f98:	602a      	str	r2, [r5, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f7f8 fe40 	bl	8002c20 <_read>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_read_r+0x1e>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_read_r+0x1e>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	20000954 	.word	0x20000954

08009fb0 <_write_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	2200      	movs	r2, #0
 8009fba:	4d05      	ldr	r5, [pc, #20]	@ (8009fd0 <_write_r+0x20>)
 8009fbc:	602a      	str	r2, [r5, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f7f8 fe4b 	bl	8002c5a <_write>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_write_r+0x1e>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_write_r+0x1e>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	20000954 	.word	0x20000954

08009fd4 <__errno>:
 8009fd4:	4b01      	ldr	r3, [pc, #4]	@ (8009fdc <__errno+0x8>)
 8009fd6:	6818      	ldr	r0, [r3, #0]
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	200001bc 	.word	0x200001bc

08009fe0 <__libc_init_array>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	2600      	movs	r6, #0
 8009fe4:	4d0c      	ldr	r5, [pc, #48]	@ (800a018 <__libc_init_array+0x38>)
 8009fe6:	4c0d      	ldr	r4, [pc, #52]	@ (800a01c <__libc_init_array+0x3c>)
 8009fe8:	1b64      	subs	r4, r4, r5
 8009fea:	10a4      	asrs	r4, r4, #2
 8009fec:	42a6      	cmp	r6, r4
 8009fee:	d109      	bne.n	800a004 <__libc_init_array+0x24>
 8009ff0:	f002 f896 	bl	800c120 <_init>
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	4d0a      	ldr	r5, [pc, #40]	@ (800a020 <__libc_init_array+0x40>)
 8009ff8:	4c0a      	ldr	r4, [pc, #40]	@ (800a024 <__libc_init_array+0x44>)
 8009ffa:	1b64      	subs	r4, r4, r5
 8009ffc:	10a4      	asrs	r4, r4, #2
 8009ffe:	42a6      	cmp	r6, r4
 800a000:	d105      	bne.n	800a00e <__libc_init_array+0x2e>
 800a002:	bd70      	pop	{r4, r5, r6, pc}
 800a004:	f855 3b04 	ldr.w	r3, [r5], #4
 800a008:	4798      	blx	r3
 800a00a:	3601      	adds	r6, #1
 800a00c:	e7ee      	b.n	8009fec <__libc_init_array+0xc>
 800a00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a012:	4798      	blx	r3
 800a014:	3601      	adds	r6, #1
 800a016:	e7f2      	b.n	8009ffe <__libc_init_array+0x1e>
 800a018:	0800c5d8 	.word	0x0800c5d8
 800a01c:	0800c5d8 	.word	0x0800c5d8
 800a020:	0800c5d8 	.word	0x0800c5d8
 800a024:	0800c5dc 	.word	0x0800c5dc

0800a028 <__retarget_lock_init_recursive>:
 800a028:	4770      	bx	lr

0800a02a <__retarget_lock_acquire_recursive>:
 800a02a:	4770      	bx	lr

0800a02c <__retarget_lock_release_recursive>:
 800a02c:	4770      	bx	lr

0800a02e <memcpy>:
 800a02e:	440a      	add	r2, r1
 800a030:	4291      	cmp	r1, r2
 800a032:	f100 33ff 	add.w	r3, r0, #4294967295
 800a036:	d100      	bne.n	800a03a <memcpy+0xc>
 800a038:	4770      	bx	lr
 800a03a:	b510      	push	{r4, lr}
 800a03c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a040:	4291      	cmp	r1, r2
 800a042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a046:	d1f9      	bne.n	800a03c <memcpy+0xe>
 800a048:	bd10      	pop	{r4, pc}
	...

0800a04c <nan>:
 800a04c:	2000      	movs	r0, #0
 800a04e:	4901      	ldr	r1, [pc, #4]	@ (800a054 <nan+0x8>)
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	7ff80000 	.word	0x7ff80000

0800a058 <__assert_func>:
 800a058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a05a:	4614      	mov	r4, r2
 800a05c:	461a      	mov	r2, r3
 800a05e:	4b09      	ldr	r3, [pc, #36]	@ (800a084 <__assert_func+0x2c>)
 800a060:	4605      	mov	r5, r0
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68d8      	ldr	r0, [r3, #12]
 800a066:	b14c      	cbz	r4, 800a07c <__assert_func+0x24>
 800a068:	4b07      	ldr	r3, [pc, #28]	@ (800a088 <__assert_func+0x30>)
 800a06a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a06e:	9100      	str	r1, [sp, #0]
 800a070:	462b      	mov	r3, r5
 800a072:	4906      	ldr	r1, [pc, #24]	@ (800a08c <__assert_func+0x34>)
 800a074:	f001 fc94 	bl	800b9a0 <fiprintf>
 800a078:	f001 fcdc 	bl	800ba34 <abort>
 800a07c:	4b04      	ldr	r3, [pc, #16]	@ (800a090 <__assert_func+0x38>)
 800a07e:	461c      	mov	r4, r3
 800a080:	e7f3      	b.n	800a06a <__assert_func+0x12>
 800a082:	bf00      	nop
 800a084:	200001bc 	.word	0x200001bc
 800a088:	0800c241 	.word	0x0800c241
 800a08c:	0800c24e 	.word	0x0800c24e
 800a090:	0800c27c 	.word	0x0800c27c

0800a094 <_free_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4605      	mov	r5, r0
 800a098:	2900      	cmp	r1, #0
 800a09a:	d040      	beq.n	800a11e <_free_r+0x8a>
 800a09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a0:	1f0c      	subs	r4, r1, #4
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bfb8      	it	lt
 800a0a6:	18e4      	addlt	r4, r4, r3
 800a0a8:	f000 fc32 	bl	800a910 <__malloc_lock>
 800a0ac:	4a1c      	ldr	r2, [pc, #112]	@ (800a120 <_free_r+0x8c>)
 800a0ae:	6813      	ldr	r3, [r2, #0]
 800a0b0:	b933      	cbnz	r3, 800a0c0 <_free_r+0x2c>
 800a0b2:	6063      	str	r3, [r4, #4]
 800a0b4:	6014      	str	r4, [r2, #0]
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0bc:	f000 bc2e 	b.w	800a91c <__malloc_unlock>
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	d908      	bls.n	800a0d6 <_free_r+0x42>
 800a0c4:	6820      	ldr	r0, [r4, #0]
 800a0c6:	1821      	adds	r1, r4, r0
 800a0c8:	428b      	cmp	r3, r1
 800a0ca:	bf01      	itttt	eq
 800a0cc:	6819      	ldreq	r1, [r3, #0]
 800a0ce:	685b      	ldreq	r3, [r3, #4]
 800a0d0:	1809      	addeq	r1, r1, r0
 800a0d2:	6021      	streq	r1, [r4, #0]
 800a0d4:	e7ed      	b.n	800a0b2 <_free_r+0x1e>
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	b10b      	cbz	r3, 800a0e0 <_free_r+0x4c>
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	d9fa      	bls.n	800a0d6 <_free_r+0x42>
 800a0e0:	6811      	ldr	r1, [r2, #0]
 800a0e2:	1850      	adds	r0, r2, r1
 800a0e4:	42a0      	cmp	r0, r4
 800a0e6:	d10b      	bne.n	800a100 <_free_r+0x6c>
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	4401      	add	r1, r0
 800a0ec:	1850      	adds	r0, r2, r1
 800a0ee:	4283      	cmp	r3, r0
 800a0f0:	6011      	str	r1, [r2, #0]
 800a0f2:	d1e0      	bne.n	800a0b6 <_free_r+0x22>
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	4408      	add	r0, r1
 800a0fa:	6010      	str	r0, [r2, #0]
 800a0fc:	6053      	str	r3, [r2, #4]
 800a0fe:	e7da      	b.n	800a0b6 <_free_r+0x22>
 800a100:	d902      	bls.n	800a108 <_free_r+0x74>
 800a102:	230c      	movs	r3, #12
 800a104:	602b      	str	r3, [r5, #0]
 800a106:	e7d6      	b.n	800a0b6 <_free_r+0x22>
 800a108:	6820      	ldr	r0, [r4, #0]
 800a10a:	1821      	adds	r1, r4, r0
 800a10c:	428b      	cmp	r3, r1
 800a10e:	bf01      	itttt	eq
 800a110:	6819      	ldreq	r1, [r3, #0]
 800a112:	685b      	ldreq	r3, [r3, #4]
 800a114:	1809      	addeq	r1, r1, r0
 800a116:	6021      	streq	r1, [r4, #0]
 800a118:	6063      	str	r3, [r4, #4]
 800a11a:	6054      	str	r4, [r2, #4]
 800a11c:	e7cb      	b.n	800a0b6 <_free_r+0x22>
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	20000960 	.word	0x20000960

0800a124 <rshift>:
 800a124:	6903      	ldr	r3, [r0, #16]
 800a126:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a12a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a12e:	f100 0414 	add.w	r4, r0, #20
 800a132:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a136:	dd46      	ble.n	800a1c6 <rshift+0xa2>
 800a138:	f011 011f 	ands.w	r1, r1, #31
 800a13c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a140:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a144:	d10c      	bne.n	800a160 <rshift+0x3c>
 800a146:	4629      	mov	r1, r5
 800a148:	f100 0710 	add.w	r7, r0, #16
 800a14c:	42b1      	cmp	r1, r6
 800a14e:	d335      	bcc.n	800a1bc <rshift+0x98>
 800a150:	1a9b      	subs	r3, r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	1eea      	subs	r2, r5, #3
 800a156:	4296      	cmp	r6, r2
 800a158:	bf38      	it	cc
 800a15a:	2300      	movcc	r3, #0
 800a15c:	4423      	add	r3, r4
 800a15e:	e015      	b.n	800a18c <rshift+0x68>
 800a160:	46a1      	mov	r9, r4
 800a162:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a166:	f1c1 0820 	rsb	r8, r1, #32
 800a16a:	40cf      	lsrs	r7, r1
 800a16c:	f105 0e04 	add.w	lr, r5, #4
 800a170:	4576      	cmp	r6, lr
 800a172:	46f4      	mov	ip, lr
 800a174:	d816      	bhi.n	800a1a4 <rshift+0x80>
 800a176:	1a9a      	subs	r2, r3, r2
 800a178:	0092      	lsls	r2, r2, #2
 800a17a:	3a04      	subs	r2, #4
 800a17c:	3501      	adds	r5, #1
 800a17e:	42ae      	cmp	r6, r5
 800a180:	bf38      	it	cc
 800a182:	2200      	movcc	r2, #0
 800a184:	18a3      	adds	r3, r4, r2
 800a186:	50a7      	str	r7, [r4, r2]
 800a188:	b107      	cbz	r7, 800a18c <rshift+0x68>
 800a18a:	3304      	adds	r3, #4
 800a18c:	42a3      	cmp	r3, r4
 800a18e:	eba3 0204 	sub.w	r2, r3, r4
 800a192:	bf08      	it	eq
 800a194:	2300      	moveq	r3, #0
 800a196:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a19a:	6102      	str	r2, [r0, #16]
 800a19c:	bf08      	it	eq
 800a19e:	6143      	streq	r3, [r0, #20]
 800a1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1a4:	f8dc c000 	ldr.w	ip, [ip]
 800a1a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a1ac:	ea4c 0707 	orr.w	r7, ip, r7
 800a1b0:	f849 7b04 	str.w	r7, [r9], #4
 800a1b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1b8:	40cf      	lsrs	r7, r1
 800a1ba:	e7d9      	b.n	800a170 <rshift+0x4c>
 800a1bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800a1c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a1c4:	e7c2      	b.n	800a14c <rshift+0x28>
 800a1c6:	4623      	mov	r3, r4
 800a1c8:	e7e0      	b.n	800a18c <rshift+0x68>

0800a1ca <__hexdig_fun>:
 800a1ca:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a1ce:	2b09      	cmp	r3, #9
 800a1d0:	d802      	bhi.n	800a1d8 <__hexdig_fun+0xe>
 800a1d2:	3820      	subs	r0, #32
 800a1d4:	b2c0      	uxtb	r0, r0
 800a1d6:	4770      	bx	lr
 800a1d8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a1dc:	2b05      	cmp	r3, #5
 800a1de:	d801      	bhi.n	800a1e4 <__hexdig_fun+0x1a>
 800a1e0:	3847      	subs	r0, #71	@ 0x47
 800a1e2:	e7f7      	b.n	800a1d4 <__hexdig_fun+0xa>
 800a1e4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a1e8:	2b05      	cmp	r3, #5
 800a1ea:	d801      	bhi.n	800a1f0 <__hexdig_fun+0x26>
 800a1ec:	3827      	subs	r0, #39	@ 0x27
 800a1ee:	e7f1      	b.n	800a1d4 <__hexdig_fun+0xa>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	4770      	bx	lr

0800a1f4 <__gethex>:
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	468a      	mov	sl, r1
 800a1fa:	4690      	mov	r8, r2
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	9302      	str	r3, [sp, #8]
 800a200:	680b      	ldr	r3, [r1, #0]
 800a202:	9001      	str	r0, [sp, #4]
 800a204:	1c9c      	adds	r4, r3, #2
 800a206:	46a1      	mov	r9, r4
 800a208:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a20c:	2830      	cmp	r0, #48	@ 0x30
 800a20e:	d0fa      	beq.n	800a206 <__gethex+0x12>
 800a210:	eba9 0303 	sub.w	r3, r9, r3
 800a214:	f1a3 0b02 	sub.w	fp, r3, #2
 800a218:	f7ff ffd7 	bl	800a1ca <__hexdig_fun>
 800a21c:	4605      	mov	r5, r0
 800a21e:	2800      	cmp	r0, #0
 800a220:	d168      	bne.n	800a2f4 <__gethex+0x100>
 800a222:	2201      	movs	r2, #1
 800a224:	4648      	mov	r0, r9
 800a226:	499f      	ldr	r1, [pc, #636]	@ (800a4a4 <__gethex+0x2b0>)
 800a228:	f7ff fdf6 	bl	8009e18 <strncmp>
 800a22c:	4607      	mov	r7, r0
 800a22e:	2800      	cmp	r0, #0
 800a230:	d167      	bne.n	800a302 <__gethex+0x10e>
 800a232:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a236:	4626      	mov	r6, r4
 800a238:	f7ff ffc7 	bl	800a1ca <__hexdig_fun>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d062      	beq.n	800a306 <__gethex+0x112>
 800a240:	4623      	mov	r3, r4
 800a242:	7818      	ldrb	r0, [r3, #0]
 800a244:	4699      	mov	r9, r3
 800a246:	2830      	cmp	r0, #48	@ 0x30
 800a248:	f103 0301 	add.w	r3, r3, #1
 800a24c:	d0f9      	beq.n	800a242 <__gethex+0x4e>
 800a24e:	f7ff ffbc 	bl	800a1ca <__hexdig_fun>
 800a252:	fab0 f580 	clz	r5, r0
 800a256:	f04f 0b01 	mov.w	fp, #1
 800a25a:	096d      	lsrs	r5, r5, #5
 800a25c:	464a      	mov	r2, r9
 800a25e:	4616      	mov	r6, r2
 800a260:	7830      	ldrb	r0, [r6, #0]
 800a262:	3201      	adds	r2, #1
 800a264:	f7ff ffb1 	bl	800a1ca <__hexdig_fun>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d1f8      	bne.n	800a25e <__gethex+0x6a>
 800a26c:	2201      	movs	r2, #1
 800a26e:	4630      	mov	r0, r6
 800a270:	498c      	ldr	r1, [pc, #560]	@ (800a4a4 <__gethex+0x2b0>)
 800a272:	f7ff fdd1 	bl	8009e18 <strncmp>
 800a276:	2800      	cmp	r0, #0
 800a278:	d13f      	bne.n	800a2fa <__gethex+0x106>
 800a27a:	b944      	cbnz	r4, 800a28e <__gethex+0x9a>
 800a27c:	1c74      	adds	r4, r6, #1
 800a27e:	4622      	mov	r2, r4
 800a280:	4616      	mov	r6, r2
 800a282:	7830      	ldrb	r0, [r6, #0]
 800a284:	3201      	adds	r2, #1
 800a286:	f7ff ffa0 	bl	800a1ca <__hexdig_fun>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d1f8      	bne.n	800a280 <__gethex+0x8c>
 800a28e:	1ba4      	subs	r4, r4, r6
 800a290:	00a7      	lsls	r7, r4, #2
 800a292:	7833      	ldrb	r3, [r6, #0]
 800a294:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a298:	2b50      	cmp	r3, #80	@ 0x50
 800a29a:	d13e      	bne.n	800a31a <__gethex+0x126>
 800a29c:	7873      	ldrb	r3, [r6, #1]
 800a29e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a2a0:	d033      	beq.n	800a30a <__gethex+0x116>
 800a2a2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a2a4:	d034      	beq.n	800a310 <__gethex+0x11c>
 800a2a6:	2400      	movs	r4, #0
 800a2a8:	1c71      	adds	r1, r6, #1
 800a2aa:	7808      	ldrb	r0, [r1, #0]
 800a2ac:	f7ff ff8d 	bl	800a1ca <__hexdig_fun>
 800a2b0:	1e43      	subs	r3, r0, #1
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	2b18      	cmp	r3, #24
 800a2b6:	d830      	bhi.n	800a31a <__gethex+0x126>
 800a2b8:	f1a0 0210 	sub.w	r2, r0, #16
 800a2bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a2c0:	f7ff ff83 	bl	800a1ca <__hexdig_fun>
 800a2c4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a2c8:	fa5f fc8c 	uxtb.w	ip, ip
 800a2cc:	f1bc 0f18 	cmp.w	ip, #24
 800a2d0:	f04f 030a 	mov.w	r3, #10
 800a2d4:	d91e      	bls.n	800a314 <__gethex+0x120>
 800a2d6:	b104      	cbz	r4, 800a2da <__gethex+0xe6>
 800a2d8:	4252      	negs	r2, r2
 800a2da:	4417      	add	r7, r2
 800a2dc:	f8ca 1000 	str.w	r1, [sl]
 800a2e0:	b1ed      	cbz	r5, 800a31e <__gethex+0x12a>
 800a2e2:	f1bb 0f00 	cmp.w	fp, #0
 800a2e6:	bf0c      	ite	eq
 800a2e8:	2506      	moveq	r5, #6
 800a2ea:	2500      	movne	r5, #0
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	b005      	add	sp, #20
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	2500      	movs	r5, #0
 800a2f6:	462c      	mov	r4, r5
 800a2f8:	e7b0      	b.n	800a25c <__gethex+0x68>
 800a2fa:	2c00      	cmp	r4, #0
 800a2fc:	d1c7      	bne.n	800a28e <__gethex+0x9a>
 800a2fe:	4627      	mov	r7, r4
 800a300:	e7c7      	b.n	800a292 <__gethex+0x9e>
 800a302:	464e      	mov	r6, r9
 800a304:	462f      	mov	r7, r5
 800a306:	2501      	movs	r5, #1
 800a308:	e7c3      	b.n	800a292 <__gethex+0x9e>
 800a30a:	2400      	movs	r4, #0
 800a30c:	1cb1      	adds	r1, r6, #2
 800a30e:	e7cc      	b.n	800a2aa <__gethex+0xb6>
 800a310:	2401      	movs	r4, #1
 800a312:	e7fb      	b.n	800a30c <__gethex+0x118>
 800a314:	fb03 0002 	mla	r0, r3, r2, r0
 800a318:	e7ce      	b.n	800a2b8 <__gethex+0xc4>
 800a31a:	4631      	mov	r1, r6
 800a31c:	e7de      	b.n	800a2dc <__gethex+0xe8>
 800a31e:	4629      	mov	r1, r5
 800a320:	eba6 0309 	sub.w	r3, r6, r9
 800a324:	3b01      	subs	r3, #1
 800a326:	2b07      	cmp	r3, #7
 800a328:	dc0a      	bgt.n	800a340 <__gethex+0x14c>
 800a32a:	9801      	ldr	r0, [sp, #4]
 800a32c:	f000 fafc 	bl	800a928 <_Balloc>
 800a330:	4604      	mov	r4, r0
 800a332:	b940      	cbnz	r0, 800a346 <__gethex+0x152>
 800a334:	4602      	mov	r2, r0
 800a336:	21e4      	movs	r1, #228	@ 0xe4
 800a338:	4b5b      	ldr	r3, [pc, #364]	@ (800a4a8 <__gethex+0x2b4>)
 800a33a:	485c      	ldr	r0, [pc, #368]	@ (800a4ac <__gethex+0x2b8>)
 800a33c:	f7ff fe8c 	bl	800a058 <__assert_func>
 800a340:	3101      	adds	r1, #1
 800a342:	105b      	asrs	r3, r3, #1
 800a344:	e7ef      	b.n	800a326 <__gethex+0x132>
 800a346:	2300      	movs	r3, #0
 800a348:	f100 0a14 	add.w	sl, r0, #20
 800a34c:	4655      	mov	r5, sl
 800a34e:	469b      	mov	fp, r3
 800a350:	45b1      	cmp	r9, r6
 800a352:	d337      	bcc.n	800a3c4 <__gethex+0x1d0>
 800a354:	f845 bb04 	str.w	fp, [r5], #4
 800a358:	eba5 050a 	sub.w	r5, r5, sl
 800a35c:	10ad      	asrs	r5, r5, #2
 800a35e:	6125      	str	r5, [r4, #16]
 800a360:	4658      	mov	r0, fp
 800a362:	f000 fbd3 	bl	800ab0c <__hi0bits>
 800a366:	016d      	lsls	r5, r5, #5
 800a368:	f8d8 6000 	ldr.w	r6, [r8]
 800a36c:	1a2d      	subs	r5, r5, r0
 800a36e:	42b5      	cmp	r5, r6
 800a370:	dd54      	ble.n	800a41c <__gethex+0x228>
 800a372:	1bad      	subs	r5, r5, r6
 800a374:	4629      	mov	r1, r5
 800a376:	4620      	mov	r0, r4
 800a378:	f000 ff55 	bl	800b226 <__any_on>
 800a37c:	4681      	mov	r9, r0
 800a37e:	b178      	cbz	r0, 800a3a0 <__gethex+0x1ac>
 800a380:	f04f 0901 	mov.w	r9, #1
 800a384:	1e6b      	subs	r3, r5, #1
 800a386:	1159      	asrs	r1, r3, #5
 800a388:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a38c:	f003 021f 	and.w	r2, r3, #31
 800a390:	fa09 f202 	lsl.w	r2, r9, r2
 800a394:	420a      	tst	r2, r1
 800a396:	d003      	beq.n	800a3a0 <__gethex+0x1ac>
 800a398:	454b      	cmp	r3, r9
 800a39a:	dc36      	bgt.n	800a40a <__gethex+0x216>
 800a39c:	f04f 0902 	mov.w	r9, #2
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f7ff febe 	bl	800a124 <rshift>
 800a3a8:	442f      	add	r7, r5
 800a3aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3ae:	42bb      	cmp	r3, r7
 800a3b0:	da42      	bge.n	800a438 <__gethex+0x244>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	9801      	ldr	r0, [sp, #4]
 800a3b6:	f000 faf7 	bl	800a9a8 <_Bfree>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3be:	25a3      	movs	r5, #163	@ 0xa3
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	e793      	b.n	800a2ec <__gethex+0xf8>
 800a3c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a3c8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a3ca:	d012      	beq.n	800a3f2 <__gethex+0x1fe>
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	d104      	bne.n	800a3da <__gethex+0x1e6>
 800a3d0:	f845 bb04 	str.w	fp, [r5], #4
 800a3d4:	f04f 0b00 	mov.w	fp, #0
 800a3d8:	465b      	mov	r3, fp
 800a3da:	7830      	ldrb	r0, [r6, #0]
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	f7ff fef4 	bl	800a1ca <__hexdig_fun>
 800a3e2:	9b03      	ldr	r3, [sp, #12]
 800a3e4:	f000 000f 	and.w	r0, r0, #15
 800a3e8:	4098      	lsls	r0, r3
 800a3ea:	ea4b 0b00 	orr.w	fp, fp, r0
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	e7ae      	b.n	800a350 <__gethex+0x15c>
 800a3f2:	45b1      	cmp	r9, r6
 800a3f4:	d8ea      	bhi.n	800a3cc <__gethex+0x1d8>
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	492a      	ldr	r1, [pc, #168]	@ (800a4a4 <__gethex+0x2b0>)
 800a3fc:	9303      	str	r3, [sp, #12]
 800a3fe:	f7ff fd0b 	bl	8009e18 <strncmp>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	2800      	cmp	r0, #0
 800a406:	d1e1      	bne.n	800a3cc <__gethex+0x1d8>
 800a408:	e7a2      	b.n	800a350 <__gethex+0x15c>
 800a40a:	4620      	mov	r0, r4
 800a40c:	1ea9      	subs	r1, r5, #2
 800a40e:	f000 ff0a 	bl	800b226 <__any_on>
 800a412:	2800      	cmp	r0, #0
 800a414:	d0c2      	beq.n	800a39c <__gethex+0x1a8>
 800a416:	f04f 0903 	mov.w	r9, #3
 800a41a:	e7c1      	b.n	800a3a0 <__gethex+0x1ac>
 800a41c:	da09      	bge.n	800a432 <__gethex+0x23e>
 800a41e:	1b75      	subs	r5, r6, r5
 800a420:	4621      	mov	r1, r4
 800a422:	462a      	mov	r2, r5
 800a424:	9801      	ldr	r0, [sp, #4]
 800a426:	f000 fccf 	bl	800adc8 <__lshift>
 800a42a:	4604      	mov	r4, r0
 800a42c:	1b7f      	subs	r7, r7, r5
 800a42e:	f100 0a14 	add.w	sl, r0, #20
 800a432:	f04f 0900 	mov.w	r9, #0
 800a436:	e7b8      	b.n	800a3aa <__gethex+0x1b6>
 800a438:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a43c:	42bd      	cmp	r5, r7
 800a43e:	dd6f      	ble.n	800a520 <__gethex+0x32c>
 800a440:	1bed      	subs	r5, r5, r7
 800a442:	42ae      	cmp	r6, r5
 800a444:	dc34      	bgt.n	800a4b0 <__gethex+0x2bc>
 800a446:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d022      	beq.n	800a494 <__gethex+0x2a0>
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d024      	beq.n	800a49c <__gethex+0x2a8>
 800a452:	2b01      	cmp	r3, #1
 800a454:	d115      	bne.n	800a482 <__gethex+0x28e>
 800a456:	42ae      	cmp	r6, r5
 800a458:	d113      	bne.n	800a482 <__gethex+0x28e>
 800a45a:	2e01      	cmp	r6, #1
 800a45c:	d10b      	bne.n	800a476 <__gethex+0x282>
 800a45e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a462:	9a02      	ldr	r2, [sp, #8]
 800a464:	2562      	movs	r5, #98	@ 0x62
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	2301      	movs	r3, #1
 800a46a:	6123      	str	r3, [r4, #16]
 800a46c:	f8ca 3000 	str.w	r3, [sl]
 800a470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a472:	601c      	str	r4, [r3, #0]
 800a474:	e73a      	b.n	800a2ec <__gethex+0xf8>
 800a476:	4620      	mov	r0, r4
 800a478:	1e71      	subs	r1, r6, #1
 800a47a:	f000 fed4 	bl	800b226 <__any_on>
 800a47e:	2800      	cmp	r0, #0
 800a480:	d1ed      	bne.n	800a45e <__gethex+0x26a>
 800a482:	4621      	mov	r1, r4
 800a484:	9801      	ldr	r0, [sp, #4]
 800a486:	f000 fa8f 	bl	800a9a8 <_Bfree>
 800a48a:	2300      	movs	r3, #0
 800a48c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a48e:	2550      	movs	r5, #80	@ 0x50
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	e72b      	b.n	800a2ec <__gethex+0xf8>
 800a494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1f3      	bne.n	800a482 <__gethex+0x28e>
 800a49a:	e7e0      	b.n	800a45e <__gethex+0x26a>
 800a49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1dd      	bne.n	800a45e <__gethex+0x26a>
 800a4a2:	e7ee      	b.n	800a482 <__gethex+0x28e>
 800a4a4:	0800c1ba 	.word	0x0800c1ba
 800a4a8:	0800c27d 	.word	0x0800c27d
 800a4ac:	0800c28e 	.word	0x0800c28e
 800a4b0:	1e6f      	subs	r7, r5, #1
 800a4b2:	f1b9 0f00 	cmp.w	r9, #0
 800a4b6:	d130      	bne.n	800a51a <__gethex+0x326>
 800a4b8:	b127      	cbz	r7, 800a4c4 <__gethex+0x2d0>
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 feb2 	bl	800b226 <__any_on>
 800a4c2:	4681      	mov	r9, r0
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	1b76      	subs	r6, r6, r5
 800a4ca:	2502      	movs	r5, #2
 800a4cc:	117a      	asrs	r2, r7, #5
 800a4ce:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a4d2:	f007 071f 	and.w	r7, r7, #31
 800a4d6:	40bb      	lsls	r3, r7
 800a4d8:	4213      	tst	r3, r2
 800a4da:	4620      	mov	r0, r4
 800a4dc:	bf18      	it	ne
 800a4de:	f049 0902 	orrne.w	r9, r9, #2
 800a4e2:	f7ff fe1f 	bl	800a124 <rshift>
 800a4e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a4ea:	f1b9 0f00 	cmp.w	r9, #0
 800a4ee:	d047      	beq.n	800a580 <__gethex+0x38c>
 800a4f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d015      	beq.n	800a524 <__gethex+0x330>
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d017      	beq.n	800a52c <__gethex+0x338>
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d109      	bne.n	800a514 <__gethex+0x320>
 800a500:	f019 0f02 	tst.w	r9, #2
 800a504:	d006      	beq.n	800a514 <__gethex+0x320>
 800a506:	f8da 3000 	ldr.w	r3, [sl]
 800a50a:	ea49 0903 	orr.w	r9, r9, r3
 800a50e:	f019 0f01 	tst.w	r9, #1
 800a512:	d10e      	bne.n	800a532 <__gethex+0x33e>
 800a514:	f045 0510 	orr.w	r5, r5, #16
 800a518:	e032      	b.n	800a580 <__gethex+0x38c>
 800a51a:	f04f 0901 	mov.w	r9, #1
 800a51e:	e7d1      	b.n	800a4c4 <__gethex+0x2d0>
 800a520:	2501      	movs	r5, #1
 800a522:	e7e2      	b.n	800a4ea <__gethex+0x2f6>
 800a524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a526:	f1c3 0301 	rsb	r3, r3, #1
 800a52a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0f0      	beq.n	800a514 <__gethex+0x320>
 800a532:	f04f 0c00 	mov.w	ip, #0
 800a536:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a53a:	f104 0314 	add.w	r3, r4, #20
 800a53e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a542:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a546:	4618      	mov	r0, r3
 800a548:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a550:	d01b      	beq.n	800a58a <__gethex+0x396>
 800a552:	3201      	adds	r2, #1
 800a554:	6002      	str	r2, [r0, #0]
 800a556:	2d02      	cmp	r5, #2
 800a558:	f104 0314 	add.w	r3, r4, #20
 800a55c:	d13c      	bne.n	800a5d8 <__gethex+0x3e4>
 800a55e:	f8d8 2000 	ldr.w	r2, [r8]
 800a562:	3a01      	subs	r2, #1
 800a564:	42b2      	cmp	r2, r6
 800a566:	d109      	bne.n	800a57c <__gethex+0x388>
 800a568:	2201      	movs	r2, #1
 800a56a:	1171      	asrs	r1, r6, #5
 800a56c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a570:	f006 061f 	and.w	r6, r6, #31
 800a574:	fa02 f606 	lsl.w	r6, r2, r6
 800a578:	421e      	tst	r6, r3
 800a57a:	d13a      	bne.n	800a5f2 <__gethex+0x3fe>
 800a57c:	f045 0520 	orr.w	r5, r5, #32
 800a580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a582:	601c      	str	r4, [r3, #0]
 800a584:	9b02      	ldr	r3, [sp, #8]
 800a586:	601f      	str	r7, [r3, #0]
 800a588:	e6b0      	b.n	800a2ec <__gethex+0xf8>
 800a58a:	4299      	cmp	r1, r3
 800a58c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a590:	d8d9      	bhi.n	800a546 <__gethex+0x352>
 800a592:	68a3      	ldr	r3, [r4, #8]
 800a594:	459b      	cmp	fp, r3
 800a596:	db17      	blt.n	800a5c8 <__gethex+0x3d4>
 800a598:	6861      	ldr	r1, [r4, #4]
 800a59a:	9801      	ldr	r0, [sp, #4]
 800a59c:	3101      	adds	r1, #1
 800a59e:	f000 f9c3 	bl	800a928 <_Balloc>
 800a5a2:	4681      	mov	r9, r0
 800a5a4:	b918      	cbnz	r0, 800a5ae <__gethex+0x3ba>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	2184      	movs	r1, #132	@ 0x84
 800a5aa:	4b19      	ldr	r3, [pc, #100]	@ (800a610 <__gethex+0x41c>)
 800a5ac:	e6c5      	b.n	800a33a <__gethex+0x146>
 800a5ae:	6922      	ldr	r2, [r4, #16]
 800a5b0:	f104 010c 	add.w	r1, r4, #12
 800a5b4:	3202      	adds	r2, #2
 800a5b6:	0092      	lsls	r2, r2, #2
 800a5b8:	300c      	adds	r0, #12
 800a5ba:	f7ff fd38 	bl	800a02e <memcpy>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	9801      	ldr	r0, [sp, #4]
 800a5c2:	f000 f9f1 	bl	800a9a8 <_Bfree>
 800a5c6:	464c      	mov	r4, r9
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	6122      	str	r2, [r4, #16]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5d4:	615a      	str	r2, [r3, #20]
 800a5d6:	e7be      	b.n	800a556 <__gethex+0x362>
 800a5d8:	6922      	ldr	r2, [r4, #16]
 800a5da:	455a      	cmp	r2, fp
 800a5dc:	dd0b      	ble.n	800a5f6 <__gethex+0x402>
 800a5de:	2101      	movs	r1, #1
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7ff fd9f 	bl	800a124 <rshift>
 800a5e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5ea:	3701      	adds	r7, #1
 800a5ec:	42bb      	cmp	r3, r7
 800a5ee:	f6ff aee0 	blt.w	800a3b2 <__gethex+0x1be>
 800a5f2:	2501      	movs	r5, #1
 800a5f4:	e7c2      	b.n	800a57c <__gethex+0x388>
 800a5f6:	f016 061f 	ands.w	r6, r6, #31
 800a5fa:	d0fa      	beq.n	800a5f2 <__gethex+0x3fe>
 800a5fc:	4453      	add	r3, sl
 800a5fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a602:	f000 fa83 	bl	800ab0c <__hi0bits>
 800a606:	f1c6 0620 	rsb	r6, r6, #32
 800a60a:	42b0      	cmp	r0, r6
 800a60c:	dbe7      	blt.n	800a5de <__gethex+0x3ea>
 800a60e:	e7f0      	b.n	800a5f2 <__gethex+0x3fe>
 800a610:	0800c27d 	.word	0x0800c27d

0800a614 <L_shift>:
 800a614:	f1c2 0208 	rsb	r2, r2, #8
 800a618:	0092      	lsls	r2, r2, #2
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	f1c2 0620 	rsb	r6, r2, #32
 800a620:	6843      	ldr	r3, [r0, #4]
 800a622:	6804      	ldr	r4, [r0, #0]
 800a624:	fa03 f506 	lsl.w	r5, r3, r6
 800a628:	432c      	orrs	r4, r5
 800a62a:	40d3      	lsrs	r3, r2
 800a62c:	6004      	str	r4, [r0, #0]
 800a62e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a632:	4288      	cmp	r0, r1
 800a634:	d3f4      	bcc.n	800a620 <L_shift+0xc>
 800a636:	bd70      	pop	{r4, r5, r6, pc}

0800a638 <__match>:
 800a638:	b530      	push	{r4, r5, lr}
 800a63a:	6803      	ldr	r3, [r0, #0]
 800a63c:	3301      	adds	r3, #1
 800a63e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a642:	b914      	cbnz	r4, 800a64a <__match+0x12>
 800a644:	6003      	str	r3, [r0, #0]
 800a646:	2001      	movs	r0, #1
 800a648:	bd30      	pop	{r4, r5, pc}
 800a64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a652:	2d19      	cmp	r5, #25
 800a654:	bf98      	it	ls
 800a656:	3220      	addls	r2, #32
 800a658:	42a2      	cmp	r2, r4
 800a65a:	d0f0      	beq.n	800a63e <__match+0x6>
 800a65c:	2000      	movs	r0, #0
 800a65e:	e7f3      	b.n	800a648 <__match+0x10>

0800a660 <__hexnan>:
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	2500      	movs	r5, #0
 800a666:	680b      	ldr	r3, [r1, #0]
 800a668:	4682      	mov	sl, r0
 800a66a:	115e      	asrs	r6, r3, #5
 800a66c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a670:	f013 031f 	ands.w	r3, r3, #31
 800a674:	bf18      	it	ne
 800a676:	3604      	addne	r6, #4
 800a678:	1f37      	subs	r7, r6, #4
 800a67a:	4690      	mov	r8, r2
 800a67c:	46b9      	mov	r9, r7
 800a67e:	463c      	mov	r4, r7
 800a680:	46ab      	mov	fp, r5
 800a682:	b087      	sub	sp, #28
 800a684:	6801      	ldr	r1, [r0, #0]
 800a686:	9301      	str	r3, [sp, #4]
 800a688:	f846 5c04 	str.w	r5, [r6, #-4]
 800a68c:	9502      	str	r5, [sp, #8]
 800a68e:	784a      	ldrb	r2, [r1, #1]
 800a690:	1c4b      	adds	r3, r1, #1
 800a692:	9303      	str	r3, [sp, #12]
 800a694:	b342      	cbz	r2, 800a6e8 <__hexnan+0x88>
 800a696:	4610      	mov	r0, r2
 800a698:	9105      	str	r1, [sp, #20]
 800a69a:	9204      	str	r2, [sp, #16]
 800a69c:	f7ff fd95 	bl	800a1ca <__hexdig_fun>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d151      	bne.n	800a748 <__hexnan+0xe8>
 800a6a4:	9a04      	ldr	r2, [sp, #16]
 800a6a6:	9905      	ldr	r1, [sp, #20]
 800a6a8:	2a20      	cmp	r2, #32
 800a6aa:	d818      	bhi.n	800a6de <__hexnan+0x7e>
 800a6ac:	9b02      	ldr	r3, [sp, #8]
 800a6ae:	459b      	cmp	fp, r3
 800a6b0:	dd13      	ble.n	800a6da <__hexnan+0x7a>
 800a6b2:	454c      	cmp	r4, r9
 800a6b4:	d206      	bcs.n	800a6c4 <__hexnan+0x64>
 800a6b6:	2d07      	cmp	r5, #7
 800a6b8:	dc04      	bgt.n	800a6c4 <__hexnan+0x64>
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	4649      	mov	r1, r9
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7ff ffa8 	bl	800a614 <L_shift>
 800a6c4:	4544      	cmp	r4, r8
 800a6c6:	d952      	bls.n	800a76e <__hexnan+0x10e>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f1a4 0904 	sub.w	r9, r4, #4
 800a6ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6d2:	461d      	mov	r5, r3
 800a6d4:	464c      	mov	r4, r9
 800a6d6:	f8cd b008 	str.w	fp, [sp, #8]
 800a6da:	9903      	ldr	r1, [sp, #12]
 800a6dc:	e7d7      	b.n	800a68e <__hexnan+0x2e>
 800a6de:	2a29      	cmp	r2, #41	@ 0x29
 800a6e0:	d157      	bne.n	800a792 <__hexnan+0x132>
 800a6e2:	3102      	adds	r1, #2
 800a6e4:	f8ca 1000 	str.w	r1, [sl]
 800a6e8:	f1bb 0f00 	cmp.w	fp, #0
 800a6ec:	d051      	beq.n	800a792 <__hexnan+0x132>
 800a6ee:	454c      	cmp	r4, r9
 800a6f0:	d206      	bcs.n	800a700 <__hexnan+0xa0>
 800a6f2:	2d07      	cmp	r5, #7
 800a6f4:	dc04      	bgt.n	800a700 <__hexnan+0xa0>
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f7ff ff8a 	bl	800a614 <L_shift>
 800a700:	4544      	cmp	r4, r8
 800a702:	d936      	bls.n	800a772 <__hexnan+0x112>
 800a704:	4623      	mov	r3, r4
 800a706:	f1a8 0204 	sub.w	r2, r8, #4
 800a70a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a70e:	429f      	cmp	r7, r3
 800a710:	f842 1f04 	str.w	r1, [r2, #4]!
 800a714:	d2f9      	bcs.n	800a70a <__hexnan+0xaa>
 800a716:	1b3b      	subs	r3, r7, r4
 800a718:	f023 0303 	bic.w	r3, r3, #3
 800a71c:	3304      	adds	r3, #4
 800a71e:	3401      	adds	r4, #1
 800a720:	3e03      	subs	r6, #3
 800a722:	42b4      	cmp	r4, r6
 800a724:	bf88      	it	hi
 800a726:	2304      	movhi	r3, #4
 800a728:	2200      	movs	r2, #0
 800a72a:	4443      	add	r3, r8
 800a72c:	f843 2b04 	str.w	r2, [r3], #4
 800a730:	429f      	cmp	r7, r3
 800a732:	d2fb      	bcs.n	800a72c <__hexnan+0xcc>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	b91b      	cbnz	r3, 800a740 <__hexnan+0xe0>
 800a738:	4547      	cmp	r7, r8
 800a73a:	d128      	bne.n	800a78e <__hexnan+0x12e>
 800a73c:	2301      	movs	r3, #1
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	2005      	movs	r0, #5
 800a742:	b007      	add	sp, #28
 800a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	3501      	adds	r5, #1
 800a74a:	2d08      	cmp	r5, #8
 800a74c:	f10b 0b01 	add.w	fp, fp, #1
 800a750:	dd06      	ble.n	800a760 <__hexnan+0x100>
 800a752:	4544      	cmp	r4, r8
 800a754:	d9c1      	bls.n	800a6da <__hexnan+0x7a>
 800a756:	2300      	movs	r3, #0
 800a758:	2501      	movs	r5, #1
 800a75a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a75e:	3c04      	subs	r4, #4
 800a760:	6822      	ldr	r2, [r4, #0]
 800a762:	f000 000f 	and.w	r0, r0, #15
 800a766:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a76a:	6020      	str	r0, [r4, #0]
 800a76c:	e7b5      	b.n	800a6da <__hexnan+0x7a>
 800a76e:	2508      	movs	r5, #8
 800a770:	e7b3      	b.n	800a6da <__hexnan+0x7a>
 800a772:	9b01      	ldr	r3, [sp, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0dd      	beq.n	800a734 <__hexnan+0xd4>
 800a778:	f04f 32ff 	mov.w	r2, #4294967295
 800a77c:	f1c3 0320 	rsb	r3, r3, #32
 800a780:	40da      	lsrs	r2, r3
 800a782:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a786:	4013      	ands	r3, r2
 800a788:	f846 3c04 	str.w	r3, [r6, #-4]
 800a78c:	e7d2      	b.n	800a734 <__hexnan+0xd4>
 800a78e:	3f04      	subs	r7, #4
 800a790:	e7d0      	b.n	800a734 <__hexnan+0xd4>
 800a792:	2004      	movs	r0, #4
 800a794:	e7d5      	b.n	800a742 <__hexnan+0xe2>
	...

0800a798 <malloc>:
 800a798:	4b02      	ldr	r3, [pc, #8]	@ (800a7a4 <malloc+0xc>)
 800a79a:	4601      	mov	r1, r0
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	f000 b825 	b.w	800a7ec <_malloc_r>
 800a7a2:	bf00      	nop
 800a7a4:	200001bc 	.word	0x200001bc

0800a7a8 <sbrk_aligned>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a7e8 <sbrk_aligned+0x40>)
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	6831      	ldr	r1, [r6, #0]
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	b911      	cbnz	r1, 800a7ba <sbrk_aligned+0x12>
 800a7b4:	f001 f920 	bl	800b9f8 <_sbrk_r>
 800a7b8:	6030      	str	r0, [r6, #0]
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f001 f91b 	bl	800b9f8 <_sbrk_r>
 800a7c2:	1c43      	adds	r3, r0, #1
 800a7c4:	d103      	bne.n	800a7ce <sbrk_aligned+0x26>
 800a7c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	bd70      	pop	{r4, r5, r6, pc}
 800a7ce:	1cc4      	adds	r4, r0, #3
 800a7d0:	f024 0403 	bic.w	r4, r4, #3
 800a7d4:	42a0      	cmp	r0, r4
 800a7d6:	d0f8      	beq.n	800a7ca <sbrk_aligned+0x22>
 800a7d8:	1a21      	subs	r1, r4, r0
 800a7da:	4628      	mov	r0, r5
 800a7dc:	f001 f90c 	bl	800b9f8 <_sbrk_r>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d1f2      	bne.n	800a7ca <sbrk_aligned+0x22>
 800a7e4:	e7ef      	b.n	800a7c6 <sbrk_aligned+0x1e>
 800a7e6:	bf00      	nop
 800a7e8:	2000095c 	.word	0x2000095c

0800a7ec <_malloc_r>:
 800a7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f0:	1ccd      	adds	r5, r1, #3
 800a7f2:	f025 0503 	bic.w	r5, r5, #3
 800a7f6:	3508      	adds	r5, #8
 800a7f8:	2d0c      	cmp	r5, #12
 800a7fa:	bf38      	it	cc
 800a7fc:	250c      	movcc	r5, #12
 800a7fe:	2d00      	cmp	r5, #0
 800a800:	4606      	mov	r6, r0
 800a802:	db01      	blt.n	800a808 <_malloc_r+0x1c>
 800a804:	42a9      	cmp	r1, r5
 800a806:	d904      	bls.n	800a812 <_malloc_r+0x26>
 800a808:	230c      	movs	r3, #12
 800a80a:	6033      	str	r3, [r6, #0]
 800a80c:	2000      	movs	r0, #0
 800a80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8e8 <_malloc_r+0xfc>
 800a816:	f000 f87b 	bl	800a910 <__malloc_lock>
 800a81a:	f8d8 3000 	ldr.w	r3, [r8]
 800a81e:	461c      	mov	r4, r3
 800a820:	bb44      	cbnz	r4, 800a874 <_malloc_r+0x88>
 800a822:	4629      	mov	r1, r5
 800a824:	4630      	mov	r0, r6
 800a826:	f7ff ffbf 	bl	800a7a8 <sbrk_aligned>
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	4604      	mov	r4, r0
 800a82e:	d158      	bne.n	800a8e2 <_malloc_r+0xf6>
 800a830:	f8d8 4000 	ldr.w	r4, [r8]
 800a834:	4627      	mov	r7, r4
 800a836:	2f00      	cmp	r7, #0
 800a838:	d143      	bne.n	800a8c2 <_malloc_r+0xd6>
 800a83a:	2c00      	cmp	r4, #0
 800a83c:	d04b      	beq.n	800a8d6 <_malloc_r+0xea>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	4639      	mov	r1, r7
 800a842:	4630      	mov	r0, r6
 800a844:	eb04 0903 	add.w	r9, r4, r3
 800a848:	f001 f8d6 	bl	800b9f8 <_sbrk_r>
 800a84c:	4581      	cmp	r9, r0
 800a84e:	d142      	bne.n	800a8d6 <_malloc_r+0xea>
 800a850:	6821      	ldr	r1, [r4, #0]
 800a852:	4630      	mov	r0, r6
 800a854:	1a6d      	subs	r5, r5, r1
 800a856:	4629      	mov	r1, r5
 800a858:	f7ff ffa6 	bl	800a7a8 <sbrk_aligned>
 800a85c:	3001      	adds	r0, #1
 800a85e:	d03a      	beq.n	800a8d6 <_malloc_r+0xea>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	442b      	add	r3, r5
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	f8d8 3000 	ldr.w	r3, [r8]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	bb62      	cbnz	r2, 800a8c8 <_malloc_r+0xdc>
 800a86e:	f8c8 7000 	str.w	r7, [r8]
 800a872:	e00f      	b.n	800a894 <_malloc_r+0xa8>
 800a874:	6822      	ldr	r2, [r4, #0]
 800a876:	1b52      	subs	r2, r2, r5
 800a878:	d420      	bmi.n	800a8bc <_malloc_r+0xd0>
 800a87a:	2a0b      	cmp	r2, #11
 800a87c:	d917      	bls.n	800a8ae <_malloc_r+0xc2>
 800a87e:	1961      	adds	r1, r4, r5
 800a880:	42a3      	cmp	r3, r4
 800a882:	6025      	str	r5, [r4, #0]
 800a884:	bf18      	it	ne
 800a886:	6059      	strne	r1, [r3, #4]
 800a888:	6863      	ldr	r3, [r4, #4]
 800a88a:	bf08      	it	eq
 800a88c:	f8c8 1000 	streq.w	r1, [r8]
 800a890:	5162      	str	r2, [r4, r5]
 800a892:	604b      	str	r3, [r1, #4]
 800a894:	4630      	mov	r0, r6
 800a896:	f000 f841 	bl	800a91c <__malloc_unlock>
 800a89a:	f104 000b 	add.w	r0, r4, #11
 800a89e:	1d23      	adds	r3, r4, #4
 800a8a0:	f020 0007 	bic.w	r0, r0, #7
 800a8a4:	1ac2      	subs	r2, r0, r3
 800a8a6:	bf1c      	itt	ne
 800a8a8:	1a1b      	subne	r3, r3, r0
 800a8aa:	50a3      	strne	r3, [r4, r2]
 800a8ac:	e7af      	b.n	800a80e <_malloc_r+0x22>
 800a8ae:	6862      	ldr	r2, [r4, #4]
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	bf0c      	ite	eq
 800a8b4:	f8c8 2000 	streq.w	r2, [r8]
 800a8b8:	605a      	strne	r2, [r3, #4]
 800a8ba:	e7eb      	b.n	800a894 <_malloc_r+0xa8>
 800a8bc:	4623      	mov	r3, r4
 800a8be:	6864      	ldr	r4, [r4, #4]
 800a8c0:	e7ae      	b.n	800a820 <_malloc_r+0x34>
 800a8c2:	463c      	mov	r4, r7
 800a8c4:	687f      	ldr	r7, [r7, #4]
 800a8c6:	e7b6      	b.n	800a836 <_malloc_r+0x4a>
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	42a3      	cmp	r3, r4
 800a8ce:	d1fb      	bne.n	800a8c8 <_malloc_r+0xdc>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	6053      	str	r3, [r2, #4]
 800a8d4:	e7de      	b.n	800a894 <_malloc_r+0xa8>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	4630      	mov	r0, r6
 800a8da:	6033      	str	r3, [r6, #0]
 800a8dc:	f000 f81e 	bl	800a91c <__malloc_unlock>
 800a8e0:	e794      	b.n	800a80c <_malloc_r+0x20>
 800a8e2:	6005      	str	r5, [r0, #0]
 800a8e4:	e7d6      	b.n	800a894 <_malloc_r+0xa8>
 800a8e6:	bf00      	nop
 800a8e8:	20000960 	.word	0x20000960

0800a8ec <__ascii_mbtowc>:
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	b901      	cbnz	r1, 800a8f2 <__ascii_mbtowc+0x6>
 800a8f0:	a901      	add	r1, sp, #4
 800a8f2:	b142      	cbz	r2, 800a906 <__ascii_mbtowc+0x1a>
 800a8f4:	b14b      	cbz	r3, 800a90a <__ascii_mbtowc+0x1e>
 800a8f6:	7813      	ldrb	r3, [r2, #0]
 800a8f8:	600b      	str	r3, [r1, #0]
 800a8fa:	7812      	ldrb	r2, [r2, #0]
 800a8fc:	1e10      	subs	r0, r2, #0
 800a8fe:	bf18      	it	ne
 800a900:	2001      	movne	r0, #1
 800a902:	b002      	add	sp, #8
 800a904:	4770      	bx	lr
 800a906:	4610      	mov	r0, r2
 800a908:	e7fb      	b.n	800a902 <__ascii_mbtowc+0x16>
 800a90a:	f06f 0001 	mvn.w	r0, #1
 800a90e:	e7f8      	b.n	800a902 <__ascii_mbtowc+0x16>

0800a910 <__malloc_lock>:
 800a910:	4801      	ldr	r0, [pc, #4]	@ (800a918 <__malloc_lock+0x8>)
 800a912:	f7ff bb8a 	b.w	800a02a <__retarget_lock_acquire_recursive>
 800a916:	bf00      	nop
 800a918:	20000958 	.word	0x20000958

0800a91c <__malloc_unlock>:
 800a91c:	4801      	ldr	r0, [pc, #4]	@ (800a924 <__malloc_unlock+0x8>)
 800a91e:	f7ff bb85 	b.w	800a02c <__retarget_lock_release_recursive>
 800a922:	bf00      	nop
 800a924:	20000958 	.word	0x20000958

0800a928 <_Balloc>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	69c6      	ldr	r6, [r0, #28]
 800a92c:	4604      	mov	r4, r0
 800a92e:	460d      	mov	r5, r1
 800a930:	b976      	cbnz	r6, 800a950 <_Balloc+0x28>
 800a932:	2010      	movs	r0, #16
 800a934:	f7ff ff30 	bl	800a798 <malloc>
 800a938:	4602      	mov	r2, r0
 800a93a:	61e0      	str	r0, [r4, #28]
 800a93c:	b920      	cbnz	r0, 800a948 <_Balloc+0x20>
 800a93e:	216b      	movs	r1, #107	@ 0x6b
 800a940:	4b17      	ldr	r3, [pc, #92]	@ (800a9a0 <_Balloc+0x78>)
 800a942:	4818      	ldr	r0, [pc, #96]	@ (800a9a4 <_Balloc+0x7c>)
 800a944:	f7ff fb88 	bl	800a058 <__assert_func>
 800a948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a94c:	6006      	str	r6, [r0, #0]
 800a94e:	60c6      	str	r6, [r0, #12]
 800a950:	69e6      	ldr	r6, [r4, #28]
 800a952:	68f3      	ldr	r3, [r6, #12]
 800a954:	b183      	cbz	r3, 800a978 <_Balloc+0x50>
 800a956:	69e3      	ldr	r3, [r4, #28]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a95e:	b9b8      	cbnz	r0, 800a990 <_Balloc+0x68>
 800a960:	2101      	movs	r1, #1
 800a962:	fa01 f605 	lsl.w	r6, r1, r5
 800a966:	1d72      	adds	r2, r6, #5
 800a968:	4620      	mov	r0, r4
 800a96a:	0092      	lsls	r2, r2, #2
 800a96c:	f001 f869 	bl	800ba42 <_calloc_r>
 800a970:	b160      	cbz	r0, 800a98c <_Balloc+0x64>
 800a972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a976:	e00e      	b.n	800a996 <_Balloc+0x6e>
 800a978:	2221      	movs	r2, #33	@ 0x21
 800a97a:	2104      	movs	r1, #4
 800a97c:	4620      	mov	r0, r4
 800a97e:	f001 f860 	bl	800ba42 <_calloc_r>
 800a982:	69e3      	ldr	r3, [r4, #28]
 800a984:	60f0      	str	r0, [r6, #12]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e4      	bne.n	800a956 <_Balloc+0x2e>
 800a98c:	2000      	movs	r0, #0
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	6802      	ldr	r2, [r0, #0]
 800a992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a996:	2300      	movs	r3, #0
 800a998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a99c:	e7f7      	b.n	800a98e <_Balloc+0x66>
 800a99e:	bf00      	nop
 800a9a0:	0800c1c8 	.word	0x0800c1c8
 800a9a4:	0800c2ee 	.word	0x0800c2ee

0800a9a8 <_Bfree>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	69c6      	ldr	r6, [r0, #28]
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	b976      	cbnz	r6, 800a9d0 <_Bfree+0x28>
 800a9b2:	2010      	movs	r0, #16
 800a9b4:	f7ff fef0 	bl	800a798 <malloc>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	61e8      	str	r0, [r5, #28]
 800a9bc:	b920      	cbnz	r0, 800a9c8 <_Bfree+0x20>
 800a9be:	218f      	movs	r1, #143	@ 0x8f
 800a9c0:	4b08      	ldr	r3, [pc, #32]	@ (800a9e4 <_Bfree+0x3c>)
 800a9c2:	4809      	ldr	r0, [pc, #36]	@ (800a9e8 <_Bfree+0x40>)
 800a9c4:	f7ff fb48 	bl	800a058 <__assert_func>
 800a9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9cc:	6006      	str	r6, [r0, #0]
 800a9ce:	60c6      	str	r6, [r0, #12]
 800a9d0:	b13c      	cbz	r4, 800a9e2 <_Bfree+0x3a>
 800a9d2:	69eb      	ldr	r3, [r5, #28]
 800a9d4:	6862      	ldr	r2, [r4, #4]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9dc:	6021      	str	r1, [r4, #0]
 800a9de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}
 800a9e4:	0800c1c8 	.word	0x0800c1c8
 800a9e8:	0800c2ee 	.word	0x0800c2ee

0800a9ec <__multadd>:
 800a9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	461e      	mov	r6, r3
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	690d      	ldr	r5, [r1, #16]
 800a9fa:	f101 0c14 	add.w	ip, r1, #20
 800a9fe:	f8dc 3000 	ldr.w	r3, [ip]
 800aa02:	3001      	adds	r0, #1
 800aa04:	b299      	uxth	r1, r3
 800aa06:	fb02 6101 	mla	r1, r2, r1, r6
 800aa0a:	0c1e      	lsrs	r6, r3, #16
 800aa0c:	0c0b      	lsrs	r3, r1, #16
 800aa0e:	fb02 3306 	mla	r3, r2, r6, r3
 800aa12:	b289      	uxth	r1, r1
 800aa14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa18:	4285      	cmp	r5, r0
 800aa1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa1e:	f84c 1b04 	str.w	r1, [ip], #4
 800aa22:	dcec      	bgt.n	800a9fe <__multadd+0x12>
 800aa24:	b30e      	cbz	r6, 800aa6a <__multadd+0x7e>
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	42ab      	cmp	r3, r5
 800aa2a:	dc19      	bgt.n	800aa60 <__multadd+0x74>
 800aa2c:	6861      	ldr	r1, [r4, #4]
 800aa2e:	4638      	mov	r0, r7
 800aa30:	3101      	adds	r1, #1
 800aa32:	f7ff ff79 	bl	800a928 <_Balloc>
 800aa36:	4680      	mov	r8, r0
 800aa38:	b928      	cbnz	r0, 800aa46 <__multadd+0x5a>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	21ba      	movs	r1, #186	@ 0xba
 800aa3e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa70 <__multadd+0x84>)
 800aa40:	480c      	ldr	r0, [pc, #48]	@ (800aa74 <__multadd+0x88>)
 800aa42:	f7ff fb09 	bl	800a058 <__assert_func>
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	f104 010c 	add.w	r1, r4, #12
 800aa4c:	3202      	adds	r2, #2
 800aa4e:	0092      	lsls	r2, r2, #2
 800aa50:	300c      	adds	r0, #12
 800aa52:	f7ff faec 	bl	800a02e <memcpy>
 800aa56:	4621      	mov	r1, r4
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f7ff ffa5 	bl	800a9a8 <_Bfree>
 800aa5e:	4644      	mov	r4, r8
 800aa60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa64:	3501      	adds	r5, #1
 800aa66:	615e      	str	r6, [r3, #20]
 800aa68:	6125      	str	r5, [r4, #16]
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa70:	0800c27d 	.word	0x0800c27d
 800aa74:	0800c2ee 	.word	0x0800c2ee

0800aa78 <__s2b>:
 800aa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	4615      	mov	r5, r2
 800aa7e:	2209      	movs	r2, #9
 800aa80:	461f      	mov	r7, r3
 800aa82:	3308      	adds	r3, #8
 800aa84:	460c      	mov	r4, r1
 800aa86:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	2100      	movs	r1, #0
 800aa90:	429a      	cmp	r2, r3
 800aa92:	db09      	blt.n	800aaa8 <__s2b+0x30>
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7ff ff47 	bl	800a928 <_Balloc>
 800aa9a:	b940      	cbnz	r0, 800aaae <__s2b+0x36>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	21d3      	movs	r1, #211	@ 0xd3
 800aaa0:	4b18      	ldr	r3, [pc, #96]	@ (800ab04 <__s2b+0x8c>)
 800aaa2:	4819      	ldr	r0, [pc, #100]	@ (800ab08 <__s2b+0x90>)
 800aaa4:	f7ff fad8 	bl	800a058 <__assert_func>
 800aaa8:	0052      	lsls	r2, r2, #1
 800aaaa:	3101      	adds	r1, #1
 800aaac:	e7f0      	b.n	800aa90 <__s2b+0x18>
 800aaae:	9b08      	ldr	r3, [sp, #32]
 800aab0:	2d09      	cmp	r5, #9
 800aab2:	6143      	str	r3, [r0, #20]
 800aab4:	f04f 0301 	mov.w	r3, #1
 800aab8:	6103      	str	r3, [r0, #16]
 800aaba:	dd16      	ble.n	800aaea <__s2b+0x72>
 800aabc:	f104 0909 	add.w	r9, r4, #9
 800aac0:	46c8      	mov	r8, r9
 800aac2:	442c      	add	r4, r5
 800aac4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aac8:	4601      	mov	r1, r0
 800aaca:	220a      	movs	r2, #10
 800aacc:	4630      	mov	r0, r6
 800aace:	3b30      	subs	r3, #48	@ 0x30
 800aad0:	f7ff ff8c 	bl	800a9ec <__multadd>
 800aad4:	45a0      	cmp	r8, r4
 800aad6:	d1f5      	bne.n	800aac4 <__s2b+0x4c>
 800aad8:	f1a5 0408 	sub.w	r4, r5, #8
 800aadc:	444c      	add	r4, r9
 800aade:	1b2d      	subs	r5, r5, r4
 800aae0:	1963      	adds	r3, r4, r5
 800aae2:	42bb      	cmp	r3, r7
 800aae4:	db04      	blt.n	800aaf0 <__s2b+0x78>
 800aae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaea:	2509      	movs	r5, #9
 800aaec:	340a      	adds	r4, #10
 800aaee:	e7f6      	b.n	800aade <__s2b+0x66>
 800aaf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aaf4:	4601      	mov	r1, r0
 800aaf6:	220a      	movs	r2, #10
 800aaf8:	4630      	mov	r0, r6
 800aafa:	3b30      	subs	r3, #48	@ 0x30
 800aafc:	f7ff ff76 	bl	800a9ec <__multadd>
 800ab00:	e7ee      	b.n	800aae0 <__s2b+0x68>
 800ab02:	bf00      	nop
 800ab04:	0800c27d 	.word	0x0800c27d
 800ab08:	0800c2ee 	.word	0x0800c2ee

0800ab0c <__hi0bits>:
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab12:	bf3a      	itte	cc
 800ab14:	0403      	lslcc	r3, r0, #16
 800ab16:	2010      	movcc	r0, #16
 800ab18:	2000      	movcs	r0, #0
 800ab1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab1e:	bf3c      	itt	cc
 800ab20:	021b      	lslcc	r3, r3, #8
 800ab22:	3008      	addcc	r0, #8
 800ab24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab28:	bf3c      	itt	cc
 800ab2a:	011b      	lslcc	r3, r3, #4
 800ab2c:	3004      	addcc	r0, #4
 800ab2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab32:	bf3c      	itt	cc
 800ab34:	009b      	lslcc	r3, r3, #2
 800ab36:	3002      	addcc	r0, #2
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	db05      	blt.n	800ab48 <__hi0bits+0x3c>
 800ab3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab40:	f100 0001 	add.w	r0, r0, #1
 800ab44:	bf08      	it	eq
 800ab46:	2020      	moveq	r0, #32
 800ab48:	4770      	bx	lr

0800ab4a <__lo0bits>:
 800ab4a:	6803      	ldr	r3, [r0, #0]
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	f013 0007 	ands.w	r0, r3, #7
 800ab52:	d00b      	beq.n	800ab6c <__lo0bits+0x22>
 800ab54:	07d9      	lsls	r1, r3, #31
 800ab56:	d421      	bmi.n	800ab9c <__lo0bits+0x52>
 800ab58:	0798      	lsls	r0, r3, #30
 800ab5a:	bf49      	itett	mi
 800ab5c:	085b      	lsrmi	r3, r3, #1
 800ab5e:	089b      	lsrpl	r3, r3, #2
 800ab60:	2001      	movmi	r0, #1
 800ab62:	6013      	strmi	r3, [r2, #0]
 800ab64:	bf5c      	itt	pl
 800ab66:	2002      	movpl	r0, #2
 800ab68:	6013      	strpl	r3, [r2, #0]
 800ab6a:	4770      	bx	lr
 800ab6c:	b299      	uxth	r1, r3
 800ab6e:	b909      	cbnz	r1, 800ab74 <__lo0bits+0x2a>
 800ab70:	2010      	movs	r0, #16
 800ab72:	0c1b      	lsrs	r3, r3, #16
 800ab74:	b2d9      	uxtb	r1, r3
 800ab76:	b909      	cbnz	r1, 800ab7c <__lo0bits+0x32>
 800ab78:	3008      	adds	r0, #8
 800ab7a:	0a1b      	lsrs	r3, r3, #8
 800ab7c:	0719      	lsls	r1, r3, #28
 800ab7e:	bf04      	itt	eq
 800ab80:	091b      	lsreq	r3, r3, #4
 800ab82:	3004      	addeq	r0, #4
 800ab84:	0799      	lsls	r1, r3, #30
 800ab86:	bf04      	itt	eq
 800ab88:	089b      	lsreq	r3, r3, #2
 800ab8a:	3002      	addeq	r0, #2
 800ab8c:	07d9      	lsls	r1, r3, #31
 800ab8e:	d403      	bmi.n	800ab98 <__lo0bits+0x4e>
 800ab90:	085b      	lsrs	r3, r3, #1
 800ab92:	f100 0001 	add.w	r0, r0, #1
 800ab96:	d003      	beq.n	800aba0 <__lo0bits+0x56>
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	4770      	bx	lr
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	4770      	bx	lr
 800aba0:	2020      	movs	r0, #32
 800aba2:	4770      	bx	lr

0800aba4 <__i2b>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	460c      	mov	r4, r1
 800aba8:	2101      	movs	r1, #1
 800abaa:	f7ff febd 	bl	800a928 <_Balloc>
 800abae:	4602      	mov	r2, r0
 800abb0:	b928      	cbnz	r0, 800abbe <__i2b+0x1a>
 800abb2:	f240 1145 	movw	r1, #325	@ 0x145
 800abb6:	4b04      	ldr	r3, [pc, #16]	@ (800abc8 <__i2b+0x24>)
 800abb8:	4804      	ldr	r0, [pc, #16]	@ (800abcc <__i2b+0x28>)
 800abba:	f7ff fa4d 	bl	800a058 <__assert_func>
 800abbe:	2301      	movs	r3, #1
 800abc0:	6144      	str	r4, [r0, #20]
 800abc2:	6103      	str	r3, [r0, #16]
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	bf00      	nop
 800abc8:	0800c27d 	.word	0x0800c27d
 800abcc:	0800c2ee 	.word	0x0800c2ee

0800abd0 <__multiply>:
 800abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd4:	4617      	mov	r7, r2
 800abd6:	690a      	ldr	r2, [r1, #16]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	4689      	mov	r9, r1
 800abdc:	429a      	cmp	r2, r3
 800abde:	bfa2      	ittt	ge
 800abe0:	463b      	movge	r3, r7
 800abe2:	460f      	movge	r7, r1
 800abe4:	4699      	movge	r9, r3
 800abe6:	693d      	ldr	r5, [r7, #16]
 800abe8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	eb05 060a 	add.w	r6, r5, sl
 800abf4:	42b3      	cmp	r3, r6
 800abf6:	b085      	sub	sp, #20
 800abf8:	bfb8      	it	lt
 800abfa:	3101      	addlt	r1, #1
 800abfc:	f7ff fe94 	bl	800a928 <_Balloc>
 800ac00:	b930      	cbnz	r0, 800ac10 <__multiply+0x40>
 800ac02:	4602      	mov	r2, r0
 800ac04:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac08:	4b40      	ldr	r3, [pc, #256]	@ (800ad0c <__multiply+0x13c>)
 800ac0a:	4841      	ldr	r0, [pc, #260]	@ (800ad10 <__multiply+0x140>)
 800ac0c:	f7ff fa24 	bl	800a058 <__assert_func>
 800ac10:	f100 0414 	add.w	r4, r0, #20
 800ac14:	4623      	mov	r3, r4
 800ac16:	2200      	movs	r2, #0
 800ac18:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ac1c:	4573      	cmp	r3, lr
 800ac1e:	d320      	bcc.n	800ac62 <__multiply+0x92>
 800ac20:	f107 0814 	add.w	r8, r7, #20
 800ac24:	f109 0114 	add.w	r1, r9, #20
 800ac28:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ac2c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ac30:	9302      	str	r3, [sp, #8]
 800ac32:	1beb      	subs	r3, r5, r7
 800ac34:	3b15      	subs	r3, #21
 800ac36:	f023 0303 	bic.w	r3, r3, #3
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	3715      	adds	r7, #21
 800ac3e:	42bd      	cmp	r5, r7
 800ac40:	bf38      	it	cc
 800ac42:	2304      	movcc	r3, #4
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	9b02      	ldr	r3, [sp, #8]
 800ac48:	9103      	str	r1, [sp, #12]
 800ac4a:	428b      	cmp	r3, r1
 800ac4c:	d80c      	bhi.n	800ac68 <__multiply+0x98>
 800ac4e:	2e00      	cmp	r6, #0
 800ac50:	dd03      	ble.n	800ac5a <__multiply+0x8a>
 800ac52:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d055      	beq.n	800ad06 <__multiply+0x136>
 800ac5a:	6106      	str	r6, [r0, #16]
 800ac5c:	b005      	add	sp, #20
 800ac5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac62:	f843 2b04 	str.w	r2, [r3], #4
 800ac66:	e7d9      	b.n	800ac1c <__multiply+0x4c>
 800ac68:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac6c:	f1ba 0f00 	cmp.w	sl, #0
 800ac70:	d01f      	beq.n	800acb2 <__multiply+0xe2>
 800ac72:	46c4      	mov	ip, r8
 800ac74:	46a1      	mov	r9, r4
 800ac76:	2700      	movs	r7, #0
 800ac78:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac7c:	f8d9 3000 	ldr.w	r3, [r9]
 800ac80:	fa1f fb82 	uxth.w	fp, r2
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac8a:	443b      	add	r3, r7
 800ac8c:	f8d9 7000 	ldr.w	r7, [r9]
 800ac90:	0c12      	lsrs	r2, r2, #16
 800ac92:	0c3f      	lsrs	r7, r7, #16
 800ac94:	fb0a 7202 	mla	r2, sl, r2, r7
 800ac98:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aca2:	4565      	cmp	r5, ip
 800aca4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800aca8:	f849 3b04 	str.w	r3, [r9], #4
 800acac:	d8e4      	bhi.n	800ac78 <__multiply+0xa8>
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	50e7      	str	r7, [r4, r3]
 800acb2:	9b03      	ldr	r3, [sp, #12]
 800acb4:	3104      	adds	r1, #4
 800acb6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800acba:	f1b9 0f00 	cmp.w	r9, #0
 800acbe:	d020      	beq.n	800ad02 <__multiply+0x132>
 800acc0:	4647      	mov	r7, r8
 800acc2:	46a4      	mov	ip, r4
 800acc4:	f04f 0a00 	mov.w	sl, #0
 800acc8:	6823      	ldr	r3, [r4, #0]
 800acca:	f8b7 b000 	ldrh.w	fp, [r7]
 800acce:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	fb09 220b 	mla	r2, r9, fp, r2
 800acd8:	4452      	add	r2, sl
 800acda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acde:	f84c 3b04 	str.w	r3, [ip], #4
 800ace2:	f857 3b04 	ldr.w	r3, [r7], #4
 800ace6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acea:	f8bc 3000 	ldrh.w	r3, [ip]
 800acee:	42bd      	cmp	r5, r7
 800acf0:	fb09 330a 	mla	r3, r9, sl, r3
 800acf4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800acf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acfc:	d8e5      	bhi.n	800acca <__multiply+0xfa>
 800acfe:	9a01      	ldr	r2, [sp, #4]
 800ad00:	50a3      	str	r3, [r4, r2]
 800ad02:	3404      	adds	r4, #4
 800ad04:	e79f      	b.n	800ac46 <__multiply+0x76>
 800ad06:	3e01      	subs	r6, #1
 800ad08:	e7a1      	b.n	800ac4e <__multiply+0x7e>
 800ad0a:	bf00      	nop
 800ad0c:	0800c27d 	.word	0x0800c27d
 800ad10:	0800c2ee 	.word	0x0800c2ee

0800ad14 <__pow5mult>:
 800ad14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad18:	4615      	mov	r5, r2
 800ad1a:	f012 0203 	ands.w	r2, r2, #3
 800ad1e:	4607      	mov	r7, r0
 800ad20:	460e      	mov	r6, r1
 800ad22:	d007      	beq.n	800ad34 <__pow5mult+0x20>
 800ad24:	4c25      	ldr	r4, [pc, #148]	@ (800adbc <__pow5mult+0xa8>)
 800ad26:	3a01      	subs	r2, #1
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad2e:	f7ff fe5d 	bl	800a9ec <__multadd>
 800ad32:	4606      	mov	r6, r0
 800ad34:	10ad      	asrs	r5, r5, #2
 800ad36:	d03d      	beq.n	800adb4 <__pow5mult+0xa0>
 800ad38:	69fc      	ldr	r4, [r7, #28]
 800ad3a:	b97c      	cbnz	r4, 800ad5c <__pow5mult+0x48>
 800ad3c:	2010      	movs	r0, #16
 800ad3e:	f7ff fd2b 	bl	800a798 <malloc>
 800ad42:	4602      	mov	r2, r0
 800ad44:	61f8      	str	r0, [r7, #28]
 800ad46:	b928      	cbnz	r0, 800ad54 <__pow5mult+0x40>
 800ad48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad4c:	4b1c      	ldr	r3, [pc, #112]	@ (800adc0 <__pow5mult+0xac>)
 800ad4e:	481d      	ldr	r0, [pc, #116]	@ (800adc4 <__pow5mult+0xb0>)
 800ad50:	f7ff f982 	bl	800a058 <__assert_func>
 800ad54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad58:	6004      	str	r4, [r0, #0]
 800ad5a:	60c4      	str	r4, [r0, #12]
 800ad5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad64:	b94c      	cbnz	r4, 800ad7a <__pow5mult+0x66>
 800ad66:	f240 2171 	movw	r1, #625	@ 0x271
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f7ff ff1a 	bl	800aba4 <__i2b>
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad78:	6003      	str	r3, [r0, #0]
 800ad7a:	f04f 0900 	mov.w	r9, #0
 800ad7e:	07eb      	lsls	r3, r5, #31
 800ad80:	d50a      	bpl.n	800ad98 <__pow5mult+0x84>
 800ad82:	4631      	mov	r1, r6
 800ad84:	4622      	mov	r2, r4
 800ad86:	4638      	mov	r0, r7
 800ad88:	f7ff ff22 	bl	800abd0 <__multiply>
 800ad8c:	4680      	mov	r8, r0
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff fe09 	bl	800a9a8 <_Bfree>
 800ad96:	4646      	mov	r6, r8
 800ad98:	106d      	asrs	r5, r5, #1
 800ad9a:	d00b      	beq.n	800adb4 <__pow5mult+0xa0>
 800ad9c:	6820      	ldr	r0, [r4, #0]
 800ad9e:	b938      	cbnz	r0, 800adb0 <__pow5mult+0x9c>
 800ada0:	4622      	mov	r2, r4
 800ada2:	4621      	mov	r1, r4
 800ada4:	4638      	mov	r0, r7
 800ada6:	f7ff ff13 	bl	800abd0 <__multiply>
 800adaa:	6020      	str	r0, [r4, #0]
 800adac:	f8c0 9000 	str.w	r9, [r0]
 800adb0:	4604      	mov	r4, r0
 800adb2:	e7e4      	b.n	800ad7e <__pow5mult+0x6a>
 800adb4:	4630      	mov	r0, r6
 800adb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adba:	bf00      	nop
 800adbc:	0800c4d4 	.word	0x0800c4d4
 800adc0:	0800c1c8 	.word	0x0800c1c8
 800adc4:	0800c2ee 	.word	0x0800c2ee

0800adc8 <__lshift>:
 800adc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adcc:	460c      	mov	r4, r1
 800adce:	4607      	mov	r7, r0
 800add0:	4691      	mov	r9, r2
 800add2:	6923      	ldr	r3, [r4, #16]
 800add4:	6849      	ldr	r1, [r1, #4]
 800add6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adda:	68a3      	ldr	r3, [r4, #8]
 800addc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ade0:	f108 0601 	add.w	r6, r8, #1
 800ade4:	42b3      	cmp	r3, r6
 800ade6:	db0b      	blt.n	800ae00 <__lshift+0x38>
 800ade8:	4638      	mov	r0, r7
 800adea:	f7ff fd9d 	bl	800a928 <_Balloc>
 800adee:	4605      	mov	r5, r0
 800adf0:	b948      	cbnz	r0, 800ae06 <__lshift+0x3e>
 800adf2:	4602      	mov	r2, r0
 800adf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800adf8:	4b27      	ldr	r3, [pc, #156]	@ (800ae98 <__lshift+0xd0>)
 800adfa:	4828      	ldr	r0, [pc, #160]	@ (800ae9c <__lshift+0xd4>)
 800adfc:	f7ff f92c 	bl	800a058 <__assert_func>
 800ae00:	3101      	adds	r1, #1
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	e7ee      	b.n	800ade4 <__lshift+0x1c>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f100 0114 	add.w	r1, r0, #20
 800ae0c:	f100 0210 	add.w	r2, r0, #16
 800ae10:	4618      	mov	r0, r3
 800ae12:	4553      	cmp	r3, sl
 800ae14:	db33      	blt.n	800ae7e <__lshift+0xb6>
 800ae16:	6920      	ldr	r0, [r4, #16]
 800ae18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae1c:	f104 0314 	add.w	r3, r4, #20
 800ae20:	f019 091f 	ands.w	r9, r9, #31
 800ae24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae2c:	d02b      	beq.n	800ae86 <__lshift+0xbe>
 800ae2e:	468a      	mov	sl, r1
 800ae30:	2200      	movs	r2, #0
 800ae32:	f1c9 0e20 	rsb	lr, r9, #32
 800ae36:	6818      	ldr	r0, [r3, #0]
 800ae38:	fa00 f009 	lsl.w	r0, r0, r9
 800ae3c:	4310      	orrs	r0, r2
 800ae3e:	f84a 0b04 	str.w	r0, [sl], #4
 800ae42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae46:	459c      	cmp	ip, r3
 800ae48:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae4c:	d8f3      	bhi.n	800ae36 <__lshift+0x6e>
 800ae4e:	ebac 0304 	sub.w	r3, ip, r4
 800ae52:	3b15      	subs	r3, #21
 800ae54:	f023 0303 	bic.w	r3, r3, #3
 800ae58:	3304      	adds	r3, #4
 800ae5a:	f104 0015 	add.w	r0, r4, #21
 800ae5e:	4560      	cmp	r0, ip
 800ae60:	bf88      	it	hi
 800ae62:	2304      	movhi	r3, #4
 800ae64:	50ca      	str	r2, [r1, r3]
 800ae66:	b10a      	cbz	r2, 800ae6c <__lshift+0xa4>
 800ae68:	f108 0602 	add.w	r6, r8, #2
 800ae6c:	3e01      	subs	r6, #1
 800ae6e:	4638      	mov	r0, r7
 800ae70:	4621      	mov	r1, r4
 800ae72:	612e      	str	r6, [r5, #16]
 800ae74:	f7ff fd98 	bl	800a9a8 <_Bfree>
 800ae78:	4628      	mov	r0, r5
 800ae7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae82:	3301      	adds	r3, #1
 800ae84:	e7c5      	b.n	800ae12 <__lshift+0x4a>
 800ae86:	3904      	subs	r1, #4
 800ae88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae8c:	459c      	cmp	ip, r3
 800ae8e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae92:	d8f9      	bhi.n	800ae88 <__lshift+0xc0>
 800ae94:	e7ea      	b.n	800ae6c <__lshift+0xa4>
 800ae96:	bf00      	nop
 800ae98:	0800c27d 	.word	0x0800c27d
 800ae9c:	0800c2ee 	.word	0x0800c2ee

0800aea0 <__mcmp>:
 800aea0:	4603      	mov	r3, r0
 800aea2:	690a      	ldr	r2, [r1, #16]
 800aea4:	6900      	ldr	r0, [r0, #16]
 800aea6:	b530      	push	{r4, r5, lr}
 800aea8:	1a80      	subs	r0, r0, r2
 800aeaa:	d10e      	bne.n	800aeca <__mcmp+0x2a>
 800aeac:	3314      	adds	r3, #20
 800aeae:	3114      	adds	r1, #20
 800aeb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aeb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aeb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aebc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aec0:	4295      	cmp	r5, r2
 800aec2:	d003      	beq.n	800aecc <__mcmp+0x2c>
 800aec4:	d205      	bcs.n	800aed2 <__mcmp+0x32>
 800aec6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeca:	bd30      	pop	{r4, r5, pc}
 800aecc:	42a3      	cmp	r3, r4
 800aece:	d3f3      	bcc.n	800aeb8 <__mcmp+0x18>
 800aed0:	e7fb      	b.n	800aeca <__mcmp+0x2a>
 800aed2:	2001      	movs	r0, #1
 800aed4:	e7f9      	b.n	800aeca <__mcmp+0x2a>
	...

0800aed8 <__mdiff>:
 800aed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	4689      	mov	r9, r1
 800aede:	4606      	mov	r6, r0
 800aee0:	4611      	mov	r1, r2
 800aee2:	4648      	mov	r0, r9
 800aee4:	4614      	mov	r4, r2
 800aee6:	f7ff ffdb 	bl	800aea0 <__mcmp>
 800aeea:	1e05      	subs	r5, r0, #0
 800aeec:	d112      	bne.n	800af14 <__mdiff+0x3c>
 800aeee:	4629      	mov	r1, r5
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7ff fd19 	bl	800a928 <_Balloc>
 800aef6:	4602      	mov	r2, r0
 800aef8:	b928      	cbnz	r0, 800af06 <__mdiff+0x2e>
 800aefa:	f240 2137 	movw	r1, #567	@ 0x237
 800aefe:	4b3e      	ldr	r3, [pc, #248]	@ (800aff8 <__mdiff+0x120>)
 800af00:	483e      	ldr	r0, [pc, #248]	@ (800affc <__mdiff+0x124>)
 800af02:	f7ff f8a9 	bl	800a058 <__assert_func>
 800af06:	2301      	movs	r3, #1
 800af08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af0c:	4610      	mov	r0, r2
 800af0e:	b003      	add	sp, #12
 800af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af14:	bfbc      	itt	lt
 800af16:	464b      	movlt	r3, r9
 800af18:	46a1      	movlt	r9, r4
 800af1a:	4630      	mov	r0, r6
 800af1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af20:	bfba      	itte	lt
 800af22:	461c      	movlt	r4, r3
 800af24:	2501      	movlt	r5, #1
 800af26:	2500      	movge	r5, #0
 800af28:	f7ff fcfe 	bl	800a928 <_Balloc>
 800af2c:	4602      	mov	r2, r0
 800af2e:	b918      	cbnz	r0, 800af38 <__mdiff+0x60>
 800af30:	f240 2145 	movw	r1, #581	@ 0x245
 800af34:	4b30      	ldr	r3, [pc, #192]	@ (800aff8 <__mdiff+0x120>)
 800af36:	e7e3      	b.n	800af00 <__mdiff+0x28>
 800af38:	f100 0b14 	add.w	fp, r0, #20
 800af3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af40:	f109 0310 	add.w	r3, r9, #16
 800af44:	60c5      	str	r5, [r0, #12]
 800af46:	f04f 0c00 	mov.w	ip, #0
 800af4a:	f109 0514 	add.w	r5, r9, #20
 800af4e:	46d9      	mov	r9, fp
 800af50:	6926      	ldr	r6, [r4, #16]
 800af52:	f104 0e14 	add.w	lr, r4, #20
 800af56:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af5a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af66:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af6a:	b281      	uxth	r1, r0
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	fa1f f38a 	uxth.w	r3, sl
 800af72:	1a5b      	subs	r3, r3, r1
 800af74:	0c00      	lsrs	r0, r0, #16
 800af76:	4463      	add	r3, ip
 800af78:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af7c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af80:	b29b      	uxth	r3, r3
 800af82:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af86:	4576      	cmp	r6, lr
 800af88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af8c:	f849 3b04 	str.w	r3, [r9], #4
 800af90:	d8e6      	bhi.n	800af60 <__mdiff+0x88>
 800af92:	1b33      	subs	r3, r6, r4
 800af94:	3b15      	subs	r3, #21
 800af96:	f023 0303 	bic.w	r3, r3, #3
 800af9a:	3415      	adds	r4, #21
 800af9c:	3304      	adds	r3, #4
 800af9e:	42a6      	cmp	r6, r4
 800afa0:	bf38      	it	cc
 800afa2:	2304      	movcc	r3, #4
 800afa4:	441d      	add	r5, r3
 800afa6:	445b      	add	r3, fp
 800afa8:	461e      	mov	r6, r3
 800afaa:	462c      	mov	r4, r5
 800afac:	4544      	cmp	r4, r8
 800afae:	d30e      	bcc.n	800afce <__mdiff+0xf6>
 800afb0:	f108 0103 	add.w	r1, r8, #3
 800afb4:	1b49      	subs	r1, r1, r5
 800afb6:	f021 0103 	bic.w	r1, r1, #3
 800afba:	3d03      	subs	r5, #3
 800afbc:	45a8      	cmp	r8, r5
 800afbe:	bf38      	it	cc
 800afc0:	2100      	movcc	r1, #0
 800afc2:	440b      	add	r3, r1
 800afc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afc8:	b199      	cbz	r1, 800aff2 <__mdiff+0x11a>
 800afca:	6117      	str	r7, [r2, #16]
 800afcc:	e79e      	b.n	800af0c <__mdiff+0x34>
 800afce:	46e6      	mov	lr, ip
 800afd0:	f854 1b04 	ldr.w	r1, [r4], #4
 800afd4:	fa1f fc81 	uxth.w	ip, r1
 800afd8:	44f4      	add	ip, lr
 800afda:	0c08      	lsrs	r0, r1, #16
 800afdc:	4471      	add	r1, lr
 800afde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afe2:	b289      	uxth	r1, r1
 800afe4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afec:	f846 1b04 	str.w	r1, [r6], #4
 800aff0:	e7dc      	b.n	800afac <__mdiff+0xd4>
 800aff2:	3f01      	subs	r7, #1
 800aff4:	e7e6      	b.n	800afc4 <__mdiff+0xec>
 800aff6:	bf00      	nop
 800aff8:	0800c27d 	.word	0x0800c27d
 800affc:	0800c2ee 	.word	0x0800c2ee

0800b000 <__ulp>:
 800b000:	4b0e      	ldr	r3, [pc, #56]	@ (800b03c <__ulp+0x3c>)
 800b002:	400b      	ands	r3, r1
 800b004:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	dc08      	bgt.n	800b01e <__ulp+0x1e>
 800b00c:	425b      	negs	r3, r3
 800b00e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b012:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b016:	da04      	bge.n	800b022 <__ulp+0x22>
 800b018:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b01c:	4113      	asrs	r3, r2
 800b01e:	2200      	movs	r2, #0
 800b020:	e008      	b.n	800b034 <__ulp+0x34>
 800b022:	f1a2 0314 	sub.w	r3, r2, #20
 800b026:	2b1e      	cmp	r3, #30
 800b028:	bfd6      	itet	le
 800b02a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b02e:	2201      	movgt	r2, #1
 800b030:	40da      	lsrle	r2, r3
 800b032:	2300      	movs	r3, #0
 800b034:	4619      	mov	r1, r3
 800b036:	4610      	mov	r0, r2
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	7ff00000 	.word	0x7ff00000

0800b040 <__b2d>:
 800b040:	6902      	ldr	r2, [r0, #16]
 800b042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b044:	f100 0614 	add.w	r6, r0, #20
 800b048:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b04c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b050:	4f1e      	ldr	r7, [pc, #120]	@ (800b0cc <__b2d+0x8c>)
 800b052:	4620      	mov	r0, r4
 800b054:	f7ff fd5a 	bl	800ab0c <__hi0bits>
 800b058:	4603      	mov	r3, r0
 800b05a:	f1c0 0020 	rsb	r0, r0, #32
 800b05e:	2b0a      	cmp	r3, #10
 800b060:	f1a2 0504 	sub.w	r5, r2, #4
 800b064:	6008      	str	r0, [r1, #0]
 800b066:	dc12      	bgt.n	800b08e <__b2d+0x4e>
 800b068:	42ae      	cmp	r6, r5
 800b06a:	bf2c      	ite	cs
 800b06c:	2200      	movcs	r2, #0
 800b06e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b072:	f1c3 0c0b 	rsb	ip, r3, #11
 800b076:	3315      	adds	r3, #21
 800b078:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b07c:	fa04 f303 	lsl.w	r3, r4, r3
 800b080:	fa22 f20c 	lsr.w	r2, r2, ip
 800b084:	ea4e 0107 	orr.w	r1, lr, r7
 800b088:	431a      	orrs	r2, r3
 800b08a:	4610      	mov	r0, r2
 800b08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08e:	42ae      	cmp	r6, r5
 800b090:	bf36      	itet	cc
 800b092:	f1a2 0508 	subcc.w	r5, r2, #8
 800b096:	2200      	movcs	r2, #0
 800b098:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b09c:	3b0b      	subs	r3, #11
 800b09e:	d012      	beq.n	800b0c6 <__b2d+0x86>
 800b0a0:	f1c3 0720 	rsb	r7, r3, #32
 800b0a4:	fa22 f107 	lsr.w	r1, r2, r7
 800b0a8:	409c      	lsls	r4, r3
 800b0aa:	430c      	orrs	r4, r1
 800b0ac:	42b5      	cmp	r5, r6
 800b0ae:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b0b2:	bf94      	ite	ls
 800b0b4:	2400      	movls	r4, #0
 800b0b6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b0ba:	409a      	lsls	r2, r3
 800b0bc:	40fc      	lsrs	r4, r7
 800b0be:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b0c2:	4322      	orrs	r2, r4
 800b0c4:	e7e1      	b.n	800b08a <__b2d+0x4a>
 800b0c6:	ea44 0107 	orr.w	r1, r4, r7
 800b0ca:	e7de      	b.n	800b08a <__b2d+0x4a>
 800b0cc:	3ff00000 	.word	0x3ff00000

0800b0d0 <__d2b>:
 800b0d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	4690      	mov	r8, r2
 800b0d8:	4699      	mov	r9, r3
 800b0da:	9e08      	ldr	r6, [sp, #32]
 800b0dc:	f7ff fc24 	bl	800a928 <_Balloc>
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	b930      	cbnz	r0, 800b0f2 <__d2b+0x22>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	f240 310f 	movw	r1, #783	@ 0x30f
 800b0ea:	4b23      	ldr	r3, [pc, #140]	@ (800b178 <__d2b+0xa8>)
 800b0ec:	4823      	ldr	r0, [pc, #140]	@ (800b17c <__d2b+0xac>)
 800b0ee:	f7fe ffb3 	bl	800a058 <__assert_func>
 800b0f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0fa:	b10d      	cbz	r5, 800b100 <__d2b+0x30>
 800b0fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	f1b8 0300 	subs.w	r3, r8, #0
 800b106:	d024      	beq.n	800b152 <__d2b+0x82>
 800b108:	4668      	mov	r0, sp
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	f7ff fd1d 	bl	800ab4a <__lo0bits>
 800b110:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b114:	b1d8      	cbz	r0, 800b14e <__d2b+0x7e>
 800b116:	f1c0 0320 	rsb	r3, r0, #32
 800b11a:	fa02 f303 	lsl.w	r3, r2, r3
 800b11e:	430b      	orrs	r3, r1
 800b120:	40c2      	lsrs	r2, r0
 800b122:	6163      	str	r3, [r4, #20]
 800b124:	9201      	str	r2, [sp, #4]
 800b126:	9b01      	ldr	r3, [sp, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bf0c      	ite	eq
 800b12c:	2201      	moveq	r2, #1
 800b12e:	2202      	movne	r2, #2
 800b130:	61a3      	str	r3, [r4, #24]
 800b132:	6122      	str	r2, [r4, #16]
 800b134:	b1ad      	cbz	r5, 800b162 <__d2b+0x92>
 800b136:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b13a:	4405      	add	r5, r0
 800b13c:	6035      	str	r5, [r6, #0]
 800b13e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b144:	6018      	str	r0, [r3, #0]
 800b146:	4620      	mov	r0, r4
 800b148:	b002      	add	sp, #8
 800b14a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b14e:	6161      	str	r1, [r4, #20]
 800b150:	e7e9      	b.n	800b126 <__d2b+0x56>
 800b152:	a801      	add	r0, sp, #4
 800b154:	f7ff fcf9 	bl	800ab4a <__lo0bits>
 800b158:	9b01      	ldr	r3, [sp, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	6163      	str	r3, [r4, #20]
 800b15e:	3020      	adds	r0, #32
 800b160:	e7e7      	b.n	800b132 <__d2b+0x62>
 800b162:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b166:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b16a:	6030      	str	r0, [r6, #0]
 800b16c:	6918      	ldr	r0, [r3, #16]
 800b16e:	f7ff fccd 	bl	800ab0c <__hi0bits>
 800b172:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b176:	e7e4      	b.n	800b142 <__d2b+0x72>
 800b178:	0800c27d 	.word	0x0800c27d
 800b17c:	0800c2ee 	.word	0x0800c2ee

0800b180 <__ratio>:
 800b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b184:	b085      	sub	sp, #20
 800b186:	e9cd 1000 	strd	r1, r0, [sp]
 800b18a:	a902      	add	r1, sp, #8
 800b18c:	f7ff ff58 	bl	800b040 <__b2d>
 800b190:	468b      	mov	fp, r1
 800b192:	4606      	mov	r6, r0
 800b194:	460f      	mov	r7, r1
 800b196:	9800      	ldr	r0, [sp, #0]
 800b198:	a903      	add	r1, sp, #12
 800b19a:	f7ff ff51 	bl	800b040 <__b2d>
 800b19e:	460d      	mov	r5, r1
 800b1a0:	9b01      	ldr	r3, [sp, #4]
 800b1a2:	4689      	mov	r9, r1
 800b1a4:	6919      	ldr	r1, [r3, #16]
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	1ac9      	subs	r1, r1, r3
 800b1b0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b1b4:	1a9b      	subs	r3, r3, r2
 800b1b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfcd      	iteet	gt
 800b1be:	463a      	movgt	r2, r7
 800b1c0:	462a      	movle	r2, r5
 800b1c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1c6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b1ca:	bfd8      	it	le
 800b1cc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b1d0:	464b      	mov	r3, r9
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	4659      	mov	r1, fp
 800b1d6:	f7f5 faa9 	bl	800072c <__aeabi_ddiv>
 800b1da:	b005      	add	sp, #20
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1e0 <__copybits>:
 800b1e0:	3901      	subs	r1, #1
 800b1e2:	b570      	push	{r4, r5, r6, lr}
 800b1e4:	1149      	asrs	r1, r1, #5
 800b1e6:	6914      	ldr	r4, [r2, #16]
 800b1e8:	3101      	adds	r1, #1
 800b1ea:	f102 0314 	add.w	r3, r2, #20
 800b1ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1f6:	1f05      	subs	r5, r0, #4
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d30c      	bcc.n	800b216 <__copybits+0x36>
 800b1fc:	1aa3      	subs	r3, r4, r2
 800b1fe:	3b11      	subs	r3, #17
 800b200:	f023 0303 	bic.w	r3, r3, #3
 800b204:	3211      	adds	r2, #17
 800b206:	42a2      	cmp	r2, r4
 800b208:	bf88      	it	hi
 800b20a:	2300      	movhi	r3, #0
 800b20c:	4418      	add	r0, r3
 800b20e:	2300      	movs	r3, #0
 800b210:	4288      	cmp	r0, r1
 800b212:	d305      	bcc.n	800b220 <__copybits+0x40>
 800b214:	bd70      	pop	{r4, r5, r6, pc}
 800b216:	f853 6b04 	ldr.w	r6, [r3], #4
 800b21a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b21e:	e7eb      	b.n	800b1f8 <__copybits+0x18>
 800b220:	f840 3b04 	str.w	r3, [r0], #4
 800b224:	e7f4      	b.n	800b210 <__copybits+0x30>

0800b226 <__any_on>:
 800b226:	f100 0214 	add.w	r2, r0, #20
 800b22a:	6900      	ldr	r0, [r0, #16]
 800b22c:	114b      	asrs	r3, r1, #5
 800b22e:	4298      	cmp	r0, r3
 800b230:	b510      	push	{r4, lr}
 800b232:	db11      	blt.n	800b258 <__any_on+0x32>
 800b234:	dd0a      	ble.n	800b24c <__any_on+0x26>
 800b236:	f011 011f 	ands.w	r1, r1, #31
 800b23a:	d007      	beq.n	800b24c <__any_on+0x26>
 800b23c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b240:	fa24 f001 	lsr.w	r0, r4, r1
 800b244:	fa00 f101 	lsl.w	r1, r0, r1
 800b248:	428c      	cmp	r4, r1
 800b24a:	d10b      	bne.n	800b264 <__any_on+0x3e>
 800b24c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b250:	4293      	cmp	r3, r2
 800b252:	d803      	bhi.n	800b25c <__any_on+0x36>
 800b254:	2000      	movs	r0, #0
 800b256:	bd10      	pop	{r4, pc}
 800b258:	4603      	mov	r3, r0
 800b25a:	e7f7      	b.n	800b24c <__any_on+0x26>
 800b25c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b260:	2900      	cmp	r1, #0
 800b262:	d0f5      	beq.n	800b250 <__any_on+0x2a>
 800b264:	2001      	movs	r0, #1
 800b266:	e7f6      	b.n	800b256 <__any_on+0x30>

0800b268 <__ascii_wctomb>:
 800b268:	4603      	mov	r3, r0
 800b26a:	4608      	mov	r0, r1
 800b26c:	b141      	cbz	r1, 800b280 <__ascii_wctomb+0x18>
 800b26e:	2aff      	cmp	r2, #255	@ 0xff
 800b270:	d904      	bls.n	800b27c <__ascii_wctomb+0x14>
 800b272:	228a      	movs	r2, #138	@ 0x8a
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	601a      	str	r2, [r3, #0]
 800b27a:	4770      	bx	lr
 800b27c:	2001      	movs	r0, #1
 800b27e:	700a      	strb	r2, [r1, #0]
 800b280:	4770      	bx	lr

0800b282 <__ssputs_r>:
 800b282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b286:	461f      	mov	r7, r3
 800b288:	688e      	ldr	r6, [r1, #8]
 800b28a:	4682      	mov	sl, r0
 800b28c:	42be      	cmp	r6, r7
 800b28e:	460c      	mov	r4, r1
 800b290:	4690      	mov	r8, r2
 800b292:	680b      	ldr	r3, [r1, #0]
 800b294:	d82d      	bhi.n	800b2f2 <__ssputs_r+0x70>
 800b296:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b29a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b29e:	d026      	beq.n	800b2ee <__ssputs_r+0x6c>
 800b2a0:	6965      	ldr	r5, [r4, #20]
 800b2a2:	6909      	ldr	r1, [r1, #16]
 800b2a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2a8:	eba3 0901 	sub.w	r9, r3, r1
 800b2ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2b0:	1c7b      	adds	r3, r7, #1
 800b2b2:	444b      	add	r3, r9
 800b2b4:	106d      	asrs	r5, r5, #1
 800b2b6:	429d      	cmp	r5, r3
 800b2b8:	bf38      	it	cc
 800b2ba:	461d      	movcc	r5, r3
 800b2bc:	0553      	lsls	r3, r2, #21
 800b2be:	d527      	bpl.n	800b310 <__ssputs_r+0x8e>
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f7ff fa93 	bl	800a7ec <_malloc_r>
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	b360      	cbz	r0, 800b324 <__ssputs_r+0xa2>
 800b2ca:	464a      	mov	r2, r9
 800b2cc:	6921      	ldr	r1, [r4, #16]
 800b2ce:	f7fe feae 	bl	800a02e <memcpy>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	6126      	str	r6, [r4, #16]
 800b2e0:	444e      	add	r6, r9
 800b2e2:	6026      	str	r6, [r4, #0]
 800b2e4:	463e      	mov	r6, r7
 800b2e6:	6165      	str	r5, [r4, #20]
 800b2e8:	eba5 0509 	sub.w	r5, r5, r9
 800b2ec:	60a5      	str	r5, [r4, #8]
 800b2ee:	42be      	cmp	r6, r7
 800b2f0:	d900      	bls.n	800b2f4 <__ssputs_r+0x72>
 800b2f2:	463e      	mov	r6, r7
 800b2f4:	4632      	mov	r2, r6
 800b2f6:	4641      	mov	r1, r8
 800b2f8:	6820      	ldr	r0, [r4, #0]
 800b2fa:	f000 fb63 	bl	800b9c4 <memmove>
 800b2fe:	2000      	movs	r0, #0
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	1b9b      	subs	r3, r3, r6
 800b304:	60a3      	str	r3, [r4, #8]
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	4433      	add	r3, r6
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b310:	462a      	mov	r2, r5
 800b312:	f000 fbaa 	bl	800ba6a <_realloc_r>
 800b316:	4606      	mov	r6, r0
 800b318:	2800      	cmp	r0, #0
 800b31a:	d1e0      	bne.n	800b2de <__ssputs_r+0x5c>
 800b31c:	4650      	mov	r0, sl
 800b31e:	6921      	ldr	r1, [r4, #16]
 800b320:	f7fe feb8 	bl	800a094 <_free_r>
 800b324:	230c      	movs	r3, #12
 800b326:	f8ca 3000 	str.w	r3, [sl]
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295
 800b330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b334:	81a3      	strh	r3, [r4, #12]
 800b336:	e7e9      	b.n	800b30c <__ssputs_r+0x8a>

0800b338 <_svfiprintf_r>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	4698      	mov	r8, r3
 800b33e:	898b      	ldrh	r3, [r1, #12]
 800b340:	4607      	mov	r7, r0
 800b342:	061b      	lsls	r3, r3, #24
 800b344:	460d      	mov	r5, r1
 800b346:	4614      	mov	r4, r2
 800b348:	b09d      	sub	sp, #116	@ 0x74
 800b34a:	d510      	bpl.n	800b36e <_svfiprintf_r+0x36>
 800b34c:	690b      	ldr	r3, [r1, #16]
 800b34e:	b973      	cbnz	r3, 800b36e <_svfiprintf_r+0x36>
 800b350:	2140      	movs	r1, #64	@ 0x40
 800b352:	f7ff fa4b 	bl	800a7ec <_malloc_r>
 800b356:	6028      	str	r0, [r5, #0]
 800b358:	6128      	str	r0, [r5, #16]
 800b35a:	b930      	cbnz	r0, 800b36a <_svfiprintf_r+0x32>
 800b35c:	230c      	movs	r3, #12
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	f04f 30ff 	mov.w	r0, #4294967295
 800b364:	b01d      	add	sp, #116	@ 0x74
 800b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36a:	2340      	movs	r3, #64	@ 0x40
 800b36c:	616b      	str	r3, [r5, #20]
 800b36e:	2300      	movs	r3, #0
 800b370:	9309      	str	r3, [sp, #36]	@ 0x24
 800b372:	2320      	movs	r3, #32
 800b374:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b378:	2330      	movs	r3, #48	@ 0x30
 800b37a:	f04f 0901 	mov.w	r9, #1
 800b37e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b382:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b51c <_svfiprintf_r+0x1e4>
 800b386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b38a:	4623      	mov	r3, r4
 800b38c:	469a      	mov	sl, r3
 800b38e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b392:	b10a      	cbz	r2, 800b398 <_svfiprintf_r+0x60>
 800b394:	2a25      	cmp	r2, #37	@ 0x25
 800b396:	d1f9      	bne.n	800b38c <_svfiprintf_r+0x54>
 800b398:	ebba 0b04 	subs.w	fp, sl, r4
 800b39c:	d00b      	beq.n	800b3b6 <_svfiprintf_r+0x7e>
 800b39e:	465b      	mov	r3, fp
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f7ff ff6c 	bl	800b282 <__ssputs_r>
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f000 80a7 	beq.w	800b4fe <_svfiprintf_r+0x1c6>
 800b3b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3b2:	445a      	add	r2, fp
 800b3b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 809f 	beq.w	800b4fe <_svfiprintf_r+0x1c6>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ca:	f10a 0a01 	add.w	sl, sl, #1
 800b3ce:	9304      	str	r3, [sp, #16]
 800b3d0:	9307      	str	r3, [sp, #28]
 800b3d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3d8:	4654      	mov	r4, sl
 800b3da:	2205      	movs	r2, #5
 800b3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e0:	484e      	ldr	r0, [pc, #312]	@ (800b51c <_svfiprintf_r+0x1e4>)
 800b3e2:	f000 fb19 	bl	800ba18 <memchr>
 800b3e6:	9a04      	ldr	r2, [sp, #16]
 800b3e8:	b9d8      	cbnz	r0, 800b422 <_svfiprintf_r+0xea>
 800b3ea:	06d0      	lsls	r0, r2, #27
 800b3ec:	bf44      	itt	mi
 800b3ee:	2320      	movmi	r3, #32
 800b3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3f4:	0711      	lsls	r1, r2, #28
 800b3f6:	bf44      	itt	mi
 800b3f8:	232b      	movmi	r3, #43	@ 0x2b
 800b3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b402:	2b2a      	cmp	r3, #42	@ 0x2a
 800b404:	d015      	beq.n	800b432 <_svfiprintf_r+0xfa>
 800b406:	4654      	mov	r4, sl
 800b408:	2000      	movs	r0, #0
 800b40a:	f04f 0c0a 	mov.w	ip, #10
 800b40e:	9a07      	ldr	r2, [sp, #28]
 800b410:	4621      	mov	r1, r4
 800b412:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b416:	3b30      	subs	r3, #48	@ 0x30
 800b418:	2b09      	cmp	r3, #9
 800b41a:	d94b      	bls.n	800b4b4 <_svfiprintf_r+0x17c>
 800b41c:	b1b0      	cbz	r0, 800b44c <_svfiprintf_r+0x114>
 800b41e:	9207      	str	r2, [sp, #28]
 800b420:	e014      	b.n	800b44c <_svfiprintf_r+0x114>
 800b422:	eba0 0308 	sub.w	r3, r0, r8
 800b426:	fa09 f303 	lsl.w	r3, r9, r3
 800b42a:	4313      	orrs	r3, r2
 800b42c:	46a2      	mov	sl, r4
 800b42e:	9304      	str	r3, [sp, #16]
 800b430:	e7d2      	b.n	800b3d8 <_svfiprintf_r+0xa0>
 800b432:	9b03      	ldr	r3, [sp, #12]
 800b434:	1d19      	adds	r1, r3, #4
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	9103      	str	r1, [sp, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	bfbb      	ittet	lt
 800b43e:	425b      	neglt	r3, r3
 800b440:	f042 0202 	orrlt.w	r2, r2, #2
 800b444:	9307      	strge	r3, [sp, #28]
 800b446:	9307      	strlt	r3, [sp, #28]
 800b448:	bfb8      	it	lt
 800b44a:	9204      	strlt	r2, [sp, #16]
 800b44c:	7823      	ldrb	r3, [r4, #0]
 800b44e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b450:	d10a      	bne.n	800b468 <_svfiprintf_r+0x130>
 800b452:	7863      	ldrb	r3, [r4, #1]
 800b454:	2b2a      	cmp	r3, #42	@ 0x2a
 800b456:	d132      	bne.n	800b4be <_svfiprintf_r+0x186>
 800b458:	9b03      	ldr	r3, [sp, #12]
 800b45a:	3402      	adds	r4, #2
 800b45c:	1d1a      	adds	r2, r3, #4
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	9203      	str	r2, [sp, #12]
 800b462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b466:	9305      	str	r3, [sp, #20]
 800b468:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b520 <_svfiprintf_r+0x1e8>
 800b46c:	2203      	movs	r2, #3
 800b46e:	4650      	mov	r0, sl
 800b470:	7821      	ldrb	r1, [r4, #0]
 800b472:	f000 fad1 	bl	800ba18 <memchr>
 800b476:	b138      	cbz	r0, 800b488 <_svfiprintf_r+0x150>
 800b478:	2240      	movs	r2, #64	@ 0x40
 800b47a:	9b04      	ldr	r3, [sp, #16]
 800b47c:	eba0 000a 	sub.w	r0, r0, sl
 800b480:	4082      	lsls	r2, r0
 800b482:	4313      	orrs	r3, r2
 800b484:	3401      	adds	r4, #1
 800b486:	9304      	str	r3, [sp, #16]
 800b488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b48c:	2206      	movs	r2, #6
 800b48e:	4825      	ldr	r0, [pc, #148]	@ (800b524 <_svfiprintf_r+0x1ec>)
 800b490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b494:	f000 fac0 	bl	800ba18 <memchr>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d036      	beq.n	800b50a <_svfiprintf_r+0x1d2>
 800b49c:	4b22      	ldr	r3, [pc, #136]	@ (800b528 <_svfiprintf_r+0x1f0>)
 800b49e:	bb1b      	cbnz	r3, 800b4e8 <_svfiprintf_r+0x1b0>
 800b4a0:	9b03      	ldr	r3, [sp, #12]
 800b4a2:	3307      	adds	r3, #7
 800b4a4:	f023 0307 	bic.w	r3, r3, #7
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	9303      	str	r3, [sp, #12]
 800b4ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ae:	4433      	add	r3, r6
 800b4b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4b2:	e76a      	b.n	800b38a <_svfiprintf_r+0x52>
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4bc:	e7a8      	b.n	800b410 <_svfiprintf_r+0xd8>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f04f 0c0a 	mov.w	ip, #10
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	3401      	adds	r4, #1
 800b4c8:	9305      	str	r3, [sp, #20]
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4d0:	3a30      	subs	r2, #48	@ 0x30
 800b4d2:	2a09      	cmp	r2, #9
 800b4d4:	d903      	bls.n	800b4de <_svfiprintf_r+0x1a6>
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d0c6      	beq.n	800b468 <_svfiprintf_r+0x130>
 800b4da:	9105      	str	r1, [sp, #20]
 800b4dc:	e7c4      	b.n	800b468 <_svfiprintf_r+0x130>
 800b4de:	4604      	mov	r4, r0
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4e6:	e7f0      	b.n	800b4ca <_svfiprintf_r+0x192>
 800b4e8:	ab03      	add	r3, sp, #12
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	462a      	mov	r2, r5
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b52c <_svfiprintf_r+0x1f4>)
 800b4f2:	a904      	add	r1, sp, #16
 800b4f4:	f3af 8000 	nop.w
 800b4f8:	1c42      	adds	r2, r0, #1
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	d1d6      	bne.n	800b4ac <_svfiprintf_r+0x174>
 800b4fe:	89ab      	ldrh	r3, [r5, #12]
 800b500:	065b      	lsls	r3, r3, #25
 800b502:	f53f af2d 	bmi.w	800b360 <_svfiprintf_r+0x28>
 800b506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b508:	e72c      	b.n	800b364 <_svfiprintf_r+0x2c>
 800b50a:	ab03      	add	r3, sp, #12
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	462a      	mov	r2, r5
 800b510:	4638      	mov	r0, r7
 800b512:	4b06      	ldr	r3, [pc, #24]	@ (800b52c <_svfiprintf_r+0x1f4>)
 800b514:	a904      	add	r1, sp, #16
 800b516:	f000 f87d 	bl	800b614 <_printf_i>
 800b51a:	e7ed      	b.n	800b4f8 <_svfiprintf_r+0x1c0>
 800b51c:	0800c347 	.word	0x0800c347
 800b520:	0800c34d 	.word	0x0800c34d
 800b524:	0800c351 	.word	0x0800c351
 800b528:	00000000 	.word	0x00000000
 800b52c:	0800b283 	.word	0x0800b283

0800b530 <_printf_common>:
 800b530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b534:	4616      	mov	r6, r2
 800b536:	4698      	mov	r8, r3
 800b538:	688a      	ldr	r2, [r1, #8]
 800b53a:	690b      	ldr	r3, [r1, #16]
 800b53c:	4607      	mov	r7, r0
 800b53e:	4293      	cmp	r3, r2
 800b540:	bfb8      	it	lt
 800b542:	4613      	movlt	r3, r2
 800b544:	6033      	str	r3, [r6, #0]
 800b546:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b54a:	460c      	mov	r4, r1
 800b54c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b550:	b10a      	cbz	r2, 800b556 <_printf_common+0x26>
 800b552:	3301      	adds	r3, #1
 800b554:	6033      	str	r3, [r6, #0]
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	0699      	lsls	r1, r3, #26
 800b55a:	bf42      	ittt	mi
 800b55c:	6833      	ldrmi	r3, [r6, #0]
 800b55e:	3302      	addmi	r3, #2
 800b560:	6033      	strmi	r3, [r6, #0]
 800b562:	6825      	ldr	r5, [r4, #0]
 800b564:	f015 0506 	ands.w	r5, r5, #6
 800b568:	d106      	bne.n	800b578 <_printf_common+0x48>
 800b56a:	f104 0a19 	add.w	sl, r4, #25
 800b56e:	68e3      	ldr	r3, [r4, #12]
 800b570:	6832      	ldr	r2, [r6, #0]
 800b572:	1a9b      	subs	r3, r3, r2
 800b574:	42ab      	cmp	r3, r5
 800b576:	dc2b      	bgt.n	800b5d0 <_printf_common+0xa0>
 800b578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b57c:	6822      	ldr	r2, [r4, #0]
 800b57e:	3b00      	subs	r3, #0
 800b580:	bf18      	it	ne
 800b582:	2301      	movne	r3, #1
 800b584:	0692      	lsls	r2, r2, #26
 800b586:	d430      	bmi.n	800b5ea <_printf_common+0xba>
 800b588:	4641      	mov	r1, r8
 800b58a:	4638      	mov	r0, r7
 800b58c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b590:	47c8      	blx	r9
 800b592:	3001      	adds	r0, #1
 800b594:	d023      	beq.n	800b5de <_printf_common+0xae>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	6922      	ldr	r2, [r4, #16]
 800b59a:	f003 0306 	and.w	r3, r3, #6
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	bf14      	ite	ne
 800b5a2:	2500      	movne	r5, #0
 800b5a4:	6833      	ldreq	r3, [r6, #0]
 800b5a6:	f04f 0600 	mov.w	r6, #0
 800b5aa:	bf08      	it	eq
 800b5ac:	68e5      	ldreq	r5, [r4, #12]
 800b5ae:	f104 041a 	add.w	r4, r4, #26
 800b5b2:	bf08      	it	eq
 800b5b4:	1aed      	subeq	r5, r5, r3
 800b5b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b5ba:	bf08      	it	eq
 800b5bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	bfc4      	itt	gt
 800b5c4:	1a9b      	subgt	r3, r3, r2
 800b5c6:	18ed      	addgt	r5, r5, r3
 800b5c8:	42b5      	cmp	r5, r6
 800b5ca:	d11a      	bne.n	800b602 <_printf_common+0xd2>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	e008      	b.n	800b5e2 <_printf_common+0xb2>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4652      	mov	r2, sl
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	47c8      	blx	r9
 800b5da:	3001      	adds	r0, #1
 800b5dc:	d103      	bne.n	800b5e6 <_printf_common+0xb6>
 800b5de:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e6:	3501      	adds	r5, #1
 800b5e8:	e7c1      	b.n	800b56e <_printf_common+0x3e>
 800b5ea:	2030      	movs	r0, #48	@ 0x30
 800b5ec:	18e1      	adds	r1, r4, r3
 800b5ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5f8:	4422      	add	r2, r4
 800b5fa:	3302      	adds	r3, #2
 800b5fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b600:	e7c2      	b.n	800b588 <_printf_common+0x58>
 800b602:	2301      	movs	r3, #1
 800b604:	4622      	mov	r2, r4
 800b606:	4641      	mov	r1, r8
 800b608:	4638      	mov	r0, r7
 800b60a:	47c8      	blx	r9
 800b60c:	3001      	adds	r0, #1
 800b60e:	d0e6      	beq.n	800b5de <_printf_common+0xae>
 800b610:	3601      	adds	r6, #1
 800b612:	e7d9      	b.n	800b5c8 <_printf_common+0x98>

0800b614 <_printf_i>:
 800b614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b618:	7e0f      	ldrb	r7, [r1, #24]
 800b61a:	4691      	mov	r9, r2
 800b61c:	2f78      	cmp	r7, #120	@ 0x78
 800b61e:	4680      	mov	r8, r0
 800b620:	460c      	mov	r4, r1
 800b622:	469a      	mov	sl, r3
 800b624:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b62a:	d807      	bhi.n	800b63c <_printf_i+0x28>
 800b62c:	2f62      	cmp	r7, #98	@ 0x62
 800b62e:	d80a      	bhi.n	800b646 <_printf_i+0x32>
 800b630:	2f00      	cmp	r7, #0
 800b632:	f000 80d1 	beq.w	800b7d8 <_printf_i+0x1c4>
 800b636:	2f58      	cmp	r7, #88	@ 0x58
 800b638:	f000 80b8 	beq.w	800b7ac <_printf_i+0x198>
 800b63c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b644:	e03a      	b.n	800b6bc <_printf_i+0xa8>
 800b646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b64a:	2b15      	cmp	r3, #21
 800b64c:	d8f6      	bhi.n	800b63c <_printf_i+0x28>
 800b64e:	a101      	add	r1, pc, #4	@ (adr r1, 800b654 <_printf_i+0x40>)
 800b650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b654:	0800b6ad 	.word	0x0800b6ad
 800b658:	0800b6c1 	.word	0x0800b6c1
 800b65c:	0800b63d 	.word	0x0800b63d
 800b660:	0800b63d 	.word	0x0800b63d
 800b664:	0800b63d 	.word	0x0800b63d
 800b668:	0800b63d 	.word	0x0800b63d
 800b66c:	0800b6c1 	.word	0x0800b6c1
 800b670:	0800b63d 	.word	0x0800b63d
 800b674:	0800b63d 	.word	0x0800b63d
 800b678:	0800b63d 	.word	0x0800b63d
 800b67c:	0800b63d 	.word	0x0800b63d
 800b680:	0800b7bf 	.word	0x0800b7bf
 800b684:	0800b6eb 	.word	0x0800b6eb
 800b688:	0800b779 	.word	0x0800b779
 800b68c:	0800b63d 	.word	0x0800b63d
 800b690:	0800b63d 	.word	0x0800b63d
 800b694:	0800b7e1 	.word	0x0800b7e1
 800b698:	0800b63d 	.word	0x0800b63d
 800b69c:	0800b6eb 	.word	0x0800b6eb
 800b6a0:	0800b63d 	.word	0x0800b63d
 800b6a4:	0800b63d 	.word	0x0800b63d
 800b6a8:	0800b781 	.word	0x0800b781
 800b6ac:	6833      	ldr	r3, [r6, #0]
 800b6ae:	1d1a      	adds	r2, r3, #4
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6032      	str	r2, [r6, #0]
 800b6b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e09c      	b.n	800b7fa <_printf_i+0x1e6>
 800b6c0:	6833      	ldr	r3, [r6, #0]
 800b6c2:	6820      	ldr	r0, [r4, #0]
 800b6c4:	1d19      	adds	r1, r3, #4
 800b6c6:	6031      	str	r1, [r6, #0]
 800b6c8:	0606      	lsls	r6, r0, #24
 800b6ca:	d501      	bpl.n	800b6d0 <_printf_i+0xbc>
 800b6cc:	681d      	ldr	r5, [r3, #0]
 800b6ce:	e003      	b.n	800b6d8 <_printf_i+0xc4>
 800b6d0:	0645      	lsls	r5, r0, #25
 800b6d2:	d5fb      	bpl.n	800b6cc <_printf_i+0xb8>
 800b6d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6d8:	2d00      	cmp	r5, #0
 800b6da:	da03      	bge.n	800b6e4 <_printf_i+0xd0>
 800b6dc:	232d      	movs	r3, #45	@ 0x2d
 800b6de:	426d      	negs	r5, r5
 800b6e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6e4:	230a      	movs	r3, #10
 800b6e6:	4858      	ldr	r0, [pc, #352]	@ (800b848 <_printf_i+0x234>)
 800b6e8:	e011      	b.n	800b70e <_printf_i+0xfa>
 800b6ea:	6821      	ldr	r1, [r4, #0]
 800b6ec:	6833      	ldr	r3, [r6, #0]
 800b6ee:	0608      	lsls	r0, r1, #24
 800b6f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6f4:	d402      	bmi.n	800b6fc <_printf_i+0xe8>
 800b6f6:	0649      	lsls	r1, r1, #25
 800b6f8:	bf48      	it	mi
 800b6fa:	b2ad      	uxthmi	r5, r5
 800b6fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6fe:	6033      	str	r3, [r6, #0]
 800b700:	bf14      	ite	ne
 800b702:	230a      	movne	r3, #10
 800b704:	2308      	moveq	r3, #8
 800b706:	4850      	ldr	r0, [pc, #320]	@ (800b848 <_printf_i+0x234>)
 800b708:	2100      	movs	r1, #0
 800b70a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b70e:	6866      	ldr	r6, [r4, #4]
 800b710:	2e00      	cmp	r6, #0
 800b712:	60a6      	str	r6, [r4, #8]
 800b714:	db05      	blt.n	800b722 <_printf_i+0x10e>
 800b716:	6821      	ldr	r1, [r4, #0]
 800b718:	432e      	orrs	r6, r5
 800b71a:	f021 0104 	bic.w	r1, r1, #4
 800b71e:	6021      	str	r1, [r4, #0]
 800b720:	d04b      	beq.n	800b7ba <_printf_i+0x1a6>
 800b722:	4616      	mov	r6, r2
 800b724:	fbb5 f1f3 	udiv	r1, r5, r3
 800b728:	fb03 5711 	mls	r7, r3, r1, r5
 800b72c:	5dc7      	ldrb	r7, [r0, r7]
 800b72e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b732:	462f      	mov	r7, r5
 800b734:	42bb      	cmp	r3, r7
 800b736:	460d      	mov	r5, r1
 800b738:	d9f4      	bls.n	800b724 <_printf_i+0x110>
 800b73a:	2b08      	cmp	r3, #8
 800b73c:	d10b      	bne.n	800b756 <_printf_i+0x142>
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	07df      	lsls	r7, r3, #31
 800b742:	d508      	bpl.n	800b756 <_printf_i+0x142>
 800b744:	6923      	ldr	r3, [r4, #16]
 800b746:	6861      	ldr	r1, [r4, #4]
 800b748:	4299      	cmp	r1, r3
 800b74a:	bfde      	ittt	le
 800b74c:	2330      	movle	r3, #48	@ 0x30
 800b74e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b752:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b756:	1b92      	subs	r2, r2, r6
 800b758:	6122      	str	r2, [r4, #16]
 800b75a:	464b      	mov	r3, r9
 800b75c:	4621      	mov	r1, r4
 800b75e:	4640      	mov	r0, r8
 800b760:	f8cd a000 	str.w	sl, [sp]
 800b764:	aa03      	add	r2, sp, #12
 800b766:	f7ff fee3 	bl	800b530 <_printf_common>
 800b76a:	3001      	adds	r0, #1
 800b76c:	d14a      	bne.n	800b804 <_printf_i+0x1f0>
 800b76e:	f04f 30ff 	mov.w	r0, #4294967295
 800b772:	b004      	add	sp, #16
 800b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	f043 0320 	orr.w	r3, r3, #32
 800b77e:	6023      	str	r3, [r4, #0]
 800b780:	2778      	movs	r7, #120	@ 0x78
 800b782:	4832      	ldr	r0, [pc, #200]	@ (800b84c <_printf_i+0x238>)
 800b784:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	6831      	ldr	r1, [r6, #0]
 800b78c:	061f      	lsls	r7, r3, #24
 800b78e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b792:	d402      	bmi.n	800b79a <_printf_i+0x186>
 800b794:	065f      	lsls	r7, r3, #25
 800b796:	bf48      	it	mi
 800b798:	b2ad      	uxthmi	r5, r5
 800b79a:	6031      	str	r1, [r6, #0]
 800b79c:	07d9      	lsls	r1, r3, #31
 800b79e:	bf44      	itt	mi
 800b7a0:	f043 0320 	orrmi.w	r3, r3, #32
 800b7a4:	6023      	strmi	r3, [r4, #0]
 800b7a6:	b11d      	cbz	r5, 800b7b0 <_printf_i+0x19c>
 800b7a8:	2310      	movs	r3, #16
 800b7aa:	e7ad      	b.n	800b708 <_printf_i+0xf4>
 800b7ac:	4826      	ldr	r0, [pc, #152]	@ (800b848 <_printf_i+0x234>)
 800b7ae:	e7e9      	b.n	800b784 <_printf_i+0x170>
 800b7b0:	6823      	ldr	r3, [r4, #0]
 800b7b2:	f023 0320 	bic.w	r3, r3, #32
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	e7f6      	b.n	800b7a8 <_printf_i+0x194>
 800b7ba:	4616      	mov	r6, r2
 800b7bc:	e7bd      	b.n	800b73a <_printf_i+0x126>
 800b7be:	6833      	ldr	r3, [r6, #0]
 800b7c0:	6825      	ldr	r5, [r4, #0]
 800b7c2:	1d18      	adds	r0, r3, #4
 800b7c4:	6961      	ldr	r1, [r4, #20]
 800b7c6:	6030      	str	r0, [r6, #0]
 800b7c8:	062e      	lsls	r6, r5, #24
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	d501      	bpl.n	800b7d2 <_printf_i+0x1be>
 800b7ce:	6019      	str	r1, [r3, #0]
 800b7d0:	e002      	b.n	800b7d8 <_printf_i+0x1c4>
 800b7d2:	0668      	lsls	r0, r5, #25
 800b7d4:	d5fb      	bpl.n	800b7ce <_printf_i+0x1ba>
 800b7d6:	8019      	strh	r1, [r3, #0]
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4616      	mov	r6, r2
 800b7dc:	6123      	str	r3, [r4, #16]
 800b7de:	e7bc      	b.n	800b75a <_printf_i+0x146>
 800b7e0:	6833      	ldr	r3, [r6, #0]
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	1d1a      	adds	r2, r3, #4
 800b7e6:	6032      	str	r2, [r6, #0]
 800b7e8:	681e      	ldr	r6, [r3, #0]
 800b7ea:	6862      	ldr	r2, [r4, #4]
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f000 f913 	bl	800ba18 <memchr>
 800b7f2:	b108      	cbz	r0, 800b7f8 <_printf_i+0x1e4>
 800b7f4:	1b80      	subs	r0, r0, r6
 800b7f6:	6060      	str	r0, [r4, #4]
 800b7f8:	6863      	ldr	r3, [r4, #4]
 800b7fa:	6123      	str	r3, [r4, #16]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b802:	e7aa      	b.n	800b75a <_printf_i+0x146>
 800b804:	4632      	mov	r2, r6
 800b806:	4649      	mov	r1, r9
 800b808:	4640      	mov	r0, r8
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	47d0      	blx	sl
 800b80e:	3001      	adds	r0, #1
 800b810:	d0ad      	beq.n	800b76e <_printf_i+0x15a>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	079b      	lsls	r3, r3, #30
 800b816:	d413      	bmi.n	800b840 <_printf_i+0x22c>
 800b818:	68e0      	ldr	r0, [r4, #12]
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	4298      	cmp	r0, r3
 800b81e:	bfb8      	it	lt
 800b820:	4618      	movlt	r0, r3
 800b822:	e7a6      	b.n	800b772 <_printf_i+0x15e>
 800b824:	2301      	movs	r3, #1
 800b826:	4632      	mov	r2, r6
 800b828:	4649      	mov	r1, r9
 800b82a:	4640      	mov	r0, r8
 800b82c:	47d0      	blx	sl
 800b82e:	3001      	adds	r0, #1
 800b830:	d09d      	beq.n	800b76e <_printf_i+0x15a>
 800b832:	3501      	adds	r5, #1
 800b834:	68e3      	ldr	r3, [r4, #12]
 800b836:	9903      	ldr	r1, [sp, #12]
 800b838:	1a5b      	subs	r3, r3, r1
 800b83a:	42ab      	cmp	r3, r5
 800b83c:	dcf2      	bgt.n	800b824 <_printf_i+0x210>
 800b83e:	e7eb      	b.n	800b818 <_printf_i+0x204>
 800b840:	2500      	movs	r5, #0
 800b842:	f104 0619 	add.w	r6, r4, #25
 800b846:	e7f5      	b.n	800b834 <_printf_i+0x220>
 800b848:	0800c358 	.word	0x0800c358
 800b84c:	0800c369 	.word	0x0800c369

0800b850 <__sflush_r>:
 800b850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	0716      	lsls	r6, r2, #28
 800b858:	4605      	mov	r5, r0
 800b85a:	460c      	mov	r4, r1
 800b85c:	d454      	bmi.n	800b908 <__sflush_r+0xb8>
 800b85e:	684b      	ldr	r3, [r1, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	dc02      	bgt.n	800b86a <__sflush_r+0x1a>
 800b864:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b866:	2b00      	cmp	r3, #0
 800b868:	dd48      	ble.n	800b8fc <__sflush_r+0xac>
 800b86a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b86c:	2e00      	cmp	r6, #0
 800b86e:	d045      	beq.n	800b8fc <__sflush_r+0xac>
 800b870:	2300      	movs	r3, #0
 800b872:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b876:	682f      	ldr	r7, [r5, #0]
 800b878:	6a21      	ldr	r1, [r4, #32]
 800b87a:	602b      	str	r3, [r5, #0]
 800b87c:	d030      	beq.n	800b8e0 <__sflush_r+0x90>
 800b87e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	0759      	lsls	r1, r3, #29
 800b884:	d505      	bpl.n	800b892 <__sflush_r+0x42>
 800b886:	6863      	ldr	r3, [r4, #4]
 800b888:	1ad2      	subs	r2, r2, r3
 800b88a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b88c:	b10b      	cbz	r3, 800b892 <__sflush_r+0x42>
 800b88e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b890:	1ad2      	subs	r2, r2, r3
 800b892:	2300      	movs	r3, #0
 800b894:	4628      	mov	r0, r5
 800b896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b898:	6a21      	ldr	r1, [r4, #32]
 800b89a:	47b0      	blx	r6
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	89a3      	ldrh	r3, [r4, #12]
 800b8a0:	d106      	bne.n	800b8b0 <__sflush_r+0x60>
 800b8a2:	6829      	ldr	r1, [r5, #0]
 800b8a4:	291d      	cmp	r1, #29
 800b8a6:	d82b      	bhi.n	800b900 <__sflush_r+0xb0>
 800b8a8:	4a28      	ldr	r2, [pc, #160]	@ (800b94c <__sflush_r+0xfc>)
 800b8aa:	40ca      	lsrs	r2, r1
 800b8ac:	07d6      	lsls	r6, r2, #31
 800b8ae:	d527      	bpl.n	800b900 <__sflush_r+0xb0>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	6062      	str	r2, [r4, #4]
 800b8b4:	6922      	ldr	r2, [r4, #16]
 800b8b6:	04d9      	lsls	r1, r3, #19
 800b8b8:	6022      	str	r2, [r4, #0]
 800b8ba:	d504      	bpl.n	800b8c6 <__sflush_r+0x76>
 800b8bc:	1c42      	adds	r2, r0, #1
 800b8be:	d101      	bne.n	800b8c4 <__sflush_r+0x74>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b903      	cbnz	r3, 800b8c6 <__sflush_r+0x76>
 800b8c4:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8c8:	602f      	str	r7, [r5, #0]
 800b8ca:	b1b9      	cbz	r1, 800b8fc <__sflush_r+0xac>
 800b8cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8d0:	4299      	cmp	r1, r3
 800b8d2:	d002      	beq.n	800b8da <__sflush_r+0x8a>
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f7fe fbdd 	bl	800a094 <_free_r>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8de:	e00d      	b.n	800b8fc <__sflush_r+0xac>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	47b0      	blx	r6
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	1c50      	adds	r0, r2, #1
 800b8ea:	d1c9      	bne.n	800b880 <__sflush_r+0x30>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d0c6      	beq.n	800b880 <__sflush_r+0x30>
 800b8f2:	2b1d      	cmp	r3, #29
 800b8f4:	d001      	beq.n	800b8fa <__sflush_r+0xaa>
 800b8f6:	2b16      	cmp	r3, #22
 800b8f8:	d11d      	bne.n	800b936 <__sflush_r+0xe6>
 800b8fa:	602f      	str	r7, [r5, #0]
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	e021      	b.n	800b944 <__sflush_r+0xf4>
 800b900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b904:	b21b      	sxth	r3, r3
 800b906:	e01a      	b.n	800b93e <__sflush_r+0xee>
 800b908:	690f      	ldr	r7, [r1, #16]
 800b90a:	2f00      	cmp	r7, #0
 800b90c:	d0f6      	beq.n	800b8fc <__sflush_r+0xac>
 800b90e:	0793      	lsls	r3, r2, #30
 800b910:	bf18      	it	ne
 800b912:	2300      	movne	r3, #0
 800b914:	680e      	ldr	r6, [r1, #0]
 800b916:	bf08      	it	eq
 800b918:	694b      	ldreq	r3, [r1, #20]
 800b91a:	1bf6      	subs	r6, r6, r7
 800b91c:	600f      	str	r7, [r1, #0]
 800b91e:	608b      	str	r3, [r1, #8]
 800b920:	2e00      	cmp	r6, #0
 800b922:	ddeb      	ble.n	800b8fc <__sflush_r+0xac>
 800b924:	4633      	mov	r3, r6
 800b926:	463a      	mov	r2, r7
 800b928:	4628      	mov	r0, r5
 800b92a:	6a21      	ldr	r1, [r4, #32]
 800b92c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b930:	47e0      	blx	ip
 800b932:	2800      	cmp	r0, #0
 800b934:	dc07      	bgt.n	800b946 <__sflush_r+0xf6>
 800b936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b93e:	f04f 30ff 	mov.w	r0, #4294967295
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b946:	4407      	add	r7, r0
 800b948:	1a36      	subs	r6, r6, r0
 800b94a:	e7e9      	b.n	800b920 <__sflush_r+0xd0>
 800b94c:	20400001 	.word	0x20400001

0800b950 <_fflush_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	690b      	ldr	r3, [r1, #16]
 800b954:	4605      	mov	r5, r0
 800b956:	460c      	mov	r4, r1
 800b958:	b913      	cbnz	r3, 800b960 <_fflush_r+0x10>
 800b95a:	2500      	movs	r5, #0
 800b95c:	4628      	mov	r0, r5
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	b118      	cbz	r0, 800b96a <_fflush_r+0x1a>
 800b962:	6a03      	ldr	r3, [r0, #32]
 800b964:	b90b      	cbnz	r3, 800b96a <_fflush_r+0x1a>
 800b966:	f7fe f993 	bl	8009c90 <__sinit>
 800b96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d0f3      	beq.n	800b95a <_fflush_r+0xa>
 800b972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b974:	07d0      	lsls	r0, r2, #31
 800b976:	d404      	bmi.n	800b982 <_fflush_r+0x32>
 800b978:	0599      	lsls	r1, r3, #22
 800b97a:	d402      	bmi.n	800b982 <_fflush_r+0x32>
 800b97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b97e:	f7fe fb54 	bl	800a02a <__retarget_lock_acquire_recursive>
 800b982:	4628      	mov	r0, r5
 800b984:	4621      	mov	r1, r4
 800b986:	f7ff ff63 	bl	800b850 <__sflush_r>
 800b98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b98c:	4605      	mov	r5, r0
 800b98e:	07da      	lsls	r2, r3, #31
 800b990:	d4e4      	bmi.n	800b95c <_fflush_r+0xc>
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	059b      	lsls	r3, r3, #22
 800b996:	d4e1      	bmi.n	800b95c <_fflush_r+0xc>
 800b998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b99a:	f7fe fb47 	bl	800a02c <__retarget_lock_release_recursive>
 800b99e:	e7dd      	b.n	800b95c <_fflush_r+0xc>

0800b9a0 <fiprintf>:
 800b9a0:	b40e      	push	{r1, r2, r3}
 800b9a2:	b503      	push	{r0, r1, lr}
 800b9a4:	4601      	mov	r1, r0
 800b9a6:	ab03      	add	r3, sp, #12
 800b9a8:	4805      	ldr	r0, [pc, #20]	@ (800b9c0 <fiprintf+0x20>)
 800b9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ae:	6800      	ldr	r0, [r0, #0]
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	f000 f8af 	bl	800bb14 <_vfiprintf_r>
 800b9b6:	b002      	add	sp, #8
 800b9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9bc:	b003      	add	sp, #12
 800b9be:	4770      	bx	lr
 800b9c0:	200001bc 	.word	0x200001bc

0800b9c4 <memmove>:
 800b9c4:	4288      	cmp	r0, r1
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	eb01 0402 	add.w	r4, r1, r2
 800b9cc:	d902      	bls.n	800b9d4 <memmove+0x10>
 800b9ce:	4284      	cmp	r4, r0
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	d807      	bhi.n	800b9e4 <memmove+0x20>
 800b9d4:	1e43      	subs	r3, r0, #1
 800b9d6:	42a1      	cmp	r1, r4
 800b9d8:	d008      	beq.n	800b9ec <memmove+0x28>
 800b9da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9e2:	e7f8      	b.n	800b9d6 <memmove+0x12>
 800b9e4:	4601      	mov	r1, r0
 800b9e6:	4402      	add	r2, r0
 800b9e8:	428a      	cmp	r2, r1
 800b9ea:	d100      	bne.n	800b9ee <memmove+0x2a>
 800b9ec:	bd10      	pop	{r4, pc}
 800b9ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9f6:	e7f7      	b.n	800b9e8 <memmove+0x24>

0800b9f8 <_sbrk_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4d05      	ldr	r5, [pc, #20]	@ (800ba14 <_sbrk_r+0x1c>)
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4608      	mov	r0, r1
 800ba02:	602b      	str	r3, [r5, #0]
 800ba04:	f7f7 f976 	bl	8002cf4 <_sbrk>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_sbrk_r+0x1a>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_sbrk_r+0x1a>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	20000954 	.word	0x20000954

0800ba18 <memchr>:
 800ba18:	4603      	mov	r3, r0
 800ba1a:	b510      	push	{r4, lr}
 800ba1c:	b2c9      	uxtb	r1, r1
 800ba1e:	4402      	add	r2, r0
 800ba20:	4293      	cmp	r3, r2
 800ba22:	4618      	mov	r0, r3
 800ba24:	d101      	bne.n	800ba2a <memchr+0x12>
 800ba26:	2000      	movs	r0, #0
 800ba28:	e003      	b.n	800ba32 <memchr+0x1a>
 800ba2a:	7804      	ldrb	r4, [r0, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	428c      	cmp	r4, r1
 800ba30:	d1f6      	bne.n	800ba20 <memchr+0x8>
 800ba32:	bd10      	pop	{r4, pc}

0800ba34 <abort>:
 800ba34:	2006      	movs	r0, #6
 800ba36:	b508      	push	{r3, lr}
 800ba38:	f000 fa40 	bl	800bebc <raise>
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	f7f7 f8e4 	bl	8002c0a <_exit>

0800ba42 <_calloc_r>:
 800ba42:	b570      	push	{r4, r5, r6, lr}
 800ba44:	fba1 5402 	umull	r5, r4, r1, r2
 800ba48:	b934      	cbnz	r4, 800ba58 <_calloc_r+0x16>
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f7fe fece 	bl	800a7ec <_malloc_r>
 800ba50:	4606      	mov	r6, r0
 800ba52:	b928      	cbnz	r0, 800ba60 <_calloc_r+0x1e>
 800ba54:	4630      	mov	r0, r6
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	220c      	movs	r2, #12
 800ba5a:	2600      	movs	r6, #0
 800ba5c:	6002      	str	r2, [r0, #0]
 800ba5e:	e7f9      	b.n	800ba54 <_calloc_r+0x12>
 800ba60:	462a      	mov	r2, r5
 800ba62:	4621      	mov	r1, r4
 800ba64:	f7fe f9c3 	bl	8009dee <memset>
 800ba68:	e7f4      	b.n	800ba54 <_calloc_r+0x12>

0800ba6a <_realloc_r>:
 800ba6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6e:	4607      	mov	r7, r0
 800ba70:	4614      	mov	r4, r2
 800ba72:	460d      	mov	r5, r1
 800ba74:	b921      	cbnz	r1, 800ba80 <_realloc_r+0x16>
 800ba76:	4611      	mov	r1, r2
 800ba78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7c:	f7fe beb6 	b.w	800a7ec <_malloc_r>
 800ba80:	b92a      	cbnz	r2, 800ba8e <_realloc_r+0x24>
 800ba82:	f7fe fb07 	bl	800a094 <_free_r>
 800ba86:	4625      	mov	r5, r4
 800ba88:	4628      	mov	r0, r5
 800ba8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba8e:	f000 fa31 	bl	800bef4 <_malloc_usable_size_r>
 800ba92:	4284      	cmp	r4, r0
 800ba94:	4606      	mov	r6, r0
 800ba96:	d802      	bhi.n	800ba9e <_realloc_r+0x34>
 800ba98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba9c:	d8f4      	bhi.n	800ba88 <_realloc_r+0x1e>
 800ba9e:	4621      	mov	r1, r4
 800baa0:	4638      	mov	r0, r7
 800baa2:	f7fe fea3 	bl	800a7ec <_malloc_r>
 800baa6:	4680      	mov	r8, r0
 800baa8:	b908      	cbnz	r0, 800baae <_realloc_r+0x44>
 800baaa:	4645      	mov	r5, r8
 800baac:	e7ec      	b.n	800ba88 <_realloc_r+0x1e>
 800baae:	42b4      	cmp	r4, r6
 800bab0:	4622      	mov	r2, r4
 800bab2:	4629      	mov	r1, r5
 800bab4:	bf28      	it	cs
 800bab6:	4632      	movcs	r2, r6
 800bab8:	f7fe fab9 	bl	800a02e <memcpy>
 800babc:	4629      	mov	r1, r5
 800babe:	4638      	mov	r0, r7
 800bac0:	f7fe fae8 	bl	800a094 <_free_r>
 800bac4:	e7f1      	b.n	800baaa <_realloc_r+0x40>

0800bac6 <__sfputc_r>:
 800bac6:	6893      	ldr	r3, [r2, #8]
 800bac8:	b410      	push	{r4}
 800baca:	3b01      	subs	r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	6093      	str	r3, [r2, #8]
 800bad0:	da07      	bge.n	800bae2 <__sfputc_r+0x1c>
 800bad2:	6994      	ldr	r4, [r2, #24]
 800bad4:	42a3      	cmp	r3, r4
 800bad6:	db01      	blt.n	800badc <__sfputc_r+0x16>
 800bad8:	290a      	cmp	r1, #10
 800bada:	d102      	bne.n	800bae2 <__sfputc_r+0x1c>
 800badc:	bc10      	pop	{r4}
 800bade:	f000 b931 	b.w	800bd44 <__swbuf_r>
 800bae2:	6813      	ldr	r3, [r2, #0]
 800bae4:	1c58      	adds	r0, r3, #1
 800bae6:	6010      	str	r0, [r2, #0]
 800bae8:	7019      	strb	r1, [r3, #0]
 800baea:	4608      	mov	r0, r1
 800baec:	bc10      	pop	{r4}
 800baee:	4770      	bx	lr

0800baf0 <__sfputs_r>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	4606      	mov	r6, r0
 800baf4:	460f      	mov	r7, r1
 800baf6:	4614      	mov	r4, r2
 800baf8:	18d5      	adds	r5, r2, r3
 800bafa:	42ac      	cmp	r4, r5
 800bafc:	d101      	bne.n	800bb02 <__sfputs_r+0x12>
 800bafe:	2000      	movs	r0, #0
 800bb00:	e007      	b.n	800bb12 <__sfputs_r+0x22>
 800bb02:	463a      	mov	r2, r7
 800bb04:	4630      	mov	r0, r6
 800bb06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb0a:	f7ff ffdc 	bl	800bac6 <__sfputc_r>
 800bb0e:	1c43      	adds	r3, r0, #1
 800bb10:	d1f3      	bne.n	800bafa <__sfputs_r+0xa>
 800bb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb14 <_vfiprintf_r>:
 800bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	460d      	mov	r5, r1
 800bb1a:	4614      	mov	r4, r2
 800bb1c:	4698      	mov	r8, r3
 800bb1e:	4606      	mov	r6, r0
 800bb20:	b09d      	sub	sp, #116	@ 0x74
 800bb22:	b118      	cbz	r0, 800bb2c <_vfiprintf_r+0x18>
 800bb24:	6a03      	ldr	r3, [r0, #32]
 800bb26:	b90b      	cbnz	r3, 800bb2c <_vfiprintf_r+0x18>
 800bb28:	f7fe f8b2 	bl	8009c90 <__sinit>
 800bb2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb2e:	07d9      	lsls	r1, r3, #31
 800bb30:	d405      	bmi.n	800bb3e <_vfiprintf_r+0x2a>
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	059a      	lsls	r2, r3, #22
 800bb36:	d402      	bmi.n	800bb3e <_vfiprintf_r+0x2a>
 800bb38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb3a:	f7fe fa76 	bl	800a02a <__retarget_lock_acquire_recursive>
 800bb3e:	89ab      	ldrh	r3, [r5, #12]
 800bb40:	071b      	lsls	r3, r3, #28
 800bb42:	d501      	bpl.n	800bb48 <_vfiprintf_r+0x34>
 800bb44:	692b      	ldr	r3, [r5, #16]
 800bb46:	b99b      	cbnz	r3, 800bb70 <_vfiprintf_r+0x5c>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f000 f938 	bl	800bdc0 <__swsetup_r>
 800bb50:	b170      	cbz	r0, 800bb70 <_vfiprintf_r+0x5c>
 800bb52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb54:	07dc      	lsls	r4, r3, #31
 800bb56:	d504      	bpl.n	800bb62 <_vfiprintf_r+0x4e>
 800bb58:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5c:	b01d      	add	sp, #116	@ 0x74
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	0598      	lsls	r0, r3, #22
 800bb66:	d4f7      	bmi.n	800bb58 <_vfiprintf_r+0x44>
 800bb68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb6a:	f7fe fa5f 	bl	800a02c <__retarget_lock_release_recursive>
 800bb6e:	e7f3      	b.n	800bb58 <_vfiprintf_r+0x44>
 800bb70:	2300      	movs	r3, #0
 800bb72:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb74:	2320      	movs	r3, #32
 800bb76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb7a:	2330      	movs	r3, #48	@ 0x30
 800bb7c:	f04f 0901 	mov.w	r9, #1
 800bb80:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bd30 <_vfiprintf_r+0x21c>
 800bb88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb8c:	4623      	mov	r3, r4
 800bb8e:	469a      	mov	sl, r3
 800bb90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb94:	b10a      	cbz	r2, 800bb9a <_vfiprintf_r+0x86>
 800bb96:	2a25      	cmp	r2, #37	@ 0x25
 800bb98:	d1f9      	bne.n	800bb8e <_vfiprintf_r+0x7a>
 800bb9a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb9e:	d00b      	beq.n	800bbb8 <_vfiprintf_r+0xa4>
 800bba0:	465b      	mov	r3, fp
 800bba2:	4622      	mov	r2, r4
 800bba4:	4629      	mov	r1, r5
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7ff ffa2 	bl	800baf0 <__sfputs_r>
 800bbac:	3001      	adds	r0, #1
 800bbae:	f000 80a7 	beq.w	800bd00 <_vfiprintf_r+0x1ec>
 800bbb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb4:	445a      	add	r2, fp
 800bbb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 809f 	beq.w	800bd00 <_vfiprintf_r+0x1ec>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbcc:	f10a 0a01 	add.w	sl, sl, #1
 800bbd0:	9304      	str	r3, [sp, #16]
 800bbd2:	9307      	str	r3, [sp, #28]
 800bbd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbda:	4654      	mov	r4, sl
 800bbdc:	2205      	movs	r2, #5
 800bbde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe2:	4853      	ldr	r0, [pc, #332]	@ (800bd30 <_vfiprintf_r+0x21c>)
 800bbe4:	f7ff ff18 	bl	800ba18 <memchr>
 800bbe8:	9a04      	ldr	r2, [sp, #16]
 800bbea:	b9d8      	cbnz	r0, 800bc24 <_vfiprintf_r+0x110>
 800bbec:	06d1      	lsls	r1, r2, #27
 800bbee:	bf44      	itt	mi
 800bbf0:	2320      	movmi	r3, #32
 800bbf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf6:	0713      	lsls	r3, r2, #28
 800bbf8:	bf44      	itt	mi
 800bbfa:	232b      	movmi	r3, #43	@ 0x2b
 800bbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc00:	f89a 3000 	ldrb.w	r3, [sl]
 800bc04:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc06:	d015      	beq.n	800bc34 <_vfiprintf_r+0x120>
 800bc08:	4654      	mov	r4, sl
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f04f 0c0a 	mov.w	ip, #10
 800bc10:	9a07      	ldr	r2, [sp, #28]
 800bc12:	4621      	mov	r1, r4
 800bc14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc18:	3b30      	subs	r3, #48	@ 0x30
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	d94b      	bls.n	800bcb6 <_vfiprintf_r+0x1a2>
 800bc1e:	b1b0      	cbz	r0, 800bc4e <_vfiprintf_r+0x13a>
 800bc20:	9207      	str	r2, [sp, #28]
 800bc22:	e014      	b.n	800bc4e <_vfiprintf_r+0x13a>
 800bc24:	eba0 0308 	sub.w	r3, r0, r8
 800bc28:	fa09 f303 	lsl.w	r3, r9, r3
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	46a2      	mov	sl, r4
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	e7d2      	b.n	800bbda <_vfiprintf_r+0xc6>
 800bc34:	9b03      	ldr	r3, [sp, #12]
 800bc36:	1d19      	adds	r1, r3, #4
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	9103      	str	r1, [sp, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	bfbb      	ittet	lt
 800bc40:	425b      	neglt	r3, r3
 800bc42:	f042 0202 	orrlt.w	r2, r2, #2
 800bc46:	9307      	strge	r3, [sp, #28]
 800bc48:	9307      	strlt	r3, [sp, #28]
 800bc4a:	bfb8      	it	lt
 800bc4c:	9204      	strlt	r2, [sp, #16]
 800bc4e:	7823      	ldrb	r3, [r4, #0]
 800bc50:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc52:	d10a      	bne.n	800bc6a <_vfiprintf_r+0x156>
 800bc54:	7863      	ldrb	r3, [r4, #1]
 800bc56:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc58:	d132      	bne.n	800bcc0 <_vfiprintf_r+0x1ac>
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	3402      	adds	r4, #2
 800bc5e:	1d1a      	adds	r2, r3, #4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	9203      	str	r2, [sp, #12]
 800bc64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc68:	9305      	str	r3, [sp, #20]
 800bc6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bd34 <_vfiprintf_r+0x220>
 800bc6e:	2203      	movs	r2, #3
 800bc70:	4650      	mov	r0, sl
 800bc72:	7821      	ldrb	r1, [r4, #0]
 800bc74:	f7ff fed0 	bl	800ba18 <memchr>
 800bc78:	b138      	cbz	r0, 800bc8a <_vfiprintf_r+0x176>
 800bc7a:	2240      	movs	r2, #64	@ 0x40
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	eba0 000a 	sub.w	r0, r0, sl
 800bc82:	4082      	lsls	r2, r0
 800bc84:	4313      	orrs	r3, r2
 800bc86:	3401      	adds	r4, #1
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8e:	2206      	movs	r2, #6
 800bc90:	4829      	ldr	r0, [pc, #164]	@ (800bd38 <_vfiprintf_r+0x224>)
 800bc92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc96:	f7ff febf 	bl	800ba18 <memchr>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d03f      	beq.n	800bd1e <_vfiprintf_r+0x20a>
 800bc9e:	4b27      	ldr	r3, [pc, #156]	@ (800bd3c <_vfiprintf_r+0x228>)
 800bca0:	bb1b      	cbnz	r3, 800bcea <_vfiprintf_r+0x1d6>
 800bca2:	9b03      	ldr	r3, [sp, #12]
 800bca4:	3307      	adds	r3, #7
 800bca6:	f023 0307 	bic.w	r3, r3, #7
 800bcaa:	3308      	adds	r3, #8
 800bcac:	9303      	str	r3, [sp, #12]
 800bcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb0:	443b      	add	r3, r7
 800bcb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcb4:	e76a      	b.n	800bb8c <_vfiprintf_r+0x78>
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	2001      	movs	r0, #1
 800bcba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcbe:	e7a8      	b.n	800bc12 <_vfiprintf_r+0xfe>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f04f 0c0a 	mov.w	ip, #10
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	3401      	adds	r4, #1
 800bcca:	9305      	str	r3, [sp, #20]
 800bccc:	4620      	mov	r0, r4
 800bcce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd2:	3a30      	subs	r2, #48	@ 0x30
 800bcd4:	2a09      	cmp	r2, #9
 800bcd6:	d903      	bls.n	800bce0 <_vfiprintf_r+0x1cc>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0c6      	beq.n	800bc6a <_vfiprintf_r+0x156>
 800bcdc:	9105      	str	r1, [sp, #20]
 800bcde:	e7c4      	b.n	800bc6a <_vfiprintf_r+0x156>
 800bce0:	4604      	mov	r4, r0
 800bce2:	2301      	movs	r3, #1
 800bce4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce8:	e7f0      	b.n	800bccc <_vfiprintf_r+0x1b8>
 800bcea:	ab03      	add	r3, sp, #12
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	462a      	mov	r2, r5
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4b13      	ldr	r3, [pc, #76]	@ (800bd40 <_vfiprintf_r+0x22c>)
 800bcf4:	a904      	add	r1, sp, #16
 800bcf6:	f3af 8000 	nop.w
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	1c78      	adds	r0, r7, #1
 800bcfe:	d1d6      	bne.n	800bcae <_vfiprintf_r+0x19a>
 800bd00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd02:	07d9      	lsls	r1, r3, #31
 800bd04:	d405      	bmi.n	800bd12 <_vfiprintf_r+0x1fe>
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	059a      	lsls	r2, r3, #22
 800bd0a:	d402      	bmi.n	800bd12 <_vfiprintf_r+0x1fe>
 800bd0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd0e:	f7fe f98d 	bl	800a02c <__retarget_lock_release_recursive>
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	065b      	lsls	r3, r3, #25
 800bd16:	f53f af1f 	bmi.w	800bb58 <_vfiprintf_r+0x44>
 800bd1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd1c:	e71e      	b.n	800bb5c <_vfiprintf_r+0x48>
 800bd1e:	ab03      	add	r3, sp, #12
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	462a      	mov	r2, r5
 800bd24:	4630      	mov	r0, r6
 800bd26:	4b06      	ldr	r3, [pc, #24]	@ (800bd40 <_vfiprintf_r+0x22c>)
 800bd28:	a904      	add	r1, sp, #16
 800bd2a:	f7ff fc73 	bl	800b614 <_printf_i>
 800bd2e:	e7e4      	b.n	800bcfa <_vfiprintf_r+0x1e6>
 800bd30:	0800c347 	.word	0x0800c347
 800bd34:	0800c34d 	.word	0x0800c34d
 800bd38:	0800c351 	.word	0x0800c351
 800bd3c:	00000000 	.word	0x00000000
 800bd40:	0800baf1 	.word	0x0800baf1

0800bd44 <__swbuf_r>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	460e      	mov	r6, r1
 800bd48:	4614      	mov	r4, r2
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	b118      	cbz	r0, 800bd56 <__swbuf_r+0x12>
 800bd4e:	6a03      	ldr	r3, [r0, #32]
 800bd50:	b90b      	cbnz	r3, 800bd56 <__swbuf_r+0x12>
 800bd52:	f7fd ff9d 	bl	8009c90 <__sinit>
 800bd56:	69a3      	ldr	r3, [r4, #24]
 800bd58:	60a3      	str	r3, [r4, #8]
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	071a      	lsls	r2, r3, #28
 800bd5e:	d501      	bpl.n	800bd64 <__swbuf_r+0x20>
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	b943      	cbnz	r3, 800bd76 <__swbuf_r+0x32>
 800bd64:	4621      	mov	r1, r4
 800bd66:	4628      	mov	r0, r5
 800bd68:	f000 f82a 	bl	800bdc0 <__swsetup_r>
 800bd6c:	b118      	cbz	r0, 800bd76 <__swbuf_r+0x32>
 800bd6e:	f04f 37ff 	mov.w	r7, #4294967295
 800bd72:	4638      	mov	r0, r7
 800bd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	6922      	ldr	r2, [r4, #16]
 800bd7a:	b2f6      	uxtb	r6, r6
 800bd7c:	1a98      	subs	r0, r3, r2
 800bd7e:	6963      	ldr	r3, [r4, #20]
 800bd80:	4637      	mov	r7, r6
 800bd82:	4283      	cmp	r3, r0
 800bd84:	dc05      	bgt.n	800bd92 <__swbuf_r+0x4e>
 800bd86:	4621      	mov	r1, r4
 800bd88:	4628      	mov	r0, r5
 800bd8a:	f7ff fde1 	bl	800b950 <_fflush_r>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d1ed      	bne.n	800bd6e <__swbuf_r+0x2a>
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	60a3      	str	r3, [r4, #8]
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	6022      	str	r2, [r4, #0]
 800bd9e:	701e      	strb	r6, [r3, #0]
 800bda0:	6962      	ldr	r2, [r4, #20]
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d004      	beq.n	800bdb2 <__swbuf_r+0x6e>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	07db      	lsls	r3, r3, #31
 800bdac:	d5e1      	bpl.n	800bd72 <__swbuf_r+0x2e>
 800bdae:	2e0a      	cmp	r6, #10
 800bdb0:	d1df      	bne.n	800bd72 <__swbuf_r+0x2e>
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f7ff fdcb 	bl	800b950 <_fflush_r>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d0d9      	beq.n	800bd72 <__swbuf_r+0x2e>
 800bdbe:	e7d6      	b.n	800bd6e <__swbuf_r+0x2a>

0800bdc0 <__swsetup_r>:
 800bdc0:	b538      	push	{r3, r4, r5, lr}
 800bdc2:	4b29      	ldr	r3, [pc, #164]	@ (800be68 <__swsetup_r+0xa8>)
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	6818      	ldr	r0, [r3, #0]
 800bdc8:	460c      	mov	r4, r1
 800bdca:	b118      	cbz	r0, 800bdd4 <__swsetup_r+0x14>
 800bdcc:	6a03      	ldr	r3, [r0, #32]
 800bdce:	b90b      	cbnz	r3, 800bdd4 <__swsetup_r+0x14>
 800bdd0:	f7fd ff5e 	bl	8009c90 <__sinit>
 800bdd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd8:	0719      	lsls	r1, r3, #28
 800bdda:	d422      	bmi.n	800be22 <__swsetup_r+0x62>
 800bddc:	06da      	lsls	r2, r3, #27
 800bdde:	d407      	bmi.n	800bdf0 <__swsetup_r+0x30>
 800bde0:	2209      	movs	r2, #9
 800bde2:	602a      	str	r2, [r5, #0]
 800bde4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	e033      	b.n	800be58 <__swsetup_r+0x98>
 800bdf0:	0758      	lsls	r0, r3, #29
 800bdf2:	d512      	bpl.n	800be1a <__swsetup_r+0x5a>
 800bdf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdf6:	b141      	cbz	r1, 800be0a <__swsetup_r+0x4a>
 800bdf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdfc:	4299      	cmp	r1, r3
 800bdfe:	d002      	beq.n	800be06 <__swsetup_r+0x46>
 800be00:	4628      	mov	r0, r5
 800be02:	f7fe f947 	bl	800a094 <_free_r>
 800be06:	2300      	movs	r3, #0
 800be08:	6363      	str	r3, [r4, #52]	@ 0x34
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be10:	81a3      	strh	r3, [r4, #12]
 800be12:	2300      	movs	r3, #0
 800be14:	6063      	str	r3, [r4, #4]
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	f043 0308 	orr.w	r3, r3, #8
 800be20:	81a3      	strh	r3, [r4, #12]
 800be22:	6923      	ldr	r3, [r4, #16]
 800be24:	b94b      	cbnz	r3, 800be3a <__swsetup_r+0x7a>
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be30:	d003      	beq.n	800be3a <__swsetup_r+0x7a>
 800be32:	4621      	mov	r1, r4
 800be34:	4628      	mov	r0, r5
 800be36:	f000 f88a 	bl	800bf4e <__smakebuf_r>
 800be3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be3e:	f013 0201 	ands.w	r2, r3, #1
 800be42:	d00a      	beq.n	800be5a <__swsetup_r+0x9a>
 800be44:	2200      	movs	r2, #0
 800be46:	60a2      	str	r2, [r4, #8]
 800be48:	6962      	ldr	r2, [r4, #20]
 800be4a:	4252      	negs	r2, r2
 800be4c:	61a2      	str	r2, [r4, #24]
 800be4e:	6922      	ldr	r2, [r4, #16]
 800be50:	b942      	cbnz	r2, 800be64 <__swsetup_r+0xa4>
 800be52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be56:	d1c5      	bne.n	800bde4 <__swsetup_r+0x24>
 800be58:	bd38      	pop	{r3, r4, r5, pc}
 800be5a:	0799      	lsls	r1, r3, #30
 800be5c:	bf58      	it	pl
 800be5e:	6962      	ldrpl	r2, [r4, #20]
 800be60:	60a2      	str	r2, [r4, #8]
 800be62:	e7f4      	b.n	800be4e <__swsetup_r+0x8e>
 800be64:	2000      	movs	r0, #0
 800be66:	e7f7      	b.n	800be58 <__swsetup_r+0x98>
 800be68:	200001bc 	.word	0x200001bc

0800be6c <_raise_r>:
 800be6c:	291f      	cmp	r1, #31
 800be6e:	b538      	push	{r3, r4, r5, lr}
 800be70:	4605      	mov	r5, r0
 800be72:	460c      	mov	r4, r1
 800be74:	d904      	bls.n	800be80 <_raise_r+0x14>
 800be76:	2316      	movs	r3, #22
 800be78:	6003      	str	r3, [r0, #0]
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be82:	b112      	cbz	r2, 800be8a <_raise_r+0x1e>
 800be84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be88:	b94b      	cbnz	r3, 800be9e <_raise_r+0x32>
 800be8a:	4628      	mov	r0, r5
 800be8c:	f000 f830 	bl	800bef0 <_getpid_r>
 800be90:	4622      	mov	r2, r4
 800be92:	4601      	mov	r1, r0
 800be94:	4628      	mov	r0, r5
 800be96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9a:	f000 b817 	b.w	800becc <_kill_r>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d00a      	beq.n	800beb8 <_raise_r+0x4c>
 800bea2:	1c59      	adds	r1, r3, #1
 800bea4:	d103      	bne.n	800beae <_raise_r+0x42>
 800bea6:	2316      	movs	r3, #22
 800bea8:	6003      	str	r3, [r0, #0]
 800beaa:	2001      	movs	r0, #1
 800beac:	e7e7      	b.n	800be7e <_raise_r+0x12>
 800beae:	2100      	movs	r1, #0
 800beb0:	4620      	mov	r0, r4
 800beb2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800beb6:	4798      	blx	r3
 800beb8:	2000      	movs	r0, #0
 800beba:	e7e0      	b.n	800be7e <_raise_r+0x12>

0800bebc <raise>:
 800bebc:	4b02      	ldr	r3, [pc, #8]	@ (800bec8 <raise+0xc>)
 800bebe:	4601      	mov	r1, r0
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	f7ff bfd3 	b.w	800be6c <_raise_r>
 800bec6:	bf00      	nop
 800bec8:	200001bc 	.word	0x200001bc

0800becc <_kill_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	2300      	movs	r3, #0
 800bed0:	4d06      	ldr	r5, [pc, #24]	@ (800beec <_kill_r+0x20>)
 800bed2:	4604      	mov	r4, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	4611      	mov	r1, r2
 800bed8:	602b      	str	r3, [r5, #0]
 800beda:	f7f6 fe86 	bl	8002bea <_kill>
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	d102      	bne.n	800bee8 <_kill_r+0x1c>
 800bee2:	682b      	ldr	r3, [r5, #0]
 800bee4:	b103      	cbz	r3, 800bee8 <_kill_r+0x1c>
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	bd38      	pop	{r3, r4, r5, pc}
 800beea:	bf00      	nop
 800beec:	20000954 	.word	0x20000954

0800bef0 <_getpid_r>:
 800bef0:	f7f6 be74 	b.w	8002bdc <_getpid>

0800bef4 <_malloc_usable_size_r>:
 800bef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bef8:	1f18      	subs	r0, r3, #4
 800befa:	2b00      	cmp	r3, #0
 800befc:	bfbc      	itt	lt
 800befe:	580b      	ldrlt	r3, [r1, r0]
 800bf00:	18c0      	addlt	r0, r0, r3
 800bf02:	4770      	bx	lr

0800bf04 <__swhatbuf_r>:
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	460c      	mov	r4, r1
 800bf08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf0c:	4615      	mov	r5, r2
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	461e      	mov	r6, r3
 800bf12:	b096      	sub	sp, #88	@ 0x58
 800bf14:	da0c      	bge.n	800bf30 <__swhatbuf_r+0x2c>
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	2100      	movs	r1, #0
 800bf1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf1e:	bf14      	ite	ne
 800bf20:	2340      	movne	r3, #64	@ 0x40
 800bf22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf26:	2000      	movs	r0, #0
 800bf28:	6031      	str	r1, [r6, #0]
 800bf2a:	602b      	str	r3, [r5, #0]
 800bf2c:	b016      	add	sp, #88	@ 0x58
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	466a      	mov	r2, sp
 800bf32:	f000 f849 	bl	800bfc8 <_fstat_r>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	dbed      	blt.n	800bf16 <__swhatbuf_r+0x12>
 800bf3a:	9901      	ldr	r1, [sp, #4]
 800bf3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf44:	4259      	negs	r1, r3
 800bf46:	4159      	adcs	r1, r3
 800bf48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf4c:	e7eb      	b.n	800bf26 <__swhatbuf_r+0x22>

0800bf4e <__smakebuf_r>:
 800bf4e:	898b      	ldrh	r3, [r1, #12]
 800bf50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf52:	079d      	lsls	r5, r3, #30
 800bf54:	4606      	mov	r6, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	d507      	bpl.n	800bf6a <__smakebuf_r+0x1c>
 800bf5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf5e:	6023      	str	r3, [r4, #0]
 800bf60:	6123      	str	r3, [r4, #16]
 800bf62:	2301      	movs	r3, #1
 800bf64:	6163      	str	r3, [r4, #20]
 800bf66:	b003      	add	sp, #12
 800bf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6a:	466a      	mov	r2, sp
 800bf6c:	ab01      	add	r3, sp, #4
 800bf6e:	f7ff ffc9 	bl	800bf04 <__swhatbuf_r>
 800bf72:	9f00      	ldr	r7, [sp, #0]
 800bf74:	4605      	mov	r5, r0
 800bf76:	4639      	mov	r1, r7
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f7fe fc37 	bl	800a7ec <_malloc_r>
 800bf7e:	b948      	cbnz	r0, 800bf94 <__smakebuf_r+0x46>
 800bf80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf84:	059a      	lsls	r2, r3, #22
 800bf86:	d4ee      	bmi.n	800bf66 <__smakebuf_r+0x18>
 800bf88:	f023 0303 	bic.w	r3, r3, #3
 800bf8c:	f043 0302 	orr.w	r3, r3, #2
 800bf90:	81a3      	strh	r3, [r4, #12]
 800bf92:	e7e2      	b.n	800bf5a <__smakebuf_r+0xc>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf9e:	81a3      	strh	r3, [r4, #12]
 800bfa0:	9b01      	ldr	r3, [sp, #4]
 800bfa2:	6020      	str	r0, [r4, #0]
 800bfa4:	b15b      	cbz	r3, 800bfbe <__smakebuf_r+0x70>
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfac:	f000 f81e 	bl	800bfec <_isatty_r>
 800bfb0:	b128      	cbz	r0, 800bfbe <__smakebuf_r+0x70>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	f023 0303 	bic.w	r3, r3, #3
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	81a3      	strh	r3, [r4, #12]
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	431d      	orrs	r5, r3
 800bfc2:	81a5      	strh	r5, [r4, #12]
 800bfc4:	e7cf      	b.n	800bf66 <__smakebuf_r+0x18>
	...

0800bfc8 <_fstat_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4d06      	ldr	r5, [pc, #24]	@ (800bfe8 <_fstat_r+0x20>)
 800bfce:	4604      	mov	r4, r0
 800bfd0:	4608      	mov	r0, r1
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	602b      	str	r3, [r5, #0]
 800bfd6:	f7f6 fe67 	bl	8002ca8 <_fstat>
 800bfda:	1c43      	adds	r3, r0, #1
 800bfdc:	d102      	bne.n	800bfe4 <_fstat_r+0x1c>
 800bfde:	682b      	ldr	r3, [r5, #0]
 800bfe0:	b103      	cbz	r3, 800bfe4 <_fstat_r+0x1c>
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	bd38      	pop	{r3, r4, r5, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20000954 	.word	0x20000954

0800bfec <_isatty_r>:
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	2300      	movs	r3, #0
 800bff0:	4d05      	ldr	r5, [pc, #20]	@ (800c008 <_isatty_r+0x1c>)
 800bff2:	4604      	mov	r4, r0
 800bff4:	4608      	mov	r0, r1
 800bff6:	602b      	str	r3, [r5, #0]
 800bff8:	f7f6 fe65 	bl	8002cc6 <_isatty>
 800bffc:	1c43      	adds	r3, r0, #1
 800bffe:	d102      	bne.n	800c006 <_isatty_r+0x1a>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	b103      	cbz	r3, 800c006 <_isatty_r+0x1a>
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	bd38      	pop	{r3, r4, r5, pc}
 800c008:	20000954 	.word	0x20000954

0800c00c <fmaxf>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4604      	mov	r4, r0
 800c010:	460d      	mov	r5, r1
 800c012:	f000 f825 	bl	800c060 <__fpclassifyf>
 800c016:	b910      	cbnz	r0, 800c01e <fmaxf+0x12>
 800c018:	462c      	mov	r4, r5
 800c01a:	4620      	mov	r0, r4
 800c01c:	bd38      	pop	{r3, r4, r5, pc}
 800c01e:	4628      	mov	r0, r5
 800c020:	f000 f81e 	bl	800c060 <__fpclassifyf>
 800c024:	2800      	cmp	r0, #0
 800c026:	d0f8      	beq.n	800c01a <fmaxf+0xe>
 800c028:	4629      	mov	r1, r5
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7f5 f850 	bl	80010d0 <__aeabi_fcmpgt>
 800c030:	2800      	cmp	r0, #0
 800c032:	d0f1      	beq.n	800c018 <fmaxf+0xc>
 800c034:	e7f1      	b.n	800c01a <fmaxf+0xe>

0800c036 <fminf>:
 800c036:	b538      	push	{r3, r4, r5, lr}
 800c038:	4604      	mov	r4, r0
 800c03a:	460d      	mov	r5, r1
 800c03c:	f000 f810 	bl	800c060 <__fpclassifyf>
 800c040:	b910      	cbnz	r0, 800c048 <fminf+0x12>
 800c042:	462c      	mov	r4, r5
 800c044:	4620      	mov	r0, r4
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	4628      	mov	r0, r5
 800c04a:	f000 f809 	bl	800c060 <__fpclassifyf>
 800c04e:	2800      	cmp	r0, #0
 800c050:	d0f8      	beq.n	800c044 <fminf+0xe>
 800c052:	4629      	mov	r1, r5
 800c054:	4620      	mov	r0, r4
 800c056:	f7f5 f81d 	bl	8001094 <__aeabi_fcmplt>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d0f1      	beq.n	800c042 <fminf+0xc>
 800c05e:	e7f1      	b.n	800c044 <fminf+0xe>

0800c060 <__fpclassifyf>:
 800c060:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800c064:	d00d      	beq.n	800c082 <__fpclassifyf+0x22>
 800c066:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c06a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c06e:	d30a      	bcc.n	800c086 <__fpclassifyf+0x26>
 800c070:	4b07      	ldr	r3, [pc, #28]	@ (800c090 <__fpclassifyf+0x30>)
 800c072:	1e42      	subs	r2, r0, #1
 800c074:	429a      	cmp	r2, r3
 800c076:	d908      	bls.n	800c08a <__fpclassifyf+0x2a>
 800c078:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c07c:	4258      	negs	r0, r3
 800c07e:	4158      	adcs	r0, r3
 800c080:	4770      	bx	lr
 800c082:	2002      	movs	r0, #2
 800c084:	4770      	bx	lr
 800c086:	2004      	movs	r0, #4
 800c088:	4770      	bx	lr
 800c08a:	2003      	movs	r0, #3
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	007ffffe 	.word	0x007ffffe

0800c094 <round>:
 800c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c096:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c09a:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800c09e:	2a13      	cmp	r2, #19
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	dc1a      	bgt.n	800c0de <round+0x4a>
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	da0b      	bge.n	800c0c4 <round+0x30>
 800c0ac:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800c0b0:	3201      	adds	r2, #1
 800c0b2:	bf04      	itt	eq
 800c0b4:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c0b8:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c0bc:	2200      	movs	r2, #0
 800c0be:	461d      	mov	r5, r3
 800c0c0:	4614      	mov	r4, r2
 800c0c2:	e016      	b.n	800c0f2 <round+0x5e>
 800c0c4:	4815      	ldr	r0, [pc, #84]	@ (800c11c <round+0x88>)
 800c0c6:	4110      	asrs	r0, r2
 800c0c8:	4001      	ands	r1, r0
 800c0ca:	4321      	orrs	r1, r4
 800c0cc:	d011      	beq.n	800c0f2 <round+0x5e>
 800c0ce:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c0d2:	fa41 f202 	asr.w	r2, r1, r2
 800c0d6:	4413      	add	r3, r2
 800c0d8:	ea23 0300 	bic.w	r3, r3, r0
 800c0dc:	e7ee      	b.n	800c0bc <round+0x28>
 800c0de:	2a33      	cmp	r2, #51	@ 0x33
 800c0e0:	dd0a      	ble.n	800c0f8 <round+0x64>
 800c0e2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c0e6:	d104      	bne.n	800c0f2 <round+0x5e>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f7f4 f83f 	bl	800016c <__adddf3>
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	460d      	mov	r5, r1
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fc:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800c100:	40f8      	lsrs	r0, r7
 800c102:	4220      	tst	r0, r4
 800c104:	d0f5      	beq.n	800c0f2 <round+0x5e>
 800c106:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c10a:	2201      	movs	r2, #1
 800c10c:	408a      	lsls	r2, r1
 800c10e:	1912      	adds	r2, r2, r4
 800c110:	bf28      	it	cs
 800c112:	3301      	addcs	r3, #1
 800c114:	ea22 0200 	bic.w	r2, r2, r0
 800c118:	e7d1      	b.n	800c0be <round+0x2a>
 800c11a:	bf00      	nop
 800c11c:	000fffff 	.word	0x000fffff

0800c120 <_init>:
 800c120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c122:	bf00      	nop
 800c124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c126:	bc08      	pop	{r3}
 800c128:	469e      	mov	lr, r3
 800c12a:	4770      	bx	lr

0800c12c <_fini>:
 800c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12e:	bf00      	nop
 800c130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c132:	bc08      	pop	{r3}
 800c134:	469e      	mov	lr, r3
 800c136:	4770      	bx	lr
