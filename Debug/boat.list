
boat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f3c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08009048  08009048  0000a048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009298  08009298  0000b0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009298  08009298  0000b0a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009298  08009298  0000b0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009298  08009298  0000a298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800929c  0800929c  0000a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080092a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200000a0  08009340  0000b0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08009340  0000b520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014593  00000000  00000000  0000b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339b  00000000  00000000  0001f65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  000229f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa0  00000000  00000000  00023e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9f3  00000000  00000000  00024da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ca2  00000000  00000000  0003f793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092041  00000000  00000000  00058435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fec  00000000  00000000  000ea4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f04a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009030 	.word	0x08009030

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08009030 	.word	0x08009030

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_frsub>:
 8000514:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__addsf3>
 800051a:	bf00      	nop

0800051c <__aeabi_fsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000520 <__addsf3>:
 8000520:	0042      	lsls	r2, r0, #1
 8000522:	bf1f      	itttt	ne
 8000524:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000528:	ea92 0f03 	teqne	r2, r3
 800052c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000530:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000534:	d06a      	beq.n	800060c <__addsf3+0xec>
 8000536:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800053a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800053e:	bfc1      	itttt	gt
 8000540:	18d2      	addgt	r2, r2, r3
 8000542:	4041      	eorgt	r1, r0
 8000544:	4048      	eorgt	r0, r1
 8000546:	4041      	eorgt	r1, r0
 8000548:	bfb8      	it	lt
 800054a:	425b      	neglt	r3, r3
 800054c:	2b19      	cmp	r3, #25
 800054e:	bf88      	it	hi
 8000550:	4770      	bxhi	lr
 8000552:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000556:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800055a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800055e:	bf18      	it	ne
 8000560:	4240      	negne	r0, r0
 8000562:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000566:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800056a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800056e:	bf18      	it	ne
 8000570:	4249      	negne	r1, r1
 8000572:	ea92 0f03 	teq	r2, r3
 8000576:	d03f      	beq.n	80005f8 <__addsf3+0xd8>
 8000578:	f1a2 0201 	sub.w	r2, r2, #1
 800057c:	fa41 fc03 	asr.w	ip, r1, r3
 8000580:	eb10 000c 	adds.w	r0, r0, ip
 8000584:	f1c3 0320 	rsb	r3, r3, #32
 8000588:	fa01 f103 	lsl.w	r1, r1, r3
 800058c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000590:	d502      	bpl.n	8000598 <__addsf3+0x78>
 8000592:	4249      	negs	r1, r1
 8000594:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000598:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800059c:	d313      	bcc.n	80005c6 <__addsf3+0xa6>
 800059e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005a2:	d306      	bcc.n	80005b2 <__addsf3+0x92>
 80005a4:	0840      	lsrs	r0, r0, #1
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	f102 0201 	add.w	r2, r2, #1
 80005ae:	2afe      	cmp	r2, #254	@ 0xfe
 80005b0:	d251      	bcs.n	8000656 <__addsf3+0x136>
 80005b2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80005b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005ba:	bf08      	it	eq
 80005bc:	f020 0001 	biceq.w	r0, r0, #1
 80005c0:	ea40 0003 	orr.w	r0, r0, r3
 80005c4:	4770      	bx	lr
 80005c6:	0049      	lsls	r1, r1, #1
 80005c8:	eb40 0000 	adc.w	r0, r0, r0
 80005cc:	3a01      	subs	r2, #1
 80005ce:	bf28      	it	cs
 80005d0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80005d4:	d2ed      	bcs.n	80005b2 <__addsf3+0x92>
 80005d6:	fab0 fc80 	clz	ip, r0
 80005da:	f1ac 0c08 	sub.w	ip, ip, #8
 80005de:	ebb2 020c 	subs.w	r2, r2, ip
 80005e2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005e6:	bfaa      	itet	ge
 80005e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ec:	4252      	neglt	r2, r2
 80005ee:	4318      	orrge	r0, r3
 80005f0:	bfbc      	itt	lt
 80005f2:	40d0      	lsrlt	r0, r2
 80005f4:	4318      	orrlt	r0, r3
 80005f6:	4770      	bx	lr
 80005f8:	f092 0f00 	teq	r2, #0
 80005fc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000600:	bf06      	itte	eq
 8000602:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000606:	3201      	addeq	r2, #1
 8000608:	3b01      	subne	r3, #1
 800060a:	e7b5      	b.n	8000578 <__addsf3+0x58>
 800060c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000610:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000614:	bf18      	it	ne
 8000616:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800061a:	d021      	beq.n	8000660 <__addsf3+0x140>
 800061c:	ea92 0f03 	teq	r2, r3
 8000620:	d004      	beq.n	800062c <__addsf3+0x10c>
 8000622:	f092 0f00 	teq	r2, #0
 8000626:	bf08      	it	eq
 8000628:	4608      	moveq	r0, r1
 800062a:	4770      	bx	lr
 800062c:	ea90 0f01 	teq	r0, r1
 8000630:	bf1c      	itt	ne
 8000632:	2000      	movne	r0, #0
 8000634:	4770      	bxne	lr
 8000636:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800063a:	d104      	bne.n	8000646 <__addsf3+0x126>
 800063c:	0040      	lsls	r0, r0, #1
 800063e:	bf28      	it	cs
 8000640:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000644:	4770      	bx	lr
 8000646:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800064a:	bf3c      	itt	cc
 800064c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000650:	4770      	bxcc	lr
 8000652:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000656:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800065a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800065e:	4770      	bx	lr
 8000660:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000664:	bf16      	itet	ne
 8000666:	4608      	movne	r0, r1
 8000668:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800066c:	4601      	movne	r1, r0
 800066e:	0242      	lsls	r2, r0, #9
 8000670:	bf06      	itte	eq
 8000672:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000676:	ea90 0f01 	teqeq	r0, r1
 800067a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800067e:	4770      	bx	lr

08000680 <__aeabi_ui2f>:
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e004      	b.n	8000690 <__aeabi_i2f+0x8>
 8000686:	bf00      	nop

08000688 <__aeabi_i2f>:
 8000688:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800068c:	bf48      	it	mi
 800068e:	4240      	negmi	r0, r0
 8000690:	ea5f 0c00 	movs.w	ip, r0
 8000694:	bf08      	it	eq
 8000696:	4770      	bxeq	lr
 8000698:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800069c:	4601      	mov	r1, r0
 800069e:	f04f 0000 	mov.w	r0, #0
 80006a2:	e01c      	b.n	80006de <__aeabi_l2f+0x2a>

080006a4 <__aeabi_ul2f>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	e00a      	b.n	80006c8 <__aeabi_l2f+0x14>
 80006b2:	bf00      	nop

080006b4 <__aeabi_l2f>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80006c0:	d502      	bpl.n	80006c8 <__aeabi_l2f+0x14>
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	ea5f 0c01 	movs.w	ip, r1
 80006cc:	bf02      	ittt	eq
 80006ce:	4684      	moveq	ip, r0
 80006d0:	4601      	moveq	r1, r0
 80006d2:	2000      	moveq	r0, #0
 80006d4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80006d8:	bf08      	it	eq
 80006da:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80006de:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006e2:	fabc f28c 	clz	r2, ip
 80006e6:	3a08      	subs	r2, #8
 80006e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ec:	db10      	blt.n	8000710 <__aeabi_l2f+0x5c>
 80006ee:	fa01 fc02 	lsl.w	ip, r1, r2
 80006f2:	4463      	add	r3, ip
 80006f4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006f8:	f1c2 0220 	rsb	r2, r2, #32
 80006fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000700:	fa20 f202 	lsr.w	r2, r0, r2
 8000704:	eb43 0002 	adc.w	r0, r3, r2
 8000708:	bf08      	it	eq
 800070a:	f020 0001 	biceq.w	r0, r0, #1
 800070e:	4770      	bx	lr
 8000710:	f102 0220 	add.w	r2, r2, #32
 8000714:	fa01 fc02 	lsl.w	ip, r1, r2
 8000718:	f1c2 0220 	rsb	r2, r2, #32
 800071c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000720:	fa21 f202 	lsr.w	r2, r1, r2
 8000724:	eb43 0002 	adc.w	r0, r3, r2
 8000728:	bf08      	it	eq
 800072a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800072e:	4770      	bx	lr

08000730 <__aeabi_fmul>:
 8000730:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000734:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000738:	bf1e      	ittt	ne
 800073a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800073e:	ea92 0f0c 	teqne	r2, ip
 8000742:	ea93 0f0c 	teqne	r3, ip
 8000746:	d06f      	beq.n	8000828 <__aeabi_fmul+0xf8>
 8000748:	441a      	add	r2, r3
 800074a:	ea80 0c01 	eor.w	ip, r0, r1
 800074e:	0240      	lsls	r0, r0, #9
 8000750:	bf18      	it	ne
 8000752:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000756:	d01e      	beq.n	8000796 <__aeabi_fmul+0x66>
 8000758:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800075c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000760:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000764:	fba0 3101 	umull	r3, r1, r0, r1
 8000768:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800076c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000770:	bf3e      	ittt	cc
 8000772:	0049      	lslcc	r1, r1, #1
 8000774:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000778:	005b      	lslcc	r3, r3, #1
 800077a:	ea40 0001 	orr.w	r0, r0, r1
 800077e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000782:	2afd      	cmp	r2, #253	@ 0xfd
 8000784:	d81d      	bhi.n	80007c2 <__aeabi_fmul+0x92>
 8000786:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800078a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800078e:	bf08      	it	eq
 8000790:	f020 0001 	biceq.w	r0, r0, #1
 8000794:	4770      	bx	lr
 8000796:	f090 0f00 	teq	r0, #0
 800079a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800079e:	bf08      	it	eq
 80007a0:	0249      	lsleq	r1, r1, #9
 80007a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007aa:	3a7f      	subs	r2, #127	@ 0x7f
 80007ac:	bfc2      	ittt	gt
 80007ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80007b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007b6:	4770      	bxgt	lr
 80007b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	dc5d      	bgt.n	8000880 <__aeabi_fmul+0x150>
 80007c4:	f112 0f19 	cmn.w	r2, #25
 80007c8:	bfdc      	itt	le
 80007ca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80007ce:	4770      	bxle	lr
 80007d0:	f1c2 0200 	rsb	r2, r2, #0
 80007d4:	0041      	lsls	r1, r0, #1
 80007d6:	fa21 f102 	lsr.w	r1, r1, r2
 80007da:	f1c2 0220 	rsb	r2, r2, #32
 80007de:	fa00 fc02 	lsl.w	ip, r0, r2
 80007e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007e6:	f140 0000 	adc.w	r0, r0, #0
 80007ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ee:	bf08      	it	eq
 80007f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f4:	4770      	bx	lr
 80007f6:	f092 0f00 	teq	r2, #0
 80007fa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007fe:	bf02      	ittt	eq
 8000800:	0040      	lsleq	r0, r0, #1
 8000802:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000806:	3a01      	subeq	r2, #1
 8000808:	d0f9      	beq.n	80007fe <__aeabi_fmul+0xce>
 800080a:	ea40 000c 	orr.w	r0, r0, ip
 800080e:	f093 0f00 	teq	r3, #0
 8000812:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000816:	bf02      	ittt	eq
 8000818:	0049      	lsleq	r1, r1, #1
 800081a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800081e:	3b01      	subeq	r3, #1
 8000820:	d0f9      	beq.n	8000816 <__aeabi_fmul+0xe6>
 8000822:	ea41 010c 	orr.w	r1, r1, ip
 8000826:	e78f      	b.n	8000748 <__aeabi_fmul+0x18>
 8000828:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800082c:	ea92 0f0c 	teq	r2, ip
 8000830:	bf18      	it	ne
 8000832:	ea93 0f0c 	teqne	r3, ip
 8000836:	d00a      	beq.n	800084e <__aeabi_fmul+0x11e>
 8000838:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800083c:	bf18      	it	ne
 800083e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000842:	d1d8      	bne.n	80007f6 <__aeabi_fmul+0xc6>
 8000844:	ea80 0001 	eor.w	r0, r0, r1
 8000848:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800084c:	4770      	bx	lr
 800084e:	f090 0f00 	teq	r0, #0
 8000852:	bf17      	itett	ne
 8000854:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000858:	4608      	moveq	r0, r1
 800085a:	f091 0f00 	teqne	r1, #0
 800085e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000862:	d014      	beq.n	800088e <__aeabi_fmul+0x15e>
 8000864:	ea92 0f0c 	teq	r2, ip
 8000868:	d101      	bne.n	800086e <__aeabi_fmul+0x13e>
 800086a:	0242      	lsls	r2, r0, #9
 800086c:	d10f      	bne.n	800088e <__aeabi_fmul+0x15e>
 800086e:	ea93 0f0c 	teq	r3, ip
 8000872:	d103      	bne.n	800087c <__aeabi_fmul+0x14c>
 8000874:	024b      	lsls	r3, r1, #9
 8000876:	bf18      	it	ne
 8000878:	4608      	movne	r0, r1
 800087a:	d108      	bne.n	800088e <__aeabi_fmul+0x15e>
 800087c:	ea80 0001 	eor.w	r0, r0, r1
 8000880:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000884:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000888:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800088c:	4770      	bx	lr
 800088e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000892:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000896:	4770      	bx	lr

08000898 <__aeabi_fdiv>:
 8000898:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008a0:	bf1e      	ittt	ne
 80008a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a6:	ea92 0f0c 	teqne	r2, ip
 80008aa:	ea93 0f0c 	teqne	r3, ip
 80008ae:	d069      	beq.n	8000984 <__aeabi_fdiv+0xec>
 80008b0:	eba2 0203 	sub.w	r2, r2, r3
 80008b4:	ea80 0c01 	eor.w	ip, r0, r1
 80008b8:	0249      	lsls	r1, r1, #9
 80008ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008be:	d037      	beq.n	8000930 <__aeabi_fdiv+0x98>
 80008c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80008c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008d0:	428b      	cmp	r3, r1
 80008d2:	bf38      	it	cc
 80008d4:	005b      	lslcc	r3, r3, #1
 80008d6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80008da:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80008de:	428b      	cmp	r3, r1
 80008e0:	bf24      	itt	cs
 80008e2:	1a5b      	subcs	r3, r3, r1
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008ec:	bf24      	itt	cs
 80008ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008fa:	bf24      	itt	cs
 80008fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000908:	bf24      	itt	cs
 800090a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800090e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	bf18      	it	ne
 8000916:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800091a:	d1e0      	bne.n	80008de <__aeabi_fdiv+0x46>
 800091c:	2afd      	cmp	r2, #253	@ 0xfd
 800091e:	f63f af50 	bhi.w	80007c2 <__aeabi_fmul+0x92>
 8000922:	428b      	cmp	r3, r1
 8000924:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000928:	bf08      	it	eq
 800092a:	f020 0001 	biceq.w	r0, r0, #1
 800092e:	4770      	bx	lr
 8000930:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000934:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000938:	327f      	adds	r2, #127	@ 0x7f
 800093a:	bfc2      	ittt	gt
 800093c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000940:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000944:	4770      	bxgt	lr
 8000946:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	3a01      	subs	r2, #1
 8000950:	e737      	b.n	80007c2 <__aeabi_fmul+0x92>
 8000952:	f092 0f00 	teq	r2, #0
 8000956:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800095a:	bf02      	ittt	eq
 800095c:	0040      	lsleq	r0, r0, #1
 800095e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000962:	3a01      	subeq	r2, #1
 8000964:	d0f9      	beq.n	800095a <__aeabi_fdiv+0xc2>
 8000966:	ea40 000c 	orr.w	r0, r0, ip
 800096a:	f093 0f00 	teq	r3, #0
 800096e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000972:	bf02      	ittt	eq
 8000974:	0049      	lsleq	r1, r1, #1
 8000976:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800097a:	3b01      	subeq	r3, #1
 800097c:	d0f9      	beq.n	8000972 <__aeabi_fdiv+0xda>
 800097e:	ea41 010c 	orr.w	r1, r1, ip
 8000982:	e795      	b.n	80008b0 <__aeabi_fdiv+0x18>
 8000984:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000988:	ea92 0f0c 	teq	r2, ip
 800098c:	d108      	bne.n	80009a0 <__aeabi_fdiv+0x108>
 800098e:	0242      	lsls	r2, r0, #9
 8000990:	f47f af7d 	bne.w	800088e <__aeabi_fmul+0x15e>
 8000994:	ea93 0f0c 	teq	r3, ip
 8000998:	f47f af70 	bne.w	800087c <__aeabi_fmul+0x14c>
 800099c:	4608      	mov	r0, r1
 800099e:	e776      	b.n	800088e <__aeabi_fmul+0x15e>
 80009a0:	ea93 0f0c 	teq	r3, ip
 80009a4:	d104      	bne.n	80009b0 <__aeabi_fdiv+0x118>
 80009a6:	024b      	lsls	r3, r1, #9
 80009a8:	f43f af4c 	beq.w	8000844 <__aeabi_fmul+0x114>
 80009ac:	4608      	mov	r0, r1
 80009ae:	e76e      	b.n	800088e <__aeabi_fmul+0x15e>
 80009b0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80009b4:	bf18      	it	ne
 80009b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80009ba:	d1ca      	bne.n	8000952 <__aeabi_fdiv+0xba>
 80009bc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80009c0:	f47f af5c 	bne.w	800087c <__aeabi_fmul+0x14c>
 80009c4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80009c8:	f47f af3c 	bne.w	8000844 <__aeabi_fmul+0x114>
 80009cc:	e75f      	b.n	800088e <__aeabi_fmul+0x15e>
 80009ce:	bf00      	nop

080009d0 <__gesf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpsf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__lesf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpsf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpsf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fa:	d011      	beq.n	8000a20 <__cmpsf2+0x40>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a02:	bf18      	it	ne
 8000a04:	ea90 0f01 	teqne	r0, r1
 8000a08:	bf58      	it	pl
 8000a0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a0e:	bf88      	it	hi
 8000a10:	17c8      	asrhi	r0, r1, #31
 8000a12:	bf38      	it	cc
 8000a14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a18:	bf18      	it	ne
 8000a1a:	f040 0001 	orrne.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a24:	d102      	bne.n	8000a2c <__cmpsf2+0x4c>
 8000a26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a2a:	d105      	bne.n	8000a38 <__cmpsf2+0x58>
 8000a2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a30:	d1e4      	bne.n	80009fc <__cmpsf2+0x1c>
 8000a32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a36:	d0e1      	beq.n	80009fc <__cmpsf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cfrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4608      	mov	r0, r1
 8000a44:	4661      	mov	r1, ip
 8000a46:	e7ff      	b.n	8000a48 <__aeabi_cfcmpeq>

08000a48 <__aeabi_cfcmpeq>:
 8000a48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a4a:	f7ff ffc9 	bl	80009e0 <__cmpsf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a58 <__aeabi_fcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_fcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffd2 	bl	8000a40 <__aeabi_cfrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_fcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc8 	bl	8000a40 <__aeabi_cfrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6153      	str	r3, [r2, #20]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f001 fe97 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f001 feb0 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200d      	movs	r0, #13
 8000af0:	f001 fe8f 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000af4:	200d      	movs	r0, #13
 8000af6:	f001 fea8 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200f      	movs	r0, #15
 8000b00:	f001 fe87 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f001 fea0 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2010      	movs	r0, #16
 8000b10:	f001 fe7f 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b14:	2010      	movs	r0, #16
 8000b16:	f001 fe98 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2011      	movs	r0, #17
 8000b20:	f001 fe77 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b24:	2011      	movs	r0, #17
 8000b26:	f001 fe90 	bl	800284a <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <apply_deadzone>:
 *	应用死区处理
 * @param raw 原始输入值
 * @param processed 处理后的值
 */
static void apply_deadzone(int raw, int *processed)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	*processed = raw;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]

	// 中心死区
	if (abs(raw - CENTER) <= CENTER_DEADZONE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b4e:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 8000b52:	db09      	blt.n	8000b68 <apply_deadzone+0x30>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b5c:	dc04      	bgt.n	8000b68 <apply_deadzone+0x30>
	{
		*processed = CENTER;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b64:	601a      	str	r2, [r3, #0]
	}
	else if (raw >= 4096 - EDGE_DEADZONE)
	{
		*processed = 4096;
	}
}
 8000b66:	e00f      	b.n	8000b88 <apply_deadzone+0x50>
	else if (raw <= EDGE_DEADZONE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b14      	cmp	r3, #20
 8000b6c:	dc03      	bgt.n	8000b76 <apply_deadzone+0x3e>
		*processed = 0;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
}
 8000b74:	e008      	b.n	8000b88 <apply_deadzone+0x50>
	else if (raw >= 4096 - EDGE_DEADZONE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	dd03      	ble.n	8000b88 <apply_deadzone+0x50>
		*processed = 4096;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <speed_to_pwm>:
/* 速度转PWM值
 * @param speed 速度值 (-1.0到1.0)
 * @return PWM值 (0到100%)
 */
static int speed_to_pwm(float speed)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	float abs_speed = fabsf(speed);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ba2:	60fb      	str	r3, [r7, #12]
	if (abs_speed <= 0)
 8000ba4:	f04f 0100 	mov.w	r1, #0
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff ff69 	bl	8000a80 <__aeabi_fcmple>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <speed_to_pwm+0x24>
		return 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e024      	b.n	8000c02 <speed_to_pwm+0x6e>
	return (int)round(PWM_MIN + ((abs_speed - 1) / 99) * PWM_RANGE);
 8000bb8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff fcad 	bl	800051c <__aeabi_fsub>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4911      	ldr	r1, [pc, #68]	@ (8000c0c <speed_to_pwm+0x78>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe66 	bl	8000898 <__aeabi_fdiv>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4910      	ldr	r1, [pc, #64]	@ (8000c10 <speed_to_pwm+0x7c>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fdad 	bl	8000730 <__aeabi_fmul>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	490e      	ldr	r1, [pc, #56]	@ (8000c14 <speed_to_pwm+0x80>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fca0 	bl	8000520 <__addsf3>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc16 	bl	8000414 <__aeabi_f2d>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f008 f9d8 	bl	8008fa4 <round>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fc62 	bl	80004c4 <__aeabi_d2iz>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	42c60000 	.word	0x42c60000
 8000c10:	428c0000 	.word	0x428c0000
 8000c14:	4414c000 	.word	0x4414c000

08000c18 <motor_control>:
 *	@param motor 电机控制结构体
 *	@param speed 速度值 (-1.0到1.0)
 *   @return 无
 */
static void motor_control(MotorController *motor, float speed)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	// 计算PWM值
	int pwm = speed_to_pwm(speed);
 8000c22:	6838      	ldr	r0, [r7, #0]
 8000c24:	f7ff ffb6 	bl	8000b94 <speed_to_pwm>
 8000c28:	60f8      	str	r0, [r7, #12]

	if (throttle_percent > 0)
 8000c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e14 <motor_control+0x1fc>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 0100 	mov.w	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff38 	bl	8000aa8 <__aeabi_fcmpgt>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 809f 	beq.w	8000d7e <motor_control+0x166>
	{
		if (speed >= 0)
 8000c40:	f04f 0100 	mov.w	r1, #0
 8000c44:	6838      	ldr	r0, [r7, #0]
 8000c46:	f7ff ff25 	bl	8000a94 <__aeabi_fcmpge>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d046      	beq.n	8000cde <motor_control+0xc6>
		{
			/* code */
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d105      	bne.n	8000c64 <motor_control+0x4c>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c62:	e018      	b.n	8000c96 <motor_control+0x7e>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d105      	bne.n	8000c78 <motor_control+0x60>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	2300      	movs	r3, #0
 8000c74:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c76:	e00e      	b.n	8000c96 <motor_control+0x7e>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d105      	bne.n	8000c8c <motor_control+0x74>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	2300      	movs	r3, #0
 8000c88:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c8a:	e004      	b.n	8000c96 <motor_control+0x7e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	2300      	movs	r3, #0
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, pwm);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d105      	bne.n	8000caa <motor_control+0x92>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	635a      	str	r2, [r3, #52]	@ 0x34
	else
	{
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
	}
}
 8000ca8:	e0b0      	b.n	8000e0c <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, pwm);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d105      	bne.n	8000cbe <motor_control+0xa6>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cbc:	e0a6      	b.n	8000e0c <motor_control+0x1f4>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d105      	bne.n	8000cd2 <motor_control+0xba>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cd0:	e09c      	b.n	8000e0c <motor_control+0x1f4>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cdc:	e096      	b.n	8000e0c <motor_control+0x1f4>
		else if (speed <= 0)
 8000cde:	f04f 0100 	mov.w	r1, #0
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	f7ff fecc 	bl	8000a80 <__aeabi_fcmple>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <motor_control+0xd8>
}
 8000cee:	e08d      	b.n	8000e0c <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, pwm);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d105      	bne.n	8000d04 <motor_control+0xec>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d02:	e018      	b.n	8000d36 <motor_control+0x11e>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d105      	bne.n	8000d18 <motor_control+0x100>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d16:	e00e      	b.n	8000d36 <motor_control+0x11e>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d105      	bne.n	8000d2c <motor_control+0x114>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d2a:	e004      	b.n	8000d36 <motor_control+0x11e>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d105      	bne.n	8000d4a <motor_control+0x132>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d48:	e060      	b.n	8000e0c <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d105      	bne.n	8000d5e <motor_control+0x146>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d5c:	e056      	b.n	8000e0c <motor_control+0x1f4>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d105      	bne.n	8000d72 <motor_control+0x15a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d70:	e04c      	b.n	8000e0c <motor_control+0x1f4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d7c:	e046      	b.n	8000e0c <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d105      	bne.n	8000d92 <motor_control+0x17a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d90:	e018      	b.n	8000dc4 <motor_control+0x1ac>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d105      	bne.n	8000da6 <motor_control+0x18e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2300      	movs	r3, #0
 8000da2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000da4:	e00e      	b.n	8000dc4 <motor_control+0x1ac>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d105      	bne.n	8000dba <motor_control+0x1a2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2300      	movs	r3, #0
 8000db6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000db8:	e004      	b.n	8000dc4 <motor_control+0x1ac>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d105      	bne.n	8000dd8 <motor_control+0x1c0>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000dd6:	e019      	b.n	8000e0c <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d105      	bne.n	8000dec <motor_control+0x1d4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000dea:	e00f      	b.n	8000e0c <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d105      	bne.n	8000e00 <motor_control+0x1e8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000dfe:	e005      	b.n	8000e0c <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e0a:	e7ff      	b.n	8000e0c <motor_control+0x1f4>
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000bc 	.word	0x200000bc

08000e18 <update_motion_control>:

// 主控制函数
void update_motion_control(int *input_array)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	int x_processed, y_processed;  // 处理后的输入值
	float x_norm, y_norm;		   // 归一化后的输入值
	float left_speed, right_speed; // 左右电机速度

	// 1. 应用死区处理
	apply_deadzone(input_array[0], &x_processed);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fe84 	bl	8000b38 <apply_deadzone>
	apply_deadzone(input_array[1], &y_processed);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3304      	adds	r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f107 0208 	add.w	r2, r7, #8
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe7b 	bl	8000b38 <apply_deadzone>

	// 2. 归一化处理 (-1.0到1.0范围)
	x_norm = (x_processed - CENTER) / (float)(CENTER - EDGE_DEADZONE);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc1d 	bl	8000688 <__aeabi_i2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	495f      	ldr	r1, [pc, #380]	@ (8000fd0 <update_motion_control+0x1b8>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fd20 	bl	8000898 <__aeabi_fdiv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	61fb      	str	r3, [r7, #28]
	y_norm = (y_processed - CENTER) / (float)(CENTER - EDGE_DEADZONE);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fc10 	bl	8000688 <__aeabi_i2f>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4959      	ldr	r1, [pc, #356]	@ (8000fd0 <update_motion_control+0x1b8>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd13 	bl	8000898 <__aeabi_fdiv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	61bb      	str	r3, [r7, #24]

	// 限制在[-1, 1]范围内
	x_norm = fmaxf(-1.0f, fminf(1.0f, x_norm));
 8000e76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e7a:	69f8      	ldr	r0, [r7, #28]
 8000e7c:	f008 f863 	bl	8008f46 <fminf>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4954      	ldr	r1, [pc, #336]	@ (8000fd4 <update_motion_control+0x1bc>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f008 f849 	bl	8008f1c <fmaxf>
 8000e8a:	61f8      	str	r0, [r7, #28]
	y_norm = fmaxf(-1.0f, fminf(1.0f, y_norm));
 8000e8c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e90:	69b8      	ldr	r0, [r7, #24]
 8000e92:	f008 f858 	bl	8008f46 <fminf>
 8000e96:	4603      	mov	r3, r0
 8000e98:	494e      	ldr	r1, [pc, #312]	@ (8000fd4 <update_motion_control+0x1bc>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f008 f83e 	bl	8008f1c <fmaxf>
 8000ea0:	61b8      	str	r0, [r7, #24]

	// 3. 计算油门百分比 (0-100%)
	if (input_array[2] > CENTER && input_array[2] < (4096 - EDGE_DEADZONE))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000eac:	dd24      	ble.n	8000ef8 <update_motion_control+0xe0>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	dc1d      	bgt.n	8000ef8 <update_motion_control+0xe0>
	{
		throttle_percent = ((input_array[2] - 2048) / (float)2048) * 99 + 1; // 范围 在1到100之间
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fbde 	bl	8000688 <__aeabi_i2f>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fce0 	bl	8000898 <__aeabi_fdiv>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	493f      	ldr	r1, [pc, #252]	@ (8000fd8 <update_motion_control+0x1c0>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fc27 	bl	8000730 <__aeabi_fmul>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fb19 	bl	8000520 <__addsf3>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <update_motion_control+0x1c4>)
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e014      	b.n	8000f22 <update_motion_control+0x10a>
	}
	else if (input_array[2] >= (4096 - EDGE_DEADZONE))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3308      	adds	r3, #8
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8000f02:	4293      	cmp	r3, r2
 8000f04:	dd03      	ble.n	8000f0e <update_motion_control+0xf6>
	{
		throttle_percent = 100;
 8000f06:	4b35      	ldr	r3, [pc, #212]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f08:	4a35      	ldr	r2, [pc, #212]	@ (8000fe0 <update_motion_control+0x1c8>)
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e009      	b.n	8000f22 <update_motion_control+0x10a>
	}
	else if (input_array[2] <= CENTER)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3308      	adds	r3, #8
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f18:	dc03      	bgt.n	8000f22 <update_motion_control+0x10a>
	{
		throttle_percent = 0;
 8000f1a:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	}
	
	// 限制在[0, 100]范围内
	throttle_percent = fmaxf(0.0f, fminf(100.0f, throttle_percent));
 8000f22:	4b2e      	ldr	r3, [pc, #184]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	492e      	ldr	r1, [pc, #184]	@ (8000fe0 <update_motion_control+0x1c8>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f008 f80c 	bl	8008f46 <fminf>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f04f 0100 	mov.w	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fff1 	bl	8008f1c <fmaxf>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a27      	ldr	r2, [pc, #156]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f3e:	6013      	str	r3, [r2, #0]

	// 4. 差速驱动计算
	left_speed = (y_norm + x_norm) * throttle_percent / 100.0f;	 // 左电机速度
 8000f40:	69f9      	ldr	r1, [r7, #28]
 8000f42:	69b8      	ldr	r0, [r7, #24]
 8000f44:	f7ff faec 	bl	8000520 <__addsf3>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f7ff fbec 	bl	8000730 <__aeabi_fmul>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4921      	ldr	r1, [pc, #132]	@ (8000fe0 <update_motion_control+0x1c8>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fc9b 	bl	8000898 <__aeabi_fdiv>
 8000f62:	4603      	mov	r3, r0
 8000f64:	617b      	str	r3, [r7, #20]
	right_speed = (y_norm - x_norm) * throttle_percent / 100.0f; // 右电机速度
 8000f66:	69f9      	ldr	r1, [r7, #28]
 8000f68:	69b8      	ldr	r0, [r7, #24]
 8000f6a:	f7ff fad7 	bl	800051c <__aeabi_fsub>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4610      	mov	r0, r2
 8000f7a:	f7ff fbd9 	bl	8000730 <__aeabi_fmul>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4917      	ldr	r1, [pc, #92]	@ (8000fe0 <update_motion_control+0x1c8>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fc88 	bl	8000898 <__aeabi_fdiv>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	613b      	str	r3, [r7, #16]

	// 限幅处理 (确保在-100%到100%之间)
	left_speed = fmaxf(-1.0f, fminf(1.0f, left_speed));
 8000f8c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f90:	6978      	ldr	r0, [r7, #20]
 8000f92:	f007 ffd8 	bl	8008f46 <fminf>
 8000f96:	4603      	mov	r3, r0
 8000f98:	490e      	ldr	r1, [pc, #56]	@ (8000fd4 <update_motion_control+0x1bc>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 ffbe 	bl	8008f1c <fmaxf>
 8000fa0:	6178      	str	r0, [r7, #20]
	right_speed = fmaxf(-1.0f, fminf(1.0f, right_speed));
 8000fa2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000fa6:	6938      	ldr	r0, [r7, #16]
 8000fa8:	f007 ffcd 	bl	8008f46 <fminf>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4909      	ldr	r1, [pc, #36]	@ (8000fd4 <update_motion_control+0x1bc>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f007 ffb3 	bl	8008f1c <fmaxf>
 8000fb6:	6138      	str	r0, [r7, #16]

	// 5. 控制电机
	motor_control(&left_motor, left_speed);
 8000fb8:	6979      	ldr	r1, [r7, #20]
 8000fba:	480a      	ldr	r0, [pc, #40]	@ (8000fe4 <update_motion_control+0x1cc>)
 8000fbc:	f7ff fe2c 	bl	8000c18 <motor_control>
	motor_control(&right_motor, right_speed);
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <update_motion_control+0x1d0>)
 8000fc4:	f7ff fe28 	bl	8000c18 <motor_control>
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	44fd8000 	.word	0x44fd8000
 8000fd4:	bf800000 	.word	0xbf800000
 8000fd8:	42c60000 	.word	0x42c60000
 8000fdc:	200000bc 	.word	0x200000bc
 8000fe0:	42c80000 	.word	0x42c80000
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	2000001c 	.word	0x2000001c

08000fec <quiescent>:

// 停止电机
void quiescent(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	motor_control(&left_motor, 0);
 8000ff0:	f04f 0100 	mov.w	r1, #0
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <quiescent+0x1c>)
 8000ff6:	f7ff fe0f 	bl	8000c18 <motor_control>
	motor_control(&right_motor, 0);
 8000ffa:	f04f 0100 	mov.w	r1, #0
 8000ffe:	4803      	ldr	r0, [pc, #12]	@ (800100c <quiescent+0x20>)
 8001000:	f7ff fe0a 	bl	8000c18 <motor_control>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	2000001c 	.word	0x2000001c

08001010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	4b4c      	ldr	r3, [pc, #304]	@ (8001158 <MX_GPIO_Init+0x148>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a4b      	ldr	r2, [pc, #300]	@ (8001158 <MX_GPIO_Init+0x148>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b49      	ldr	r3, [pc, #292]	@ (8001158 <MX_GPIO_Init+0x148>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103c:	4b46      	ldr	r3, [pc, #280]	@ (8001158 <MX_GPIO_Init+0x148>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a45      	ldr	r2, [pc, #276]	@ (8001158 <MX_GPIO_Init+0x148>)
 8001042:	f043 0320 	orr.w	r3, r3, #32
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b43      	ldr	r3, [pc, #268]	@ (8001158 <MX_GPIO_Init+0x148>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <MX_GPIO_Init+0x148>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a3f      	ldr	r2, [pc, #252]	@ (8001158 <MX_GPIO_Init+0x148>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b3d      	ldr	r3, [pc, #244]	@ (8001158 <MX_GPIO_Init+0x148>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b3a      	ldr	r3, [pc, #232]	@ (8001158 <MX_GPIO_Init+0x148>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a39      	ldr	r2, [pc, #228]	@ (8001158 <MX_GPIO_Init+0x148>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b37      	ldr	r3, [pc, #220]	@ (8001158 <MX_GPIO_Init+0x148>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800108a:	4834      	ldr	r0, [pc, #208]	@ (800115c <MX_GPIO_Init+0x14c>)
 800108c:	f002 f82a 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	210b      	movs	r1, #11
 8001094:	4832      	ldr	r0, [pc, #200]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001096:	f002 f825 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800109a:	2200      	movs	r2, #0
 800109c:	f247 5130 	movw	r1, #30000	@ 0x7530
 80010a0:	482f      	ldr	r0, [pc, #188]	@ (8001160 <MX_GPIO_Init+0x150>)
 80010a2:	f002 f81f 	bl	80030e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4827      	ldr	r0, [pc, #156]	@ (800115c <MX_GPIO_Init+0x14c>)
 80010c0:	f001 fe8c 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 80010c4:	2310      	movs	r3, #16
 80010c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	4823      	ldr	r0, [pc, #140]	@ (8001164 <MX_GPIO_Init+0x154>)
 80010d8:	f001 fe80 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 80010dc:	2303      	movs	r3, #3
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	481b      	ldr	r0, [pc, #108]	@ (8001160 <MX_GPIO_Init+0x150>)
 80010f4:	f001 fe72 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80010f8:	f247 4330 	movw	r3, #29744	@ 0x7430
 80010fc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	4813      	ldr	r0, [pc, #76]	@ (8001160 <MX_GPIO_Init+0x150>)
 8001112:	f001 fe63 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001116:	2308      	movs	r3, #8
 8001118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4619      	mov	r1, r3
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <MX_GPIO_Init+0x150>)
 800112e:	f001 fe55 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001132:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001138:	2311      	movs	r3, #17
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_GPIO_Init+0x150>)
 800114c:	f001 fe46 	bl	8002ddc <HAL_GPIO_Init>

}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000
 800115c:	40011000 	.word	0x40011000
 8001160:	40010c00 	.word	0x40010c00
 8001164:	40010800 	.word	0x40010800

08001168 <HAL_UART_RxCpltCallback>:
uint8_t gps_data_parsed = 0; // GPS数据解析完成标志
uint8_t gps_data_received = 0; // GPS数据接收完成标志
uint8_t gps_data_error = 0; // GPS数据错误标志

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a05      	ldr	r2, [pc, #20]	@ (800118c <HAL_UART_RxCpltCallback+0x24>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d102      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x18>
    {
        // 接收数据完成，设置标志位
        gps_data_received = 1;
 800117a:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_UART_RxCpltCallback+0x28>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
    }
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40013800 	.word	0x40013800
 8001190:	200000c0 	.word	0x200000c0

08001194 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_I2C1_Init+0x50>)
 800119a:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <MX_I2C1_Init+0x54>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011a0:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <MX_I2C1_Init+0x58>)
 80011a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_I2C1_Init+0x50>)
 80011d2:	f001 ffb9 	bl	8003148 <HAL_I2C_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011dc:	f000 f993 	bl	8001506 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000c4 	.word	0x200000c4
 80011e8:	40005400 	.word	0x40005400
 80011ec:	00061a80 	.word	0x00061a80

080011f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a45      	ldr	r2, [pc, #276]	@ (8001320 <HAL_I2C_MspInit+0x130>)
 800120c:	4293      	cmp	r3, r2
 800120e:	f040 8082 	bne.w	8001316 <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b44      	ldr	r3, [pc, #272]	@ (8001324 <HAL_I2C_MspInit+0x134>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a43      	ldr	r2, [pc, #268]	@ (8001324 <HAL_I2C_MspInit+0x134>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b41      	ldr	r3, [pc, #260]	@ (8001324 <HAL_I2C_MspInit+0x134>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800122a:	23c0      	movs	r3, #192	@ 0xc0
 800122c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	2312      	movs	r3, #18
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	483a      	ldr	r0, [pc, #232]	@ (8001328 <HAL_I2C_MspInit+0x138>)
 800123e:	f001 fdcd 	bl	8002ddc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001242:	4b38      	ldr	r3, [pc, #224]	@ (8001324 <HAL_I2C_MspInit+0x134>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a37      	ldr	r2, [pc, #220]	@ (8001324 <HAL_I2C_MspInit+0x134>)
 8001248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b35      	ldr	r3, [pc, #212]	@ (8001324 <HAL_I2C_MspInit+0x134>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800125a:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 800125c:	4a34      	ldr	r2, [pc, #208]	@ (8001330 <HAL_I2C_MspInit+0x140>)
 800125e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001266:	4b31      	ldr	r3, [pc, #196]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800126c:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001272:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001278:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 8001286:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800128a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800128c:	4827      	ldr	r0, [pc, #156]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 800128e:	f001 faf7 	bl	8002880 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8001298:	f000 f935 	bl	8001506 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a23      	ldr	r2, [pc, #140]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 80012a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80012a2:	4a22      	ldr	r2, [pc, #136]	@ (800132c <HAL_I2C_MspInit+0x13c>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012aa:	4a23      	ldr	r2, [pc, #140]	@ (8001338 <HAL_I2C_MspInit+0x148>)
 80012ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012b0:	2210      	movs	r2, #16
 80012b2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012bc:	2280      	movs	r2, #128	@ 0x80
 80012be:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80012da:	4816      	ldr	r0, [pc, #88]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012dc:	f001 fad0 	bl	8002880 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80012e6:	f000 f90e 	bl	8001506 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f0:	4a10      	ldr	r2, [pc, #64]	@ (8001334 <HAL_I2C_MspInit+0x144>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	201f      	movs	r0, #31
 80012fc:	f001 fa89 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001300:	201f      	movs	r0, #31
 8001302:	f001 faa2 	bl	800284a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2020      	movs	r0, #32
 800130c:	f001 fa81 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001310:	2020      	movs	r0, #32
 8001312:	f001 fa9a 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40005400 	.word	0x40005400
 8001324:	40021000 	.word	0x40021000
 8001328:	40010c00 	.word	0x40010c00
 800132c:	20000118 	.word	0x20000118
 8001330:	40020080 	.word	0x40020080
 8001334:	2000015c 	.word	0x2000015c
 8001338:	4002006c 	.word	0x4002006c

0800133c <parse_input_str>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void parse_input_str(char *str, int arr[4])
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  char *token = strtok(str, ",");
 8001346:	4911      	ldr	r1, [pc, #68]	@ (800138c <parse_input_str+0x50>)
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f006 fee3 	bl	8008114 <strtok>
 800134e:	60f8      	str	r0, [r7, #12]
  for (int i = 0; i < 4 && token != NULL; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	e010      	b.n	8001378 <parse_input_str+0x3c>
  {
    arr[i] = atoi(token);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	18d4      	adds	r4, r2, r3
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f006 fd42 	bl	8007de8 <atoi>
 8001364:	4603      	mov	r3, r0
 8001366:	6023      	str	r3, [r4, #0]
    token = strtok(NULL, ",");
 8001368:	4908      	ldr	r1, [pc, #32]	@ (800138c <parse_input_str+0x50>)
 800136a:	2000      	movs	r0, #0
 800136c:	f006 fed2 	bl	8008114 <strtok>
 8001370:	60f8      	str	r0, [r7, #12]
  for (int i = 0; i < 4 && token != NULL; i++)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3301      	adds	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b03      	cmp	r3, #3
 800137c:	dc02      	bgt.n	8001384 <parse_input_str+0x48>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e8      	bne.n	8001356 <parse_input_str+0x1a>
  }
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	08009048 	.word	0x08009048

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t i = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
  uint32_t j = 0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 800139a:	f001 f8dd 	bl	8002558 <HAL_Init>

  /* USER CODE BEGIN Init */
  //  HAL_SYSTICK_IRQHandler();
  /* USER CODE END Init */

  /* Configure the system clock */
 800139e:	f000 f86d 	bl	800147c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 80013a2:	f7ff fe35 	bl	8001010 <MX_GPIO_Init>
  MX_GPIO_Init();
 80013a6:	f7ff fb89 	bl	8000abc <MX_DMA_Init>
  MX_DMA_Init();
 80013aa:	f7ff fef3 	bl	8001194 <MX_I2C1_Init>
  MX_I2C1_Init();
 80013ae:	f000 fc21 	bl	8001bf4 <MX_SPI1_Init>
  MX_SPI1_Init();
 80013b2:	f001 f82d 	bl	8002410 <MX_USART1_UART_Init>
  MX_USART1_UART_Init();
 80013b6:	f000 fe91 	bl	80020dc <MX_TIM1_Init>
  MX_TIM1_Init();
 80013ba:	f000 fee1 	bl	8002180 <MX_TIM2_Init>
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  // 启动定时器中断
 80013be:	4829      	ldr	r0, [pc, #164]	@ (8001464 <main+0xd4>)
 80013c0:	f005 f8d8 	bl	8006574 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);

 80013c4:	2100      	movs	r1, #0
 80013c6:	4828      	ldr	r0, [pc, #160]	@ (8001468 <main+0xd8>)
 80013c8:	f005 f97e 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013cc:	2104      	movs	r1, #4
 80013ce:	4826      	ldr	r0, [pc, #152]	@ (8001468 <main+0xd8>)
 80013d0:	f005 f97a 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013d4:	2108      	movs	r1, #8
 80013d6:	4824      	ldr	r0, [pc, #144]	@ (8001468 <main+0xd8>)
 80013d8:	f005 f976 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013dc:	210c      	movs	r1, #12
 80013de:	4822      	ldr	r0, [pc, #136]	@ (8001468 <main+0xd8>)
 80013e0:	f005 f972 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

 80013e4:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <main+0xd8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2200      	movs	r2, #0
 80013ea:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // 设置占空比50%
 80013ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <main+0xd8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // 设置占空比50%

 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <main+0xd8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0); // 设置占空比50%
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <main+0xd8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0); // 设置占空比50%

  //	OLED_Init();

  // RF24L01引脚初始化
 8001404:	f000 fb74 	bl	8001af0 <NRF24L01_Gpio_Init>
  NRF24L01_Gpio_Init();

  // 检测nRF24L01
 8001408:	bf00      	nop
 800140a:	f000 fa2f 	bl	800186c <NRF24L01_check_DMA>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0fa      	beq.n	800140a <main+0x7a>
  while (NRF24L01_check_DMA() == 0)
    ;
 8001414:	f000 fb88 	bl	8001b28 <RF24L01_Init_DMA>
  RF24L01_Init_DMA();
 8001418:	2001      	movs	r0, #1
 800141a:	f000 fab7 	bl	800198c <RF24L01_Set_Mode_DMA>
 
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800141e:	4813      	ldr	r0, [pc, #76]	@ (800146c <main+0xdc>)
 8001420:	f000 fb0c 	bl	8001a3c <NRF24L01_RxPacket_DMA>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d012      	beq.n	8001450 <main+0xc0>
  {
    if (0 != NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer)) // 接收字节
 800142a:	4911      	ldr	r1, [pc, #68]	@ (8001470 <main+0xe0>)
 800142c:	480f      	ldr	r0, [pc, #60]	@ (800146c <main+0xdc>)
 800142e:	f7ff ff85 	bl	800133c <parse_input_str>
    {
      parse_input_str(g_RF24L01RxBuffer, RX_BUFF); // 解析接收数据
 8001432:	480f      	ldr	r0, [pc, #60]	@ (8001470 <main+0xe0>)
 8001434:	f7ff fcf0 	bl	8000e18 <update_motion_control>

      update_motion_control(RX_BUFF); // 更新电机控制
 8001438:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <main+0xe4>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <main+0xe4>)
 8001442:	701a      	strb	r2, [r3, #0]

      i = 0; // 计数器清零
 8001444:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001448:	480b      	ldr	r0, [pc, #44]	@ (8001478 <main+0xe8>)
 800144a:	f001 fe63 	bl	8003114 <HAL_GPIO_TogglePin>
 800144e:	e7e6      	b.n	800141e <main+0x8e>

      // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001450:	4806      	ldr	r0, [pc, #24]	@ (800146c <main+0xdc>)
 8001452:	f000 faf3 	bl	8001a3c <NRF24L01_RxPacket_DMA>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e0      	bne.n	800141e <main+0x8e>
    }
    else
 800145c:	f7ff fdc6 	bl	8000fec <quiescent>
  while (1)
 8001460:	e7dd      	b.n	800141e <main+0x8e>
 8001462:	bf00      	nop
 8001464:	200002b4 	.word	0x200002b4
 8001468:	200002fc 	.word	0x200002fc
 800146c:	200001b0 	.word	0x200001b0
 8001470:	200001a0 	.word	0x200001a0
 8001474:	200001c4 	.word	0x200001c4
 8001478:	40011000 	.word	0x40011000

0800147c <SystemClock_Config>:
            conversion = 0; // 重置转换标志
          }
          j++;
          HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
        } while (conversion >= 3); // 发送数据

 800147c:	b580      	push	{r7, lr}
 800147e:	b090      	sub	sp, #64	@ 0x40
 8001480:	af00      	add	r7, sp, #0
        RF24L01_Set_Mode_DMA(MODE_RX); // 接收模式
 8001482:	f107 0318 	add.w	r3, r7, #24
 8001486:	2228      	movs	r2, #40	@ 0x28
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f006 fe39 	bl	8008102 <memset>
      }
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 3 */
 80014a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a6:	61fb      	str	r3, [r7, #28]
}
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]

 80014ac:	2301      	movs	r3, #1
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
/**
 80014b0:	2302      	movs	r3, #2
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
  * @brief System Clock Configuration
 80014b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  * @retval None
 80014ba:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  */
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fc91 	bl	8004dec <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x58>
void SystemClock_Config(void)
{
 80014d0:	f000 f819 	bl	8001506 <Error_Handler>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
 80014d4:	230f      	movs	r3, #15
 80014d6:	607b      	str	r3, [r7, #4]
  */
 80014d8:	2302      	movs	r3, #2
 80014da:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014e4:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fefe 	bl	80052f0 <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x82>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80014fa:	f000 f804 	bl	8001506 <Error_Handler>
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
 80014fe:	bf00      	nop
 8001500:	3740      	adds	r7, #64	@ 0x40
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <Error_Handler>:
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150a:	b672      	cpsid	i
}
 800150c:	bf00      	nop

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
 800150e:	bf00      	nop
 8001510:	e7fd      	b.n	800150e <Error_Handler+0x8>
	...

08001514 <drv_spi_read_write_byte>:
 *         @TxByte: 发送的数据字节
 * @note  :非堵塞式，一旦等待超时，函数会自动退出
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte(uint8_t TxByte)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1, &TxByte, &rx_data, 1, HAL_MAX_DELAY);
 800151e:	f107 020f 	add.w	r2, r7, #15
 8001522:	1df9      	adds	r1, r7, #7
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <drv_spi_read_write_byte+0x28>)
 800152e:	f004 f8f1 	bl	8005714 <HAL_SPI_TransmitReceive>
//    HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
//    while (HAL_SPI_GetState(&SPI1))!=HAL_SPI_STATE_READY);
	return rx_data;      //返回
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200001c8 	.word	0x200001c8

08001540 <drv_spi_read_write_byte_dma>:
 *         @TxByte: 发送的数据字节
 * @note  :使用DMA进行SPI传输，需要等待传输完成
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte_dma(uint8_t TxByte)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_StatusTypeDef status;

	// 使用DMA进行SPI传输
	status = HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
 800154a:	f107 020e 	add.w	r2, r7, #14
 800154e:	1df9      	adds	r1, r7, #7
 8001550:	2301      	movs	r3, #1
 8001552:	480b      	ldr	r0, [pc, #44]	@ (8001580 <drv_spi_read_write_byte_dma+0x40>)
 8001554:	f004 fb3a 	bl	8005bcc <HAL_SPI_TransmitReceive_DMA>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <drv_spi_read_write_byte_dma+0x26>
	{
		// 处理错误情况
		Error_Handler();
 8001562:	f7ff ffd0 	bl	8001506 <Error_Handler>
	}

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001566:	bf00      	nop
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <drv_spi_read_write_byte_dma+0x40>)
 800156a:	f004 fd50 	bl	800600e <HAL_SPI_GetState>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d1f9      	bne.n	8001568 <drv_spi_read_write_byte_dma+0x28>

	return rx_data;
 8001574:	7bbb      	ldrb	r3, [r7, #14]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200001c8 	.word	0x200001c8

08001584 <drv_spi_read_write_buffer_dma>:
/*​
 * @brief SPI DMA方式读写缓冲区
 */
HAL_StatusTypeDef drv_spi_read_write_buffer_dma(uint8_t *tx_buf,
        uint8_t *rx_buf, uint16_t len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	4613      	mov	r3, r2
 8001590:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf,
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	68f9      	ldr	r1, [r7, #12]
 8001598:	4808      	ldr	r0, [pc, #32]	@ (80015bc <drv_spi_read_write_buffer_dma+0x38>)
 800159a:	f004 fb17 	bl	8005bcc <HAL_SPI_TransmitReceive_DMA>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]
	        rx_buf, len);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80015a2:	bf00      	nop
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <drv_spi_read_write_buffer_dma+0x38>)
 80015a6:	f004 fd32 	bl	800600e <HAL_SPI_GetState>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d1f9      	bne.n	80015a4 <drv_spi_read_write_buffer_dma+0x20>
	return status;
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001c8 	.word	0x200001c8

080015c0 <NRF24L01_Read_Reg_DMA>:
 *         @RegAddr:寄存器地址
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:读取的数据
 */
uint8_t NRF24L01_Read_Reg_DMA(uint8_t RegAddr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[2] = { NRF_READ_REG | RegAddr, 0xFF };  // 命令+空数据
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	733b      	strb	r3, [r7, #12]
 80015ce:	23ff      	movs	r3, #255	@ 0xff
 80015d0:	737b      	strb	r3, [r7, #13]
	uint8_t rx_buf[2] = { 0 };                            // 接收缓冲区
 80015d2:	2300      	movs	r3, #0
 80015d4:	813b      	strh	r3, [r7, #8]

	RF24L01_SET_CS_LOW();          // 片选
 80015d6:	2200      	movs	r2, #0
 80015d8:	2102      	movs	r1, #2
 80015da:	480e      	ldr	r0, [pc, #56]	@ (8001614 <NRF24L01_Read_Reg_DMA+0x54>)
 80015dc:	f001 fd82 	bl	80030e4 <HAL_GPIO_WritePin>

	// 使用DMA进行SPI传输
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 80015e0:	f107 0208 	add.w	r2, r7, #8
 80015e4:	f107 010c 	add.w	r1, r7, #12
 80015e8:	2302      	movs	r3, #2
 80015ea:	480b      	ldr	r0, [pc, #44]	@ (8001618 <NRF24L01_Read_Reg_DMA+0x58>)
 80015ec:	f004 faee 	bl	8005bcc <HAL_SPI_TransmitReceive_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80015f0:	bf00      	nop
 80015f2:	4809      	ldr	r0, [pc, #36]	@ (8001618 <NRF24L01_Read_Reg_DMA+0x58>)
 80015f4:	f004 fd0b 	bl	800600e <HAL_SPI_GetState>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d1f9      	bne.n	80015f2 <NRF24L01_Read_Reg_DMA+0x32>

	RF24L01_SET_CS_HIGH();         // 取消片选
 80015fe:	2201      	movs	r2, #1
 8001600:	2102      	movs	r1, #2
 8001602:	4804      	ldr	r0, [pc, #16]	@ (8001614 <NRF24L01_Read_Reg_DMA+0x54>)
 8001604:	f001 fd6e 	bl	80030e4 <HAL_GPIO_WritePin>

	return rx_buf[1];              // 返回接收到的数据
 8001608:	7a7b      	ldrb	r3, [r7, #9]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40010c00 	.word	0x40010c00
 8001618:	200001c8 	.word	0x200001c8

0800161c <NRF24L01_Read_Buf_DMA>:
 *         @len: 数据长度
 * @note  :数据长度不超过255，地址在设备中有效
 * @retval:无
 */
void NRF24L01_Read_Buf_DMA(uint8_t RegAddr, uint8_t *pBuf, uint8_t len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b092      	sub	sp, #72	@ 0x48
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	4613      	mov	r3, r2
 800162a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[32];  // 最大32字节
	uint8_t rx_buf[32];

	// 准备发送数据
	tx_buf[0] = NRF_READ_REG | RegAddr;
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	memset(&tx_buf[1], 0xFF, len);  // 填充0xFF用于读取
 8001632:	79ba      	ldrb	r2, [r7, #6]
 8001634:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001638:	3301      	adds	r3, #1
 800163a:	21ff      	movs	r1, #255	@ 0xff
 800163c:	4618      	mov	r0, r3
 800163e:	f006 fd60 	bl	8008102 <memset>

	RF24L01_SET_CS_LOW();          // 片选
 8001642:	2200      	movs	r2, #0
 8001644:	2102      	movs	r1, #2
 8001646:	480f      	ldr	r0, [pc, #60]	@ (8001684 <NRF24L01_Read_Buf_DMA+0x68>)
 8001648:	f001 fd4c 	bl	80030e4 <HAL_GPIO_WritePin>

	// 使用DMA批量传输
	drv_spi_read_write_buffer_dma(tx_buf, rx_buf, len + 1);
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	b29b      	uxth	r3, r3
 8001650:	3301      	adds	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	f107 0108 	add.w	r1, r7, #8
 8001658:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff91 	bl	8001584 <drv_spi_read_write_buffer_dma>

	// 复制接收到的数据到输出缓冲区
	memcpy(pBuf, &rx_buf[1], len);
 8001662:	79ba      	ldrb	r2, [r7, #6]
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	3301      	adds	r3, #1
 800166a:	4619      	mov	r1, r3
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f006 fe20 	bl	80082b2 <memcpy>

	RF24L01_SET_CS_HIGH();         // 取消片选
 8001672:	2201      	movs	r2, #1
 8001674:	2102      	movs	r1, #2
 8001676:	4803      	ldr	r0, [pc, #12]	@ (8001684 <NRF24L01_Read_Buf_DMA+0x68>)
 8001678:	f001 fd34 	bl	80030e4 <HAL_GPIO_WritePin>
}
 800167c:	bf00      	nop
 800167e:	3748      	adds	r7, #72	@ 0x48
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40010c00 	.word	0x40010c00

08001688 <NRF24L01_Write_Reg_DMA>:
 *         @Value:要写入的值
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:无
 */
void NRF24L01_Write_Reg_DMA(uint8_t RegAddr, uint8_t Value)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[2] = { NRF_WRITE_REG | RegAddr, Value };  // 命令+数据
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f043 0320 	orr.w	r3, r3, #32
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	733b      	strb	r3, [r7, #12]
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();      // 片选
 80016a6:	2200      	movs	r2, #0
 80016a8:	2102      	movs	r1, #2
 80016aa:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <NRF24L01_Write_Reg_DMA+0x58>)
 80016ac:	f001 fd1a 	bl	80030e4 <HAL_GPIO_WritePin>

	// 使用DMA进行SPI传输
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2202      	movs	r2, #2
 80016b6:	4619      	mov	r1, r3
 80016b8:	480a      	ldr	r0, [pc, #40]	@ (80016e4 <NRF24L01_Write_Reg_DMA+0x5c>)
 80016ba:	f004 f9d5 	bl	8005a68 <HAL_SPI_Transmit_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80016be:	bf00      	nop
 80016c0:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <NRF24L01_Write_Reg_DMA+0x5c>)
 80016c2:	f004 fca4 	bl	800600e <HAL_SPI_GetState>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d1f9      	bne.n	80016c0 <NRF24L01_Write_Reg_DMA+0x38>

	RF24L01_SET_CS_HIGH();     // 取消片选
 80016cc:	2201      	movs	r2, #1
 80016ce:	2102      	movs	r1, #2
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <NRF24L01_Write_Reg_DMA+0x58>)
 80016d2:	f001 fd07 	bl	80030e4 <HAL_GPIO_WritePin>
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	200001c8 	.word	0x200001c8

080016e8 <NRF24L01_Read_Status_Register>:
 * @param :无
 * @note  :无
 * @retval:RF24L01状态
 */
uint8_t NRF24L01_Read_Status_Register(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	uint8_t Status;

	RF24L01_SET_CS_LOW();      //片选
 80016ee:	2200      	movs	r2, #0
 80016f0:	2102      	movs	r1, #2
 80016f2:	4809      	ldr	r0, [pc, #36]	@ (8001718 <NRF24L01_Read_Status_Register+0x30>)
 80016f4:	f001 fcf6 	bl	80030e4 <HAL_GPIO_WritePin>

	Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS);  //读状态寄存器
 80016f8:	2007      	movs	r0, #7
 80016fa:	f7ff ff0b 	bl	8001514 <drv_spi_read_write_byte>
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]

	RF24L01_SET_CS_HIGH();     //取消片选
 8001702:	2201      	movs	r2, #1
 8001704:	2102      	movs	r1, #2
 8001706:	4804      	ldr	r0, [pc, #16]	@ (8001718 <NRF24L01_Read_Status_Register+0x30>)
 8001708:	f001 fcec 	bl	80030e4 <HAL_GPIO_WritePin>

	return Status;
 800170c:	79fb      	ldrb	r3, [r7, #7]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40010c00 	.word	0x40010c00

0800171c <NRF24L01_Clear_IRQ_Flag>:
 @IRQ_Source:中断源
 * @note  :无
 * @retval:清除后状态寄存器的值
 */
uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); // 保留有效中断位
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800172c:	71fb      	strb	r3, [r7, #7]
	status = NRF24L01_Read_Status_Register();                  // 读取当前状态
 800172e:	f7ff ffdb 	bl	80016e8 <NRF24L01_Read_Status_Register>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // 拉低CSN
 8001736:	2200      	movs	r2, #0
 8001738:	2102      	movs	r1, #2
 800173a:	480c      	ldr	r0, [pc, #48]	@ (800176c <NRF24L01_Clear_IRQ_Flag+0x50>)
 800173c:	f001 fcd2 	bl	80030e4 <HAL_GPIO_WritePin>
	drv_spi_read_write_byte(NRF_WRITE_REG + STATUS);          // 发送写命令
 8001740:	2027      	movs	r0, #39	@ 0x27
 8001742:	f7ff fee7 	bl	8001514 <drv_spi_read_write_byte>
	drv_spi_read_write_byte(status | IRQ_Source);             // 写1清中断标志[1]
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4313      	orrs	r3, r2
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fee0 	bl	8001514 <drv_spi_read_write_byte>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // 拉高CSN
 8001754:	2201      	movs	r2, #1
 8001756:	2102      	movs	r1, #2
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <NRF24L01_Clear_IRQ_Flag+0x50>)
 800175a:	f001 fcc3 	bl	80030e4 <HAL_GPIO_WritePin>

	return NRF24L01_Read_Status_Register();                   // 返回新状态
 800175e:	f7ff ffc3 	bl	80016e8 <NRF24L01_Read_Status_Register>
 8001762:	4603      	mov	r3, r0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40010c00 	.word	0x40010c00

08001770 <NRF24L01_Set_TxAddr_DMA>:
 * @param :
 *         @pAddr:地址存放地址
 *         @len:长度
 */
void NRF24L01_Set_TxAddr_DMA(uint8_t *pAddr, uint8_t len)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
	uint8_t tx_buf[6];  // 命令+5字节地址

	len = (len > 5) ? 5 : len;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	2b05      	cmp	r3, #5
 8001780:	bf28      	it	cs
 8001782:	2305      	movcs	r3, #5
 8001784:	70fb      	strb	r3, [r7, #3]
	tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8001786:	2330      	movs	r3, #48	@ 0x30
 8001788:	723b      	strb	r3, [r7, #8]
	memcpy(&tx_buf[1], pAddr, len);
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	3301      	adds	r3, #1
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	f006 fd8c 	bl	80082b2 <memcpy>

	RF24L01_SET_CS_LOW();
 800179a:	2200      	movs	r2, #0
 800179c:	2102      	movs	r1, #2
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <NRF24L01_Set_TxAddr_DMA+0x68>)
 80017a0:	f001 fca0 	bl	80030e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, len + 1);
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4619      	mov	r1, r3
 80017b2:	480a      	ldr	r0, [pc, #40]	@ (80017dc <NRF24L01_Set_TxAddr_DMA+0x6c>)
 80017b4:	f004 f958 	bl	8005a68 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80017b8:	bf00      	nop
 80017ba:	4808      	ldr	r0, [pc, #32]	@ (80017dc <NRF24L01_Set_TxAddr_DMA+0x6c>)
 80017bc:	f004 fc27 	bl	800600e <HAL_SPI_GetState>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d1f9      	bne.n	80017ba <NRF24L01_Set_TxAddr_DMA+0x4a>
	RF24L01_SET_CS_HIGH();
 80017c6:	2201      	movs	r2, #1
 80017c8:	2102      	movs	r1, #2
 80017ca:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <NRF24L01_Set_TxAddr_DMA+0x68>)
 80017cc:	f001 fc8a 	bl	80030e4 <HAL_GPIO_WritePin>
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	200001c8 	.word	0x200001c8

080017e0 <NRF24L01_Set_RxAddr_DMA>:
 *         @PipeNum:通道
 *         @pAddr:地址存放地址
 *         @Len:长度
 */
void NRF24L01_Set_RxAddr_DMA(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[6];  // 命令+5字节地址

	Len = (Len > 5) ? 5 : Len;
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	bf28      	it	cs
 80017f6:	2305      	movcs	r3, #5
 80017f8:	71bb      	strb	r3, [r7, #6]
	PipeNum = (PipeNum > 5) ? 5 : PipeNum;
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	bf28      	it	cs
 8001800:	2305      	movcs	r3, #5
 8001802:	71fb      	strb	r3, [r7, #7]

	tx_buf[0] = NRF_WRITE_REG | (RX_ADDR_P0 + PipeNum);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	330a      	adds	r3, #10
 8001808:	b2db      	uxtb	r3, r3
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	b25b      	sxtb	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	723b      	strb	r3, [r7, #8]
	memcpy(&tx_buf[1], pAddr, Len);
 8001816:	79ba      	ldrb	r2, [r7, #6]
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	3301      	adds	r3, #1
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f006 fd46 	bl	80082b2 <memcpy>

	RF24L01_SET_CS_LOW();
 8001826:	2200      	movs	r2, #0
 8001828:	2102      	movs	r1, #2
 800182a:	480e      	ldr	r0, [pc, #56]	@ (8001864 <NRF24L01_Set_RxAddr_DMA+0x84>)
 800182c:	f001 fc5a 	bl	80030e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, Len + 1);
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	b29b      	uxth	r3, r3
 8001834:	3301      	adds	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	4619      	mov	r1, r3
 800183e:	480a      	ldr	r0, [pc, #40]	@ (8001868 <NRF24L01_Set_RxAddr_DMA+0x88>)
 8001840:	f004 f912 	bl	8005a68 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001844:	bf00      	nop
 8001846:	4808      	ldr	r0, [pc, #32]	@ (8001868 <NRF24L01_Set_RxAddr_DMA+0x88>)
 8001848:	f004 fbe1 	bl	800600e <HAL_SPI_GetState>
 800184c:	4603      	mov	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d1f9      	bne.n	8001846 <NRF24L01_Set_RxAddr_DMA+0x66>
	RF24L01_SET_CS_HIGH();
 8001852:	2201      	movs	r2, #1
 8001854:	2102      	movs	r1, #2
 8001856:	4803      	ldr	r0, [pc, #12]	@ (8001864 <NRF24L01_Set_RxAddr_DMA+0x84>)
 8001858:	f001 fc44 	bl	80030e4 <HAL_GPIO_WritePin>
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40010c00 	.word	0x40010c00
 8001868:	200001c8 	.word	0x200001c8

0800186c <NRF24L01_check_DMA>:
 * @param :无
 * @note  :使用DMA进行SPI传输检测模块
 * @retval:检测结果(0:失败, 1:成功)
 */
uint8_t NRF24L01_check_DMA(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t buf[5] = { 0xA5, 0xA5, 0xA5, 0xA5, 0xA5 };
 8001872:	4a42      	ldr	r2, [pc, #264]	@ (800197c <NRF24L01_check_DMA+0x110>)
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187c:	6018      	str	r0, [r3, #0]
 800187e:	3304      	adds	r3, #4
 8001880:	7019      	strb	r1, [r3, #0]
	uint8_t tx_buf[6], rx_buf[6];
	uint32_t start_time = HAL_GetTick();
 8001882:	f000 fec1 	bl	8002608 <HAL_GetTick>
 8001886:	61b8      	str	r0, [r7, #24]

	while (1)
	{
		// 使用DMA写入地址
		tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8001888:	2330      	movs	r3, #48	@ 0x30
 800188a:	723b      	strb	r3, [r7, #8]
		memcpy(&tx_buf[1], buf, 5);
 800188c:	f107 0309 	add.w	r3, r7, #9
 8001890:	f107 0210 	add.w	r2, r7, #16
 8001894:	6810      	ldr	r0, [r2, #0]
 8001896:	6018      	str	r0, [r3, #0]
 8001898:	7912      	ldrb	r2, [r2, #4]
 800189a:	711a      	strb	r2, [r3, #4]

		RF24L01_SET_CS_LOW();
 800189c:	2200      	movs	r2, #0
 800189e:	2102      	movs	r1, #2
 80018a0:	4837      	ldr	r0, [pc, #220]	@ (8001980 <NRF24L01_check_DMA+0x114>)
 80018a2:	f001 fc1f 	bl	80030e4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 6);
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	2206      	movs	r2, #6
 80018ac:	4619      	mov	r1, r3
 80018ae:	4835      	ldr	r0, [pc, #212]	@ (8001984 <NRF24L01_check_DMA+0x118>)
 80018b0:	f004 f8da 	bl	8005a68 <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80018b4:	bf00      	nop
 80018b6:	4833      	ldr	r0, [pc, #204]	@ (8001984 <NRF24L01_check_DMA+0x118>)
 80018b8:	f004 fba9 	bl	800600e <HAL_SPI_GetState>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d1f9      	bne.n	80018b6 <NRF24L01_check_DMA+0x4a>
		RF24L01_SET_CS_HIGH();
 80018c2:	2201      	movs	r2, #1
 80018c4:	2102      	movs	r1, #2
 80018c6:	482e      	ldr	r0, [pc, #184]	@ (8001980 <NRF24L01_check_DMA+0x114>)
 80018c8:	f001 fc0c 	bl	80030e4 <HAL_GPIO_WritePin>

		// 使用DMA读取地址
		tx_buf[0] = NRF_READ_REG | TX_ADDR;
 80018cc:	2310      	movs	r3, #16
 80018ce:	723b      	strb	r3, [r7, #8]
		memset(&tx_buf[1], 0xFF, 5);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	3301      	adds	r3, #1
 80018d6:	2205      	movs	r2, #5
 80018d8:	21ff      	movs	r1, #255	@ 0xff
 80018da:	4618      	mov	r0, r3
 80018dc:	f006 fc11 	bl	8008102 <memset>

		RF24L01_SET_CS_LOW();
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	4826      	ldr	r0, [pc, #152]	@ (8001980 <NRF24L01_check_DMA+0x114>)
 80018e6:	f001 fbfd 	bl	80030e4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 6);
 80018ea:	463a      	mov	r2, r7
 80018ec:	f107 0108 	add.w	r1, r7, #8
 80018f0:	2306      	movs	r3, #6
 80018f2:	4824      	ldr	r0, [pc, #144]	@ (8001984 <NRF24L01_check_DMA+0x118>)
 80018f4:	f004 f96a 	bl	8005bcc <HAL_SPI_TransmitReceive_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80018f8:	bf00      	nop
 80018fa:	4822      	ldr	r0, [pc, #136]	@ (8001984 <NRF24L01_check_DMA+0x118>)
 80018fc:	f004 fb87 	bl	800600e <HAL_SPI_GetState>
 8001900:	4603      	mov	r3, r0
 8001902:	2b01      	cmp	r3, #1
 8001904:	d1f9      	bne.n	80018fa <NRF24L01_check_DMA+0x8e>
		RF24L01_SET_CS_HIGH();
 8001906:	2201      	movs	r2, #1
 8001908:	2102      	movs	r1, #2
 800190a:	481d      	ldr	r0, [pc, #116]	@ (8001980 <NRF24L01_check_DMA+0x114>)
 800190c:	f001 fbea 	bl	80030e4 <HAL_GPIO_WritePin>

		// 比较结果
		for (i = 0; i < 5; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
 8001914:	e00f      	b.n	8001936 <NRF24L01_check_DMA+0xca>
		{
			if (buf[i] != rx_buf[i + 1])
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	3320      	adds	r3, #32
 800191a:	443b      	add	r3, r7
 800191c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001920:	7ffb      	ldrb	r3, [r7, #31]
 8001922:	3301      	adds	r3, #1
 8001924:	3320      	adds	r3, #32
 8001926:	443b      	add	r3, r7
 8001928:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800192c:	429a      	cmp	r2, r3
 800192e:	d106      	bne.n	800193e <NRF24L01_check_DMA+0xd2>
		for (i = 0; i < 5; i++)
 8001930:	7ffb      	ldrb	r3, [r7, #31]
 8001932:	3301      	adds	r3, #1
 8001934:	77fb      	strb	r3, [r7, #31]
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d9ec      	bls.n	8001916 <NRF24L01_check_DMA+0xaa>
 800193c:	e000      	b.n	8001940 <NRF24L01_check_DMA+0xd4>
			{
				break;
 800193e:	bf00      	nop
			}
		}

		if (i == 5)
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d101      	bne.n	800194a <NRF24L01_check_DMA+0xde>
		{
			return 1; // 检测成功
 8001946:	2301      	movs	r3, #1
 8001948:	e013      	b.n	8001972 <NRF24L01_check_DMA+0x106>
		}

		// 超时处理(5秒超时)
		if (HAL_GetTick() - start_time > 5000)
 800194a:	f000 fe5d 	bl	8002608 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <NRF24L01_check_DMA+0xf4>
		{
			return 0; // 检测失败
 800195c:	2300      	movs	r3, #0
 800195e:	e008      	b.n	8001972 <NRF24L01_check_DMA+0x106>
		}

		// 错误指示
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001960:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001964:	4808      	ldr	r0, [pc, #32]	@ (8001988 <NRF24L01_check_DMA+0x11c>)
 8001966:	f001 fbd5 	bl	8003114 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800196a:	2064      	movs	r0, #100	@ 0x64
 800196c:	f000 fe56 	bl	800261c <HAL_Delay>
		tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8001970:	e78a      	b.n	8001888 <NRF24L01_check_DMA+0x1c>
	}
}
 8001972:	4618      	mov	r0, r3
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	08009068 	.word	0x08009068
 8001980:	40010c00 	.word	0x40010c00
 8001984:	200001c8 	.word	0x200001c8
 8001988:	40011000 	.word	0x40011000

0800198c <RF24L01_Set_Mode_DMA>:
 *         @Mode:模式发送模式或接收模式
 * @note  :使用DMA进行寄存器读写
 * @retval:无
 */
void RF24L01_Set_Mode_DMA(nRf24l01ModeType Mode)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[2], rx_buf[2];

	// 使用DMA读取CONFIG寄存器
	tx_buf[0] = NRF_READ_REG | CONFIG;
 8001996:	2300      	movs	r3, #0
 8001998:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0xFF;
 800199a:	23ff      	movs	r3, #255	@ 0xff
 800199c:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();
 800199e:	2200      	movs	r2, #0
 80019a0:	2102      	movs	r1, #2
 80019a2:	4824      	ldr	r0, [pc, #144]	@ (8001a34 <RF24L01_Set_Mode_DMA+0xa8>)
 80019a4:	f001 fb9e 	bl	80030e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 80019a8:	f107 0208 	add.w	r2, r7, #8
 80019ac:	f107 010c 	add.w	r1, r7, #12
 80019b0:	2302      	movs	r3, #2
 80019b2:	4821      	ldr	r0, [pc, #132]	@ (8001a38 <RF24L01_Set_Mode_DMA+0xac>)
 80019b4:	f004 f90a 	bl	8005bcc <HAL_SPI_TransmitReceive_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80019b8:	bf00      	nop
 80019ba:	481f      	ldr	r0, [pc, #124]	@ (8001a38 <RF24L01_Set_Mode_DMA+0xac>)
 80019bc:	f004 fb27 	bl	800600e <HAL_SPI_GetState>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d1f9      	bne.n	80019ba <RF24L01_Set_Mode_DMA+0x2e>
	RF24L01_SET_CS_HIGH();
 80019c6:	2201      	movs	r2, #1
 80019c8:	2102      	movs	r1, #2
 80019ca:	481a      	ldr	r0, [pc, #104]	@ (8001a34 <RF24L01_Set_Mode_DMA+0xa8>)
 80019cc:	f001 fb8a 	bl	80030e4 <HAL_GPIO_WritePin>

	uint8_t controlreg = rx_buf[1];
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	73fb      	strb	r3, [r7, #15]

	// 修改模式位
	if (Mode == MODE_TX)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d104      	bne.n	80019e4 <RF24L01_Set_Mode_DMA+0x58>
	{
		controlreg &= ~(1 << PRIM_RX);
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e006      	b.n	80019f2 <RF24L01_Set_Mode_DMA+0x66>
	}
	else if (Mode == MODE_RX)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d103      	bne.n	80019f2 <RF24L01_Set_Mode_DMA+0x66>
	{
		controlreg |= (1 << PRIM_RX);
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
	}

	// 使用DMA写入CONFIG寄存器
	tx_buf[0] = NRF_WRITE_REG | CONFIG;
 80019f2:	2320      	movs	r3, #32
 80019f4:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = controlreg;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();
 80019fa:	2200      	movs	r2, #0
 80019fc:	2102      	movs	r1, #2
 80019fe:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <RF24L01_Set_Mode_DMA+0xa8>)
 8001a00:	f001 fb70 	bl	80030e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480a      	ldr	r0, [pc, #40]	@ (8001a38 <RF24L01_Set_Mode_DMA+0xac>)
 8001a0e:	f004 f82b 	bl	8005a68 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001a12:	bf00      	nop
 8001a14:	4808      	ldr	r0, [pc, #32]	@ (8001a38 <RF24L01_Set_Mode_DMA+0xac>)
 8001a16:	f004 fafa 	bl	800600e <HAL_SPI_GetState>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d1f9      	bne.n	8001a14 <RF24L01_Set_Mode_DMA+0x88>
	RF24L01_SET_CS_HIGH();
 8001a20:	2201      	movs	r2, #1
 8001a22:	2102      	movs	r1, #2
 8001a24:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <RF24L01_Set_Mode_DMA+0xa8>)
 8001a26:	f001 fb5d 	bl	80030e4 <HAL_GPIO_WritePin>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40010c00 	.word	0x40010c00
 8001a38:	200001c8 	.word	0x200001c8

08001a3c <NRF24L01_RxPacket_DMA>:
 * @note  :无
 * @retval:接收的数据个数
 */
uint8_t NRF24L01_RxPacket_DMA(uint8_t *rxbuf)
{
	uint8_t l_Status = 0;
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	uint32_t start_time = HAL_GetTick();
 8001a44:	2300      	movs	r3, #0
 8001a46:	75fb      	strb	r3, [r7, #23]
	uint8_t l_RxLength = 0;
 8001a48:	f000 fdde 	bl	8002608 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
	RF24L01_SET_CS_LOW();      //片选
	drv_spi_read_write_byte_dma( FLUSH_RX);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2102      	movs	r1, #2
 8001a56:	4824      	ldr	r0, [pc, #144]	@ (8001ae8 <NRF24L01_RxPacket_DMA+0xac>)
 8001a58:	f001 fb44 	bl	80030e4 <HAL_GPIO_WritePin>
	RF24L01_SET_CS_HIGH();
 8001a5c:	20e2      	movs	r0, #226	@ 0xe2
 8001a5e:	f7ff fd6f 	bl	8001540 <drv_spi_read_write_byte_dma>

 8001a62:	2201      	movs	r2, #1
 8001a64:	2102      	movs	r1, #2
 8001a66:	4820      	ldr	r0, [pc, #128]	@ (8001ae8 <NRF24L01_RxPacket_DMA+0xac>)
 8001a68:	f001 fb3c 	bl	80030e4 <HAL_GPIO_WritePin>
	// 等待传输完成或超时
		while (RF24L01_GET_IRQ_STATUS() != 0)
		{
 8001a6c:	e011      	b.n	8001a92 <NRF24L01_RxPacket_DMA+0x56>
			if (HAL_GetTick() - start_time > 100)  // 500ms超时
			{
 8001a6e:	f000 fdcb 	bl	8002608 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	@ 0x64
 8001a7a:	d907      	bls.n	8001a8c <NRF24L01_RxPacket_DMA+0x50>
				NRF24L01_Gpio_Init();
				RF24L01_Init_DMA();
 8001a7c:	f000 f838 	bl	8001af0 <NRF24L01_Gpio_Init>
				RF24L01_Set_Mode_DMA(MODE_RX);
 8001a80:	f000 f852 	bl	8001b28 <RF24L01_Init_DMA>
				break;
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7ff ff81 	bl	800198c <RF24L01_Set_Mode_DMA>
			}
 8001a8a:	e008      	b.n	8001a9e <NRF24L01_RxPacket_DMA+0x62>
			HAL_Delay(1);
		}
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f000 fdc5 	bl	800261c <HAL_Delay>
		{
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <NRF24L01_RxPacket_DMA+0xb0>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d0e7      	beq.n	8001a6e <NRF24L01_RxPacket_DMA+0x32>

	l_Status = NRF24L01_Read_Reg_DMA( STATUS);     //读状态寄存器
	NRF24L01_Write_Reg_DMA( STATUS, l_Status);      //清中断标志
 8001a9e:	2007      	movs	r0, #7
 8001aa0:	f7ff fd8e 	bl	80015c0 <NRF24L01_Read_Reg_DMA>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	75fb      	strb	r3, [r7, #23]
	if (l_Status & RX_OK)   //接收到数据
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	2007      	movs	r0, #7
 8001aae:	f7ff fdeb 	bl	8001688 <NRF24L01_Write_Reg_DMA>
	{
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <NRF24L01_RxPacket_DMA+0xa2>
		l_RxLength = NRF24L01_Read_Reg_DMA( R_RX_PL_WID);      //读取接收到的数据个数
		NRF24L01_Read_Buf_DMA( RD_RX_PLOAD, rxbuf, l_RxLength);  //接收到数据
 8001abc:	2060      	movs	r0, #96	@ 0x60
 8001abe:	f7ff fd7f 	bl	80015c0 <NRF24L01_Read_Reg_DMA>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]
		NRF24L01_Write_Reg_DMA( FLUSH_RX, 0xff);                //清除RX FIFO
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	2061      	movs	r0, #97	@ 0x61
 8001ace:	f7ff fda5 	bl	800161c <NRF24L01_Read_Buf_DMA>
		return l_RxLength;
 8001ad2:	21ff      	movs	r1, #255	@ 0xff
 8001ad4:	20e2      	movs	r0, #226	@ 0xe2
 8001ad6:	f7ff fdd7 	bl	8001688 <NRF24L01_Write_Reg_DMA>
	}
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	e000      	b.n	8001ae0 <NRF24L01_RxPacket_DMA+0xa4>

	return 0;               //没有收到数据
}
 8001ade:	2300      	movs	r3, #0
/**
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	40010800 	.word	0x40010800

08001af0 <NRF24L01_Gpio_Init>:
 * @note  :无
 * @retval:无
 */
void NRF24L01_Gpio_Init(void)
{

 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2101      	movs	r1, #1
 8001af8:	4809      	ldr	r0, [pc, #36]	@ (8001b20 <NRF24L01_Gpio_Init+0x30>)
 8001afa:	f001 faf3 	bl	80030e4 <HAL_GPIO_WritePin>

 8001afe:	2201      	movs	r2, #1
 8001b00:	2110      	movs	r1, #16
 8001b02:	4808      	ldr	r0, [pc, #32]	@ (8001b24 <NRF24L01_Gpio_Init+0x34>)
 8001b04:	f001 faee 	bl	80030e4 <HAL_GPIO_WritePin>
	RF24L01_SET_CE_LOW();      //??24L01
	RF24L01_SET_CS_HIGH();     //??SPI??
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <NRF24L01_Gpio_Init+0x30>)
 8001b0e:	f001 fae9 	bl	80030e4 <HAL_GPIO_WritePin>

 8001b12:	2201      	movs	r2, #1
 8001b14:	2102      	movs	r1, #2
 8001b16:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <NRF24L01_Gpio_Init+0x30>)
 8001b18:	f001 fae4 	bl	80030e4 <HAL_GPIO_WritePin>
}

 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40010c00 	.word	0x40010c00
 8001b24:	40010800 	.word	0x40010800

08001b28 <RF24L01_Init_DMA>:
 * @note  :使用DMA批量配置寄存器，提高初始化速度
 * @retval:无
 */
void RF24L01_Init_DMA(void)
{
	uint8_t addr[5] = { INIT_ADDR };
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0

 8001b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001be4 <RF24L01_Init_DMA+0xbc>)
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b36:	6018      	str	r0, [r3, #0]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	7019      	strb	r1, [r3, #0]
	// 初始化状态
	RF24L01_SET_CE_HIGH();
	NRF24L01_Clear_IRQ_Flag(IRQ_ALL);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4829      	ldr	r0, [pc, #164]	@ (8001be8 <RF24L01_Init_DMA+0xc0>)
 8001b42:	f001 facf 	bl	80030e4 <HAL_GPIO_WritePin>

 8001b46:	2070      	movs	r0, #112	@ 0x70
 8001b48:	f7ff fde8 	bl	800171c <NRF24L01_Clear_IRQ_Flag>
	        { SETUP_RETR, ARD_4000US | (REPEAT_CNT & 0x0F) }, { RF_CH, 60 }, {
	                RF_SETUP, 0x26 } };

	// 使用DMA批量写入寄存器配置
	for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
	{
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e036      	b.n	8001bc0 <RF24L01_Init_DMA+0x98>
		uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
		        init_config[i].val };
 8001b52:	4a26      	ldr	r2, [pc, #152]	@ (8001bec <RF24L01_Init_DMA+0xc4>)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001b5a:	f043 0320 	orr.w	r3, r3, #32
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	703b      	strb	r3, [r7, #0]

 8001b62:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <RF24L01_Init_DMA+0xc4>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	785b      	ldrb	r3, [r3, #1]
		        init_config[i].val };
 8001b6c:	707b      	strb	r3, [r7, #1]
		RF24L01_SET_CS_LOW();
		HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2102      	movs	r1, #2
 8001b72:	481d      	ldr	r0, [pc, #116]	@ (8001be8 <RF24L01_Init_DMA+0xc0>)
 8001b74:	f001 fab6 	bl	80030e4 <HAL_GPIO_WritePin>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481c      	ldr	r0, [pc, #112]	@ (8001bf0 <RF24L01_Init_DMA+0xc8>)
 8001b80:	f003 ff72 	bl	8005a68 <HAL_SPI_Transmit_DMA>
		RF24L01_SET_CS_HIGH();
 8001b84:	bf00      	nop
 8001b86:	481a      	ldr	r0, [pc, #104]	@ (8001bf0 <RF24L01_Init_DMA+0xc8>)
 8001b88:	f004 fa41 	bl	800600e <HAL_SPI_GetState>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d1f9      	bne.n	8001b86 <RF24L01_Init_DMA+0x5e>

 8001b92:	2201      	movs	r2, #1
 8001b94:	2102      	movs	r1, #2
 8001b96:	4814      	ldr	r0, [pc, #80]	@ (8001be8 <RF24L01_Init_DMA+0xc0>)
 8001b98:	f001 faa4 	bl	80030e4 <HAL_GPIO_WritePin>
		// 添加必要的延时(某些寄存器写入后需要稳定时间)
		if (init_config[i].reg == CONFIG || init_config[i].reg == RF_SETUP)
		{
 8001b9c:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <RF24L01_Init_DMA+0xc4>)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <RF24L01_Init_DMA+0x8c>
 8001ba8:	4a10      	ldr	r2, [pc, #64]	@ (8001bec <RF24L01_Init_DMA+0xc4>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001bb0:	2b06      	cmp	r3, #6
 8001bb2:	d102      	bne.n	8001bba <RF24L01_Init_DMA+0x92>
			HAL_Delay(1);
		}
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f000 fd31 	bl	800261c <HAL_Delay>
	{
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d9c5      	bls.n	8001b52 <RF24L01_Init_DMA+0x2a>
	}

	// 设置地址(使用DMA版本)
	NRF24L01_Set_TxAddr_DMA(&addr[0], 5);       // 设置TX地址
	NRF24L01_Set_RxAddr_DMA(0, &addr[0], 5);    // 设置RX地址
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2105      	movs	r1, #5
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fdd0 	bl	8001770 <NRF24L01_Set_TxAddr_DMA>

 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2205      	movs	r2, #5
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fe02 	bl	80017e0 <NRF24L01_Set_RxAddr_DMA>
	// 可选的速度和功率设置
	// NRF24L01_Set_Speed_DMA(SPEED_1M);
	// NRF24L01_Set_Power_DMA(POWER_F18DBM);
}

 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	08009070 	.word	0x08009070
 8001be8:	40010c00 	.word	0x40010c00
 8001bec:	08009078 	.word	0x08009078
 8001bf0:	200001c8 	.word	0x200001c8

08001bf4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001bfa:	4a18      	ldr	r2, [pc, #96]	@ (8001c5c <MX_SPI1_Init+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c28:	2218      	movs	r2, #24
 8001c2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c38:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c40:	220a      	movs	r2, #10
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c44:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <MX_SPI1_Init+0x64>)
 8001c46:	f003 fce1 	bl	800560c <HAL_SPI_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c50:	f7ff fc59 	bl	8001506 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200001c8 	.word	0x200001c8
 8001c5c:	40013000 	.word	0x40013000

08001c60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a47      	ldr	r2, [pc, #284]	@ (8001d98 <HAL_SPI_MspInit+0x138>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	f040 8086 	bne.w	8001d8e <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c82:	4b46      	ldr	r3, [pc, #280]	@ (8001d9c <HAL_SPI_MspInit+0x13c>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a45      	ldr	r2, [pc, #276]	@ (8001d9c <HAL_SPI_MspInit+0x13c>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c8c:	6193      	str	r3, [r2, #24]
 8001c8e:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <HAL_SPI_MspInit+0x13c>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b40      	ldr	r3, [pc, #256]	@ (8001d9c <HAL_SPI_MspInit+0x13c>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d9c <HAL_SPI_MspInit+0x13c>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6193      	str	r3, [r2, #24]
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8001d9c <HAL_SPI_MspInit+0x13c>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cb2:	23a0      	movs	r3, #160	@ 0xa0
 8001cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4836      	ldr	r0, [pc, #216]	@ (8001da0 <HAL_SPI_MspInit+0x140>)
 8001cc6:	f001 f889 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cca:	2340      	movs	r3, #64	@ 0x40
 8001ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4830      	ldr	r0, [pc, #192]	@ (8001da0 <HAL_SPI_MspInit+0x140>)
 8001cde:	f001 f87d 	bl	8002ddc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001ce2:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001ce4:	4a30      	ldr	r2, [pc, #192]	@ (8001da8 <HAL_SPI_MspInit+0x148>)
 8001ce6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cee:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d00:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001d06:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001d0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d14:	4823      	ldr	r0, [pc, #140]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001d16:	f000 fdb3 	bl	8002880 <HAL_DMA_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001d20:	f7ff fbf1 	bl	8001506 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001d28:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001da4 <HAL_SPI_MspInit+0x144>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d32:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <HAL_SPI_MspInit+0x150>)
 8001d34:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d38:	2210      	movs	r2, #16
 8001d3a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d44:	2280      	movs	r2, #128	@ 0x80
 8001d46:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d48:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d54:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d62:	4812      	ldr	r0, [pc, #72]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d64:	f000 fd8c 	bl	8002880 <HAL_DMA_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001d6e:	f7ff fbca 	bl	8001506 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d76:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d78:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <HAL_SPI_MspInit+0x14c>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2023      	movs	r0, #35	@ 0x23
 8001d84:	f000 fd45 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d88:	2023      	movs	r0, #35	@ 0x23
 8001d8a:	f000 fd5e 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010800 	.word	0x40010800
 8001da4:	20000220 	.word	0x20000220
 8001da8:	4002001c 	.word	0x4002001c
 8001dac:	20000264 	.word	0x20000264
 8001db0:	40020030 	.word	0x40020030

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_MspInit+0x5c>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a14      	ldr	r2, [pc, #80]	@ (8001e10 <HAL_MspInit+0x5c>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6193      	str	r3, [r2, #24]
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_MspInit+0x5c>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <HAL_MspInit+0x5c>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <HAL_MspInit+0x5c>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_MspInit+0x5c>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_MspInit+0x60>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <HAL_MspInit+0x60>)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <NMI_Handler+0x4>

08001e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <MemManage_Handler+0x4>

08001e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e68:	f000 fbbc 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <DMA1_Channel2_IRQHandler+0x10>)
 8001e76:	f000 fe71 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000220 	.word	0x20000220

08001e84 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <DMA1_Channel3_IRQHandler+0x10>)
 8001e8a:	f000 fe67 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000264 	.word	0x20000264

08001e98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <DMA1_Channel5_IRQHandler+0x10>)
 8001e9e:	f000 fe5d 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000344 	.word	0x20000344

08001eac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <DMA1_Channel6_IRQHandler+0x10>)
 8001eb2:	f000 fe53 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000015c 	.word	0x2000015c

08001ec0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <DMA1_Channel7_IRQHandler+0x10>)
 8001ec6:	f000 fe49 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000118 	.word	0x20000118

08001ed4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <TIM1_UP_IRQHandler+0x10>)
 8001eda:	f004 fc97 	bl	800680c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200002b4 	.word	0x200002b4

08001ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <TIM2_IRQHandler+0x10>)
 8001eee:	f004 fc8d 	bl	800680c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200002fc 	.word	0x200002fc

08001efc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <I2C1_EV_IRQHandler+0x10>)
 8001f02:	f001 fa79 	bl	80033f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200000c4 	.word	0x200000c4

08001f10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <I2C1_ER_IRQHandler+0x10>)
 8001f16:	f001 fbe0 	bl	80036da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200000c4 	.word	0x200000c4

08001f24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f28:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <SPI1_IRQHandler+0x10>)
 8001f2a:	f003 ff4b 	bl	8005dc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200001c8 	.word	0x200001c8

08001f38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <USART1_IRQHandler+0x10>)
 8001f3e:	f005 fa7b 	bl	8007438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000388 	.word	0x20000388

08001f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <_kill>:

int _kill(int pid, int sig)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f64:	f006 f978 	bl	8008258 <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2216      	movs	r2, #22
 8001f6c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_exit>:

void _exit (int status)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f82:	f04f 31ff 	mov.w	r1, #4294967295
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffe7 	bl	8001f5a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <_exit+0x12>

08001f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e00a      	b.n	8001fb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fa2:	f3af 8000 	nop.w
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	b2ca      	uxtb	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbf0      	blt.n	8001fa2 <_read+0x12>
  }

  return len;
 8001fc0:	687b      	ldr	r3, [r7, #4]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e009      	b.n	8001ff0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf1      	blt.n	8001fdc <_write+0x12>
  }
  return len;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_close>:

int _close(int file)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002028:	605a      	str	r2, [r3, #4]
  return 0;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <_isatty>:

int _isatty(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800206c:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <_sbrk+0x5c>)
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <_sbrk+0x60>)
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <_sbrk+0x64>)
 8002082:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <_sbrk+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d207      	bcs.n	80020a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002094:	f006 f8e0 	bl	8008258 <__errno>
 8002098:	4603      	mov	r3, r0
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e009      	b.n	80020b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020aa:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <_sbrk+0x64>)
 80020b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20005000 	.word	0x20005000
 80020c4:	00000400 	.word	0x00000400
 80020c8:	200002a8 	.word	0x200002a8
 80020cc:	20000520 	.word	0x20000520

080020d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f0:	463b      	mov	r3, r7
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <MX_TIM1_Init+0x9c>)
 80020fa:	4a20      	ldr	r2, [pc, #128]	@ (800217c <MX_TIM1_Init+0xa0>)
 80020fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <MX_TIM1_Init+0x9c>)
 8002100:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8002104:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <MX_TIM1_Init+0x9c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800210c:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <MX_TIM1_Init+0x9c>)
 800210e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002112:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002114:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <MX_TIM1_Init+0x9c>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <MX_TIM1_Init+0x9c>)
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <MX_TIM1_Init+0x9c>)
 8002122:	2280      	movs	r2, #128	@ 0x80
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002126:	4814      	ldr	r0, [pc, #80]	@ (8002178 <MX_TIM1_Init+0x9c>)
 8002128:	f004 f9d5 	bl	80064d6 <HAL_TIM_Base_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002132:	f7ff f9e8 	bl	8001506 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	4619      	mov	r1, r3
 8002142:	480d      	ldr	r0, [pc, #52]	@ (8002178 <MX_TIM1_Init+0x9c>)
 8002144:	f004 fd14 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800214e:	f7ff f9da 	bl	8001506 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800215a:	463b      	mov	r3, r7
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	@ (8002178 <MX_TIM1_Init+0x9c>)
 8002160:	f005 f8aa 	bl	80072b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800216a:	f7ff f9cc 	bl	8001506 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200002b4 	.word	0x200002b4
 800217c:	40012c00 	.word	0x40012c00

08002180 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	@ 0x38
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	615a      	str	r2, [r3, #20]
 80021ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b0:	4b44      	ldr	r3, [pc, #272]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80021b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021b8:	4b42      	ldr	r3, [pc, #264]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 80021c4:	4b3f      	ldr	r3, [pc, #252]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80021c6:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80021ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b3d      	ldr	r3, [pc, #244]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021d2:	4b3c      	ldr	r3, [pc, #240]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80021d4:	2280      	movs	r2, #128	@ 0x80
 80021d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d8:	483a      	ldr	r0, [pc, #232]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80021da:	f004 f97c 	bl	80064d6 <HAL_TIM_Base_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021e4:	f7ff f98f 	bl	8001506 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021f2:	4619      	mov	r1, r3
 80021f4:	4833      	ldr	r0, [pc, #204]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80021f6:	f004 fcbb 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002200:	f7ff f981 	bl	8001506 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002204:	482f      	ldr	r0, [pc, #188]	@ (80022c4 <MX_TIM2_Init+0x144>)
 8002206:	f004 fa07 	bl	8006618 <HAL_TIM_PWM_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002210:	f7ff f979 	bl	8001506 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800221c:	f107 0320 	add.w	r3, r7, #32
 8002220:	4619      	mov	r1, r3
 8002222:	4828      	ldr	r0, [pc, #160]	@ (80022c4 <MX_TIM2_Init+0x144>)
 8002224:	f005 f848 	bl	80072b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800222e:	f7ff f96a 	bl	8001506 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002232:	2360      	movs	r3, #96	@ 0x60
 8002234:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = Rpwm_in1;
 8002236:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <MX_TIM2_Init+0x148>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002242:	2304      	movs	r3, #4
 8002244:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	2200      	movs	r2, #0
 800224a:	4619      	mov	r1, r3
 800224c:	481d      	ldr	r0, [pc, #116]	@ (80022c4 <MX_TIM2_Init+0x144>)
 800224e:	f004 fbcd 	bl	80069ec <HAL_TIM_PWM_ConfigChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002258:	f7ff f955 	bl	8001506 <Error_Handler>
  }
  sConfigOC.Pulse = Rpwm_in2;
 800225c:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <MX_TIM2_Init+0x14c>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2204      	movs	r2, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4816      	ldr	r0, [pc, #88]	@ (80022c4 <MX_TIM2_Init+0x144>)
 800226c:	f004 fbbe 	bl	80069ec <HAL_TIM_PWM_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8002276:	f7ff f946 	bl	8001506 <Error_Handler>
  }
  sConfigOC.Pulse = Lpwm_in1;
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <MX_TIM2_Init+0x150>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2208      	movs	r2, #8
 8002286:	4619      	mov	r1, r3
 8002288:	480e      	ldr	r0, [pc, #56]	@ (80022c4 <MX_TIM2_Init+0x144>)
 800228a:	f004 fbaf 	bl	80069ec <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8002294:	f7ff f937 	bl	8001506 <Error_Handler>
  }
  sConfigOC.Pulse = Lpwm_in2;
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <MX_TIM2_Init+0x154>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	220c      	movs	r2, #12
 80022a4:	4619      	mov	r1, r3
 80022a6:	4807      	ldr	r0, [pc, #28]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80022a8:	f004 fba0 	bl	80069ec <HAL_TIM_PWM_ConfigChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 80022b2:	f7ff f928 	bl	8001506 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022b6:	4803      	ldr	r0, [pc, #12]	@ (80022c4 <MX_TIM2_Init+0x144>)
 80022b8:	f000 f87a 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 80022bc:	bf00      	nop
 80022be:	3738      	adds	r7, #56	@ 0x38
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200002fc 	.word	0x200002fc
 80022c8:	200002ac 	.word	0x200002ac
 80022cc:	200002ae 	.word	0x200002ae
 80022d0:	200002b0 	.word	0x200002b0
 80022d4:	200002b2 	.word	0x200002b2

080022d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2e      	ldr	r2, [pc, #184]	@ (80023a0 <HAL_TIM_Base_MspInit+0xc8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d114      	bne.n	8002314 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ea:	4b2e      	ldr	r3, [pc, #184]	@ (80023a4 <HAL_TIM_Base_MspInit+0xcc>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	4a2d      	ldr	r2, [pc, #180]	@ (80023a4 <HAL_TIM_Base_MspInit+0xcc>)
 80022f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022f4:	6193      	str	r3, [r2, #24]
 80022f6:	4b2b      	ldr	r3, [pc, #172]	@ (80023a4 <HAL_TIM_Base_MspInit+0xcc>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	2019      	movs	r0, #25
 8002308:	f000 fa83 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800230c:	2019      	movs	r0, #25
 800230e:	f000 fa9c 	bl	800284a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002312:	e040      	b.n	8002396 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231c:	d13b      	bne.n	8002396 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <HAL_TIM_Base_MspInit+0xcc>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a20      	ldr	r2, [pc, #128]	@ (80023a4 <HAL_TIM_Base_MspInit+0xcc>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <HAL_TIM_Base_MspInit+0xcc>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 8002338:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <HAL_TIM_Base_MspInit+0xd4>)
 800233a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233c:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 800233e:	2200      	movs	r2, #0
 8002340:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002342:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002348:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 800234a:	2280      	movs	r2, #128	@ 0x80
 800234c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 8002350:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002354:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002356:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 8002358:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800235c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002364:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800236a:	480f      	ldr	r0, [pc, #60]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 800236c:	f000 fa88 	bl	8002880 <HAL_DMA_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_TIM_Base_MspInit+0xa2>
      Error_Handler();
 8002376:	f7ff f8c6 	bl	8001506 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002380:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <HAL_TIM_Base_MspInit+0xd0>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	201c      	movs	r0, #28
 800238c:	f000 fa41 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002390:	201c      	movs	r0, #28
 8002392:	f000 fa5a 	bl	800284a <HAL_NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	20000344 	.word	0x20000344
 80023ac:	40020058 	.word	0x40020058

080023b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ce:	d117      	bne.n	8002400 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <HAL_TIM_MspPostInit+0x58>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <HAL_TIM_MspPostInit+0x58>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_TIM_MspPostInit+0x58>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Rpwm_in1_Pin|Rpwm_in2_Pin|Lpwm_in1_Pin|Lpwm_in2_Pin;
 80023e8:	230f      	movs	r3, #15
 80023ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	4619      	mov	r1, r3
 80023fa:	4804      	ldr	r0, [pc, #16]	@ (800240c <HAL_TIM_MspPostInit+0x5c>)
 80023fc:	f000 fcee 	bl	8002ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002400:	bf00      	nop
 8002402:	3720      	adds	r7, #32
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	40010800 	.word	0x40010800

08002410 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002416:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <MX_USART1_UART_Init+0x50>)
 8002418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800241c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	@ (800245c <MX_USART1_UART_Init+0x4c>)
 8002448:	f004 ffa6 	bl	8007398 <HAL_UART_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002452:	f7ff f858 	bl	8001506 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000388 	.word	0x20000388
 8002460:	40013800 	.word	0x40013800

08002464 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a20      	ldr	r2, [pc, #128]	@ (8002500 <HAL_UART_MspInit+0x9c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d139      	bne.n	80024f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002484:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_UART_MspInit+0xa0>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <HAL_UART_MspInit+0xa0>)
 800248a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <HAL_UART_MspInit+0xa0>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_UART_MspInit+0xa0>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <HAL_UART_MspInit+0xa0>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <HAL_UART_MspInit+0xa0>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024be:	2303      	movs	r3, #3
 80024c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4619      	mov	r1, r3
 80024c8:	480f      	ldr	r0, [pc, #60]	@ (8002508 <HAL_UART_MspInit+0xa4>)
 80024ca:	f000 fc87 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	4809      	ldr	r0, [pc, #36]	@ (8002508 <HAL_UART_MspInit+0xa4>)
 80024e4:	f000 fc7a 	bl	8002ddc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	2025      	movs	r0, #37	@ 0x25
 80024ee:	f000 f990 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024f2:	2025      	movs	r0, #37	@ 0x25
 80024f4:	f000 f9a9 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024f8:	bf00      	nop
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40013800 	.word	0x40013800
 8002504:	40021000 	.word	0x40021000
 8002508:	40010800 	.word	0x40010800

0800250c <Reset_Handler>:
 800250c:	f7ff fde0 	bl	80020d0 <SystemInit>
 8002510:	480b      	ldr	r0, [pc, #44]	@ (8002540 <LoopFillZerobss+0xe>)
 8002512:	490c      	ldr	r1, [pc, #48]	@ (8002544 <LoopFillZerobss+0x12>)
 8002514:	4a0c      	ldr	r2, [pc, #48]	@ (8002548 <LoopFillZerobss+0x16>)
 8002516:	2300      	movs	r3, #0
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:
 800251a:	58d4      	ldr	r4, [r2, r3]
 800251c:	50c4      	str	r4, [r0, r3]
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:
 8002520:	18c4      	adds	r4, r0, r3
 8002522:	428c      	cmp	r4, r1
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <LoopFillZerobss+0x1a>)
 8002528:	4c09      	ldr	r4, [pc, #36]	@ (8002550 <LoopFillZerobss+0x1e>)
 800252a:	2300      	movs	r3, #0
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:
 8002532:	42a2      	cmp	r2, r4
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>
 8002536:	f005 fe95 	bl	8008264 <__libc_init_array>
 800253a:	f7fe ff29 	bl	8001390 <main>
 800253e:	4770      	bx	lr
 8002540:	20000000 	.word	0x20000000
 8002544:	200000a0 	.word	0x200000a0
 8002548:	080092a0 	.word	0x080092a0
 800254c:	200000a0 	.word	0x200000a0
 8002550:	20000520 	.word	0x20000520

08002554 <ADC1_2_IRQHandler>:
 8002554:	e7fe      	b.n	8002554 <ADC1_2_IRQHandler>
	...

08002558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <HAL_Init+0x28>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	@ (8002580 <HAL_Init+0x28>)
 8002562:	f043 0310 	orr.w	r3, r3, #16
 8002566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 f947 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	200f      	movs	r0, #15
 8002570:	f000 f808 	bl	8002584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7ff fc1e 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_InitTick+0x54>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_InitTick+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f95f 	bl	8002866 <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00e      	b.n	80025d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d80a      	bhi.n	80025ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f000 f927 	bl	8002812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c4:	4a06      	ldr	r2, [pc, #24]	@ (80025e0 <HAL_InitTick+0x5c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000038 	.word	0x20000038
 80025dc:	20000040 	.word	0x20000040
 80025e0:	2000003c 	.word	0x2000003c

080025e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_IncTick+0x1c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_IncTick+0x20>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a03      	ldr	r2, [pc, #12]	@ (8002604 <HAL_IncTick+0x20>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000040 	.word	0x20000040
 8002604:	200003d0 	.word	0x200003d0

08002608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b02      	ldr	r3, [pc, #8]	@ (8002618 <HAL_GetTick+0x10>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	200003d0 	.word	0x200003d0

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff fff0 	bl	8002608 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffe0 	bl	8002608 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000040 	.word	0x20000040

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4906      	ldr	r1, [pc, #24]	@ (80026fc <__NVIC_EnableIRQ+0x34>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	@ (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff90 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff2d 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002824:	f7ff ff42 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff ff90 	bl	8002754 <NVIC_EncodePriority>
 8002834:	4602      	mov	r2, r0
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff5f 	bl	8002700 <__NVIC_SetPriority>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff35 	bl	80026c8 <__NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffa2 	bl	80027b8 <SysTick_Config>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e043      	b.n	800291e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <HAL_DMA_Init+0xa8>)
 800289e:	4413      	add	r3, r2
 80028a0:	4a22      	ldr	r2, [pc, #136]	@ (800292c <HAL_DMA_Init+0xac>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	009a      	lsls	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002930 <HAL_DMA_Init+0xb0>)
 80028b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80028ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	bffdfff8 	.word	0xbffdfff8
 800292c:	cccccccd 	.word	0xcccccccd
 8002930:	40020000 	.word	0x40020000

08002934 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_DMA_Start_IT+0x20>
 8002950:	2302      	movs	r3, #2
 8002952:	e04b      	b.n	80029ec <HAL_DMA_Start_IT+0xb8>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d13a      	bne.n	80029de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f9f8 	bl	8002d82 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 020e 	orr.w	r2, r2, #14
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e00f      	b.n	80029cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0204 	bic.w	r2, r2, #4
 80029ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 020a 	orr.w	r2, r2, #10
 80029ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e005      	b.n	80029ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d008      	beq.n	8002a1e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e020      	b.n	8002a60 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 020e 	bic.w	r2, r2, #14
 8002a2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d005      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2204      	movs	r2, #4
 8002a88:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e051      	b.n	8002b34 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 020e 	bic.w	r2, r2, #14
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a22      	ldr	r2, [pc, #136]	@ (8002b40 <HAL_DMA_Abort_IT+0xd4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d029      	beq.n	8002b0e <HAL_DMA_Abort_IT+0xa2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a21      	ldr	r2, [pc, #132]	@ (8002b44 <HAL_DMA_Abort_IT+0xd8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d022      	beq.n	8002b0a <HAL_DMA_Abort_IT+0x9e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b48 <HAL_DMA_Abort_IT+0xdc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01a      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x98>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b4c <HAL_DMA_Abort_IT+0xe0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d012      	beq.n	8002afe <HAL_DMA_Abort_IT+0x92>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_DMA_Abort_IT+0xe4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00a      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x8c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_DMA_Abort_IT+0xe8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d102      	bne.n	8002af2 <HAL_DMA_Abort_IT+0x86>
 8002aec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002af0:	e00e      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002af2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af6:	e00b      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002afc:	e008      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b02:	e005      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002b04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b08:	e002      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	e000      	b.n	8002b10 <HAL_DMA_Abort_IT+0xa4>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_DMA_Abort_IT+0xec>)
 8002b12:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
    } 
  }
  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40020008 	.word	0x40020008
 8002b44:	4002001c 	.word	0x4002001c
 8002b48:	40020030 	.word	0x40020030
 8002b4c:	40020044 	.word	0x40020044
 8002b50:	40020058 	.word	0x40020058
 8002b54:	4002006c 	.word	0x4002006c
 8002b58:	40020000 	.word	0x40020000

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	2204      	movs	r2, #4
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04f      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xc8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a66      	ldr	r2, [pc, #408]	@ (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d029      	beq.n	8002c0a <HAL_DMA_IRQHandler+0xae>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a65      	ldr	r2, [pc, #404]	@ (8002d50 <HAL_DMA_IRQHandler+0x1f4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xaa>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a63      	ldr	r2, [pc, #396]	@ (8002d54 <HAL_DMA_IRQHandler+0x1f8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xa4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a62      	ldr	r2, [pc, #392]	@ (8002d58 <HAL_DMA_IRQHandler+0x1fc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x9e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a60      	ldr	r2, [pc, #384]	@ (8002d5c <HAL_DMA_IRQHandler+0x200>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x98>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d60 <HAL_DMA_IRQHandler+0x204>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <HAL_DMA_IRQHandler+0x92>
 8002be8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bec:	e00e      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bf2:	e00b      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bf8:	e008      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bfe:	e005      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c04:	e002      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c06:	2340      	movs	r3, #64	@ 0x40
 8002c08:	e000      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	4a55      	ldr	r2, [pc, #340]	@ (8002d64 <HAL_DMA_IRQHandler+0x208>)
 8002c0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8094 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c22:	e08e      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	2202      	movs	r2, #2
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d056      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x186>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d051      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 020a 	bic.w	r2, r2, #10
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a38      	ldr	r2, [pc, #224]	@ (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d029      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x166>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a37      	ldr	r2, [pc, #220]	@ (8002d50 <HAL_DMA_IRQHandler+0x1f4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x162>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	@ (8002d54 <HAL_DMA_IRQHandler+0x1f8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x15c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a34      	ldr	r2, [pc, #208]	@ (8002d58 <HAL_DMA_IRQHandler+0x1fc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x156>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <HAL_DMA_IRQHandler+0x200>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00a      	beq.n	8002cac <HAL_DMA_IRQHandler+0x150>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a31      	ldr	r2, [pc, #196]	@ (8002d60 <HAL_DMA_IRQHandler+0x204>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x14a>
 8002ca0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ca4:	e00e      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002caa:	e00b      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cb0:	e008      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cb6:	e005      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cbc:	e002      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	4a27      	ldr	r2, [pc, #156]	@ (8002d64 <HAL_DMA_IRQHandler+0x208>)
 8002cc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d034      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ce0:	e02f      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d028      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020e 	bic.w	r2, r2, #14
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
    }
  }
  return;
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
}
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40020008 	.word	0x40020008
 8002d50:	4002001c 	.word	0x4002001c
 8002d54:	40020030 	.word	0x40020030
 8002d58:	40020044 	.word	0x40020044
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	4002006c 	.word	0x4002006c
 8002d64:	40020000 	.word	0x40020000

08002d68 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d76:	b2db      	uxtb	r3, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d108      	bne.n	8002dc2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dc0:	e007      	b.n	8002dd2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	60da      	str	r2, [r3, #12]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b08b      	sub	sp, #44	@ 0x2c
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dea:	2300      	movs	r3, #0
 8002dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dee:	e169      	b.n	80030c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002df0:	2201      	movs	r2, #1
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 8158 	bne.w	80030be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a9a      	ldr	r2, [pc, #616]	@ (800307c <HAL_GPIO_Init+0x2a0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d05e      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e18:	4a98      	ldr	r2, [pc, #608]	@ (800307c <HAL_GPIO_Init+0x2a0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d875      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e1e:	4a98      	ldr	r2, [pc, #608]	@ (8003080 <HAL_GPIO_Init+0x2a4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d058      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e24:	4a96      	ldr	r2, [pc, #600]	@ (8003080 <HAL_GPIO_Init+0x2a4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d86f      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e2a:	4a96      	ldr	r2, [pc, #600]	@ (8003084 <HAL_GPIO_Init+0x2a8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d052      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e30:	4a94      	ldr	r2, [pc, #592]	@ (8003084 <HAL_GPIO_Init+0x2a8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d869      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e36:	4a94      	ldr	r2, [pc, #592]	@ (8003088 <HAL_GPIO_Init+0x2ac>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04c      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e3c:	4a92      	ldr	r2, [pc, #584]	@ (8003088 <HAL_GPIO_Init+0x2ac>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d863      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e42:	4a92      	ldr	r2, [pc, #584]	@ (800308c <HAL_GPIO_Init+0x2b0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d046      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e48:	4a90      	ldr	r2, [pc, #576]	@ (800308c <HAL_GPIO_Init+0x2b0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d85d      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e4e:	2b12      	cmp	r3, #18
 8002e50:	d82a      	bhi.n	8002ea8 <HAL_GPIO_Init+0xcc>
 8002e52:	2b12      	cmp	r3, #18
 8002e54:	d859      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e56:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <HAL_GPIO_Init+0x80>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002ed7 	.word	0x08002ed7
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	08002ec3 	.word	0x08002ec3
 8002e68:	08002f05 	.word	0x08002f05
 8002e6c:	08002f0b 	.word	0x08002f0b
 8002e70:	08002f0b 	.word	0x08002f0b
 8002e74:	08002f0b 	.word	0x08002f0b
 8002e78:	08002f0b 	.word	0x08002f0b
 8002e7c:	08002f0b 	.word	0x08002f0b
 8002e80:	08002f0b 	.word	0x08002f0b
 8002e84:	08002f0b 	.word	0x08002f0b
 8002e88:	08002f0b 	.word	0x08002f0b
 8002e8c:	08002f0b 	.word	0x08002f0b
 8002e90:	08002f0b 	.word	0x08002f0b
 8002e94:	08002f0b 	.word	0x08002f0b
 8002e98:	08002f0b 	.word	0x08002f0b
 8002e9c:	08002f0b 	.word	0x08002f0b
 8002ea0:	08002eb9 	.word	0x08002eb9
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	4a79      	ldr	r2, [pc, #484]	@ (8003090 <HAL_GPIO_Init+0x2b4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eae:	e02c      	b.n	8002f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	623b      	str	r3, [r7, #32]
          break;
 8002eb6:	e029      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	623b      	str	r3, [r7, #32]
          break;
 8002ec0:	e024      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	623b      	str	r3, [r7, #32]
          break;
 8002eca:	e01f      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	623b      	str	r3, [r7, #32]
          break;
 8002ed4:	e01a      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ede:	2304      	movs	r3, #4
 8002ee0:	623b      	str	r3, [r7, #32]
          break;
 8002ee2:	e013      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eec:	2308      	movs	r3, #8
 8002eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	611a      	str	r2, [r3, #16]
          break;
 8002ef6:	e009      	b.n	8002f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef8:	2308      	movs	r3, #8
 8002efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	615a      	str	r2, [r3, #20]
          break;
 8002f02:	e003      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f04:	2300      	movs	r3, #0
 8002f06:	623b      	str	r3, [r7, #32]
          break;
 8002f08:	e000      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          break;
 8002f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2bff      	cmp	r3, #255	@ 0xff
 8002f10:	d801      	bhi.n	8002f16 <HAL_GPIO_Init+0x13a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	e001      	b.n	8002f1a <HAL_GPIO_Init+0x13e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2bff      	cmp	r3, #255	@ 0xff
 8002f20:	d802      	bhi.n	8002f28 <HAL_GPIO_Init+0x14c>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	e002      	b.n	8002f2e <HAL_GPIO_Init+0x152>
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	3b08      	subs	r3, #8
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	210f      	movs	r1, #15
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	6a39      	ldr	r1, [r7, #32]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80b1 	beq.w	80030be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003094 <HAL_GPIO_Init+0x2b8>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4a4c      	ldr	r2, [pc, #304]	@ (8003094 <HAL_GPIO_Init+0x2b8>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6193      	str	r3, [r2, #24]
 8002f68:	4b4a      	ldr	r3, [pc, #296]	@ (8003094 <HAL_GPIO_Init+0x2b8>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f74:	4a48      	ldr	r2, [pc, #288]	@ (8003098 <HAL_GPIO_Init+0x2bc>)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a40      	ldr	r2, [pc, #256]	@ (800309c <HAL_GPIO_Init+0x2c0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_GPIO_Init+0x1ec>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80030a0 <HAL_GPIO_Init+0x2c4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_GPIO_Init+0x1e8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3e      	ldr	r2, [pc, #248]	@ (80030a4 <HAL_GPIO_Init+0x2c8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <HAL_GPIO_Init+0x1e4>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80030a8 <HAL_GPIO_Init+0x2cc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_GPIO_Init+0x1e0>
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e006      	b.n	8002fca <HAL_GPIO_Init+0x1ee>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	e004      	b.n	8002fca <HAL_GPIO_Init+0x1ee>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e002      	b.n	8002fca <HAL_GPIO_Init+0x1ee>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_GPIO_Init+0x1ee>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fcc:	f002 0203 	and.w	r2, r2, #3
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	4093      	lsls	r3, r2
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fda:	492f      	ldr	r1, [pc, #188]	@ (8003098 <HAL_GPIO_Init+0x2bc>)
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	492c      	ldr	r1, [pc, #176]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
 8003000:	e006      	b.n	8003010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003002:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	43db      	mvns	r3, r3
 800300a:	4928      	ldr	r1, [pc, #160]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 800300c:	4013      	ands	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800301c:	4b23      	ldr	r3, [pc, #140]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	4922      	ldr	r1, [pc, #136]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	43db      	mvns	r3, r3
 8003032:	491e      	ldr	r1, [pc, #120]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 8003034:	4013      	ands	r3, r2
 8003036:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003044:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4918      	ldr	r1, [pc, #96]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003052:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	43db      	mvns	r3, r3
 800305a:	4914      	ldr	r1, [pc, #80]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 800305c:	4013      	ands	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d021      	beq.n	80030b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800306c:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	490e      	ldr	r1, [pc, #56]	@ (80030ac <HAL_GPIO_Init+0x2d0>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	e021      	b.n	80030be <HAL_GPIO_Init+0x2e2>
 800307a:	bf00      	nop
 800307c:	10320000 	.word	0x10320000
 8003080:	10310000 	.word	0x10310000
 8003084:	10220000 	.word	0x10220000
 8003088:	10210000 	.word	0x10210000
 800308c:	10120000 	.word	0x10120000
 8003090:	10110000 	.word	0x10110000
 8003094:	40021000 	.word	0x40021000
 8003098:	40010000 	.word	0x40010000
 800309c:	40010800 	.word	0x40010800
 80030a0:	40010c00 	.word	0x40010c00
 80030a4:	40011000 	.word	0x40011000
 80030a8:	40011400 	.word	0x40011400
 80030ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_GPIO_Init+0x304>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	4909      	ldr	r1, [pc, #36]	@ (80030e0 <HAL_GPIO_Init+0x304>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	3301      	adds	r3, #1
 80030c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f47f ae8e 	bne.w	8002df0 <HAL_GPIO_Init+0x14>
  }
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	372c      	adds	r7, #44	@ 0x2c
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40010400 	.word	0x40010400

080030e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003100:	e003      	b.n	800310a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	041a      	lsls	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	611a      	str	r2, [r3, #16]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43d9      	mvns	r1, r3
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	400b      	ands	r3, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	611a      	str	r2, [r3, #16]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
	...

08003148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e12b      	b.n	80033b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe f83e 	bl	80011f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	@ 0x24
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800319a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031ac:	f002 f9e8 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a81      	ldr	r2, [pc, #516]	@ (80033bc <HAL_I2C_Init+0x274>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d807      	bhi.n	80031cc <HAL_I2C_Init+0x84>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a80      	ldr	r2, [pc, #512]	@ (80033c0 <HAL_I2C_Init+0x278>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e006      	b.n	80031da <HAL_I2C_Init+0x92>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a7d      	ldr	r2, [pc, #500]	@ (80033c4 <HAL_I2C_Init+0x27c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	bf94      	ite	ls
 80031d4:	2301      	movls	r3, #1
 80031d6:	2300      	movhi	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0e7      	b.n	80033b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a78      	ldr	r2, [pc, #480]	@ (80033c8 <HAL_I2C_Init+0x280>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0c9b      	lsrs	r3, r3, #18
 80031ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a6a      	ldr	r2, [pc, #424]	@ (80033bc <HAL_I2C_Init+0x274>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d802      	bhi.n	800321c <HAL_I2C_Init+0xd4>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	e009      	b.n	8003230 <HAL_I2C_Init+0xe8>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	4a69      	ldr	r2, [pc, #420]	@ (80033cc <HAL_I2C_Init+0x284>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	3301      	adds	r3, #1
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	430b      	orrs	r3, r1
 8003236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003242:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	495c      	ldr	r1, [pc, #368]	@ (80033bc <HAL_I2C_Init+0x274>)
 800324c:	428b      	cmp	r3, r1
 800324e:	d819      	bhi.n	8003284 <HAL_I2C_Init+0x13c>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e59      	subs	r1, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fbb1 f3f3 	udiv	r3, r1, r3
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003264:	400b      	ands	r3, r1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_I2C_Init+0x138>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e59      	subs	r1, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fbb1 f3f3 	udiv	r3, r1, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327e:	e051      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003280:	2304      	movs	r3, #4
 8003282:	e04f      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d111      	bne.n	80032b0 <HAL_I2C_Init+0x168>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e012      	b.n	80032d6 <HAL_I2C_Init+0x18e>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Init+0x196>
 80032da:	2301      	movs	r3, #1
 80032dc:	e022      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10e      	bne.n	8003304 <HAL_I2C_Init+0x1bc>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e58      	subs	r0, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	440b      	add	r3, r1
 80032f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	6809      	ldr	r1, [r1, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003352:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6911      	ldr	r1, [r2, #16]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	000186a0 	.word	0x000186a0
 80033c0:	001e847f 	.word	0x001e847f
 80033c4:	003d08ff 	.word	0x003d08ff
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e2:	2b80      	cmp	r3, #128	@ 0x80
 80033e4:	d103      	bne.n	80033ee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
  }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003418:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003420:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b10      	cmp	r3, #16
 8003426:	d003      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0x38>
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b40      	cmp	r3, #64	@ 0x40
 800342c:	f040 80c1 	bne.w	80035b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <HAL_I2C_EV_IRQHandler+0x6e>
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003450:	d003      	beq.n	800345a <HAL_I2C_EV_IRQHandler+0x62>
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003458:	d101      	bne.n	800345e <HAL_I2C_EV_IRQHandler+0x66>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_I2C_EV_IRQHandler+0x68>
 800345e:	2300      	movs	r3, #0
 8003460:	2b01      	cmp	r3, #1
 8003462:	f000 8132 	beq.w	80036ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x92>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	0a5b      	lsrs	r3, r3, #9
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f001 fc9b 	bl	8004db8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fd99 	bl	8003fba <I2C_Master_SB>
 8003488:	e092      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	08db      	lsrs	r3, r3, #3
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0xb2>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	0a5b      	lsrs	r3, r3, #9
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fe0e 	bl	80040c4 <I2C_Master_ADD10>
 80034a8:	e082      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0xd2>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	0a5b      	lsrs	r3, r3, #9
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fe27 	bl	8004116 <I2C_Master_ADDR>
 80034c8:	e072      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d03b      	beq.n	800354e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e4:	f000 80f3 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	09db      	lsrs	r3, r3, #7
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00f      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x11c>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	0a9b      	lsrs	r3, r3, #10
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x11c>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f9f1 	bl	80038f4 <I2C_MasterTransmit_TXE>
 8003512:	e04d      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80d6 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80cf 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003530:	7bbb      	ldrb	r3, [r7, #14]
 8003532:	2b21      	cmp	r3, #33	@ 0x21
 8003534:	d103      	bne.n	800353e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa78 	bl	8003a2c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353c:	e0c7      	b.n	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	f040 80c4 	bne.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fae6 	bl	8003b18 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800354c:	e0bf      	b.n	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800355c:	f000 80b7 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	099b      	lsrs	r3, r3, #6
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00f      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x194>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x194>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb5f 	bl	8003c48 <I2C_MasterReceive_RXNE>
 800358a:	e011      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 809a 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	0a5b      	lsrs	r3, r3, #9
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8093 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fc15 	bl	8003dd8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ae:	e08e      	b.n	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80035b0:	e08d      	b.n	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e007      	b.n	80035d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x20e>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	0a5b      	lsrs	r3, r3, #9
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 ffe0 	bl	80045c4 <I2C_Slave_ADDR>
 8003604:	e066      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0x22e>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	0a5b      	lsrs	r3, r3, #9
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f001 f81a 	bl	8004658 <I2C_Slave_STOPF>
 8003624:	e056      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003626:	7bbb      	ldrb	r3, [r7, #14]
 8003628:	2b21      	cmp	r3, #33	@ 0x21
 800362a:	d002      	beq.n	8003632 <HAL_I2C_EV_IRQHandler+0x23a>
 800362c:	7bbb      	ldrb	r3, [r7, #14]
 800362e:	2b29      	cmp	r3, #41	@ 0x29
 8003630:	d125      	bne.n	800367e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	09db      	lsrs	r3, r3, #7
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00f      	beq.n	800365e <HAL_I2C_EV_IRQHandler+0x266>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	0a9b      	lsrs	r3, r3, #10
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_I2C_EV_IRQHandler+0x266>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fef8 	bl	800444c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365c:	e039      	b.n	80036d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d033      	beq.n	80036d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	0a5b      	lsrs	r3, r3, #9
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d02d      	beq.n	80036d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 ff25 	bl	80044c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800367c:	e029      	b.n	80036d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00f      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	0a9b      	lsrs	r3, r3, #10
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 ff2f 	bl	8004506 <I2C_SlaveReceive_RXNE>
 80036a8:	e014      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	0a5b      	lsrs	r3, r3, #9
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 ff5d 	bl	8004582 <I2C_SlaveReceive_BTF>
 80036c8:	e004      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b08a      	sub	sp, #40	@ 0x28
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_I2C_ER_IRQHandler+0x5e>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d010      	beq.n	8003738 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003726:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	0a5b      	lsrs	r3, r3, #9
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_I2C_ER_IRQHandler+0x88>
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003760:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	0a9b      	lsrs	r3, r3, #10
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03f      	beq.n	80037ee <HAL_I2C_ER_IRQHandler+0x114>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d039      	beq.n	80037ee <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800377a:	7efb      	ldrb	r3, [r7, #27]
 800377c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003794:	7ebb      	ldrb	r3, [r7, #26]
 8003796:	2b20      	cmp	r3, #32
 8003798:	d112      	bne.n	80037c0 <HAL_I2C_ER_IRQHandler+0xe6>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <HAL_I2C_ER_IRQHandler+0xe6>
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b21      	cmp	r3, #33	@ 0x21
 80037a4:	d008      	beq.n	80037b8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b29      	cmp	r3, #41	@ 0x29
 80037aa:	d005      	beq.n	80037b8 <HAL_I2C_ER_IRQHandler+0xde>
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b28      	cmp	r3, #40	@ 0x28
 80037b0:	d106      	bne.n	80037c0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b21      	cmp	r3, #33	@ 0x21
 80037b6:	d103      	bne.n	80037c0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f001 f87d 	bl	80048b8 <I2C_Slave_AF>
 80037be:	e016      	b.n	80037ee <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037c8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037d2:	7efb      	ldrb	r3, [r7, #27]
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d002      	beq.n	80037de <HAL_I2C_ER_IRQHandler+0x104>
 80037d8:	7efb      	ldrb	r3, [r7, #27]
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	d107      	bne.n	80037ee <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	0adb      	lsrs	r3, r3, #11
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <HAL_I2C_ER_IRQHandler+0x13e>
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	f043 0308 	orr.w	r3, r3, #8
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003816:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f001 f8b8 	bl	80049a0 <I2C_ITError>
  }
}
 8003830:	bf00      	nop
 8003832:	3728      	adds	r7, #40	@ 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
 800388c:	4613      	mov	r3, r2
 800388e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003902:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800390a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d150      	bne.n	80039bc <I2C_MasterTransmit_TXE+0xc8>
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b21      	cmp	r3, #33	@ 0x21
 800391e:	d14d      	bne.n	80039bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d01d      	beq.n	8003962 <I2C_MasterTransmit_TXE+0x6e>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b20      	cmp	r3, #32
 800392a:	d01a      	beq.n	8003962 <I2C_MasterTransmit_TXE+0x6e>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003932:	d016      	beq.n	8003962 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003942:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2211      	movs	r2, #17
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ff6c 	bl	8003838 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003960:	e060      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003970:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003980:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b40      	cmp	r3, #64	@ 0x40
 800399a:	d107      	bne.n	80039ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff81 	bl	80038ac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039aa:	e03b      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff3f 	bl	8003838 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039ba:	e033      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b21      	cmp	r3, #33	@ 0x21
 80039c0:	d005      	beq.n	80039ce <I2C_MasterTransmit_TXE+0xda>
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	2b40      	cmp	r3, #64	@ 0x40
 80039c6:	d12d      	bne.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b22      	cmp	r3, #34	@ 0x22
 80039cc:	d12a      	bne.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d108      	bne.n	80039ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039e8:	e01c      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b40      	cmp	r3, #64	@ 0x40
 80039f4:	d103      	bne.n	80039fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f88e 	bl	8003b18 <I2C_MemoryTransmit_TXE_BTF>
}
 80039fc:	e012      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a22:	e7ff      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b21      	cmp	r3, #33	@ 0x21
 8003a44:	d164      	bne.n	8003b10 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d012      	beq.n	8003a76 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a74:	e04c      	b.n	8003b10 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d01d      	beq.n	8003ab8 <I2C_MasterTransmit_BTF+0x8c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d01a      	beq.n	8003ab8 <I2C_MasterTransmit_BTF+0x8c>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a88:	d016      	beq.n	8003ab8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a98:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2211      	movs	r2, #17
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff fec1 	bl	8003838 <HAL_I2C_MasterTxCpltCallback>
}
 8003ab6:	e02b      	b.n	8003b10 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ac6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d107      	bne.n	8003b02 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fed6 	bl	80038ac <HAL_I2C_MemTxCpltCallback>
}
 8003b00:	e006      	b.n	8003b10 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fe94 	bl	8003838 <HAL_I2C_MasterTxCpltCallback>
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11d      	bne.n	8003b6c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10b      	bne.n	8003b50 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b4e:	e077      	b.n	8003c40 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	121b      	asrs	r3, r3, #8
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b6a:	e069      	b.n	8003c40 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10b      	bne.n	8003b8c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b8a:	e059      	b.n	8003c40 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d152      	bne.n	8003c3a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b22      	cmp	r3, #34	@ 0x22
 8003b98:	d10d      	bne.n	8003bb6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bb4:	e044      	b.n	8003c40 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b21      	cmp	r3, #33	@ 0x21
 8003bc4:	d112      	bne.n	8003bec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bea:	e029      	b.n	8003c40 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d124      	bne.n	8003c40 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b21      	cmp	r3, #33	@ 0x21
 8003bfa:	d121      	bne.n	8003c40 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c0a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fe3a 	bl	80038ac <HAL_I2C_MemTxCpltCallback>
}
 8003c38:	e002      	b.n	8003c40 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fbc8 	bl	80033d0 <I2C_Flush_DR>
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b22      	cmp	r3, #34	@ 0x22
 8003c5a:	f040 80b9 	bne.w	8003dd0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d921      	bls.n	8003cb6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	f040 8096 	bne.w	8003dd0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003cb4:	e08c      	b.n	8003dd0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d07f      	beq.n	8003dbe <I2C_MasterReceive_RXNE+0x176>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d002      	beq.n	8003cca <I2C_MasterReceive_RXNE+0x82>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d179      	bne.n	8003dbe <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f001 f842 	bl	8004d54 <I2C_WaitOnSTOPRequestThroughIT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d14c      	bne.n	8003d70 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cf4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b40      	cmp	r3, #64	@ 0x40
 8003d2e:	d10a      	bne.n	8003d46 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff fdbd 	bl	80038be <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d44:	e044      	b.n	8003dd0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d002      	beq.n	8003d5a <I2C_MasterReceive_RXNE+0x112>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d103      	bne.n	8003d62 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d60:	e002      	b.n	8003d68 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2212      	movs	r2, #18
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff fd6e 	bl	800384a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d6e:	e02f      	b.n	8003dd0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fd8a 	bl	80038d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dbc:	e008      	b.n	8003dd0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dcc:	605a      	str	r2, [r3, #4]
}
 8003dce:	e7ff      	b.n	8003dd0 <I2C_MasterReceive_RXNE+0x188>
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d11b      	bne.n	8003e28 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e26:	e0c4      	b.n	8003fb2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d129      	bne.n	8003e86 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d00a      	beq.n	8003e5e <I2C_MasterReceive_BTF+0x86>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d007      	beq.n	8003e5e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e84:	e095      	b.n	8003fb2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d17d      	bne.n	8003f8c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d002      	beq.n	8003e9c <I2C_MasterReceive_BTF+0xc4>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d108      	bne.n	8003eae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e016      	b.n	8003edc <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d002      	beq.n	8003eba <I2C_MasterReceive_BTF+0xe2>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d108      	bne.n	8003ecc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e007      	b.n	8003edc <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	d10a      	bne.n	8003f62 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fcaf 	bl	80038be <HAL_I2C_MemRxCpltCallback>
}
 8003f60:	e027      	b.n	8003fb2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d002      	beq.n	8003f76 <I2C_MasterReceive_BTF+0x19e>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d103      	bne.n	8003f7e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f7c:	e002      	b.n	8003f84 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2212      	movs	r2, #18
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fc60 	bl	800384a <HAL_I2C_MasterRxCpltCallback>
}
 8003f8a:	e012      	b.n	8003fb2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b40      	cmp	r3, #64	@ 0x40
 8003fcc:	d117      	bne.n	8003ffe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fe6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003fe8:	e067      	b.n	80040ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]
}
 8003ffc:	e05d      	b.n	80040ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004006:	d133      	bne.n	8004070 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b21      	cmp	r3, #33	@ 0x21
 8004012:	d109      	bne.n	8004028 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004024:	611a      	str	r2, [r3, #16]
 8004026:	e008      	b.n	800403a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <I2C_Master_SB+0x92>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d032      	beq.n	80040ba <I2C_Master_SB+0x100>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d02d      	beq.n	80040ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406c:	605a      	str	r2, [r3, #4]
}
 800406e:	e024      	b.n	80040ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10e      	bne.n	8004096 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407c:	b29b      	uxth	r3, r3
 800407e:	11db      	asrs	r3, r3, #7
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f003 0306 	and.w	r3, r3, #6
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f063 030f 	orn	r3, r3, #15
 800408c:	b2da      	uxtb	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]
}
 8004094:	e011      	b.n	80040ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10d      	bne.n	80040ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	11db      	asrs	r3, r3, #7
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f003 0306 	and.w	r3, r3, #6
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f063 030e 	orn	r3, r3, #14
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	611a      	str	r2, [r3, #16]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <I2C_Master_ADD10+0x26>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d108      	bne.n	80040fc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <I2C_Master_ADD10+0x48>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800410a:	605a      	str	r2, [r3, #4]
  }
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004116:	b480      	push	{r7}
 8004118:	b091      	sub	sp, #68	@ 0x44
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004124:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b22      	cmp	r3, #34	@ 0x22
 800413e:	f040 8174 	bne.w	800442a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <I2C_Master_ADDR+0x54>
 800414a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800414e:	2b40      	cmp	r3, #64	@ 0x40
 8004150:	d10b      	bne.n	800416a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	633b      	str	r3, [r7, #48]	@ 0x30
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	633b      	str	r3, [r7, #48]	@ 0x30
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	e16b      	b.n	8004442 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800416e:	2b00      	cmp	r3, #0
 8004170:	d11d      	bne.n	80041ae <I2C_Master_ADDR+0x98>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800417a:	d118      	bne.n	80041ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80041ac:	e149      	b.n	8004442 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d113      	bne.n	80041e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b8:	2300      	movs	r3, #0
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e120      	b.n	8004422 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	f040 808a 	bne.w	8004300 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041f2:	d137      	bne.n	8004264 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004202:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004212:	d113      	bne.n	800423c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004222:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	627b      	str	r3, [r7, #36]	@ 0x24
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	e0f2      	b.n	8004422 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423c:	2300      	movs	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	623b      	str	r3, [r7, #32]
 8004250:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e0de      	b.n	8004422 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004266:	2b08      	cmp	r3, #8
 8004268:	d02e      	beq.n	80042c8 <I2C_Master_ADDR+0x1b2>
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	2b20      	cmp	r3, #32
 800426e:	d02b      	beq.n	80042c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	2b12      	cmp	r3, #18
 8004274:	d102      	bne.n	800427c <I2C_Master_ADDR+0x166>
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	2b01      	cmp	r3, #1
 800427a:	d125      	bne.n	80042c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800427c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427e:	2b04      	cmp	r3, #4
 8004280:	d00e      	beq.n	80042a0 <I2C_Master_ADDR+0x18a>
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	2b02      	cmp	r3, #2
 8004286:	d00b      	beq.n	80042a0 <I2C_Master_ADDR+0x18a>
 8004288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428a:	2b10      	cmp	r3, #16
 800428c:	d008      	beq.n	80042a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e007      	b.n	80042b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	e0ac      	b.n	8004422 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d8:	2300      	movs	r3, #0
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e090      	b.n	8004422 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d158      	bne.n	80043bc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430c:	2b04      	cmp	r3, #4
 800430e:	d021      	beq.n	8004354 <I2C_Master_ADDR+0x23e>
 8004310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004312:	2b02      	cmp	r3, #2
 8004314:	d01e      	beq.n	8004354 <I2C_Master_ADDR+0x23e>
 8004316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004318:	2b10      	cmp	r3, #16
 800431a:	d01b      	beq.n	8004354 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800432a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e012      	b.n	800437a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004362:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004388:	d14b      	bne.n	8004422 <I2C_Master_ADDR+0x30c>
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004390:	d00b      	beq.n	80043aa <I2C_Master_ADDR+0x294>
 8004392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004394:	2b01      	cmp	r3, #1
 8004396:	d008      	beq.n	80043aa <I2C_Master_ADDR+0x294>
 8004398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439a:	2b08      	cmp	r3, #8
 800439c:	d005      	beq.n	80043aa <I2C_Master_ADDR+0x294>
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d002      	beq.n	80043aa <I2C_Master_ADDR+0x294>
 80043a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d13b      	bne.n	8004422 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	e032      	b.n	8004422 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043da:	d117      	bne.n	800440c <I2C_Master_ADDR+0x2f6>
 80043dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043e2:	d00b      	beq.n	80043fc <I2C_Master_ADDR+0x2e6>
 80043e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d008      	beq.n	80043fc <I2C_Master_ADDR+0x2e6>
 80043ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d005      	beq.n	80043fc <I2C_Master_ADDR+0x2e6>
 80043f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d002      	beq.n	80043fc <I2C_Master_ADDR+0x2e6>
 80043f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d107      	bne.n	800440c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800440a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004428:	e00b      	b.n	8004442 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
}
 8004440:	e7ff      	b.n	8004442 <I2C_Master_ADDR+0x32c>
 8004442:	bf00      	nop
 8004444:	3744      	adds	r7, #68	@ 0x44
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02b      	beq.n	80044be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d114      	bne.n	80044be <I2C_SlaveTransmit_TXE+0x72>
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b29      	cmp	r3, #41	@ 0x29
 8004498:	d111      	bne.n	80044be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2221      	movs	r2, #33	@ 0x21
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2228      	movs	r2, #40	@ 0x28
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff f9cf 	bl	800385c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d011      	beq.n	80044fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	781a      	ldrb	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004514:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02c      	beq.n	800457a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d114      	bne.n	800457a <I2C_SlaveReceive_RXNE+0x74>
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b2a      	cmp	r3, #42	@ 0x2a
 8004554:	d111      	bne.n	800457a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004564:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2222      	movs	r2, #34	@ 0x22
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2228      	movs	r2, #40	@ 0x28
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff f97a 	bl	800386e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045de:	2b28      	cmp	r3, #40	@ 0x28
 80045e0:	d127      	bne.n	8004632 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	09db      	lsrs	r3, r3, #7
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d103      	bne.n	8004616 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	81bb      	strh	r3, [r7, #12]
 8004614:	e002      	b.n	800461c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004624:	89ba      	ldrh	r2, [r7, #12]
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff f928 	bl	8003880 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004630:	e00e      	b.n	8004650 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004666:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004676:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004678:	2300      	movs	r3, #0
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b4:	d172      	bne.n	800479c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b22      	cmp	r3, #34	@ 0x22
 80046ba:	d002      	beq.n	80046c2 <I2C_Slave_STOPF+0x6a>
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b2a      	cmp	r3, #42	@ 0x2a
 80046c0:	d135      	bne.n	800472e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fb34 	bl	8002d68 <HAL_DMA_GetState>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d049      	beq.n	800479a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	4a69      	ldr	r2, [pc, #420]	@ (80048b0 <I2C_Slave_STOPF+0x258>)
 800470c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe f9aa 	bl	8002a6c <HAL_DMA_Abort_IT>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d03d      	beq.n	800479a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800472c:	e035      	b.n	800479a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004760:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fafe 	bl	8002d68 <HAL_DMA_GetState>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d014      	beq.n	800479c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004776:	4a4e      	ldr	r2, [pc, #312]	@ (80048b0 <I2C_Slave_STOPF+0x258>)
 8004778:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe f974 	bl	8002a6c <HAL_DMA_Abort_IT>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004794:	4610      	mov	r0, r2
 8004796:	4798      	blx	r3
 8004798:	e000      	b.n	800479c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800479a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d03e      	beq.n	8004824 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d112      	bne.n	80047da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e4:	2b40      	cmp	r3, #64	@ 0x40
 80047e6:	d112      	bne.n	800480e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	f043 0204 	orr.w	r2, r3, #4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8b7 	bl	80049a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004832:	e039      	b.n	80048a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b2a      	cmp	r3, #42	@ 0x2a
 8004838:	d109      	bne.n	800484e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2228      	movs	r2, #40	@ 0x28
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff f810 	bl	800386e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b28      	cmp	r3, #40	@ 0x28
 8004858:	d111      	bne.n	800487e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <I2C_Slave_STOPF+0x25c>)
 800485e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff f80f 	bl	800389a <HAL_I2C_ListenCpltCallback>
}
 800487c:	e014      	b.n	80048a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	2b22      	cmp	r3, #34	@ 0x22
 8004884:	d002      	beq.n	800488c <I2C_Slave_STOPF+0x234>
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b22      	cmp	r3, #34	@ 0x22
 800488a:	d10d      	bne.n	80048a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe ffe3 	bl	800386e <HAL_I2C_SlaveRxCpltCallback>
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	08004c05 	.word	0x08004c05
 80048b4:	ffff0000 	.word	0xffff0000

080048b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d002      	beq.n	80048da <I2C_Slave_AF+0x22>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d129      	bne.n	800492e <I2C_Slave_AF+0x76>
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b28      	cmp	r3, #40	@ 0x28
 80048de:	d126      	bne.n	800492e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a2e      	ldr	r2, [pc, #184]	@ (800499c <I2C_Slave_AF+0xe4>)
 80048e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800490e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fe ffb7 	bl	800389a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800492c:	e031      	b.n	8004992 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b21      	cmp	r3, #33	@ 0x21
 8004932:	d129      	bne.n	8004988 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a19      	ldr	r2, [pc, #100]	@ (800499c <I2C_Slave_AF+0xe4>)
 8004938:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2221      	movs	r2, #33	@ 0x21
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800495e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004968:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004978:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fe fd28 	bl	80033d0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fe ff6b 	bl	800385c <HAL_I2C_SlaveTxCpltCallback>
}
 8004986:	e004      	b.n	8004992 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004990:	615a      	str	r2, [r3, #20]
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	ffff0000 	.word	0xffff0000

080049a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049b8:	7bbb      	ldrb	r3, [r7, #14]
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d002      	beq.n	80049c4 <I2C_ITError+0x24>
 80049be:	7bbb      	ldrb	r3, [r7, #14]
 80049c0:	2b40      	cmp	r3, #64	@ 0x40
 80049c2:	d10a      	bne.n	80049da <I2C_ITError+0x3a>
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b22      	cmp	r3, #34	@ 0x22
 80049c8:	d107      	bne.n	80049da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049e0:	2b28      	cmp	r3, #40	@ 0x28
 80049e2:	d107      	bne.n	80049f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2228      	movs	r2, #40	@ 0x28
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80049f2:	e015      	b.n	8004a20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a02:	d00a      	beq.n	8004a1a <I2C_ITError+0x7a>
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b60      	cmp	r3, #96	@ 0x60
 8004a08:	d007      	beq.n	8004a1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2e:	d162      	bne.n	8004af6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d020      	beq.n	8004a90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a52:	4a6a      	ldr	r2, [pc, #424]	@ (8004bfc <I2C_ITError+0x25c>)
 8004a54:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe f806 	bl	8002a6c <HAL_DMA_Abort_IT>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8089 	beq.w	8004b7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4798      	blx	r3
 8004a8e:	e074      	b.n	8004b7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a94:	4a59      	ldr	r2, [pc, #356]	@ (8004bfc <I2C_ITError+0x25c>)
 8004a96:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fd ffe5 	bl	8002a6c <HAL_DMA_Abort_IT>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d068      	beq.n	8004b7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab2:	2b40      	cmp	r3, #64	@ 0x40
 8004ab4:	d10b      	bne.n	8004ace <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004af0:	4610      	mov	r0, r2
 8004af2:	4798      	blx	r3
 8004af4:	e041      	b.n	8004b7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b60      	cmp	r3, #96	@ 0x60
 8004b00:	d125      	bne.n	8004b4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1a:	2b40      	cmp	r3, #64	@ 0x40
 8004b1c:	d10b      	bne.n	8004b36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fe fecb 	bl	80038e2 <HAL_I2C_AbortCpltCallback>
 8004b4c:	e015      	b.n	8004b7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b40      	cmp	r3, #64	@ 0x40
 8004b5a:	d10b      	bne.n	8004b74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fe feab 	bl	80038d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10e      	bne.n	8004ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bb6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bbe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d113      	bne.n	8004bf4 <I2C_ITError+0x254>
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b28      	cmp	r3, #40	@ 0x28
 8004bd0:	d110      	bne.n	8004bf4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004c00 <I2C_ITError+0x260>)
 8004bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fe fe53 	bl	800389a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08004c05 	.word	0x08004c05
 8004c00:	ffff0000 	.word	0xffff0000

08004c04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <I2C_DMAAbort+0x148>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	08db      	lsrs	r3, r3, #3
 8004c24:	4a4a      	ldr	r2, [pc, #296]	@ (8004d50 <I2C_DMAAbort+0x14c>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	0a1a      	lsrs	r2, r3, #8
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	00da      	lsls	r2, r3, #3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f043 0220 	orr.w	r2, r3, #32
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004c4a:	e00a      	b.n	8004c62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d0ea      	beq.n	8004c38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6e:	2200      	movs	r2, #0
 8004c70:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b60      	cmp	r3, #96	@ 0x60
 8004cd2:	d10e      	bne.n	8004cf2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f7fe fdf9 	bl	80038e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cf0:	e027      	b.n	8004d42 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cf8:	2b28      	cmp	r3, #40	@ 0x28
 8004cfa:	d117      	bne.n	8004d2c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2228      	movs	r2, #40	@ 0x28
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d2a:	e007      	b.n	8004d3c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d3c:	6978      	ldr	r0, [r7, #20]
 8004d3e:	f7fe fdc7 	bl	80038d0 <HAL_I2C_ErrorCallback>
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000038 	.word	0x20000038
 8004d50:	14f8b589 	.word	0x14f8b589

08004d54 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d60:	4b13      	ldr	r3, [pc, #76]	@ (8004db0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	08db      	lsrs	r3, r3, #3
 8004d66:	4a13      	ldr	r2, [pc, #76]	@ (8004db4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	0a1a      	lsrs	r2, r3, #8
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e008      	b.n	8004da4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da0:	d0e9      	beq.n	8004d76 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000038 	.word	0x20000038
 8004db4:	14f8b589 	.word	0x14f8b589

08004db8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004dc8:	d103      	bne.n	8004dd2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dd0:	e007      	b.n	8004de2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004dda:	d102      	bne.n	8004de2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2208      	movs	r2, #8
 8004de0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e272      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8087 	beq.w	8004f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e0c:	4b92      	ldr	r3, [pc, #584]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d00c      	beq.n	8004e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e18:	4b8f      	ldr	r3, [pc, #572]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 030c 	and.w	r3, r3, #12
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d112      	bne.n	8004e4a <HAL_RCC_OscConfig+0x5e>
 8004e24:	4b8c      	ldr	r3, [pc, #560]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e30:	d10b      	bne.n	8004e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e32:	4b89      	ldr	r3, [pc, #548]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d06c      	beq.n	8004f18 <HAL_RCC_OscConfig+0x12c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d168      	bne.n	8004f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e24c      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e52:	d106      	bne.n	8004e62 <HAL_RCC_OscConfig+0x76>
 8004e54:	4b80      	ldr	r3, [pc, #512]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7f      	ldr	r2, [pc, #508]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	e02e      	b.n	8004ec0 <HAL_RCC_OscConfig+0xd4>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x98>
 8004e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7a      	ldr	r2, [pc, #488]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4b78      	ldr	r3, [pc, #480]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a77      	ldr	r2, [pc, #476]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e01d      	b.n	8004ec0 <HAL_RCC_OscConfig+0xd4>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0xbc>
 8004e8e:	4b72      	ldr	r3, [pc, #456]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a71      	ldr	r2, [pc, #452]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0xd4>
 8004ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a6a      	ldr	r2, [pc, #424]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b68      	ldr	r3, [pc, #416]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a67      	ldr	r2, [pc, #412]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fd fb9e 	bl	8002608 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fd fb9a 	bl	8002608 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	@ 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e200      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xe4>
 8004eee:	e014      	b.n	8004f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fb8a 	bl	8002608 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fd fb86 	bl	8002608 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	@ 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1ec      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	4b53      	ldr	r3, [pc, #332]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x10c>
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d063      	beq.n	8004fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f26:	4b4c      	ldr	r3, [pc, #304]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f32:	4b49      	ldr	r3, [pc, #292]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d11c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x18c>
 8004f3e:	4b46      	ldr	r3, [pc, #280]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d116      	bne.n	8004f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	4b43      	ldr	r3, [pc, #268]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_RCC_OscConfig+0x176>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e1c0      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f62:	4b3d      	ldr	r3, [pc, #244]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4939      	ldr	r1, [pc, #228]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	e03a      	b.n	8004fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f80:	4b36      	ldr	r3, [pc, #216]	@ (800505c <HAL_RCC_OscConfig+0x270>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f86:	f7fd fb3f 	bl	8002608 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8e:	f7fd fb3b 	bl	8002608 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e1a1      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fac:	4b2a      	ldr	r3, [pc, #168]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4927      	ldr	r1, [pc, #156]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	e015      	b.n	8004fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc2:	4b26      	ldr	r3, [pc, #152]	@ (800505c <HAL_RCC_OscConfig+0x270>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fd fb1e 	bl	8002608 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd0:	f7fd fb1a 	bl	8002608 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e180      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d03a      	beq.n	8005070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d019      	beq.n	8005036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005002:	4b17      	ldr	r3, [pc, #92]	@ (8005060 <HAL_RCC_OscConfig+0x274>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005008:	f7fd fafe 	bl	8002608 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7fd fafa 	bl	8002608 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e160      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <HAL_RCC_OscConfig+0x26c>)
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800502e:	2001      	movs	r0, #1
 8005030:	f000 face 	bl	80055d0 <RCC_Delay>
 8005034:	e01c      	b.n	8005070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005036:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <HAL_RCC_OscConfig+0x274>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503c:	f7fd fae4 	bl	8002608 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005042:	e00f      	b.n	8005064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005044:	f7fd fae0 	bl	8002608 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d908      	bls.n	8005064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e146      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	42420000 	.word	0x42420000
 8005060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005064:	4b92      	ldr	r3, [pc, #584]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e9      	bne.n	8005044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a6 	beq.w	80051ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005082:	4b8b      	ldr	r3, [pc, #556]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10d      	bne.n	80050aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508e:	4b88      	ldr	r3, [pc, #544]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	4a87      	ldr	r2, [pc, #540]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005098:	61d3      	str	r3, [r2, #28]
 800509a:	4b85      	ldr	r3, [pc, #532]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050aa:	4b82      	ldr	r3, [pc, #520]	@ (80052b4 <HAL_RCC_OscConfig+0x4c8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d118      	bne.n	80050e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b6:	4b7f      	ldr	r3, [pc, #508]	@ (80052b4 <HAL_RCC_OscConfig+0x4c8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7e      	ldr	r2, [pc, #504]	@ (80052b4 <HAL_RCC_OscConfig+0x4c8>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c2:	f7fd faa1 	bl	8002608 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fd fa9d 	bl	8002608 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b64      	cmp	r3, #100	@ 0x64
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e103      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050dc:	4b75      	ldr	r3, [pc, #468]	@ (80052b4 <HAL_RCC_OscConfig+0x4c8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x312>
 80050f0:	4b6f      	ldr	r3, [pc, #444]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	4a6e      	ldr	r2, [pc, #440]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6213      	str	r3, [r2, #32]
 80050fc:	e02d      	b.n	800515a <HAL_RCC_OscConfig+0x36e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x334>
 8005106:	4b6a      	ldr	r3, [pc, #424]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4a69      	ldr	r2, [pc, #420]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	6213      	str	r3, [r2, #32]
 8005112:	4b67      	ldr	r3, [pc, #412]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	4a66      	ldr	r2, [pc, #408]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005118:	f023 0304 	bic.w	r3, r3, #4
 800511c:	6213      	str	r3, [r2, #32]
 800511e:	e01c      	b.n	800515a <HAL_RCC_OscConfig+0x36e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2b05      	cmp	r3, #5
 8005126:	d10c      	bne.n	8005142 <HAL_RCC_OscConfig+0x356>
 8005128:	4b61      	ldr	r3, [pc, #388]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4a60      	ldr	r2, [pc, #384]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 800512e:	f043 0304 	orr.w	r3, r3, #4
 8005132:	6213      	str	r3, [r2, #32]
 8005134:	4b5e      	ldr	r3, [pc, #376]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4a5d      	ldr	r2, [pc, #372]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6213      	str	r3, [r2, #32]
 8005140:	e00b      	b.n	800515a <HAL_RCC_OscConfig+0x36e>
 8005142:	4b5b      	ldr	r3, [pc, #364]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	4a5a      	ldr	r2, [pc, #360]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	6213      	str	r3, [r2, #32]
 800514e:	4b58      	ldr	r3, [pc, #352]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	4a57      	ldr	r2, [pc, #348]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d015      	beq.n	800518e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005162:	f7fd fa51 	bl	8002608 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fd fa4d 	bl	8002608 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e0b1      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005180:	4b4b      	ldr	r3, [pc, #300]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ee      	beq.n	800516a <HAL_RCC_OscConfig+0x37e>
 800518c:	e014      	b.n	80051b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518e:	f7fd fa3b 	bl	8002608 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fd fa37 	bl	8002608 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e09b      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ac:	4b40      	ldr	r3, [pc, #256]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ee      	bne.n	8005196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051be:	4b3c      	ldr	r3, [pc, #240]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	4a3b      	ldr	r2, [pc, #236]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 80051c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8087 	beq.w	80052e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d4:	4b36      	ldr	r3, [pc, #216]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d061      	beq.n	80052a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d146      	bne.n	8005276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e8:	4b33      	ldr	r3, [pc, #204]	@ (80052b8 <HAL_RCC_OscConfig+0x4cc>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ee:	f7fd fa0b 	bl	8002608 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f6:	f7fd fa07 	bl	8002608 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e06d      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005208:	4b29      	ldr	r3, [pc, #164]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f0      	bne.n	80051f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800521c:	d108      	bne.n	8005230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800521e:	4b24      	ldr	r3, [pc, #144]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	4921      	ldr	r1, [pc, #132]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 800522c:	4313      	orrs	r3, r2
 800522e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005230:	4b1f      	ldr	r3, [pc, #124]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a19      	ldr	r1, [r3, #32]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	430b      	orrs	r3, r1
 8005242:	491b      	ldr	r1, [pc, #108]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_RCC_OscConfig+0x4cc>)
 800524a:	2201      	movs	r2, #1
 800524c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524e:	f7fd f9db 	bl	8002608 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005256:	f7fd f9d7 	bl	8002608 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e03d      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005268:	4b11      	ldr	r3, [pc, #68]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x46a>
 8005274:	e035      	b.n	80052e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005276:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <HAL_RCC_OscConfig+0x4cc>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fd f9c4 	bl	8002608 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005284:	f7fd f9c0 	bl	8002608 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e026      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_RCC_OscConfig+0x4c4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x498>
 80052a2:	e01e      	b.n	80052e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d107      	bne.n	80052bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e019      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40007000 	.word	0x40007000
 80052b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <HAL_RCC_OscConfig+0x500>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000

080052f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0d0      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005304:	4b6a      	ldr	r3, [pc, #424]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d910      	bls.n	8005334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	4b67      	ldr	r3, [pc, #412]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 0207 	bic.w	r2, r3, #7
 800531a:	4965      	ldr	r1, [pc, #404]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005322:	4b63      	ldr	r3, [pc, #396]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0b8      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d020      	beq.n	8005382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800534c:	4b59      	ldr	r3, [pc, #356]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a58      	ldr	r2, [pc, #352]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005364:	4b53      	ldr	r3, [pc, #332]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a52      	ldr	r2, [pc, #328]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800536a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800536e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	494d      	ldr	r1, [pc, #308]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d040      	beq.n	8005410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	4b47      	ldr	r3, [pc, #284]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d115      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ae:	4b41      	ldr	r3, [pc, #260]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e073      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053be:	4b3d      	ldr	r3, [pc, #244]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e06b      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ce:	4b39      	ldr	r3, [pc, #228]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f023 0203 	bic.w	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4936      	ldr	r1, [pc, #216]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e0:	f7fd f912 	bl	8002608 <HAL_GetTick>
 80053e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e8:	f7fd f90e 	bl	8002608 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e053      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fe:	4b2d      	ldr	r3, [pc, #180]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 020c 	and.w	r2, r3, #12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	429a      	cmp	r2, r3
 800540e:	d1eb      	bne.n	80053e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005410:	4b27      	ldr	r3, [pc, #156]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d210      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b24      	ldr	r3, [pc, #144]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 0207 	bic.w	r2, r3, #7
 8005426:	4922      	ldr	r1, [pc, #136]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b20      	ldr	r3, [pc, #128]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e032      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800544c:	4b19      	ldr	r3, [pc, #100]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4916      	ldr	r1, [pc, #88]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800546a:	4b12      	ldr	r3, [pc, #72]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	490e      	ldr	r1, [pc, #56]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 800547a:	4313      	orrs	r3, r2
 800547c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800547e:	f000 f821 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8005482:	4602      	mov	r2, r0
 8005484:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	490a      	ldr	r1, [pc, #40]	@ (80054b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005490:	5ccb      	ldrb	r3, [r1, r3]
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	4a09      	ldr	r2, [pc, #36]	@ (80054bc <HAL_RCC_ClockConfig+0x1cc>)
 8005498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800549a:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <HAL_RCC_ClockConfig+0x1d0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fd f870 	bl	8002584 <HAL_InitTick>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40022000 	.word	0x40022000
 80054b4:	40021000 	.word	0x40021000
 80054b8:	0800908c 	.word	0x0800908c
 80054bc:	20000038 	.word	0x20000038
 80054c0:	2000003c 	.word	0x2000003c

080054c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	2300      	movs	r3, #0
 80054d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054de:	4b1e      	ldr	r3, [pc, #120]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x94>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d002      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0x30>
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d003      	beq.n	80054fa <HAL_RCC_GetSysClockFreq+0x36>
 80054f2:	e027      	b.n	8005544 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054f4:	4b19      	ldr	r3, [pc, #100]	@ (800555c <HAL_RCC_GetSysClockFreq+0x98>)
 80054f6:	613b      	str	r3, [r7, #16]
      break;
 80054f8:	e027      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	0c9b      	lsrs	r3, r3, #18
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	4a17      	ldr	r2, [pc, #92]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005504:	5cd3      	ldrb	r3, [r2, r3]
 8005506:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005512:	4b11      	ldr	r3, [pc, #68]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x94>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	0c5b      	lsrs	r3, r3, #17
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <HAL_RCC_GetSysClockFreq+0xa0>)
 800551e:	5cd3      	ldrb	r3, [r2, r3]
 8005520:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a0d      	ldr	r2, [pc, #52]	@ (800555c <HAL_RCC_GetSysClockFreq+0x98>)
 8005526:	fb03 f202 	mul.w	r2, r3, r2
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e004      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0c      	ldr	r2, [pc, #48]	@ (8005568 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	613b      	str	r3, [r7, #16]
      break;
 8005542:	e002      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005544:	4b05      	ldr	r3, [pc, #20]	@ (800555c <HAL_RCC_GetSysClockFreq+0x98>)
 8005546:	613b      	str	r3, [r7, #16]
      break;
 8005548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800554a:	693b      	ldr	r3, [r7, #16]
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	007a1200 	.word	0x007a1200
 8005560:	080090a4 	.word	0x080090a4
 8005564:	080090b4 	.word	0x080090b4
 8005568:	003d0900 	.word	0x003d0900

0800556c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005570:	4b02      	ldr	r3, [pc, #8]	@ (800557c <HAL_RCC_GetHCLKFreq+0x10>)
 8005572:	681b      	ldr	r3, [r3, #0]
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	20000038 	.word	0x20000038

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005584:	f7ff fff2 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4903      	ldr	r1, [pc, #12]	@ (80055a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40021000 	.word	0x40021000
 80055a4:	0800909c 	.word	0x0800909c

080055a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055ac:	f7ff ffde 	bl	800556c <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	0adb      	lsrs	r3, r3, #11
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4903      	ldr	r1, [pc, #12]	@ (80055cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000
 80055cc:	0800909c 	.word	0x0800909c

080055d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005604 <RCC_Delay+0x34>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005608 <RCC_Delay+0x38>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	0a5b      	lsrs	r3, r3, #9
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055ec:	bf00      	nop
  }
  while (Delay --);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1e5a      	subs	r2, r3, #1
 80055f2:	60fa      	str	r2, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f9      	bne.n	80055ec <RCC_Delay+0x1c>
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	20000038 	.word	0x20000038
 8005608:	10624dd3 	.word	0x10624dd3

0800560c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e076      	b.n	800570c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d108      	bne.n	8005638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800562e:	d009      	beq.n	8005644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	61da      	str	r2, [r3, #28]
 8005636:	e005      	b.n	8005644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fc fafe 	bl	8001c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800567a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c8:	ea42 0103 	orr.w	r1, r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	0c1a      	lsrs	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f002 0204 	and.w	r2, r2, #4
 80056ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	@ 0x28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005722:	2301      	movs	r3, #1
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005726:	f7fc ff6f 	bl	8002608 <HAL_GetTick>
 800572a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005732:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800573a:	887b      	ldrh	r3, [r7, #2]
 800573c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800573e:	7ffb      	ldrb	r3, [r7, #31]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d00c      	beq.n	800575e <HAL_SPI_TransmitReceive+0x4a>
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800574a:	d106      	bne.n	800575a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <HAL_SPI_TransmitReceive+0x46>
 8005754:	7ffb      	ldrb	r3, [r7, #31]
 8005756:	2b04      	cmp	r3, #4
 8005758:	d001      	beq.n	800575e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
 800575c:	e17f      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_SPI_TransmitReceive+0x5c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_SPI_TransmitReceive+0x5c>
 800576a:	887b      	ldrh	r3, [r7, #2]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e174      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x6e>
 800577e:	2302      	movs	r3, #2
 8005780:	e16d      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x34a>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b04      	cmp	r3, #4
 8005794:	d003      	beq.n	800579e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2205      	movs	r2, #5
 800579a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	887a      	ldrh	r2, [r7, #2]
 80057ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	887a      	ldrh	r2, [r7, #2]
 80057b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	887a      	ldrh	r2, [r7, #2]
 80057c6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057de:	2b40      	cmp	r3, #64	@ 0x40
 80057e0:	d007      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057fa:	d17e      	bne.n	80058fa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_TransmitReceive+0xf6>
 8005804:	8afb      	ldrh	r3, [r7, #22]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d16c      	bne.n	80058e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	881a      	ldrh	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	1c9a      	adds	r2, r3, #2
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582e:	e059      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b02      	cmp	r3, #2
 800583c:	d11b      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x162>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d016      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x162>
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	2b01      	cmp	r3, #1
 800584c:	d113      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	881a      	ldrh	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	1c9a      	adds	r2, r3, #2
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d119      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x1a4>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d014      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	b292      	uxth	r2, r2
 800589a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	1c9a      	adds	r2, r3, #2
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b4:	2301      	movs	r3, #1
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058b8:	f7fc fea6 	bl	8002608 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d80d      	bhi.n	80058e4 <HAL_SPI_TransmitReceive+0x1d0>
 80058c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d009      	beq.n	80058e4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0bc      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1a0      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x11c>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d19b      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x11c>
 80058f8:	e082      	b.n	8005a00 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x1f4>
 8005902:	8afb      	ldrh	r3, [r7, #22]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d171      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	7812      	ldrb	r2, [r2, #0]
 8005914:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800592e:	e05d      	b.n	80059ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b02      	cmp	r3, #2
 800593c:	d11c      	bne.n	8005978 <HAL_SPI_TransmitReceive+0x264>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d017      	beq.n	8005978 <HAL_SPI_TransmitReceive+0x264>
 8005948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594a:	2b01      	cmp	r3, #1
 800594c:	d114      	bne.n	8005978 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	7812      	ldrb	r2, [r2, #0]
 800595a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d119      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x2a6>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d014      	beq.n	80059ba <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059b6:	2301      	movs	r3, #1
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059ba:	f7fc fe25 	bl	8002608 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d803      	bhi.n	80059d2 <HAL_SPI_TransmitReceive+0x2be>
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x2c4>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e038      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d19c      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x21c>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d197      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fd35 	bl	8006474 <SPI_EndRxTxTransaction>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e01d      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	@ 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d001      	beq.n	8005a86 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
 8005a84:	e097      	b.n	8005bb6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_SPI_Transmit_DMA+0x2a>
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e08f      	b.n	8005bb6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_SPI_Transmit_DMA+0x3c>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e088      	b.n	8005bb6 <HAL_SPI_Transmit_DMA+0x14e>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2203      	movs	r2, #3
 8005ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af2:	d10f      	bne.n	8005b14 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b18:	4a29      	ldr	r2, [pc, #164]	@ (8005bc0 <HAL_SPI_Transmit_DMA+0x158>)
 8005b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b20:	4a28      	ldr	r2, [pc, #160]	@ (8005bc4 <HAL_SPI_Transmit_DMA+0x15c>)
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b28:	4a27      	ldr	r2, [pc, #156]	@ (8005bc8 <HAL_SPI_Transmit_DMA+0x160>)
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b30:	2200      	movs	r2, #0
 8005b32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b4c:	f7fc fef2 	bl	8002934 <HAL_DMA_Start_IT>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	f043 0210 	orr.w	r2, r3, #16
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e023      	b.n	8005bb6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	d007      	beq.n	8005b8c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0220 	orr.w	r2, r2, #32
 8005ba2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0202 	orr.w	r2, r2, #2
 8005bb2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08006203 	.word	0x08006203
 8005bc4:	08006029 	.word	0x08006029
 8005bc8:	08006257 	.word	0x08006257

08005bcc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005be0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d00c      	beq.n	8005c08 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf4:	d106      	bne.n	8005c04 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <HAL_SPI_TransmitReceive_DMA+0x38>
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d001      	beq.n	8005c08 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
 8005c06:	e0cf      	b.n	8005da8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005c14:	887b      	ldrh	r3, [r7, #2]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e0c4      	b.n	8005da8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_SPI_TransmitReceive_DMA+0x60>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e0bd      	b.n	8005da8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d003      	beq.n	8005c48 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2205      	movs	r2, #5
 8005c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	887a      	ldrh	r2, [r7, #2]
 8005c58:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	887a      	ldrh	r2, [r7, #2]
 8005c6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	887a      	ldrh	r2, [r7, #2]
 8005c70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d108      	bne.n	8005c9c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8e:	4a48      	ldr	r2, [pc, #288]	@ (8005db0 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005c90:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c96:	4a47      	ldr	r2, [pc, #284]	@ (8005db4 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005c98:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c9a:	e007      	b.n	8005cac <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca0:	4a45      	ldr	r2, [pc, #276]	@ (8005db8 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca8:	4a44      	ldr	r2, [pc, #272]	@ (8005dbc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005caa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb0:	4a43      	ldr	r2, [pc, #268]	@ (8005dc0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005cb2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb8:	2200      	movs	r2, #0
 8005cba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005cd4:	f7fc fe2e 	bl	8002934 <HAL_DMA_Start_IT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce2:	f043 0210 	orr.w	r2, r3, #16
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e058      	b.n	8005da8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d12:	2200      	movs	r2, #0
 8005d14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d22:	2200      	movs	r2, #0
 8005d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d3e:	f7fc fdf9 	bl	8002934 <HAL_DMA_Start_IT>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4c:	f043 0210 	orr.w	r2, r3, #16
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e023      	b.n	8005da8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d007      	beq.n	8005d7e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d7c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0220 	orr.w	r2, r2, #32
 8005d94:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0202 	orr.w	r2, r2, #2
 8005da4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	0800621f 	.word	0x0800621f
 8005db4:	080060cf 	.word	0x080060cf
 8005db8:	0800623b 	.word	0x0800623b
 8005dbc:	08006175 	.word	0x08006175
 8005dc0:	08006257 	.word	0x08006257

08005dc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	099b      	lsrs	r3, r3, #6
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10f      	bne.n	8005e08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	099b      	lsrs	r3, r3, #6
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
    return;
 8005e06:	e0be      	b.n	8005f86 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_SPI_IRQHandler+0x66>
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	09db      	lsrs	r3, r3, #7
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
    return;
 8005e28:	e0ad      	b.n	8005f86 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <HAL_SPI_IRQHandler+0x80>
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	099b      	lsrs	r3, r3, #6
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80a1 	beq.w	8005f86 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 809a 	beq.w	8005f86 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	099b      	lsrs	r3, r3, #6
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d023      	beq.n	8005ea6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d011      	beq.n	8005e8e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6e:	f043 0204 	orr.w	r2, r3, #4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	e00b      	b.n	8005ea6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	693b      	ldr	r3, [r7, #16]
        return;
 8005ea4:	e06f      	b.n	8005f86 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d014      	beq.n	8005edc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb6:	f043 0201 	orr.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d04f      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ef2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <HAL_SPI_IRQHandler+0x14c>
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d034      	beq.n	8005f7a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0203 	bic.w	r2, r2, #3
 8005f1e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d011      	beq.n	8005f4c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2c:	4a17      	ldr	r2, [pc, #92]	@ (8005f8c <HAL_SPI_IRQHandler+0x1c8>)
 8005f2e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fc fd99 	bl	8002a6c <HAL_DMA_Abort_IT>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d016      	beq.n	8005f82 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f58:	4a0c      	ldr	r2, [pc, #48]	@ (8005f8c <HAL_SPI_IRQHandler+0x1c8>)
 8005f5a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fc fd83 	bl	8002a6c <HAL_DMA_Abort_IT>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005f78:	e003      	b.n	8005f82 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f83e 	bl	8005ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f80:	e000      	b.n	8005f84 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005f82:	bf00      	nop
    return;
 8005f84:	bf00      	nop
  }
}
 8005f86:	3720      	adds	r7, #32
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08006297 	.word	0x08006297

08005f90 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr

0800600e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800601c:	b2db      	uxtb	r3, r3
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr

08006028 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006036:	f7fc fae7 	bl	8002608 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b20      	cmp	r3, #32
 8006048:	d03b      	beq.n	80060c2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0220 	bic.w	r2, r2, #32
 8006058:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0202 	bic.w	r2, r2, #2
 8006068:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	2164      	movs	r1, #100	@ 0x64
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f000 fa00 	bl	8006474 <SPI_EndRxTxTransaction>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607e:	f043 0220 	orr.w	r2, r3, #32
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2200      	movs	r2, #0
 80060a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f7ff ff9e 	bl	8005ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80060c0:	e002      	b.n	80060c8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80060c2:	6978      	ldr	r0, [r7, #20]
 80060c4:	f7ff ff64 	bl	8005f90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060dc:	f7fc fa94 	bl	8002608 <HAL_GetTick>
 80060e0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d03b      	beq.n	8006168 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0220 	bic.w	r2, r2, #32
 80060fe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10d      	bne.n	8006124 <SPI_DMAReceiveCplt+0x56>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006110:	d108      	bne.n	8006124 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0203 	bic.w	r2, r2, #3
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	e007      	b.n	8006134 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	2164      	movs	r1, #100	@ 0x64
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f949 	bl	80063d0 <SPI_EndRxTransaction>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff ff4b 	bl	8005ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006166:	e002      	b.n	800616e <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff1a 	bl	8005fa2 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006182:	f7fc fa41 	bl	8002608 <HAL_GetTick>
 8006186:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b20      	cmp	r3, #32
 8006194:	d02f      	beq.n	80061f6 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0220 	bic.w	r2, r2, #32
 80061a4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	2164      	movs	r1, #100	@ 0x64
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f962 	bl	8006474 <SPI_EndRxTxTransaction>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0203 	bic.w	r2, r2, #3
 80061d0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff ff04 	bl	8005ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80061f4:	e002      	b.n	80061fc <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fedc 	bl	8005fb4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff fed8 	bl	8005fc6 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fed3 	bl	8005fd8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff fece 	bl	8005fea <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0203 	bic.w	r2, r2, #3
 8006272:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006278:	f043 0210 	orr.w	r2, r3, #16
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff feb7 	bl	8005ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff fea3 	bl	8005ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062d0:	f7fc f99a 	bl	8002608 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062e0:	f7fc f992 	bl	8002608 <HAL_GetTick>
 80062e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062e6:	4b39      	ldr	r3, [pc, #228]	@ (80063cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	015b      	lsls	r3, r3, #5
 80062ec:	0d1b      	lsrs	r3, r3, #20
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	fb02 f303 	mul.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062f6:	e054      	b.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d050      	beq.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006300:	f7fc f982 	bl	8002608 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	429a      	cmp	r2, r3
 800630e:	d902      	bls.n	8006316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d13d      	bne.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800632e:	d111      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006338:	d004      	beq.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006342:	d107      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800635c:	d10f      	bne.n	800637e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800637c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e017      	b.n	80063c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	3b01      	subs	r3, #1
 80063a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d19b      	bne.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000038 	.word	0x20000038

080063d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063e4:	d111      	bne.n	800640a <SPI_EndRxTransaction+0x3a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ee:	d004      	beq.n	80063fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d107      	bne.n	800640a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006408:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006412:	d117      	bne.n	8006444 <SPI_EndRxTransaction+0x74>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800641c:	d112      	bne.n	8006444 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2200      	movs	r2, #0
 8006426:	2101      	movs	r1, #1
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff ff49 	bl	80062c0 <SPI_WaitFlagStateUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01a      	beq.n	800646a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006438:	f043 0220 	orr.w	r2, r3, #32
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e013      	b.n	800646c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	2180      	movs	r1, #128	@ 0x80
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff ff36 	bl	80062c0 <SPI_WaitFlagStateUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e000      	b.n	800646c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2201      	movs	r2, #1
 8006488:	2102      	movs	r1, #2
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff ff18 	bl	80062c0 <SPI_WaitFlagStateUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649a:	f043 0220 	orr.w	r2, r3, #32
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e013      	b.n	80064ce <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	2180      	movs	r1, #128	@ 0x80
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff ff05 	bl	80062c0 <SPI_WaitFlagStateUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c0:	f043 0220 	orr.w	r2, r3, #32
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e000      	b.n	80064ce <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e041      	b.n	800656c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fb feeb 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f000 fc1f 	bl	8006d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	d001      	beq.n	800658c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e03a      	b.n	8006602 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a18      	ldr	r2, [pc, #96]	@ (800660c <HAL_TIM_Base_Start_IT+0x98>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x58>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b6:	d009      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x58>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a14      	ldr	r2, [pc, #80]	@ (8006610 <HAL_TIM_Base_Start_IT+0x9c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x58>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a13      	ldr	r2, [pc, #76]	@ (8006614 <HAL_TIM_Base_Start_IT+0xa0>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d111      	bne.n	80065f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b06      	cmp	r3, #6
 80065dc:	d010      	beq.n	8006600 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ee:	e007      	b.n	8006600 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40000400 	.word	0x40000400
 8006614:	40000800 	.word	0x40000800

08006618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e041      	b.n	80066ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f839 	bl	80066b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f000 fb7e 	bl	8006d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <HAL_TIM_PWM_Start+0x24>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	bf14      	ite	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	2300      	moveq	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	e022      	b.n	8006732 <HAL_TIM_PWM_Start+0x6a>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d109      	bne.n	8006706 <HAL_TIM_PWM_Start+0x3e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	bf14      	ite	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	2300      	moveq	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e015      	b.n	8006732 <HAL_TIM_PWM_Start+0x6a>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d109      	bne.n	8006720 <HAL_TIM_PWM_Start+0x58>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e008      	b.n	8006732 <HAL_TIM_PWM_Start+0x6a>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b01      	cmp	r3, #1
 800672a:	bf14      	ite	ne
 800672c:	2301      	movne	r3, #1
 800672e:	2300      	moveq	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e05e      	b.n	80067f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_TIM_PWM_Start+0x82>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006748:	e013      	b.n	8006772 <HAL_TIM_PWM_Start+0xaa>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d104      	bne.n	800675a <HAL_TIM_PWM_Start+0x92>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006758:	e00b      	b.n	8006772 <HAL_TIM_PWM_Start+0xaa>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d104      	bne.n	800676a <HAL_TIM_PWM_Start+0xa2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006768:	e003      	b.n	8006772 <HAL_TIM_PWM_Start+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fd78 	bl	8007270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1e      	ldr	r2, [pc, #120]	@ (8006800 <HAL_TIM_PWM_Start+0x138>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d107      	bne.n	800679a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006798:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a18      	ldr	r2, [pc, #96]	@ (8006800 <HAL_TIM_PWM_Start+0x138>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_TIM_PWM_Start+0xfa>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ac:	d009      	beq.n	80067c2 <HAL_TIM_PWM_Start+0xfa>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a14      	ldr	r2, [pc, #80]	@ (8006804 <HAL_TIM_PWM_Start+0x13c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_TIM_PWM_Start+0xfa>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a12      	ldr	r2, [pc, #72]	@ (8006808 <HAL_TIM_PWM_Start+0x140>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d111      	bne.n	80067e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d010      	beq.n	80067f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e4:	e007      	b.n	80067f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0201 	orr.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40000400 	.word	0x40000400
 8006808:	40000800 	.word	0x40000800

0800680c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d020      	beq.n	8006870 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01b      	beq.n	8006870 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0202 	mvn.w	r2, #2
 8006840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fa63 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 800685c:	e005      	b.n	800686a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa56 	bl	8006d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa65 	bl	8006d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d020      	beq.n	80068bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01b      	beq.n	80068bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0204 	mvn.w	r2, #4
 800688c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa3d 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 80068a8:	e005      	b.n	80068b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa30 	bl	8006d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fa3f 	bl	8006d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d020      	beq.n	8006908 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01b      	beq.n	8006908 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0208 	mvn.w	r2, #8
 80068d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2204      	movs	r2, #4
 80068de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa17 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 80068f4:	e005      	b.n	8006902 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fa0a 	bl	8006d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa19 	bl	8006d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	d020      	beq.n	8006954 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01b      	beq.n	8006954 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0210 	mvn.w	r2, #16
 8006924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2208      	movs	r2, #8
 800692a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9f1 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 8006940:	e005      	b.n	800694e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9e4 	bl	8006d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f9f3 	bl	8006d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0201 	mvn.w	r2, #1
 8006970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f9c3 	bl	8006cfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fcf5 	bl	8007386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00c      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f9c3 	bl	8006d46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00c      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0220 	mvn.w	r2, #32
 80069dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fcc8 	bl	8007374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e0ae      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b0c      	cmp	r3, #12
 8006a16:	f200 809f 	bhi.w	8006b58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006b59 	.word	0x08006b59
 8006a28:	08006b59 	.word	0x08006b59
 8006a2c:	08006b59 	.word	0x08006b59
 8006a30:	08006a95 	.word	0x08006a95
 8006a34:	08006b59 	.word	0x08006b59
 8006a38:	08006b59 	.word	0x08006b59
 8006a3c:	08006b59 	.word	0x08006b59
 8006a40:	08006ad7 	.word	0x08006ad7
 8006a44:	08006b59 	.word	0x08006b59
 8006a48:	08006b59 	.word	0x08006b59
 8006a4c:	08006b59 	.word	0x08006b59
 8006a50:	08006b17 	.word	0x08006b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 f9ea 	bl	8006e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0208 	orr.w	r2, r2, #8
 8006a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0204 	bic.w	r2, r2, #4
 8006a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6999      	ldr	r1, [r3, #24]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	619a      	str	r2, [r3, #24]
      break;
 8006a92:	e064      	b.n	8006b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fa30 	bl	8006f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6999      	ldr	r1, [r3, #24]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	021a      	lsls	r2, r3, #8
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	619a      	str	r2, [r3, #24]
      break;
 8006ad4:	e043      	b.n	8006b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fa79 	bl	8006fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0208 	orr.w	r2, r2, #8
 8006af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0204 	bic.w	r2, r2, #4
 8006b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69d9      	ldr	r1, [r3, #28]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	61da      	str	r2, [r3, #28]
      break;
 8006b14:	e023      	b.n	8006b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fac3 	bl	80070a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69d9      	ldr	r1, [r3, #28]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	021a      	lsls	r2, r3, #8
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	61da      	str	r2, [r3, #28]
      break;
 8006b56:	e002      	b.n	8006b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e0b4      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x186>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bc4:	d03e      	beq.n	8006c44 <HAL_TIM_ConfigClockSource+0xd4>
 8006bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bca:	f200 8087 	bhi.w	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bd2:	f000 8086 	beq.w	8006ce2 <HAL_TIM_ConfigClockSource+0x172>
 8006bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bda:	d87f      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bdc:	2b70      	cmp	r3, #112	@ 0x70
 8006bde:	d01a      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0xa6>
 8006be0:	2b70      	cmp	r3, #112	@ 0x70
 8006be2:	d87b      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006be4:	2b60      	cmp	r3, #96	@ 0x60
 8006be6:	d050      	beq.n	8006c8a <HAL_TIM_ConfigClockSource+0x11a>
 8006be8:	2b60      	cmp	r3, #96	@ 0x60
 8006bea:	d877      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bec:	2b50      	cmp	r3, #80	@ 0x50
 8006bee:	d03c      	beq.n	8006c6a <HAL_TIM_ConfigClockSource+0xfa>
 8006bf0:	2b50      	cmp	r3, #80	@ 0x50
 8006bf2:	d873      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	d058      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x13a>
 8006bf8:	2b40      	cmp	r3, #64	@ 0x40
 8006bfa:	d86f      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bfc:	2b30      	cmp	r3, #48	@ 0x30
 8006bfe:	d064      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x15a>
 8006c00:	2b30      	cmp	r3, #48	@ 0x30
 8006c02:	d86b      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d060      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x15a>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d867      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d05c      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x15a>
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d05a      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x15a>
 8006c14:	e062      	b.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c26:	f000 fb04 	bl	8007232 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	609a      	str	r2, [r3, #8]
      break;
 8006c42:	e04f      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c54:	f000 faed 	bl	8007232 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c66:	609a      	str	r2, [r3, #8]
      break;
 8006c68:	e03c      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c76:	461a      	mov	r2, r3
 8006c78:	f000 fa64 	bl	8007144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2150      	movs	r1, #80	@ 0x50
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fabb 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006c88:	e02c      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c96:	461a      	mov	r2, r3
 8006c98:	f000 fa82 	bl	80071a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2160      	movs	r1, #96	@ 0x60
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 faab 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006ca8:	e01c      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f000 fa44 	bl	8007144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2140      	movs	r1, #64	@ 0x40
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fa9b 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006cc8:	e00c      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f000 fa92 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006cda:	e003      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce0:	e000      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8006e28 <TIM_Base_SetConfig+0xd0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0x30>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0x30>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8006e2c <TIM_Base_SetConfig+0xd4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0x30>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a2b      	ldr	r2, [pc, #172]	@ (8006e30 <TIM_Base_SetConfig+0xd8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d108      	bne.n	8006d9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a22      	ldr	r2, [pc, #136]	@ (8006e28 <TIM_Base_SetConfig+0xd0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00b      	beq.n	8006dba <TIM_Base_SetConfig+0x62>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da8:	d007      	beq.n	8006dba <TIM_Base_SetConfig+0x62>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a1f      	ldr	r2, [pc, #124]	@ (8006e2c <TIM_Base_SetConfig+0xd4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d003      	beq.n	8006dba <TIM_Base_SetConfig+0x62>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e30 <TIM_Base_SetConfig+0xd8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d108      	bne.n	8006dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a0d      	ldr	r2, [pc, #52]	@ (8006e28 <TIM_Base_SetConfig+0xd0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d103      	bne.n	8006e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f023 0201 	bic.w	r2, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	611a      	str	r2, [r3, #16]
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800

08006e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	f023 0201 	bic.w	r2, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f023 0302 	bic.w	r3, r3, #2
 8006e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006efc <TIM_OC1_SetConfig+0xc8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d10c      	bne.n	8006eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f023 0308 	bic.w	r3, r3, #8
 8006e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 0304 	bic.w	r3, r3, #4
 8006ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a13      	ldr	r2, [pc, #76]	@ (8006efc <TIM_OC1_SetConfig+0xc8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d111      	bne.n	8006ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	621a      	str	r2, [r3, #32]
}
 8006ef0:	bf00      	nop
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40012c00 	.word	0x40012c00

08006f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	f023 0210 	bic.w	r2, r3, #16
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0320 	bic.w	r3, r3, #32
 8006f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd0 <TIM_OC2_SetConfig+0xd0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d10d      	bne.n	8006f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a14      	ldr	r2, [pc, #80]	@ (8006fd0 <TIM_OC2_SetConfig+0xd0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d113      	bne.n	8006fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr
 8006fd0:	40012c00 	.word	0x40012c00

08006fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800701c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a1d      	ldr	r2, [pc, #116]	@ (80070a4 <TIM_OC3_SetConfig+0xd0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d10d      	bne.n	800704e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800704c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a14      	ldr	r2, [pc, #80]	@ (80070a4 <TIM_OC3_SetConfig+0xd0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d113      	bne.n	800707e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800705c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	621a      	str	r2, [r3, #32]
}
 8007098:	bf00      	nop
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40012c00 	.word	0x40012c00

080070a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	031b      	lsls	r3, r3, #12
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a0f      	ldr	r2, [pc, #60]	@ (8007140 <TIM_OC4_SetConfig+0x98>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d109      	bne.n	800711c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800710e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	019b      	lsls	r3, r3, #6
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	621a      	str	r2, [r3, #32]
}
 8007136:	bf00      	nop
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr
 8007140:	40012c00 	.word	0x40012c00

08007144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f023 0201 	bic.w	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800716e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 030a 	bic.w	r3, r3, #10
 8007180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr

080071a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f023 0210 	bic.w	r2, r3, #16
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	031b      	lsls	r3, r3, #12
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	621a      	str	r2, [r3, #32]
}
 80071f4:	bf00      	nop
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	f043 0307 	orr.w	r3, r3, #7
 8007220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800724c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	021a      	lsls	r2, r3, #8
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	431a      	orrs	r2, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	4313      	orrs	r3, r2
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	609a      	str	r2, [r3, #8]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	2201      	movs	r2, #1
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1a      	ldr	r2, [r3, #32]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	43db      	mvns	r3, r3
 8007292:	401a      	ands	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f003 031f 	and.w	r3, r3, #31
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	fa01 f303 	lsl.w	r3, r1, r3
 80072a8:	431a      	orrs	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e046      	b.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a16      	ldr	r2, [pc, #88]	@ (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731c:	d009      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a12      	ldr	r2, [pc, #72]	@ (800736c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a10      	ldr	r2, [pc, #64]	@ (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10c      	bne.n	800734c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4313      	orrs	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800

08007374 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr

08007386 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr

08007398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e042      	b.n	8007430 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fb f850 	bl	8002464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2224      	movs	r2, #36	@ 0x24
 80073c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fc75 	bl	8007ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695a      	ldr	r2, [r3, #20]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b0ba      	sub	sp, #232	@ 0xe8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800745e:	2300      	movs	r3, #0
 8007460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007464:	2300      	movs	r3, #0
 8007466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800746a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10f      	bne.n	800749e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800747e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <HAL_UART_IRQHandler+0x66>
 800748a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fb5a 	bl	8007b50 <UART_Receive_IT>
      return;
 800749c:	e25b      	b.n	8007956 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800749e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80de 	beq.w	8007664 <HAL_UART_IRQHandler+0x22c>
 80074a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80d1 	beq.w	8007664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <HAL_UART_IRQHandler+0xae>
 80074ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074de:	f043 0201 	orr.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <HAL_UART_IRQHandler+0xd2>
 80074f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007502:	f043 0202 	orr.w	r2, r3, #2
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00b      	beq.n	800752e <HAL_UART_IRQHandler+0xf6>
 8007516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007526:	f043 0204 	orr.w	r2, r3, #4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d011      	beq.n	800755e <HAL_UART_IRQHandler+0x126>
 800753a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007556:	f043 0208 	orr.w	r2, r3, #8
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 81f2 	beq.w	800794c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <HAL_UART_IRQHandler+0x14e>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fae5 	bl	8007b50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <HAL_UART_IRQHandler+0x17a>
 80075aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d04f      	beq.n	8007652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9ef 	bl	8007996 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d041      	beq.n	800764a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3314      	adds	r3, #20
 80075cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80075dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3314      	adds	r3, #20
 80075ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800760a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1d9      	bne.n	80075c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d013      	beq.n	8007642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761e:	4a7e      	ldr	r2, [pc, #504]	@ (8007818 <HAL_UART_IRQHandler+0x3e0>)
 8007620:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007626:	4618      	mov	r0, r3
 8007628:	f7fb fa20 	bl	8002a6c <HAL_DMA_Abort_IT>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	e00e      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f993 	bl	800796e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	e00a      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f98f 	bl	800796e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	e006      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f98b 	bl	800796e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800765e:	e175      	b.n	800794c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	bf00      	nop
    return;
 8007662:	e173      	b.n	800794c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007668:	2b01      	cmp	r3, #1
 800766a:	f040 814f 	bne.w	800790c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8148 	beq.w	800790c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800767c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8141 	beq.w	800790c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60bb      	str	r3, [r7, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 80b6 	beq.w	800781c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8145 	beq.w	8007950 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076ce:	429a      	cmp	r2, r3
 80076d0:	f080 813e 	bcs.w	8007950 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	f000 8088 	beq.w	80077f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007702:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007706:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	330c      	adds	r3, #12
 8007710:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007714:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007718:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007720:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800772c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1d9      	bne.n	80076e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3314      	adds	r3, #20
 800773a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007744:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007746:	f023 0301 	bic.w	r3, r3, #1
 800774a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3314      	adds	r3, #20
 8007754:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007758:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800775c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007760:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800776a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e1      	bne.n	8007734 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3314      	adds	r3, #20
 8007776:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3314      	adds	r3, #20
 8007790:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007794:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007796:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800779a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e3      	bne.n	8007770 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077c8:	f023 0310 	bic.w	r3, r3, #16
 80077cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80077da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fb f8fe 	bl	80029f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007806:	b29b      	uxth	r3, r3
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	b29b      	uxth	r3, r3
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f8b6 	bl	8007980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007814:	e09c      	b.n	8007950 <HAL_UART_IRQHandler+0x518>
 8007816:	bf00      	nop
 8007818:	08007a5b 	.word	0x08007a5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007824:	b29b      	uxth	r3, r3
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 808e 	beq.w	8007954 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8089 	beq.w	8007954 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	330c      	adds	r3, #12
 8007848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007858:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007866:	647a      	str	r2, [r7, #68]	@ 0x44
 8007868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800786c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e3      	bne.n	8007842 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3314      	adds	r3, #20
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	623b      	str	r3, [r7, #32]
   return(result);
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3314      	adds	r3, #20
 800789a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800789e:	633a      	str	r2, [r7, #48]	@ 0x30
 80078a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e3      	bne.n	800787a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0310 	bic.w	r3, r3, #16
 80078d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	330c      	adds	r3, #12
 80078e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80078e4:	61fa      	str	r2, [r7, #28]
 80078e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	69b9      	ldr	r1, [r7, #24]
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	617b      	str	r3, [r7, #20]
   return(result);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e3      	bne.n	80078c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f83b 	bl	8007980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800790a:	e023      	b.n	8007954 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800790c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007914:	2b00      	cmp	r3, #0
 8007916:	d009      	beq.n	800792c <HAL_UART_IRQHandler+0x4f4>
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800791c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8ac 	bl	8007a82 <UART_Transmit_IT>
    return;
 800792a:	e014      	b.n	8007956 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800792c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00e      	beq.n	8007956 <HAL_UART_IRQHandler+0x51e>
 8007938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800793c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f8eb 	bl	8007b20 <UART_EndTransmit_IT>
    return;
 800794a:	e004      	b.n	8007956 <HAL_UART_IRQHandler+0x51e>
    return;
 800794c:	bf00      	nop
 800794e:	e002      	b.n	8007956 <HAL_UART_IRQHandler+0x51e>
      return;
 8007950:	bf00      	nop
 8007952:	e000      	b.n	8007956 <HAL_UART_IRQHandler+0x51e>
      return;
 8007954:	bf00      	nop
  }
}
 8007956:	37e8      	adds	r7, #232	@ 0xe8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr

0800796e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr

08007996 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007996:	b480      	push	{r7}
 8007998:	b095      	sub	sp, #84	@ 0x54
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	330c      	adds	r3, #12
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	330c      	adds	r3, #12
 80079bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079be:	643a      	str	r2, [r7, #64]	@ 0x40
 80079c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e5      	bne.n	800799e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3314      	adds	r3, #20
 80079d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3314      	adds	r3, #20
 80079f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e5      	bne.n	80079d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d119      	bne.n	8007a42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	330c      	adds	r3, #12
 8007a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f023 0310 	bic.w	r3, r3, #16
 8007a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a2e:	61ba      	str	r2, [r7, #24]
 8007a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6979      	ldr	r1, [r7, #20]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e5      	bne.n	8007a0e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a50:	bf00      	nop
 8007a52:	3754      	adds	r7, #84	@ 0x54
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr

08007a5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff ff7a 	bl	800796e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b21      	cmp	r3, #33	@ 0x21
 8007a94:	d13e      	bne.n	8007b14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a9e:	d114      	bne.n	8007aca <UART_Transmit_IT+0x48>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d110      	bne.n	8007aca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007abc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	621a      	str	r2, [r3, #32]
 8007ac8:	e008      	b.n	8007adc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	1c59      	adds	r1, r3, #1
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6211      	str	r1, [r2, #32]
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10f      	bne.n	8007b10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007afe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e000      	b.n	8007b16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b14:	2302      	movs	r3, #2
  }
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bc80      	pop	{r7}
 8007b1e:	4770      	bx	lr

08007b20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ff0b 	bl	800795c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08c      	sub	sp, #48	@ 0x30
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b22      	cmp	r3, #34	@ 0x22
 8007b62:	f040 80ae 	bne.w	8007cc2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6e:	d117      	bne.n	8007ba0 <UART_Receive_IT+0x50>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d113      	bne.n	8007ba0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b98:	1c9a      	adds	r2, r3, #2
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b9e:	e026      	b.n	8007bee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb2:	d007      	beq.n	8007bc4 <UART_Receive_IT+0x74>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <UART_Receive_IT+0x82>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d106      	bne.n	8007bd2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e008      	b.n	8007be4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d15d      	bne.n	8007cbe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0220 	bic.w	r2, r2, #32
 8007c10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695a      	ldr	r2, [r3, #20]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d135      	bne.n	8007cb4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f023 0310 	bic.w	r3, r3, #16
 8007c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	330c      	adds	r3, #12
 8007c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c6e:	623a      	str	r2, [r7, #32]
 8007c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	69f9      	ldr	r1, [r7, #28]
 8007c74:	6a3a      	ldr	r2, [r7, #32]
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e5      	bne.n	8007c4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0310 	and.w	r3, r3, #16
 8007c8c:	2b10      	cmp	r3, #16
 8007c8e:	d10a      	bne.n	8007ca6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff fe67 	bl	8007980 <HAL_UARTEx_RxEventCallback>
 8007cb2:	e002      	b.n	8007cba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7f9 fa57 	bl	8001168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e002      	b.n	8007cc4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e000      	b.n	8007cc4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
  }
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3730      	adds	r7, #48	@ 0x30
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007d06:	f023 030c 	bic.w	r3, r3, #12
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	430b      	orrs	r3, r1
 8007d12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699a      	ldr	r2, [r3, #24]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8007de0 <UART_SetConfig+0x114>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d103      	bne.n	8007d3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007d34:	f7fd fc38 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	e002      	b.n	8007d42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007d3c:	f7fd fc20 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8007d40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009a      	lsls	r2, r3, #2
 8007d4c:	441a      	add	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d58:	4a22      	ldr	r2, [pc, #136]	@ (8007de4 <UART_SetConfig+0x118>)
 8007d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	0119      	lsls	r1, r3, #4
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009a      	lsls	r2, r3, #2
 8007d6c:	441a      	add	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d78:	4b1a      	ldr	r3, [pc, #104]	@ (8007de4 <UART_SetConfig+0x118>)
 8007d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	2064      	movs	r0, #100	@ 0x64
 8007d82:	fb00 f303 	mul.w	r3, r0, r3
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	3332      	adds	r3, #50	@ 0x32
 8007d8c:	4a15      	ldr	r2, [pc, #84]	@ (8007de4 <UART_SetConfig+0x118>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d98:	4419      	add	r1, r3
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009a      	lsls	r2, r3, #2
 8007da4:	441a      	add	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8007db0:	4b0c      	ldr	r3, [pc, #48]	@ (8007de4 <UART_SetConfig+0x118>)
 8007db2:	fba3 0302 	umull	r0, r3, r3, r2
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	2064      	movs	r0, #100	@ 0x64
 8007dba:	fb00 f303 	mul.w	r3, r0, r3
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	3332      	adds	r3, #50	@ 0x32
 8007dc4:	4a07      	ldr	r2, [pc, #28]	@ (8007de4 <UART_SetConfig+0x118>)
 8007dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dca:	095b      	lsrs	r3, r3, #5
 8007dcc:	f003 020f 	and.w	r2, r3, #15
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	440a      	add	r2, r1
 8007dd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40013800 	.word	0x40013800
 8007de4:	51eb851f 	.word	0x51eb851f

08007de8 <atoi>:
 8007de8:	220a      	movs	r2, #10
 8007dea:	2100      	movs	r1, #0
 8007dec:	f000 b87a 	b.w	8007ee4 <strtol>

08007df0 <_strtol_l.isra.0>:
 8007df0:	2b24      	cmp	r3, #36	@ 0x24
 8007df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df6:	4686      	mov	lr, r0
 8007df8:	4690      	mov	r8, r2
 8007dfa:	d801      	bhi.n	8007e00 <_strtol_l.isra.0+0x10>
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d106      	bne.n	8007e0e <_strtol_l.isra.0+0x1e>
 8007e00:	f000 fa2a 	bl	8008258 <__errno>
 8007e04:	2316      	movs	r3, #22
 8007e06:	6003      	str	r3, [r0, #0]
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0e:	460d      	mov	r5, r1
 8007e10:	4833      	ldr	r0, [pc, #204]	@ (8007ee0 <_strtol_l.isra.0+0xf0>)
 8007e12:	462a      	mov	r2, r5
 8007e14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e18:	5d06      	ldrb	r6, [r0, r4]
 8007e1a:	f016 0608 	ands.w	r6, r6, #8
 8007e1e:	d1f8      	bne.n	8007e12 <_strtol_l.isra.0+0x22>
 8007e20:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e22:	d110      	bne.n	8007e46 <_strtol_l.isra.0+0x56>
 8007e24:	2601      	movs	r6, #1
 8007e26:	782c      	ldrb	r4, [r5, #0]
 8007e28:	1c95      	adds	r5, r2, #2
 8007e2a:	f033 0210 	bics.w	r2, r3, #16
 8007e2e:	d115      	bne.n	8007e5c <_strtol_l.isra.0+0x6c>
 8007e30:	2c30      	cmp	r4, #48	@ 0x30
 8007e32:	d10d      	bne.n	8007e50 <_strtol_l.isra.0+0x60>
 8007e34:	782a      	ldrb	r2, [r5, #0]
 8007e36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e3a:	2a58      	cmp	r2, #88	@ 0x58
 8007e3c:	d108      	bne.n	8007e50 <_strtol_l.isra.0+0x60>
 8007e3e:	786c      	ldrb	r4, [r5, #1]
 8007e40:	3502      	adds	r5, #2
 8007e42:	2310      	movs	r3, #16
 8007e44:	e00a      	b.n	8007e5c <_strtol_l.isra.0+0x6c>
 8007e46:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e48:	bf04      	itt	eq
 8007e4a:	782c      	ldrbeq	r4, [r5, #0]
 8007e4c:	1c95      	addeq	r5, r2, #2
 8007e4e:	e7ec      	b.n	8007e2a <_strtol_l.isra.0+0x3a>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f6      	bne.n	8007e42 <_strtol_l.isra.0+0x52>
 8007e54:	2c30      	cmp	r4, #48	@ 0x30
 8007e56:	bf14      	ite	ne
 8007e58:	230a      	movne	r3, #10
 8007e5a:	2308      	moveq	r3, #8
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e62:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e66:	fbbc f9f3 	udiv	r9, ip, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e74:	2f09      	cmp	r7, #9
 8007e76:	d80f      	bhi.n	8007e98 <_strtol_l.isra.0+0xa8>
 8007e78:	463c      	mov	r4, r7
 8007e7a:	42a3      	cmp	r3, r4
 8007e7c:	dd1b      	ble.n	8007eb6 <_strtol_l.isra.0+0xc6>
 8007e7e:	1c57      	adds	r7, r2, #1
 8007e80:	d007      	beq.n	8007e92 <_strtol_l.isra.0+0xa2>
 8007e82:	4581      	cmp	r9, r0
 8007e84:	d314      	bcc.n	8007eb0 <_strtol_l.isra.0+0xc0>
 8007e86:	d101      	bne.n	8007e8c <_strtol_l.isra.0+0x9c>
 8007e88:	45a2      	cmp	sl, r4
 8007e8a:	db11      	blt.n	8007eb0 <_strtol_l.isra.0+0xc0>
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	fb00 4003 	mla	r0, r0, r3, r4
 8007e92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e96:	e7eb      	b.n	8007e70 <_strtol_l.isra.0+0x80>
 8007e98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e9c:	2f19      	cmp	r7, #25
 8007e9e:	d801      	bhi.n	8007ea4 <_strtol_l.isra.0+0xb4>
 8007ea0:	3c37      	subs	r4, #55	@ 0x37
 8007ea2:	e7ea      	b.n	8007e7a <_strtol_l.isra.0+0x8a>
 8007ea4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ea8:	2f19      	cmp	r7, #25
 8007eaa:	d804      	bhi.n	8007eb6 <_strtol_l.isra.0+0xc6>
 8007eac:	3c57      	subs	r4, #87	@ 0x57
 8007eae:	e7e4      	b.n	8007e7a <_strtol_l.isra.0+0x8a>
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb4:	e7ed      	b.n	8007e92 <_strtol_l.isra.0+0xa2>
 8007eb6:	1c53      	adds	r3, r2, #1
 8007eb8:	d108      	bne.n	8007ecc <_strtol_l.isra.0+0xdc>
 8007eba:	2322      	movs	r3, #34	@ 0x22
 8007ebc:	4660      	mov	r0, ip
 8007ebe:	f8ce 3000 	str.w	r3, [lr]
 8007ec2:	f1b8 0f00 	cmp.w	r8, #0
 8007ec6:	d0a0      	beq.n	8007e0a <_strtol_l.isra.0+0x1a>
 8007ec8:	1e69      	subs	r1, r5, #1
 8007eca:	e006      	b.n	8007eda <_strtol_l.isra.0+0xea>
 8007ecc:	b106      	cbz	r6, 8007ed0 <_strtol_l.isra.0+0xe0>
 8007ece:	4240      	negs	r0, r0
 8007ed0:	f1b8 0f00 	cmp.w	r8, #0
 8007ed4:	d099      	beq.n	8007e0a <_strtol_l.isra.0+0x1a>
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	d1f6      	bne.n	8007ec8 <_strtol_l.isra.0+0xd8>
 8007eda:	f8c8 1000 	str.w	r1, [r8]
 8007ede:	e794      	b.n	8007e0a <_strtol_l.isra.0+0x1a>
 8007ee0:	080090b7 	.word	0x080090b7

08007ee4 <strtol>:
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	460a      	mov	r2, r1
 8007ee8:	4601      	mov	r1, r0
 8007eea:	4802      	ldr	r0, [pc, #8]	@ (8007ef4 <strtol+0x10>)
 8007eec:	6800      	ldr	r0, [r0, #0]
 8007eee:	f7ff bf7f 	b.w	8007df0 <_strtol_l.isra.0>
 8007ef2:	bf00      	nop
 8007ef4:	20000050 	.word	0x20000050

08007ef8 <std>:
 8007ef8:	2300      	movs	r3, #0
 8007efa:	b510      	push	{r4, lr}
 8007efc:	4604      	mov	r4, r0
 8007efe:	e9c0 3300 	strd	r3, r3, [r0]
 8007f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f06:	6083      	str	r3, [r0, #8]
 8007f08:	8181      	strh	r1, [r0, #12]
 8007f0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f0c:	81c2      	strh	r2, [r0, #14]
 8007f0e:	6183      	str	r3, [r0, #24]
 8007f10:	4619      	mov	r1, r3
 8007f12:	2208      	movs	r2, #8
 8007f14:	305c      	adds	r0, #92	@ 0x5c
 8007f16:	f000 f8f4 	bl	8008102 <memset>
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f50 <std+0x58>)
 8007f1c:	6224      	str	r4, [r4, #32]
 8007f1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f20:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <std+0x5c>)
 8007f22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f24:	4b0c      	ldr	r3, [pc, #48]	@ (8007f58 <std+0x60>)
 8007f26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f28:	4b0c      	ldr	r3, [pc, #48]	@ (8007f5c <std+0x64>)
 8007f2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f60 <std+0x68>)
 8007f2e:	429c      	cmp	r4, r3
 8007f30:	d006      	beq.n	8007f40 <std+0x48>
 8007f32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f36:	4294      	cmp	r4, r2
 8007f38:	d002      	beq.n	8007f40 <std+0x48>
 8007f3a:	33d0      	adds	r3, #208	@ 0xd0
 8007f3c:	429c      	cmp	r4, r3
 8007f3e:	d105      	bne.n	8007f4c <std+0x54>
 8007f40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f48:	f000 b9b0 	b.w	80082ac <__retarget_lock_init_recursive>
 8007f4c:	bd10      	pop	{r4, pc}
 8007f4e:	bf00      	nop
 8007f50:	0800807d 	.word	0x0800807d
 8007f54:	0800809f 	.word	0x0800809f
 8007f58:	080080d7 	.word	0x080080d7
 8007f5c:	080080fb 	.word	0x080080fb
 8007f60:	200003d4 	.word	0x200003d4

08007f64 <stdio_exit_handler>:
 8007f64:	4a02      	ldr	r2, [pc, #8]	@ (8007f70 <stdio_exit_handler+0xc>)
 8007f66:	4903      	ldr	r1, [pc, #12]	@ (8007f74 <stdio_exit_handler+0x10>)
 8007f68:	4803      	ldr	r0, [pc, #12]	@ (8007f78 <stdio_exit_handler+0x14>)
 8007f6a:	f000 b869 	b.w	8008040 <_fwalk_sglue>
 8007f6e:	bf00      	nop
 8007f70:	20000044 	.word	0x20000044
 8007f74:	08008609 	.word	0x08008609
 8007f78:	20000054 	.word	0x20000054

08007f7c <cleanup_stdio>:
 8007f7c:	6841      	ldr	r1, [r0, #4]
 8007f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb0 <cleanup_stdio+0x34>)
 8007f80:	b510      	push	{r4, lr}
 8007f82:	4299      	cmp	r1, r3
 8007f84:	4604      	mov	r4, r0
 8007f86:	d001      	beq.n	8007f8c <cleanup_stdio+0x10>
 8007f88:	f000 fb3e 	bl	8008608 <_fflush_r>
 8007f8c:	68a1      	ldr	r1, [r4, #8]
 8007f8e:	4b09      	ldr	r3, [pc, #36]	@ (8007fb4 <cleanup_stdio+0x38>)
 8007f90:	4299      	cmp	r1, r3
 8007f92:	d002      	beq.n	8007f9a <cleanup_stdio+0x1e>
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fb37 	bl	8008608 <_fflush_r>
 8007f9a:	68e1      	ldr	r1, [r4, #12]
 8007f9c:	4b06      	ldr	r3, [pc, #24]	@ (8007fb8 <cleanup_stdio+0x3c>)
 8007f9e:	4299      	cmp	r1, r3
 8007fa0:	d004      	beq.n	8007fac <cleanup_stdio+0x30>
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa8:	f000 bb2e 	b.w	8008608 <_fflush_r>
 8007fac:	bd10      	pop	{r4, pc}
 8007fae:	bf00      	nop
 8007fb0:	200003d4 	.word	0x200003d4
 8007fb4:	2000043c 	.word	0x2000043c
 8007fb8:	200004a4 	.word	0x200004a4

08007fbc <global_stdio_init.part.0>:
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8007fec <global_stdio_init.part.0+0x30>)
 8007fc0:	4c0b      	ldr	r4, [pc, #44]	@ (8007ff0 <global_stdio_init.part.0+0x34>)
 8007fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ff4 <global_stdio_init.part.0+0x38>)
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	2104      	movs	r1, #4
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f7ff ff94 	bl	8007ef8 <std>
 8007fd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	2109      	movs	r1, #9
 8007fd8:	f7ff ff8e 	bl	8007ef8 <std>
 8007fdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe6:	2112      	movs	r1, #18
 8007fe8:	f7ff bf86 	b.w	8007ef8 <std>
 8007fec:	2000050c 	.word	0x2000050c
 8007ff0:	200003d4 	.word	0x200003d4
 8007ff4:	08007f65 	.word	0x08007f65

08007ff8 <__sfp_lock_acquire>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	@ (8008000 <__sfp_lock_acquire+0x8>)
 8007ffa:	f000 b958 	b.w	80082ae <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	20000515 	.word	0x20000515

08008004 <__sfp_lock_release>:
 8008004:	4801      	ldr	r0, [pc, #4]	@ (800800c <__sfp_lock_release+0x8>)
 8008006:	f000 b953 	b.w	80082b0 <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	20000515 	.word	0x20000515

08008010 <__sinit>:
 8008010:	b510      	push	{r4, lr}
 8008012:	4604      	mov	r4, r0
 8008014:	f7ff fff0 	bl	8007ff8 <__sfp_lock_acquire>
 8008018:	6a23      	ldr	r3, [r4, #32]
 800801a:	b11b      	cbz	r3, 8008024 <__sinit+0x14>
 800801c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008020:	f7ff bff0 	b.w	8008004 <__sfp_lock_release>
 8008024:	4b04      	ldr	r3, [pc, #16]	@ (8008038 <__sinit+0x28>)
 8008026:	6223      	str	r3, [r4, #32]
 8008028:	4b04      	ldr	r3, [pc, #16]	@ (800803c <__sinit+0x2c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1f5      	bne.n	800801c <__sinit+0xc>
 8008030:	f7ff ffc4 	bl	8007fbc <global_stdio_init.part.0>
 8008034:	e7f2      	b.n	800801c <__sinit+0xc>
 8008036:	bf00      	nop
 8008038:	08007f7d 	.word	0x08007f7d
 800803c:	2000050c 	.word	0x2000050c

08008040 <_fwalk_sglue>:
 8008040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008044:	4607      	mov	r7, r0
 8008046:	4688      	mov	r8, r1
 8008048:	4614      	mov	r4, r2
 800804a:	2600      	movs	r6, #0
 800804c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008050:	f1b9 0901 	subs.w	r9, r9, #1
 8008054:	d505      	bpl.n	8008062 <_fwalk_sglue+0x22>
 8008056:	6824      	ldr	r4, [r4, #0]
 8008058:	2c00      	cmp	r4, #0
 800805a:	d1f7      	bne.n	800804c <_fwalk_sglue+0xc>
 800805c:	4630      	mov	r0, r6
 800805e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008062:	89ab      	ldrh	r3, [r5, #12]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d907      	bls.n	8008078 <_fwalk_sglue+0x38>
 8008068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800806c:	3301      	adds	r3, #1
 800806e:	d003      	beq.n	8008078 <_fwalk_sglue+0x38>
 8008070:	4629      	mov	r1, r5
 8008072:	4638      	mov	r0, r7
 8008074:	47c0      	blx	r8
 8008076:	4306      	orrs	r6, r0
 8008078:	3568      	adds	r5, #104	@ 0x68
 800807a:	e7e9      	b.n	8008050 <_fwalk_sglue+0x10>

0800807c <__sread>:
 800807c:	b510      	push	{r4, lr}
 800807e:	460c      	mov	r4, r1
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	f000 f8c4 	bl	8008210 <_read_r>
 8008088:	2800      	cmp	r0, #0
 800808a:	bfab      	itete	ge
 800808c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800808e:	89a3      	ldrhlt	r3, [r4, #12]
 8008090:	181b      	addge	r3, r3, r0
 8008092:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008096:	bfac      	ite	ge
 8008098:	6563      	strge	r3, [r4, #84]	@ 0x54
 800809a:	81a3      	strhlt	r3, [r4, #12]
 800809c:	bd10      	pop	{r4, pc}

0800809e <__swrite>:
 800809e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a2:	461f      	mov	r7, r3
 80080a4:	898b      	ldrh	r3, [r1, #12]
 80080a6:	4605      	mov	r5, r0
 80080a8:	05db      	lsls	r3, r3, #23
 80080aa:	460c      	mov	r4, r1
 80080ac:	4616      	mov	r6, r2
 80080ae:	d505      	bpl.n	80080bc <__swrite+0x1e>
 80080b0:	2302      	movs	r3, #2
 80080b2:	2200      	movs	r2, #0
 80080b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b8:	f000 f898 	bl	80081ec <_lseek_r>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	4632      	mov	r2, r6
 80080c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	4628      	mov	r0, r5
 80080c8:	463b      	mov	r3, r7
 80080ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080d2:	f000 b8af 	b.w	8008234 <_write_r>

080080d6 <__sseek>:
 80080d6:	b510      	push	{r4, lr}
 80080d8:	460c      	mov	r4, r1
 80080da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080de:	f000 f885 	bl	80081ec <_lseek_r>
 80080e2:	1c43      	adds	r3, r0, #1
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	bf15      	itete	ne
 80080e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080f2:	81a3      	strheq	r3, [r4, #12]
 80080f4:	bf18      	it	ne
 80080f6:	81a3      	strhne	r3, [r4, #12]
 80080f8:	bd10      	pop	{r4, pc}

080080fa <__sclose>:
 80080fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fe:	f000 b865 	b.w	80081cc <_close_r>

08008102 <memset>:
 8008102:	4603      	mov	r3, r0
 8008104:	4402      	add	r2, r0
 8008106:	4293      	cmp	r3, r2
 8008108:	d100      	bne.n	800810c <memset+0xa>
 800810a:	4770      	bx	lr
 800810c:	f803 1b01 	strb.w	r1, [r3], #1
 8008110:	e7f9      	b.n	8008106 <memset+0x4>
	...

08008114 <strtok>:
 8008114:	4b16      	ldr	r3, [pc, #88]	@ (8008170 <strtok+0x5c>)
 8008116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	681f      	ldr	r7, [r3, #0]
 800811c:	4605      	mov	r5, r0
 800811e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008120:	460e      	mov	r6, r1
 8008122:	b9ec      	cbnz	r4, 8008160 <strtok+0x4c>
 8008124:	2050      	movs	r0, #80	@ 0x50
 8008126:	f000 f939 	bl	800839c <malloc>
 800812a:	4602      	mov	r2, r0
 800812c:	6478      	str	r0, [r7, #68]	@ 0x44
 800812e:	b920      	cbnz	r0, 800813a <strtok+0x26>
 8008130:	215b      	movs	r1, #91	@ 0x5b
 8008132:	4b10      	ldr	r3, [pc, #64]	@ (8008174 <strtok+0x60>)
 8008134:	4810      	ldr	r0, [pc, #64]	@ (8008178 <strtok+0x64>)
 8008136:	f000 f8cb 	bl	80082d0 <__assert_func>
 800813a:	e9c0 4400 	strd	r4, r4, [r0]
 800813e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008142:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008146:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800814a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800814e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008152:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008156:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800815a:	6184      	str	r4, [r0, #24]
 800815c:	7704      	strb	r4, [r0, #28]
 800815e:	6244      	str	r4, [r0, #36]	@ 0x24
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008166:	2301      	movs	r3, #1
 8008168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	f000 b806 	b.w	800817c <__strtok_r>
 8008170:	20000050 	.word	0x20000050
 8008174:	080091b7 	.word	0x080091b7
 8008178:	080091ce 	.word	0x080091ce

0800817c <__strtok_r>:
 800817c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817e:	4604      	mov	r4, r0
 8008180:	b908      	cbnz	r0, 8008186 <__strtok_r+0xa>
 8008182:	6814      	ldr	r4, [r2, #0]
 8008184:	b144      	cbz	r4, 8008198 <__strtok_r+0x1c>
 8008186:	460f      	mov	r7, r1
 8008188:	4620      	mov	r0, r4
 800818a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800818e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008192:	b91e      	cbnz	r6, 800819c <__strtok_r+0x20>
 8008194:	b965      	cbnz	r5, 80081b0 <__strtok_r+0x34>
 8008196:	6015      	str	r5, [r2, #0]
 8008198:	2000      	movs	r0, #0
 800819a:	e005      	b.n	80081a8 <__strtok_r+0x2c>
 800819c:	42b5      	cmp	r5, r6
 800819e:	d1f6      	bne.n	800818e <__strtok_r+0x12>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f0      	bne.n	8008186 <__strtok_r+0xa>
 80081a4:	6014      	str	r4, [r2, #0]
 80081a6:	7003      	strb	r3, [r0, #0]
 80081a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081aa:	461c      	mov	r4, r3
 80081ac:	e00c      	b.n	80081c8 <__strtok_r+0x4c>
 80081ae:	b91d      	cbnz	r5, 80081b8 <__strtok_r+0x3c>
 80081b0:	460e      	mov	r6, r1
 80081b2:	4627      	mov	r7, r4
 80081b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081b8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80081bc:	42ab      	cmp	r3, r5
 80081be:	d1f6      	bne.n	80081ae <__strtok_r+0x32>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0f2      	beq.n	80081aa <__strtok_r+0x2e>
 80081c4:	2300      	movs	r3, #0
 80081c6:	703b      	strb	r3, [r7, #0]
 80081c8:	6014      	str	r4, [r2, #0]
 80081ca:	e7ed      	b.n	80081a8 <__strtok_r+0x2c>

080081cc <_close_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	2300      	movs	r3, #0
 80081d0:	4d05      	ldr	r5, [pc, #20]	@ (80081e8 <_close_r+0x1c>)
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	f7f9 ff13 	bl	8002002 <_close>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d102      	bne.n	80081e6 <_close_r+0x1a>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	b103      	cbz	r3, 80081e6 <_close_r+0x1a>
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	20000510 	.word	0x20000510

080081ec <_lseek_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4604      	mov	r4, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	4611      	mov	r1, r2
 80081f4:	2200      	movs	r2, #0
 80081f6:	4d05      	ldr	r5, [pc, #20]	@ (800820c <_lseek_r+0x20>)
 80081f8:	602a      	str	r2, [r5, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f7f9 ff25 	bl	800204a <_lseek>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_lseek_r+0x1e>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_lseek_r+0x1e>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	20000510 	.word	0x20000510

08008210 <_read_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	2200      	movs	r2, #0
 800821a:	4d05      	ldr	r5, [pc, #20]	@ (8008230 <_read_r+0x20>)
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	f7f9 feb6 	bl	8001f90 <_read>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_read_r+0x1e>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_read_r+0x1e>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	20000510 	.word	0x20000510

08008234 <_write_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4604      	mov	r4, r0
 8008238:	4608      	mov	r0, r1
 800823a:	4611      	mov	r1, r2
 800823c:	2200      	movs	r2, #0
 800823e:	4d05      	ldr	r5, [pc, #20]	@ (8008254 <_write_r+0x20>)
 8008240:	602a      	str	r2, [r5, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	f7f9 fec1 	bl	8001fca <_write>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_write_r+0x1e>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_write_r+0x1e>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	20000510 	.word	0x20000510

08008258 <__errno>:
 8008258:	4b01      	ldr	r3, [pc, #4]	@ (8008260 <__errno+0x8>)
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000050 	.word	0x20000050

08008264 <__libc_init_array>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	2600      	movs	r6, #0
 8008268:	4d0c      	ldr	r5, [pc, #48]	@ (800829c <__libc_init_array+0x38>)
 800826a:	4c0d      	ldr	r4, [pc, #52]	@ (80082a0 <__libc_init_array+0x3c>)
 800826c:	1b64      	subs	r4, r4, r5
 800826e:	10a4      	asrs	r4, r4, #2
 8008270:	42a6      	cmp	r6, r4
 8008272:	d109      	bne.n	8008288 <__libc_init_array+0x24>
 8008274:	f000 fedc 	bl	8009030 <_init>
 8008278:	2600      	movs	r6, #0
 800827a:	4d0a      	ldr	r5, [pc, #40]	@ (80082a4 <__libc_init_array+0x40>)
 800827c:	4c0a      	ldr	r4, [pc, #40]	@ (80082a8 <__libc_init_array+0x44>)
 800827e:	1b64      	subs	r4, r4, r5
 8008280:	10a4      	asrs	r4, r4, #2
 8008282:	42a6      	cmp	r6, r4
 8008284:	d105      	bne.n	8008292 <__libc_init_array+0x2e>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	f855 3b04 	ldr.w	r3, [r5], #4
 800828c:	4798      	blx	r3
 800828e:	3601      	adds	r6, #1
 8008290:	e7ee      	b.n	8008270 <__libc_init_array+0xc>
 8008292:	f855 3b04 	ldr.w	r3, [r5], #4
 8008296:	4798      	blx	r3
 8008298:	3601      	adds	r6, #1
 800829a:	e7f2      	b.n	8008282 <__libc_init_array+0x1e>
 800829c:	08009298 	.word	0x08009298
 80082a0:	08009298 	.word	0x08009298
 80082a4:	08009298 	.word	0x08009298
 80082a8:	0800929c 	.word	0x0800929c

080082ac <__retarget_lock_init_recursive>:
 80082ac:	4770      	bx	lr

080082ae <__retarget_lock_acquire_recursive>:
 80082ae:	4770      	bx	lr

080082b0 <__retarget_lock_release_recursive>:
 80082b0:	4770      	bx	lr

080082b2 <memcpy>:
 80082b2:	440a      	add	r2, r1
 80082b4:	4291      	cmp	r1, r2
 80082b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ba:	d100      	bne.n	80082be <memcpy+0xc>
 80082bc:	4770      	bx	lr
 80082be:	b510      	push	{r4, lr}
 80082c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c4:	4291      	cmp	r1, r2
 80082c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ca:	d1f9      	bne.n	80082c0 <memcpy+0xe>
 80082cc:	bd10      	pop	{r4, pc}
	...

080082d0 <__assert_func>:
 80082d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082d2:	4614      	mov	r4, r2
 80082d4:	461a      	mov	r2, r3
 80082d6:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <__assert_func+0x2c>)
 80082d8:	4605      	mov	r5, r0
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68d8      	ldr	r0, [r3, #12]
 80082de:	b14c      	cbz	r4, 80082f4 <__assert_func+0x24>
 80082e0:	4b07      	ldr	r3, [pc, #28]	@ (8008300 <__assert_func+0x30>)
 80082e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082e6:	9100      	str	r1, [sp, #0]
 80082e8:	462b      	mov	r3, r5
 80082ea:	4906      	ldr	r1, [pc, #24]	@ (8008304 <__assert_func+0x34>)
 80082ec:	f000 f9b4 	bl	8008658 <fiprintf>
 80082f0:	f000 f9d4 	bl	800869c <abort>
 80082f4:	4b04      	ldr	r3, [pc, #16]	@ (8008308 <__assert_func+0x38>)
 80082f6:	461c      	mov	r4, r3
 80082f8:	e7f3      	b.n	80082e2 <__assert_func+0x12>
 80082fa:	bf00      	nop
 80082fc:	20000050 	.word	0x20000050
 8008300:	08009228 	.word	0x08009228
 8008304:	08009235 	.word	0x08009235
 8008308:	08009263 	.word	0x08009263

0800830c <_free_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4605      	mov	r5, r0
 8008310:	2900      	cmp	r1, #0
 8008312:	d040      	beq.n	8008396 <_free_r+0x8a>
 8008314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008318:	1f0c      	subs	r4, r1, #4
 800831a:	2b00      	cmp	r3, #0
 800831c:	bfb8      	it	lt
 800831e:	18e4      	addlt	r4, r4, r3
 8008320:	f000 f8e6 	bl	80084f0 <__malloc_lock>
 8008324:	4a1c      	ldr	r2, [pc, #112]	@ (8008398 <_free_r+0x8c>)
 8008326:	6813      	ldr	r3, [r2, #0]
 8008328:	b933      	cbnz	r3, 8008338 <_free_r+0x2c>
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	6014      	str	r4, [r2, #0]
 800832e:	4628      	mov	r0, r5
 8008330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008334:	f000 b8e2 	b.w	80084fc <__malloc_unlock>
 8008338:	42a3      	cmp	r3, r4
 800833a:	d908      	bls.n	800834e <_free_r+0x42>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	1821      	adds	r1, r4, r0
 8008340:	428b      	cmp	r3, r1
 8008342:	bf01      	itttt	eq
 8008344:	6819      	ldreq	r1, [r3, #0]
 8008346:	685b      	ldreq	r3, [r3, #4]
 8008348:	1809      	addeq	r1, r1, r0
 800834a:	6021      	streq	r1, [r4, #0]
 800834c:	e7ed      	b.n	800832a <_free_r+0x1e>
 800834e:	461a      	mov	r2, r3
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	b10b      	cbz	r3, 8008358 <_free_r+0x4c>
 8008354:	42a3      	cmp	r3, r4
 8008356:	d9fa      	bls.n	800834e <_free_r+0x42>
 8008358:	6811      	ldr	r1, [r2, #0]
 800835a:	1850      	adds	r0, r2, r1
 800835c:	42a0      	cmp	r0, r4
 800835e:	d10b      	bne.n	8008378 <_free_r+0x6c>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	4401      	add	r1, r0
 8008364:	1850      	adds	r0, r2, r1
 8008366:	4283      	cmp	r3, r0
 8008368:	6011      	str	r1, [r2, #0]
 800836a:	d1e0      	bne.n	800832e <_free_r+0x22>
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4408      	add	r0, r1
 8008372:	6010      	str	r0, [r2, #0]
 8008374:	6053      	str	r3, [r2, #4]
 8008376:	e7da      	b.n	800832e <_free_r+0x22>
 8008378:	d902      	bls.n	8008380 <_free_r+0x74>
 800837a:	230c      	movs	r3, #12
 800837c:	602b      	str	r3, [r5, #0]
 800837e:	e7d6      	b.n	800832e <_free_r+0x22>
 8008380:	6820      	ldr	r0, [r4, #0]
 8008382:	1821      	adds	r1, r4, r0
 8008384:	428b      	cmp	r3, r1
 8008386:	bf01      	itttt	eq
 8008388:	6819      	ldreq	r1, [r3, #0]
 800838a:	685b      	ldreq	r3, [r3, #4]
 800838c:	1809      	addeq	r1, r1, r0
 800838e:	6021      	streq	r1, [r4, #0]
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	6054      	str	r4, [r2, #4]
 8008394:	e7cb      	b.n	800832e <_free_r+0x22>
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	2000051c 	.word	0x2000051c

0800839c <malloc>:
 800839c:	4b02      	ldr	r3, [pc, #8]	@ (80083a8 <malloc+0xc>)
 800839e:	4601      	mov	r1, r0
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	f000 b825 	b.w	80083f0 <_malloc_r>
 80083a6:	bf00      	nop
 80083a8:	20000050 	.word	0x20000050

080083ac <sbrk_aligned>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	4e0f      	ldr	r6, [pc, #60]	@ (80083ec <sbrk_aligned+0x40>)
 80083b0:	460c      	mov	r4, r1
 80083b2:	6831      	ldr	r1, [r6, #0]
 80083b4:	4605      	mov	r5, r0
 80083b6:	b911      	cbnz	r1, 80083be <sbrk_aligned+0x12>
 80083b8:	f000 f960 	bl	800867c <_sbrk_r>
 80083bc:	6030      	str	r0, [r6, #0]
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 f95b 	bl	800867c <_sbrk_r>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	d103      	bne.n	80083d2 <sbrk_aligned+0x26>
 80083ca:	f04f 34ff 	mov.w	r4, #4294967295
 80083ce:	4620      	mov	r0, r4
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
 80083d2:	1cc4      	adds	r4, r0, #3
 80083d4:	f024 0403 	bic.w	r4, r4, #3
 80083d8:	42a0      	cmp	r0, r4
 80083da:	d0f8      	beq.n	80083ce <sbrk_aligned+0x22>
 80083dc:	1a21      	subs	r1, r4, r0
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 f94c 	bl	800867c <_sbrk_r>
 80083e4:	3001      	adds	r0, #1
 80083e6:	d1f2      	bne.n	80083ce <sbrk_aligned+0x22>
 80083e8:	e7ef      	b.n	80083ca <sbrk_aligned+0x1e>
 80083ea:	bf00      	nop
 80083ec:	20000518 	.word	0x20000518

080083f0 <_malloc_r>:
 80083f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f4:	1ccd      	adds	r5, r1, #3
 80083f6:	f025 0503 	bic.w	r5, r5, #3
 80083fa:	3508      	adds	r5, #8
 80083fc:	2d0c      	cmp	r5, #12
 80083fe:	bf38      	it	cc
 8008400:	250c      	movcc	r5, #12
 8008402:	2d00      	cmp	r5, #0
 8008404:	4606      	mov	r6, r0
 8008406:	db01      	blt.n	800840c <_malloc_r+0x1c>
 8008408:	42a9      	cmp	r1, r5
 800840a:	d904      	bls.n	8008416 <_malloc_r+0x26>
 800840c:	230c      	movs	r3, #12
 800840e:	6033      	str	r3, [r6, #0]
 8008410:	2000      	movs	r0, #0
 8008412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084ec <_malloc_r+0xfc>
 800841a:	f000 f869 	bl	80084f0 <__malloc_lock>
 800841e:	f8d8 3000 	ldr.w	r3, [r8]
 8008422:	461c      	mov	r4, r3
 8008424:	bb44      	cbnz	r4, 8008478 <_malloc_r+0x88>
 8008426:	4629      	mov	r1, r5
 8008428:	4630      	mov	r0, r6
 800842a:	f7ff ffbf 	bl	80083ac <sbrk_aligned>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	4604      	mov	r4, r0
 8008432:	d158      	bne.n	80084e6 <_malloc_r+0xf6>
 8008434:	f8d8 4000 	ldr.w	r4, [r8]
 8008438:	4627      	mov	r7, r4
 800843a:	2f00      	cmp	r7, #0
 800843c:	d143      	bne.n	80084c6 <_malloc_r+0xd6>
 800843e:	2c00      	cmp	r4, #0
 8008440:	d04b      	beq.n	80084da <_malloc_r+0xea>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	4639      	mov	r1, r7
 8008446:	4630      	mov	r0, r6
 8008448:	eb04 0903 	add.w	r9, r4, r3
 800844c:	f000 f916 	bl	800867c <_sbrk_r>
 8008450:	4581      	cmp	r9, r0
 8008452:	d142      	bne.n	80084da <_malloc_r+0xea>
 8008454:	6821      	ldr	r1, [r4, #0]
 8008456:	4630      	mov	r0, r6
 8008458:	1a6d      	subs	r5, r5, r1
 800845a:	4629      	mov	r1, r5
 800845c:	f7ff ffa6 	bl	80083ac <sbrk_aligned>
 8008460:	3001      	adds	r0, #1
 8008462:	d03a      	beq.n	80084da <_malloc_r+0xea>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	442b      	add	r3, r5
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	f8d8 3000 	ldr.w	r3, [r8]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	bb62      	cbnz	r2, 80084cc <_malloc_r+0xdc>
 8008472:	f8c8 7000 	str.w	r7, [r8]
 8008476:	e00f      	b.n	8008498 <_malloc_r+0xa8>
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	1b52      	subs	r2, r2, r5
 800847c:	d420      	bmi.n	80084c0 <_malloc_r+0xd0>
 800847e:	2a0b      	cmp	r2, #11
 8008480:	d917      	bls.n	80084b2 <_malloc_r+0xc2>
 8008482:	1961      	adds	r1, r4, r5
 8008484:	42a3      	cmp	r3, r4
 8008486:	6025      	str	r5, [r4, #0]
 8008488:	bf18      	it	ne
 800848a:	6059      	strne	r1, [r3, #4]
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	bf08      	it	eq
 8008490:	f8c8 1000 	streq.w	r1, [r8]
 8008494:	5162      	str	r2, [r4, r5]
 8008496:	604b      	str	r3, [r1, #4]
 8008498:	4630      	mov	r0, r6
 800849a:	f000 f82f 	bl	80084fc <__malloc_unlock>
 800849e:	f104 000b 	add.w	r0, r4, #11
 80084a2:	1d23      	adds	r3, r4, #4
 80084a4:	f020 0007 	bic.w	r0, r0, #7
 80084a8:	1ac2      	subs	r2, r0, r3
 80084aa:	bf1c      	itt	ne
 80084ac:	1a1b      	subne	r3, r3, r0
 80084ae:	50a3      	strne	r3, [r4, r2]
 80084b0:	e7af      	b.n	8008412 <_malloc_r+0x22>
 80084b2:	6862      	ldr	r2, [r4, #4]
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	bf0c      	ite	eq
 80084b8:	f8c8 2000 	streq.w	r2, [r8]
 80084bc:	605a      	strne	r2, [r3, #4]
 80084be:	e7eb      	b.n	8008498 <_malloc_r+0xa8>
 80084c0:	4623      	mov	r3, r4
 80084c2:	6864      	ldr	r4, [r4, #4]
 80084c4:	e7ae      	b.n	8008424 <_malloc_r+0x34>
 80084c6:	463c      	mov	r4, r7
 80084c8:	687f      	ldr	r7, [r7, #4]
 80084ca:	e7b6      	b.n	800843a <_malloc_r+0x4a>
 80084cc:	461a      	mov	r2, r3
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	d1fb      	bne.n	80084cc <_malloc_r+0xdc>
 80084d4:	2300      	movs	r3, #0
 80084d6:	6053      	str	r3, [r2, #4]
 80084d8:	e7de      	b.n	8008498 <_malloc_r+0xa8>
 80084da:	230c      	movs	r3, #12
 80084dc:	4630      	mov	r0, r6
 80084de:	6033      	str	r3, [r6, #0]
 80084e0:	f000 f80c 	bl	80084fc <__malloc_unlock>
 80084e4:	e794      	b.n	8008410 <_malloc_r+0x20>
 80084e6:	6005      	str	r5, [r0, #0]
 80084e8:	e7d6      	b.n	8008498 <_malloc_r+0xa8>
 80084ea:	bf00      	nop
 80084ec:	2000051c 	.word	0x2000051c

080084f0 <__malloc_lock>:
 80084f0:	4801      	ldr	r0, [pc, #4]	@ (80084f8 <__malloc_lock+0x8>)
 80084f2:	f7ff bedc 	b.w	80082ae <__retarget_lock_acquire_recursive>
 80084f6:	bf00      	nop
 80084f8:	20000514 	.word	0x20000514

080084fc <__malloc_unlock>:
 80084fc:	4801      	ldr	r0, [pc, #4]	@ (8008504 <__malloc_unlock+0x8>)
 80084fe:	f7ff bed7 	b.w	80082b0 <__retarget_lock_release_recursive>
 8008502:	bf00      	nop
 8008504:	20000514 	.word	0x20000514

08008508 <__sflush_r>:
 8008508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	0716      	lsls	r6, r2, #28
 8008510:	4605      	mov	r5, r0
 8008512:	460c      	mov	r4, r1
 8008514:	d454      	bmi.n	80085c0 <__sflush_r+0xb8>
 8008516:	684b      	ldr	r3, [r1, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	dc02      	bgt.n	8008522 <__sflush_r+0x1a>
 800851c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	dd48      	ble.n	80085b4 <__sflush_r+0xac>
 8008522:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008524:	2e00      	cmp	r6, #0
 8008526:	d045      	beq.n	80085b4 <__sflush_r+0xac>
 8008528:	2300      	movs	r3, #0
 800852a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800852e:	682f      	ldr	r7, [r5, #0]
 8008530:	6a21      	ldr	r1, [r4, #32]
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	d030      	beq.n	8008598 <__sflush_r+0x90>
 8008536:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	0759      	lsls	r1, r3, #29
 800853c:	d505      	bpl.n	800854a <__sflush_r+0x42>
 800853e:	6863      	ldr	r3, [r4, #4]
 8008540:	1ad2      	subs	r2, r2, r3
 8008542:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008544:	b10b      	cbz	r3, 800854a <__sflush_r+0x42>
 8008546:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008548:	1ad2      	subs	r2, r2, r3
 800854a:	2300      	movs	r3, #0
 800854c:	4628      	mov	r0, r5
 800854e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008550:	6a21      	ldr	r1, [r4, #32]
 8008552:	47b0      	blx	r6
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	d106      	bne.n	8008568 <__sflush_r+0x60>
 800855a:	6829      	ldr	r1, [r5, #0]
 800855c:	291d      	cmp	r1, #29
 800855e:	d82b      	bhi.n	80085b8 <__sflush_r+0xb0>
 8008560:	4a28      	ldr	r2, [pc, #160]	@ (8008604 <__sflush_r+0xfc>)
 8008562:	40ca      	lsrs	r2, r1
 8008564:	07d6      	lsls	r6, r2, #31
 8008566:	d527      	bpl.n	80085b8 <__sflush_r+0xb0>
 8008568:	2200      	movs	r2, #0
 800856a:	6062      	str	r2, [r4, #4]
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	04d9      	lsls	r1, r3, #19
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	d504      	bpl.n	800857e <__sflush_r+0x76>
 8008574:	1c42      	adds	r2, r0, #1
 8008576:	d101      	bne.n	800857c <__sflush_r+0x74>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b903      	cbnz	r3, 800857e <__sflush_r+0x76>
 800857c:	6560      	str	r0, [r4, #84]	@ 0x54
 800857e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008580:	602f      	str	r7, [r5, #0]
 8008582:	b1b9      	cbz	r1, 80085b4 <__sflush_r+0xac>
 8008584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008588:	4299      	cmp	r1, r3
 800858a:	d002      	beq.n	8008592 <__sflush_r+0x8a>
 800858c:	4628      	mov	r0, r5
 800858e:	f7ff febd 	bl	800830c <_free_r>
 8008592:	2300      	movs	r3, #0
 8008594:	6363      	str	r3, [r4, #52]	@ 0x34
 8008596:	e00d      	b.n	80085b4 <__sflush_r+0xac>
 8008598:	2301      	movs	r3, #1
 800859a:	4628      	mov	r0, r5
 800859c:	47b0      	blx	r6
 800859e:	4602      	mov	r2, r0
 80085a0:	1c50      	adds	r0, r2, #1
 80085a2:	d1c9      	bne.n	8008538 <__sflush_r+0x30>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0c6      	beq.n	8008538 <__sflush_r+0x30>
 80085aa:	2b1d      	cmp	r3, #29
 80085ac:	d001      	beq.n	80085b2 <__sflush_r+0xaa>
 80085ae:	2b16      	cmp	r3, #22
 80085b0:	d11d      	bne.n	80085ee <__sflush_r+0xe6>
 80085b2:	602f      	str	r7, [r5, #0]
 80085b4:	2000      	movs	r0, #0
 80085b6:	e021      	b.n	80085fc <__sflush_r+0xf4>
 80085b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085bc:	b21b      	sxth	r3, r3
 80085be:	e01a      	b.n	80085f6 <__sflush_r+0xee>
 80085c0:	690f      	ldr	r7, [r1, #16]
 80085c2:	2f00      	cmp	r7, #0
 80085c4:	d0f6      	beq.n	80085b4 <__sflush_r+0xac>
 80085c6:	0793      	lsls	r3, r2, #30
 80085c8:	bf18      	it	ne
 80085ca:	2300      	movne	r3, #0
 80085cc:	680e      	ldr	r6, [r1, #0]
 80085ce:	bf08      	it	eq
 80085d0:	694b      	ldreq	r3, [r1, #20]
 80085d2:	1bf6      	subs	r6, r6, r7
 80085d4:	600f      	str	r7, [r1, #0]
 80085d6:	608b      	str	r3, [r1, #8]
 80085d8:	2e00      	cmp	r6, #0
 80085da:	ddeb      	ble.n	80085b4 <__sflush_r+0xac>
 80085dc:	4633      	mov	r3, r6
 80085de:	463a      	mov	r2, r7
 80085e0:	4628      	mov	r0, r5
 80085e2:	6a21      	ldr	r1, [r4, #32]
 80085e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80085e8:	47e0      	blx	ip
 80085ea:	2800      	cmp	r0, #0
 80085ec:	dc07      	bgt.n	80085fe <__sflush_r+0xf6>
 80085ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085fe:	4407      	add	r7, r0
 8008600:	1a36      	subs	r6, r6, r0
 8008602:	e7e9      	b.n	80085d8 <__sflush_r+0xd0>
 8008604:	20400001 	.word	0x20400001

08008608 <_fflush_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	690b      	ldr	r3, [r1, #16]
 800860c:	4605      	mov	r5, r0
 800860e:	460c      	mov	r4, r1
 8008610:	b913      	cbnz	r3, 8008618 <_fflush_r+0x10>
 8008612:	2500      	movs	r5, #0
 8008614:	4628      	mov	r0, r5
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	b118      	cbz	r0, 8008622 <_fflush_r+0x1a>
 800861a:	6a03      	ldr	r3, [r0, #32]
 800861c:	b90b      	cbnz	r3, 8008622 <_fflush_r+0x1a>
 800861e:	f7ff fcf7 	bl	8008010 <__sinit>
 8008622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0f3      	beq.n	8008612 <_fflush_r+0xa>
 800862a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800862c:	07d0      	lsls	r0, r2, #31
 800862e:	d404      	bmi.n	800863a <_fflush_r+0x32>
 8008630:	0599      	lsls	r1, r3, #22
 8008632:	d402      	bmi.n	800863a <_fflush_r+0x32>
 8008634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008636:	f7ff fe3a 	bl	80082ae <__retarget_lock_acquire_recursive>
 800863a:	4628      	mov	r0, r5
 800863c:	4621      	mov	r1, r4
 800863e:	f7ff ff63 	bl	8008508 <__sflush_r>
 8008642:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008644:	4605      	mov	r5, r0
 8008646:	07da      	lsls	r2, r3, #31
 8008648:	d4e4      	bmi.n	8008614 <_fflush_r+0xc>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	059b      	lsls	r3, r3, #22
 800864e:	d4e1      	bmi.n	8008614 <_fflush_r+0xc>
 8008650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008652:	f7ff fe2d 	bl	80082b0 <__retarget_lock_release_recursive>
 8008656:	e7dd      	b.n	8008614 <_fflush_r+0xc>

08008658 <fiprintf>:
 8008658:	b40e      	push	{r1, r2, r3}
 800865a:	b503      	push	{r0, r1, lr}
 800865c:	4601      	mov	r1, r0
 800865e:	ab03      	add	r3, sp, #12
 8008660:	4805      	ldr	r0, [pc, #20]	@ (8008678 <fiprintf+0x20>)
 8008662:	f853 2b04 	ldr.w	r2, [r3], #4
 8008666:	6800      	ldr	r0, [r0, #0]
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	f000 f845 	bl	80086f8 <_vfiprintf_r>
 800866e:	b002      	add	sp, #8
 8008670:	f85d eb04 	ldr.w	lr, [sp], #4
 8008674:	b003      	add	sp, #12
 8008676:	4770      	bx	lr
 8008678:	20000050 	.word	0x20000050

0800867c <_sbrk_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	2300      	movs	r3, #0
 8008680:	4d05      	ldr	r5, [pc, #20]	@ (8008698 <_sbrk_r+0x1c>)
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7f9 fcec 	bl	8002064 <_sbrk>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_sbrk_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_sbrk_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	20000510 	.word	0x20000510

0800869c <abort>:
 800869c:	2006      	movs	r0, #6
 800869e:	b508      	push	{r3, lr}
 80086a0:	f000 fb8e 	bl	8008dc0 <raise>
 80086a4:	2001      	movs	r0, #1
 80086a6:	f7f9 fc68 	bl	8001f7a <_exit>

080086aa <__sfputc_r>:
 80086aa:	6893      	ldr	r3, [r2, #8]
 80086ac:	b410      	push	{r4}
 80086ae:	3b01      	subs	r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	6093      	str	r3, [r2, #8]
 80086b4:	da07      	bge.n	80086c6 <__sfputc_r+0x1c>
 80086b6:	6994      	ldr	r4, [r2, #24]
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	db01      	blt.n	80086c0 <__sfputc_r+0x16>
 80086bc:	290a      	cmp	r1, #10
 80086be:	d102      	bne.n	80086c6 <__sfputc_r+0x1c>
 80086c0:	bc10      	pop	{r4}
 80086c2:	f000 bac1 	b.w	8008c48 <__swbuf_r>
 80086c6:	6813      	ldr	r3, [r2, #0]
 80086c8:	1c58      	adds	r0, r3, #1
 80086ca:	6010      	str	r0, [r2, #0]
 80086cc:	7019      	strb	r1, [r3, #0]
 80086ce:	4608      	mov	r0, r1
 80086d0:	bc10      	pop	{r4}
 80086d2:	4770      	bx	lr

080086d4 <__sfputs_r>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	4606      	mov	r6, r0
 80086d8:	460f      	mov	r7, r1
 80086da:	4614      	mov	r4, r2
 80086dc:	18d5      	adds	r5, r2, r3
 80086de:	42ac      	cmp	r4, r5
 80086e0:	d101      	bne.n	80086e6 <__sfputs_r+0x12>
 80086e2:	2000      	movs	r0, #0
 80086e4:	e007      	b.n	80086f6 <__sfputs_r+0x22>
 80086e6:	463a      	mov	r2, r7
 80086e8:	4630      	mov	r0, r6
 80086ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ee:	f7ff ffdc 	bl	80086aa <__sfputc_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d1f3      	bne.n	80086de <__sfputs_r+0xa>
 80086f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086f8 <_vfiprintf_r>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	460d      	mov	r5, r1
 80086fe:	4614      	mov	r4, r2
 8008700:	4698      	mov	r8, r3
 8008702:	4606      	mov	r6, r0
 8008704:	b09d      	sub	sp, #116	@ 0x74
 8008706:	b118      	cbz	r0, 8008710 <_vfiprintf_r+0x18>
 8008708:	6a03      	ldr	r3, [r0, #32]
 800870a:	b90b      	cbnz	r3, 8008710 <_vfiprintf_r+0x18>
 800870c:	f7ff fc80 	bl	8008010 <__sinit>
 8008710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d405      	bmi.n	8008722 <_vfiprintf_r+0x2a>
 8008716:	89ab      	ldrh	r3, [r5, #12]
 8008718:	059a      	lsls	r2, r3, #22
 800871a:	d402      	bmi.n	8008722 <_vfiprintf_r+0x2a>
 800871c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800871e:	f7ff fdc6 	bl	80082ae <__retarget_lock_acquire_recursive>
 8008722:	89ab      	ldrh	r3, [r5, #12]
 8008724:	071b      	lsls	r3, r3, #28
 8008726:	d501      	bpl.n	800872c <_vfiprintf_r+0x34>
 8008728:	692b      	ldr	r3, [r5, #16]
 800872a:	b99b      	cbnz	r3, 8008754 <_vfiprintf_r+0x5c>
 800872c:	4629      	mov	r1, r5
 800872e:	4630      	mov	r0, r6
 8008730:	f000 fac8 	bl	8008cc4 <__swsetup_r>
 8008734:	b170      	cbz	r0, 8008754 <_vfiprintf_r+0x5c>
 8008736:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008738:	07dc      	lsls	r4, r3, #31
 800873a:	d504      	bpl.n	8008746 <_vfiprintf_r+0x4e>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	b01d      	add	sp, #116	@ 0x74
 8008742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	0598      	lsls	r0, r3, #22
 800874a:	d4f7      	bmi.n	800873c <_vfiprintf_r+0x44>
 800874c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800874e:	f7ff fdaf 	bl	80082b0 <__retarget_lock_release_recursive>
 8008752:	e7f3      	b.n	800873c <_vfiprintf_r+0x44>
 8008754:	2300      	movs	r3, #0
 8008756:	9309      	str	r3, [sp, #36]	@ 0x24
 8008758:	2320      	movs	r3, #32
 800875a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800875e:	2330      	movs	r3, #48	@ 0x30
 8008760:	f04f 0901 	mov.w	r9, #1
 8008764:	f8cd 800c 	str.w	r8, [sp, #12]
 8008768:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008914 <_vfiprintf_r+0x21c>
 800876c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008770:	4623      	mov	r3, r4
 8008772:	469a      	mov	sl, r3
 8008774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008778:	b10a      	cbz	r2, 800877e <_vfiprintf_r+0x86>
 800877a:	2a25      	cmp	r2, #37	@ 0x25
 800877c:	d1f9      	bne.n	8008772 <_vfiprintf_r+0x7a>
 800877e:	ebba 0b04 	subs.w	fp, sl, r4
 8008782:	d00b      	beq.n	800879c <_vfiprintf_r+0xa4>
 8008784:	465b      	mov	r3, fp
 8008786:	4622      	mov	r2, r4
 8008788:	4629      	mov	r1, r5
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff ffa2 	bl	80086d4 <__sfputs_r>
 8008790:	3001      	adds	r0, #1
 8008792:	f000 80a7 	beq.w	80088e4 <_vfiprintf_r+0x1ec>
 8008796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008798:	445a      	add	r2, fp
 800879a:	9209      	str	r2, [sp, #36]	@ 0x24
 800879c:	f89a 3000 	ldrb.w	r3, [sl]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 809f 	beq.w	80088e4 <_vfiprintf_r+0x1ec>
 80087a6:	2300      	movs	r3, #0
 80087a8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b0:	f10a 0a01 	add.w	sl, sl, #1
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	9307      	str	r3, [sp, #28]
 80087b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80087be:	4654      	mov	r4, sl
 80087c0:	2205      	movs	r2, #5
 80087c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c6:	4853      	ldr	r0, [pc, #332]	@ (8008914 <_vfiprintf_r+0x21c>)
 80087c8:	f000 fb16 	bl	8008df8 <memchr>
 80087cc:	9a04      	ldr	r2, [sp, #16]
 80087ce:	b9d8      	cbnz	r0, 8008808 <_vfiprintf_r+0x110>
 80087d0:	06d1      	lsls	r1, r2, #27
 80087d2:	bf44      	itt	mi
 80087d4:	2320      	movmi	r3, #32
 80087d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087da:	0713      	lsls	r3, r2, #28
 80087dc:	bf44      	itt	mi
 80087de:	232b      	movmi	r3, #43	@ 0x2b
 80087e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e4:	f89a 3000 	ldrb.w	r3, [sl]
 80087e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ea:	d015      	beq.n	8008818 <_vfiprintf_r+0x120>
 80087ec:	4654      	mov	r4, sl
 80087ee:	2000      	movs	r0, #0
 80087f0:	f04f 0c0a 	mov.w	ip, #10
 80087f4:	9a07      	ldr	r2, [sp, #28]
 80087f6:	4621      	mov	r1, r4
 80087f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087fc:	3b30      	subs	r3, #48	@ 0x30
 80087fe:	2b09      	cmp	r3, #9
 8008800:	d94b      	bls.n	800889a <_vfiprintf_r+0x1a2>
 8008802:	b1b0      	cbz	r0, 8008832 <_vfiprintf_r+0x13a>
 8008804:	9207      	str	r2, [sp, #28]
 8008806:	e014      	b.n	8008832 <_vfiprintf_r+0x13a>
 8008808:	eba0 0308 	sub.w	r3, r0, r8
 800880c:	fa09 f303 	lsl.w	r3, r9, r3
 8008810:	4313      	orrs	r3, r2
 8008812:	46a2      	mov	sl, r4
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	e7d2      	b.n	80087be <_vfiprintf_r+0xc6>
 8008818:	9b03      	ldr	r3, [sp, #12]
 800881a:	1d19      	adds	r1, r3, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	9103      	str	r1, [sp, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	bfbb      	ittet	lt
 8008824:	425b      	neglt	r3, r3
 8008826:	f042 0202 	orrlt.w	r2, r2, #2
 800882a:	9307      	strge	r3, [sp, #28]
 800882c:	9307      	strlt	r3, [sp, #28]
 800882e:	bfb8      	it	lt
 8008830:	9204      	strlt	r2, [sp, #16]
 8008832:	7823      	ldrb	r3, [r4, #0]
 8008834:	2b2e      	cmp	r3, #46	@ 0x2e
 8008836:	d10a      	bne.n	800884e <_vfiprintf_r+0x156>
 8008838:	7863      	ldrb	r3, [r4, #1]
 800883a:	2b2a      	cmp	r3, #42	@ 0x2a
 800883c:	d132      	bne.n	80088a4 <_vfiprintf_r+0x1ac>
 800883e:	9b03      	ldr	r3, [sp, #12]
 8008840:	3402      	adds	r4, #2
 8008842:	1d1a      	adds	r2, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	9203      	str	r2, [sp, #12]
 8008848:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800884c:	9305      	str	r3, [sp, #20]
 800884e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008918 <_vfiprintf_r+0x220>
 8008852:	2203      	movs	r2, #3
 8008854:	4650      	mov	r0, sl
 8008856:	7821      	ldrb	r1, [r4, #0]
 8008858:	f000 face 	bl	8008df8 <memchr>
 800885c:	b138      	cbz	r0, 800886e <_vfiprintf_r+0x176>
 800885e:	2240      	movs	r2, #64	@ 0x40
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	eba0 000a 	sub.w	r0, r0, sl
 8008866:	4082      	lsls	r2, r0
 8008868:	4313      	orrs	r3, r2
 800886a:	3401      	adds	r4, #1
 800886c:	9304      	str	r3, [sp, #16]
 800886e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008872:	2206      	movs	r2, #6
 8008874:	4829      	ldr	r0, [pc, #164]	@ (800891c <_vfiprintf_r+0x224>)
 8008876:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800887a:	f000 fabd 	bl	8008df8 <memchr>
 800887e:	2800      	cmp	r0, #0
 8008880:	d03f      	beq.n	8008902 <_vfiprintf_r+0x20a>
 8008882:	4b27      	ldr	r3, [pc, #156]	@ (8008920 <_vfiprintf_r+0x228>)
 8008884:	bb1b      	cbnz	r3, 80088ce <_vfiprintf_r+0x1d6>
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	3307      	adds	r3, #7
 800888a:	f023 0307 	bic.w	r3, r3, #7
 800888e:	3308      	adds	r3, #8
 8008890:	9303      	str	r3, [sp, #12]
 8008892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008894:	443b      	add	r3, r7
 8008896:	9309      	str	r3, [sp, #36]	@ 0x24
 8008898:	e76a      	b.n	8008770 <_vfiprintf_r+0x78>
 800889a:	460c      	mov	r4, r1
 800889c:	2001      	movs	r0, #1
 800889e:	fb0c 3202 	mla	r2, ip, r2, r3
 80088a2:	e7a8      	b.n	80087f6 <_vfiprintf_r+0xfe>
 80088a4:	2300      	movs	r3, #0
 80088a6:	f04f 0c0a 	mov.w	ip, #10
 80088aa:	4619      	mov	r1, r3
 80088ac:	3401      	adds	r4, #1
 80088ae:	9305      	str	r3, [sp, #20]
 80088b0:	4620      	mov	r0, r4
 80088b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b6:	3a30      	subs	r2, #48	@ 0x30
 80088b8:	2a09      	cmp	r2, #9
 80088ba:	d903      	bls.n	80088c4 <_vfiprintf_r+0x1cc>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0c6      	beq.n	800884e <_vfiprintf_r+0x156>
 80088c0:	9105      	str	r1, [sp, #20]
 80088c2:	e7c4      	b.n	800884e <_vfiprintf_r+0x156>
 80088c4:	4604      	mov	r4, r0
 80088c6:	2301      	movs	r3, #1
 80088c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80088cc:	e7f0      	b.n	80088b0 <_vfiprintf_r+0x1b8>
 80088ce:	ab03      	add	r3, sp, #12
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	462a      	mov	r2, r5
 80088d4:	4630      	mov	r0, r6
 80088d6:	4b13      	ldr	r3, [pc, #76]	@ (8008924 <_vfiprintf_r+0x22c>)
 80088d8:	a904      	add	r1, sp, #16
 80088da:	f3af 8000 	nop.w
 80088de:	4607      	mov	r7, r0
 80088e0:	1c78      	adds	r0, r7, #1
 80088e2:	d1d6      	bne.n	8008892 <_vfiprintf_r+0x19a>
 80088e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e6:	07d9      	lsls	r1, r3, #31
 80088e8:	d405      	bmi.n	80088f6 <_vfiprintf_r+0x1fe>
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	059a      	lsls	r2, r3, #22
 80088ee:	d402      	bmi.n	80088f6 <_vfiprintf_r+0x1fe>
 80088f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088f2:	f7ff fcdd 	bl	80082b0 <__retarget_lock_release_recursive>
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	065b      	lsls	r3, r3, #25
 80088fa:	f53f af1f 	bmi.w	800873c <_vfiprintf_r+0x44>
 80088fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008900:	e71e      	b.n	8008740 <_vfiprintf_r+0x48>
 8008902:	ab03      	add	r3, sp, #12
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	462a      	mov	r2, r5
 8008908:	4630      	mov	r0, r6
 800890a:	4b06      	ldr	r3, [pc, #24]	@ (8008924 <_vfiprintf_r+0x22c>)
 800890c:	a904      	add	r1, sp, #16
 800890e:	f000 f87d 	bl	8008a0c <_printf_i>
 8008912:	e7e4      	b.n	80088de <_vfiprintf_r+0x1e6>
 8008914:	08009264 	.word	0x08009264
 8008918:	0800926a 	.word	0x0800926a
 800891c:	0800926e 	.word	0x0800926e
 8008920:	00000000 	.word	0x00000000
 8008924:	080086d5 	.word	0x080086d5

08008928 <_printf_common>:
 8008928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800892c:	4616      	mov	r6, r2
 800892e:	4698      	mov	r8, r3
 8008930:	688a      	ldr	r2, [r1, #8]
 8008932:	690b      	ldr	r3, [r1, #16]
 8008934:	4607      	mov	r7, r0
 8008936:	4293      	cmp	r3, r2
 8008938:	bfb8      	it	lt
 800893a:	4613      	movlt	r3, r2
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008942:	460c      	mov	r4, r1
 8008944:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008948:	b10a      	cbz	r2, 800894e <_printf_common+0x26>
 800894a:	3301      	adds	r3, #1
 800894c:	6033      	str	r3, [r6, #0]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	0699      	lsls	r1, r3, #26
 8008952:	bf42      	ittt	mi
 8008954:	6833      	ldrmi	r3, [r6, #0]
 8008956:	3302      	addmi	r3, #2
 8008958:	6033      	strmi	r3, [r6, #0]
 800895a:	6825      	ldr	r5, [r4, #0]
 800895c:	f015 0506 	ands.w	r5, r5, #6
 8008960:	d106      	bne.n	8008970 <_printf_common+0x48>
 8008962:	f104 0a19 	add.w	sl, r4, #25
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	6832      	ldr	r2, [r6, #0]
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	42ab      	cmp	r3, r5
 800896e:	dc2b      	bgt.n	80089c8 <_printf_common+0xa0>
 8008970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	3b00      	subs	r3, #0
 8008978:	bf18      	it	ne
 800897a:	2301      	movne	r3, #1
 800897c:	0692      	lsls	r2, r2, #26
 800897e:	d430      	bmi.n	80089e2 <_printf_common+0xba>
 8008980:	4641      	mov	r1, r8
 8008982:	4638      	mov	r0, r7
 8008984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008988:	47c8      	blx	r9
 800898a:	3001      	adds	r0, #1
 800898c:	d023      	beq.n	80089d6 <_printf_common+0xae>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	6922      	ldr	r2, [r4, #16]
 8008992:	f003 0306 	and.w	r3, r3, #6
 8008996:	2b04      	cmp	r3, #4
 8008998:	bf14      	ite	ne
 800899a:	2500      	movne	r5, #0
 800899c:	6833      	ldreq	r3, [r6, #0]
 800899e:	f04f 0600 	mov.w	r6, #0
 80089a2:	bf08      	it	eq
 80089a4:	68e5      	ldreq	r5, [r4, #12]
 80089a6:	f104 041a 	add.w	r4, r4, #26
 80089aa:	bf08      	it	eq
 80089ac:	1aed      	subeq	r5, r5, r3
 80089ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80089b2:	bf08      	it	eq
 80089b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089b8:	4293      	cmp	r3, r2
 80089ba:	bfc4      	itt	gt
 80089bc:	1a9b      	subgt	r3, r3, r2
 80089be:	18ed      	addgt	r5, r5, r3
 80089c0:	42b5      	cmp	r5, r6
 80089c2:	d11a      	bne.n	80089fa <_printf_common+0xd2>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e008      	b.n	80089da <_printf_common+0xb2>
 80089c8:	2301      	movs	r3, #1
 80089ca:	4652      	mov	r2, sl
 80089cc:	4641      	mov	r1, r8
 80089ce:	4638      	mov	r0, r7
 80089d0:	47c8      	blx	r9
 80089d2:	3001      	adds	r0, #1
 80089d4:	d103      	bne.n	80089de <_printf_common+0xb6>
 80089d6:	f04f 30ff 	mov.w	r0, #4294967295
 80089da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089de:	3501      	adds	r5, #1
 80089e0:	e7c1      	b.n	8008966 <_printf_common+0x3e>
 80089e2:	2030      	movs	r0, #48	@ 0x30
 80089e4:	18e1      	adds	r1, r4, r3
 80089e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089ea:	1c5a      	adds	r2, r3, #1
 80089ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089f0:	4422      	add	r2, r4
 80089f2:	3302      	adds	r3, #2
 80089f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089f8:	e7c2      	b.n	8008980 <_printf_common+0x58>
 80089fa:	2301      	movs	r3, #1
 80089fc:	4622      	mov	r2, r4
 80089fe:	4641      	mov	r1, r8
 8008a00:	4638      	mov	r0, r7
 8008a02:	47c8      	blx	r9
 8008a04:	3001      	adds	r0, #1
 8008a06:	d0e6      	beq.n	80089d6 <_printf_common+0xae>
 8008a08:	3601      	adds	r6, #1
 8008a0a:	e7d9      	b.n	80089c0 <_printf_common+0x98>

08008a0c <_printf_i>:
 8008a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	7e0f      	ldrb	r7, [r1, #24]
 8008a12:	4691      	mov	r9, r2
 8008a14:	2f78      	cmp	r7, #120	@ 0x78
 8008a16:	4680      	mov	r8, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	469a      	mov	sl, r3
 8008a1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a22:	d807      	bhi.n	8008a34 <_printf_i+0x28>
 8008a24:	2f62      	cmp	r7, #98	@ 0x62
 8008a26:	d80a      	bhi.n	8008a3e <_printf_i+0x32>
 8008a28:	2f00      	cmp	r7, #0
 8008a2a:	f000 80d1 	beq.w	8008bd0 <_printf_i+0x1c4>
 8008a2e:	2f58      	cmp	r7, #88	@ 0x58
 8008a30:	f000 80b8 	beq.w	8008ba4 <_printf_i+0x198>
 8008a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a3c:	e03a      	b.n	8008ab4 <_printf_i+0xa8>
 8008a3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a42:	2b15      	cmp	r3, #21
 8008a44:	d8f6      	bhi.n	8008a34 <_printf_i+0x28>
 8008a46:	a101      	add	r1, pc, #4	@ (adr r1, 8008a4c <_printf_i+0x40>)
 8008a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a4c:	08008aa5 	.word	0x08008aa5
 8008a50:	08008ab9 	.word	0x08008ab9
 8008a54:	08008a35 	.word	0x08008a35
 8008a58:	08008a35 	.word	0x08008a35
 8008a5c:	08008a35 	.word	0x08008a35
 8008a60:	08008a35 	.word	0x08008a35
 8008a64:	08008ab9 	.word	0x08008ab9
 8008a68:	08008a35 	.word	0x08008a35
 8008a6c:	08008a35 	.word	0x08008a35
 8008a70:	08008a35 	.word	0x08008a35
 8008a74:	08008a35 	.word	0x08008a35
 8008a78:	08008bb7 	.word	0x08008bb7
 8008a7c:	08008ae3 	.word	0x08008ae3
 8008a80:	08008b71 	.word	0x08008b71
 8008a84:	08008a35 	.word	0x08008a35
 8008a88:	08008a35 	.word	0x08008a35
 8008a8c:	08008bd9 	.word	0x08008bd9
 8008a90:	08008a35 	.word	0x08008a35
 8008a94:	08008ae3 	.word	0x08008ae3
 8008a98:	08008a35 	.word	0x08008a35
 8008a9c:	08008a35 	.word	0x08008a35
 8008aa0:	08008b79 	.word	0x08008b79
 8008aa4:	6833      	ldr	r3, [r6, #0]
 8008aa6:	1d1a      	adds	r2, r3, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6032      	str	r2, [r6, #0]
 8008aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e09c      	b.n	8008bf2 <_printf_i+0x1e6>
 8008ab8:	6833      	ldr	r3, [r6, #0]
 8008aba:	6820      	ldr	r0, [r4, #0]
 8008abc:	1d19      	adds	r1, r3, #4
 8008abe:	6031      	str	r1, [r6, #0]
 8008ac0:	0606      	lsls	r6, r0, #24
 8008ac2:	d501      	bpl.n	8008ac8 <_printf_i+0xbc>
 8008ac4:	681d      	ldr	r5, [r3, #0]
 8008ac6:	e003      	b.n	8008ad0 <_printf_i+0xc4>
 8008ac8:	0645      	lsls	r5, r0, #25
 8008aca:	d5fb      	bpl.n	8008ac4 <_printf_i+0xb8>
 8008acc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	da03      	bge.n	8008adc <_printf_i+0xd0>
 8008ad4:	232d      	movs	r3, #45	@ 0x2d
 8008ad6:	426d      	negs	r5, r5
 8008ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008adc:	230a      	movs	r3, #10
 8008ade:	4858      	ldr	r0, [pc, #352]	@ (8008c40 <_printf_i+0x234>)
 8008ae0:	e011      	b.n	8008b06 <_printf_i+0xfa>
 8008ae2:	6821      	ldr	r1, [r4, #0]
 8008ae4:	6833      	ldr	r3, [r6, #0]
 8008ae6:	0608      	lsls	r0, r1, #24
 8008ae8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008aec:	d402      	bmi.n	8008af4 <_printf_i+0xe8>
 8008aee:	0649      	lsls	r1, r1, #25
 8008af0:	bf48      	it	mi
 8008af2:	b2ad      	uxthmi	r5, r5
 8008af4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008af6:	6033      	str	r3, [r6, #0]
 8008af8:	bf14      	ite	ne
 8008afa:	230a      	movne	r3, #10
 8008afc:	2308      	moveq	r3, #8
 8008afe:	4850      	ldr	r0, [pc, #320]	@ (8008c40 <_printf_i+0x234>)
 8008b00:	2100      	movs	r1, #0
 8008b02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b06:	6866      	ldr	r6, [r4, #4]
 8008b08:	2e00      	cmp	r6, #0
 8008b0a:	60a6      	str	r6, [r4, #8]
 8008b0c:	db05      	blt.n	8008b1a <_printf_i+0x10e>
 8008b0e:	6821      	ldr	r1, [r4, #0]
 8008b10:	432e      	orrs	r6, r5
 8008b12:	f021 0104 	bic.w	r1, r1, #4
 8008b16:	6021      	str	r1, [r4, #0]
 8008b18:	d04b      	beq.n	8008bb2 <_printf_i+0x1a6>
 8008b1a:	4616      	mov	r6, r2
 8008b1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b20:	fb03 5711 	mls	r7, r3, r1, r5
 8008b24:	5dc7      	ldrb	r7, [r0, r7]
 8008b26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b2a:	462f      	mov	r7, r5
 8008b2c:	42bb      	cmp	r3, r7
 8008b2e:	460d      	mov	r5, r1
 8008b30:	d9f4      	bls.n	8008b1c <_printf_i+0x110>
 8008b32:	2b08      	cmp	r3, #8
 8008b34:	d10b      	bne.n	8008b4e <_printf_i+0x142>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	07df      	lsls	r7, r3, #31
 8008b3a:	d508      	bpl.n	8008b4e <_printf_i+0x142>
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	6861      	ldr	r1, [r4, #4]
 8008b40:	4299      	cmp	r1, r3
 8008b42:	bfde      	ittt	le
 8008b44:	2330      	movle	r3, #48	@ 0x30
 8008b46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b4e:	1b92      	subs	r2, r2, r6
 8008b50:	6122      	str	r2, [r4, #16]
 8008b52:	464b      	mov	r3, r9
 8008b54:	4621      	mov	r1, r4
 8008b56:	4640      	mov	r0, r8
 8008b58:	f8cd a000 	str.w	sl, [sp]
 8008b5c:	aa03      	add	r2, sp, #12
 8008b5e:	f7ff fee3 	bl	8008928 <_printf_common>
 8008b62:	3001      	adds	r0, #1
 8008b64:	d14a      	bne.n	8008bfc <_printf_i+0x1f0>
 8008b66:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6a:	b004      	add	sp, #16
 8008b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	f043 0320 	orr.w	r3, r3, #32
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	2778      	movs	r7, #120	@ 0x78
 8008b7a:	4832      	ldr	r0, [pc, #200]	@ (8008c44 <_printf_i+0x238>)
 8008b7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	6831      	ldr	r1, [r6, #0]
 8008b84:	061f      	lsls	r7, r3, #24
 8008b86:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b8a:	d402      	bmi.n	8008b92 <_printf_i+0x186>
 8008b8c:	065f      	lsls	r7, r3, #25
 8008b8e:	bf48      	it	mi
 8008b90:	b2ad      	uxthmi	r5, r5
 8008b92:	6031      	str	r1, [r6, #0]
 8008b94:	07d9      	lsls	r1, r3, #31
 8008b96:	bf44      	itt	mi
 8008b98:	f043 0320 	orrmi.w	r3, r3, #32
 8008b9c:	6023      	strmi	r3, [r4, #0]
 8008b9e:	b11d      	cbz	r5, 8008ba8 <_printf_i+0x19c>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	e7ad      	b.n	8008b00 <_printf_i+0xf4>
 8008ba4:	4826      	ldr	r0, [pc, #152]	@ (8008c40 <_printf_i+0x234>)
 8008ba6:	e7e9      	b.n	8008b7c <_printf_i+0x170>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	f023 0320 	bic.w	r3, r3, #32
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	e7f6      	b.n	8008ba0 <_printf_i+0x194>
 8008bb2:	4616      	mov	r6, r2
 8008bb4:	e7bd      	b.n	8008b32 <_printf_i+0x126>
 8008bb6:	6833      	ldr	r3, [r6, #0]
 8008bb8:	6825      	ldr	r5, [r4, #0]
 8008bba:	1d18      	adds	r0, r3, #4
 8008bbc:	6961      	ldr	r1, [r4, #20]
 8008bbe:	6030      	str	r0, [r6, #0]
 8008bc0:	062e      	lsls	r6, r5, #24
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	d501      	bpl.n	8008bca <_printf_i+0x1be>
 8008bc6:	6019      	str	r1, [r3, #0]
 8008bc8:	e002      	b.n	8008bd0 <_printf_i+0x1c4>
 8008bca:	0668      	lsls	r0, r5, #25
 8008bcc:	d5fb      	bpl.n	8008bc6 <_printf_i+0x1ba>
 8008bce:	8019      	strh	r1, [r3, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4616      	mov	r6, r2
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	e7bc      	b.n	8008b52 <_printf_i+0x146>
 8008bd8:	6833      	ldr	r3, [r6, #0]
 8008bda:	2100      	movs	r1, #0
 8008bdc:	1d1a      	adds	r2, r3, #4
 8008bde:	6032      	str	r2, [r6, #0]
 8008be0:	681e      	ldr	r6, [r3, #0]
 8008be2:	6862      	ldr	r2, [r4, #4]
 8008be4:	4630      	mov	r0, r6
 8008be6:	f000 f907 	bl	8008df8 <memchr>
 8008bea:	b108      	cbz	r0, 8008bf0 <_printf_i+0x1e4>
 8008bec:	1b80      	subs	r0, r0, r6
 8008bee:	6060      	str	r0, [r4, #4]
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	6123      	str	r3, [r4, #16]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bfa:	e7aa      	b.n	8008b52 <_printf_i+0x146>
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	4649      	mov	r1, r9
 8008c00:	4640      	mov	r0, r8
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	47d0      	blx	sl
 8008c06:	3001      	adds	r0, #1
 8008c08:	d0ad      	beq.n	8008b66 <_printf_i+0x15a>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	079b      	lsls	r3, r3, #30
 8008c0e:	d413      	bmi.n	8008c38 <_printf_i+0x22c>
 8008c10:	68e0      	ldr	r0, [r4, #12]
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	4298      	cmp	r0, r3
 8008c16:	bfb8      	it	lt
 8008c18:	4618      	movlt	r0, r3
 8008c1a:	e7a6      	b.n	8008b6a <_printf_i+0x15e>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	4632      	mov	r2, r6
 8008c20:	4649      	mov	r1, r9
 8008c22:	4640      	mov	r0, r8
 8008c24:	47d0      	blx	sl
 8008c26:	3001      	adds	r0, #1
 8008c28:	d09d      	beq.n	8008b66 <_printf_i+0x15a>
 8008c2a:	3501      	adds	r5, #1
 8008c2c:	68e3      	ldr	r3, [r4, #12]
 8008c2e:	9903      	ldr	r1, [sp, #12]
 8008c30:	1a5b      	subs	r3, r3, r1
 8008c32:	42ab      	cmp	r3, r5
 8008c34:	dcf2      	bgt.n	8008c1c <_printf_i+0x210>
 8008c36:	e7eb      	b.n	8008c10 <_printf_i+0x204>
 8008c38:	2500      	movs	r5, #0
 8008c3a:	f104 0619 	add.w	r6, r4, #25
 8008c3e:	e7f5      	b.n	8008c2c <_printf_i+0x220>
 8008c40:	08009275 	.word	0x08009275
 8008c44:	08009286 	.word	0x08009286

08008c48 <__swbuf_r>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	460e      	mov	r6, r1
 8008c4c:	4614      	mov	r4, r2
 8008c4e:	4605      	mov	r5, r0
 8008c50:	b118      	cbz	r0, 8008c5a <__swbuf_r+0x12>
 8008c52:	6a03      	ldr	r3, [r0, #32]
 8008c54:	b90b      	cbnz	r3, 8008c5a <__swbuf_r+0x12>
 8008c56:	f7ff f9db 	bl	8008010 <__sinit>
 8008c5a:	69a3      	ldr	r3, [r4, #24]
 8008c5c:	60a3      	str	r3, [r4, #8]
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	071a      	lsls	r2, r3, #28
 8008c62:	d501      	bpl.n	8008c68 <__swbuf_r+0x20>
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	b943      	cbnz	r3, 8008c7a <__swbuf_r+0x32>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 f82a 	bl	8008cc4 <__swsetup_r>
 8008c70:	b118      	cbz	r0, 8008c7a <__swbuf_r+0x32>
 8008c72:	f04f 37ff 	mov.w	r7, #4294967295
 8008c76:	4638      	mov	r0, r7
 8008c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	6922      	ldr	r2, [r4, #16]
 8008c7e:	b2f6      	uxtb	r6, r6
 8008c80:	1a98      	subs	r0, r3, r2
 8008c82:	6963      	ldr	r3, [r4, #20]
 8008c84:	4637      	mov	r7, r6
 8008c86:	4283      	cmp	r3, r0
 8008c88:	dc05      	bgt.n	8008c96 <__swbuf_r+0x4e>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f7ff fcbb 	bl	8008608 <_fflush_r>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d1ed      	bne.n	8008c72 <__swbuf_r+0x2a>
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	60a3      	str	r3, [r4, #8]
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	6022      	str	r2, [r4, #0]
 8008ca2:	701e      	strb	r6, [r3, #0]
 8008ca4:	6962      	ldr	r2, [r4, #20]
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d004      	beq.n	8008cb6 <__swbuf_r+0x6e>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	07db      	lsls	r3, r3, #31
 8008cb0:	d5e1      	bpl.n	8008c76 <__swbuf_r+0x2e>
 8008cb2:	2e0a      	cmp	r6, #10
 8008cb4:	d1df      	bne.n	8008c76 <__swbuf_r+0x2e>
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f7ff fca5 	bl	8008608 <_fflush_r>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d0d9      	beq.n	8008c76 <__swbuf_r+0x2e>
 8008cc2:	e7d6      	b.n	8008c72 <__swbuf_r+0x2a>

08008cc4 <__swsetup_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4b29      	ldr	r3, [pc, #164]	@ (8008d6c <__swsetup_r+0xa8>)
 8008cc8:	4605      	mov	r5, r0
 8008cca:	6818      	ldr	r0, [r3, #0]
 8008ccc:	460c      	mov	r4, r1
 8008cce:	b118      	cbz	r0, 8008cd8 <__swsetup_r+0x14>
 8008cd0:	6a03      	ldr	r3, [r0, #32]
 8008cd2:	b90b      	cbnz	r3, 8008cd8 <__swsetup_r+0x14>
 8008cd4:	f7ff f99c 	bl	8008010 <__sinit>
 8008cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cdc:	0719      	lsls	r1, r3, #28
 8008cde:	d422      	bmi.n	8008d26 <__swsetup_r+0x62>
 8008ce0:	06da      	lsls	r2, r3, #27
 8008ce2:	d407      	bmi.n	8008cf4 <__swsetup_r+0x30>
 8008ce4:	2209      	movs	r2, #9
 8008ce6:	602a      	str	r2, [r5, #0]
 8008ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	e033      	b.n	8008d5c <__swsetup_r+0x98>
 8008cf4:	0758      	lsls	r0, r3, #29
 8008cf6:	d512      	bpl.n	8008d1e <__swsetup_r+0x5a>
 8008cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cfa:	b141      	cbz	r1, 8008d0e <__swsetup_r+0x4a>
 8008cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d00:	4299      	cmp	r1, r3
 8008d02:	d002      	beq.n	8008d0a <__swsetup_r+0x46>
 8008d04:	4628      	mov	r0, r5
 8008d06:	f7ff fb01 	bl	800830c <_free_r>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d14:	81a3      	strh	r3, [r4, #12]
 8008d16:	2300      	movs	r3, #0
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	f043 0308 	orr.w	r3, r3, #8
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	b94b      	cbnz	r3, 8008d3e <__swsetup_r+0x7a>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d34:	d003      	beq.n	8008d3e <__swsetup_r+0x7a>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f890 	bl	8008e5e <__smakebuf_r>
 8008d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d42:	f013 0201 	ands.w	r2, r3, #1
 8008d46:	d00a      	beq.n	8008d5e <__swsetup_r+0x9a>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	60a2      	str	r2, [r4, #8]
 8008d4c:	6962      	ldr	r2, [r4, #20]
 8008d4e:	4252      	negs	r2, r2
 8008d50:	61a2      	str	r2, [r4, #24]
 8008d52:	6922      	ldr	r2, [r4, #16]
 8008d54:	b942      	cbnz	r2, 8008d68 <__swsetup_r+0xa4>
 8008d56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d5a:	d1c5      	bne.n	8008ce8 <__swsetup_r+0x24>
 8008d5c:	bd38      	pop	{r3, r4, r5, pc}
 8008d5e:	0799      	lsls	r1, r3, #30
 8008d60:	bf58      	it	pl
 8008d62:	6962      	ldrpl	r2, [r4, #20]
 8008d64:	60a2      	str	r2, [r4, #8]
 8008d66:	e7f4      	b.n	8008d52 <__swsetup_r+0x8e>
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e7f7      	b.n	8008d5c <__swsetup_r+0x98>
 8008d6c:	20000050 	.word	0x20000050

08008d70 <_raise_r>:
 8008d70:	291f      	cmp	r1, #31
 8008d72:	b538      	push	{r3, r4, r5, lr}
 8008d74:	4605      	mov	r5, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	d904      	bls.n	8008d84 <_raise_r+0x14>
 8008d7a:	2316      	movs	r3, #22
 8008d7c:	6003      	str	r3, [r0, #0]
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d86:	b112      	cbz	r2, 8008d8e <_raise_r+0x1e>
 8008d88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d8c:	b94b      	cbnz	r3, 8008da2 <_raise_r+0x32>
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f000 f830 	bl	8008df4 <_getpid_r>
 8008d94:	4622      	mov	r2, r4
 8008d96:	4601      	mov	r1, r0
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d9e:	f000 b817 	b.w	8008dd0 <_kill_r>
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d00a      	beq.n	8008dbc <_raise_r+0x4c>
 8008da6:	1c59      	adds	r1, r3, #1
 8008da8:	d103      	bne.n	8008db2 <_raise_r+0x42>
 8008daa:	2316      	movs	r3, #22
 8008dac:	6003      	str	r3, [r0, #0]
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7e7      	b.n	8008d82 <_raise_r+0x12>
 8008db2:	2100      	movs	r1, #0
 8008db4:	4620      	mov	r0, r4
 8008db6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008dba:	4798      	blx	r3
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e7e0      	b.n	8008d82 <_raise_r+0x12>

08008dc0 <raise>:
 8008dc0:	4b02      	ldr	r3, [pc, #8]	@ (8008dcc <raise+0xc>)
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	f7ff bfd3 	b.w	8008d70 <_raise_r>
 8008dca:	bf00      	nop
 8008dcc:	20000050 	.word	0x20000050

08008dd0 <_kill_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	4d06      	ldr	r5, [pc, #24]	@ (8008df0 <_kill_r+0x20>)
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	4611      	mov	r1, r2
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	f7f9 f8bc 	bl	8001f5a <_kill>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	d102      	bne.n	8008dec <_kill_r+0x1c>
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	b103      	cbz	r3, 8008dec <_kill_r+0x1c>
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	bd38      	pop	{r3, r4, r5, pc}
 8008dee:	bf00      	nop
 8008df0:	20000510 	.word	0x20000510

08008df4 <_getpid_r>:
 8008df4:	f7f9 b8aa 	b.w	8001f4c <_getpid>

08008df8 <memchr>:
 8008df8:	4603      	mov	r3, r0
 8008dfa:	b510      	push	{r4, lr}
 8008dfc:	b2c9      	uxtb	r1, r1
 8008dfe:	4402      	add	r2, r0
 8008e00:	4293      	cmp	r3, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	d101      	bne.n	8008e0a <memchr+0x12>
 8008e06:	2000      	movs	r0, #0
 8008e08:	e003      	b.n	8008e12 <memchr+0x1a>
 8008e0a:	7804      	ldrb	r4, [r0, #0]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	428c      	cmp	r4, r1
 8008e10:	d1f6      	bne.n	8008e00 <memchr+0x8>
 8008e12:	bd10      	pop	{r4, pc}

08008e14 <__swhatbuf_r>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	460c      	mov	r4, r1
 8008e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	461e      	mov	r6, r3
 8008e22:	b096      	sub	sp, #88	@ 0x58
 8008e24:	da0c      	bge.n	8008e40 <__swhatbuf_r+0x2c>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e2e:	bf14      	ite	ne
 8008e30:	2340      	movne	r3, #64	@ 0x40
 8008e32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e36:	2000      	movs	r0, #0
 8008e38:	6031      	str	r1, [r6, #0]
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	b016      	add	sp, #88	@ 0x58
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	466a      	mov	r2, sp
 8008e42:	f000 f849 	bl	8008ed8 <_fstat_r>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	dbed      	blt.n	8008e26 <__swhatbuf_r+0x12>
 8008e4a:	9901      	ldr	r1, [sp, #4]
 8008e4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e54:	4259      	negs	r1, r3
 8008e56:	4159      	adcs	r1, r3
 8008e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e5c:	e7eb      	b.n	8008e36 <__swhatbuf_r+0x22>

08008e5e <__smakebuf_r>:
 8008e5e:	898b      	ldrh	r3, [r1, #12]
 8008e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e62:	079d      	lsls	r5, r3, #30
 8008e64:	4606      	mov	r6, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	d507      	bpl.n	8008e7a <__smakebuf_r+0x1c>
 8008e6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	2301      	movs	r3, #1
 8008e74:	6163      	str	r3, [r4, #20]
 8008e76:	b003      	add	sp, #12
 8008e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e7a:	466a      	mov	r2, sp
 8008e7c:	ab01      	add	r3, sp, #4
 8008e7e:	f7ff ffc9 	bl	8008e14 <__swhatbuf_r>
 8008e82:	9f00      	ldr	r7, [sp, #0]
 8008e84:	4605      	mov	r5, r0
 8008e86:	4639      	mov	r1, r7
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7ff fab1 	bl	80083f0 <_malloc_r>
 8008e8e:	b948      	cbnz	r0, 8008ea4 <__smakebuf_r+0x46>
 8008e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e94:	059a      	lsls	r2, r3, #22
 8008e96:	d4ee      	bmi.n	8008e76 <__smakebuf_r+0x18>
 8008e98:	f023 0303 	bic.w	r3, r3, #3
 8008e9c:	f043 0302 	orr.w	r3, r3, #2
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	e7e2      	b.n	8008e6a <__smakebuf_r+0xc>
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	9b01      	ldr	r3, [sp, #4]
 8008eb2:	6020      	str	r0, [r4, #0]
 8008eb4:	b15b      	cbz	r3, 8008ece <__smakebuf_r+0x70>
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ebc:	f000 f81e 	bl	8008efc <_isatty_r>
 8008ec0:	b128      	cbz	r0, 8008ece <__smakebuf_r+0x70>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f023 0303 	bic.w	r3, r3, #3
 8008ec8:	f043 0301 	orr.w	r3, r3, #1
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	431d      	orrs	r5, r3
 8008ed2:	81a5      	strh	r5, [r4, #12]
 8008ed4:	e7cf      	b.n	8008e76 <__smakebuf_r+0x18>
	...

08008ed8 <_fstat_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	2300      	movs	r3, #0
 8008edc:	4d06      	ldr	r5, [pc, #24]	@ (8008ef8 <_fstat_r+0x20>)
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	f7f9 f897 	bl	8002018 <_fstat>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	d102      	bne.n	8008ef4 <_fstat_r+0x1c>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b103      	cbz	r3, 8008ef4 <_fstat_r+0x1c>
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000510 	.word	0x20000510

08008efc <_isatty_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	2300      	movs	r3, #0
 8008f00:	4d05      	ldr	r5, [pc, #20]	@ (8008f18 <_isatty_r+0x1c>)
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	f7f9 f895 	bl	8002036 <_isatty>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_isatty_r+0x1a>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_isatty_r+0x1a>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	20000510 	.word	0x20000510

08008f1c <fmaxf>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	f000 f825 	bl	8008f70 <__fpclassifyf>
 8008f26:	b910      	cbnz	r0, 8008f2e <fmaxf+0x12>
 8008f28:	462c      	mov	r4, r5
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	bd38      	pop	{r3, r4, r5, pc}
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 f81e 	bl	8008f70 <__fpclassifyf>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d0f8      	beq.n	8008f2a <fmaxf+0xe>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f7f7 fdb4 	bl	8000aa8 <__aeabi_fcmpgt>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d0f1      	beq.n	8008f28 <fmaxf+0xc>
 8008f44:	e7f1      	b.n	8008f2a <fmaxf+0xe>

08008f46 <fminf>:
 8008f46:	b538      	push	{r3, r4, r5, lr}
 8008f48:	4604      	mov	r4, r0
 8008f4a:	460d      	mov	r5, r1
 8008f4c:	f000 f810 	bl	8008f70 <__fpclassifyf>
 8008f50:	b910      	cbnz	r0, 8008f58 <fminf+0x12>
 8008f52:	462c      	mov	r4, r5
 8008f54:	4620      	mov	r0, r4
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f000 f809 	bl	8008f70 <__fpclassifyf>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d0f8      	beq.n	8008f54 <fminf+0xe>
 8008f62:	4629      	mov	r1, r5
 8008f64:	4620      	mov	r0, r4
 8008f66:	f7f7 fd81 	bl	8000a6c <__aeabi_fcmplt>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d0f1      	beq.n	8008f52 <fminf+0xc>
 8008f6e:	e7f1      	b.n	8008f54 <fminf+0xe>

08008f70 <__fpclassifyf>:
 8008f70:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8008f74:	d00d      	beq.n	8008f92 <__fpclassifyf+0x22>
 8008f76:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008f7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008f7e:	d30a      	bcc.n	8008f96 <__fpclassifyf+0x26>
 8008f80:	4b07      	ldr	r3, [pc, #28]	@ (8008fa0 <__fpclassifyf+0x30>)
 8008f82:	1e42      	subs	r2, r0, #1
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d908      	bls.n	8008f9a <__fpclassifyf+0x2a>
 8008f88:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008f8c:	4258      	negs	r0, r3
 8008f8e:	4158      	adcs	r0, r3
 8008f90:	4770      	bx	lr
 8008f92:	2002      	movs	r0, #2
 8008f94:	4770      	bx	lr
 8008f96:	2004      	movs	r0, #4
 8008f98:	4770      	bx	lr
 8008f9a:	2003      	movs	r0, #3
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	007ffffe 	.word	0x007ffffe

08008fa4 <round>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008faa:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8008fae:	2a13      	cmp	r2, #19
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	dc1a      	bgt.n	8008fee <round+0x4a>
 8008fb8:	2a00      	cmp	r2, #0
 8008fba:	da0b      	bge.n	8008fd4 <round+0x30>
 8008fbc:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8008fc0:	3201      	adds	r2, #1
 8008fc2:	bf04      	itt	eq
 8008fc4:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008fc8:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008fcc:	2200      	movs	r2, #0
 8008fce:	461d      	mov	r5, r3
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	e016      	b.n	8009002 <round+0x5e>
 8008fd4:	4815      	ldr	r0, [pc, #84]	@ (800902c <round+0x88>)
 8008fd6:	4110      	asrs	r0, r2
 8008fd8:	4001      	ands	r1, r0
 8008fda:	4321      	orrs	r1, r4
 8008fdc:	d011      	beq.n	8009002 <round+0x5e>
 8008fde:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008fe2:	fa41 f202 	asr.w	r2, r1, r2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	ea23 0300 	bic.w	r3, r3, r0
 8008fec:	e7ee      	b.n	8008fcc <round+0x28>
 8008fee:	2a33      	cmp	r2, #51	@ 0x33
 8008ff0:	dd0a      	ble.n	8009008 <round+0x64>
 8008ff2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008ff6:	d104      	bne.n	8009002 <round+0x5e>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	f7f7 f8ad 	bl	8000158 <__adddf3>
 8008ffe:	4604      	mov	r4, r0
 8009000:	460d      	mov	r5, r1
 8009002:	4620      	mov	r0, r4
 8009004:	4629      	mov	r1, r5
 8009006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009008:	f04f 30ff 	mov.w	r0, #4294967295
 800900c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009010:	40f8      	lsrs	r0, r7
 8009012:	4220      	tst	r0, r4
 8009014:	d0f5      	beq.n	8009002 <round+0x5e>
 8009016:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800901a:	2201      	movs	r2, #1
 800901c:	408a      	lsls	r2, r1
 800901e:	1912      	adds	r2, r2, r4
 8009020:	bf28      	it	cs
 8009022:	3301      	addcs	r3, #1
 8009024:	ea22 0200 	bic.w	r2, r2, r0
 8009028:	e7d1      	b.n	8008fce <round+0x2a>
 800902a:	bf00      	nop
 800902c:	000fffff 	.word	0x000fffff

08009030 <_init>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr

0800903c <_fini>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr
