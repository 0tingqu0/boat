
boat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f20  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800902c  0800902c  0000a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800927c  0800927c  0000b0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800927c  0800927c  0000b0a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800927c  0800927c  0000b0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800927c  0800927c  0000a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009280  08009280  0000a280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08009284  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200000a0  08009324  0000b0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08009324  0000b520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014593  00000000  00000000  0000b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339b  00000000  00000000  0001f65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  000229f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa0  00000000  00000000  00023e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9f3  00000000  00000000  00024da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c95  00000000  00000000  0003f793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092041  00000000  00000000  00058428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fec  00000000  00000000  000ea4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f0498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009014 	.word	0x08009014

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08009014 	.word	0x08009014

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_frsub>:
 8000514:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__addsf3>
 800051a:	bf00      	nop

0800051c <__aeabi_fsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000520 <__addsf3>:
 8000520:	0042      	lsls	r2, r0, #1
 8000522:	bf1f      	itttt	ne
 8000524:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000528:	ea92 0f03 	teqne	r2, r3
 800052c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000530:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000534:	d06a      	beq.n	800060c <__addsf3+0xec>
 8000536:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800053a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800053e:	bfc1      	itttt	gt
 8000540:	18d2      	addgt	r2, r2, r3
 8000542:	4041      	eorgt	r1, r0
 8000544:	4048      	eorgt	r0, r1
 8000546:	4041      	eorgt	r1, r0
 8000548:	bfb8      	it	lt
 800054a:	425b      	neglt	r3, r3
 800054c:	2b19      	cmp	r3, #25
 800054e:	bf88      	it	hi
 8000550:	4770      	bxhi	lr
 8000552:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000556:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800055a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800055e:	bf18      	it	ne
 8000560:	4240      	negne	r0, r0
 8000562:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000566:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800056a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800056e:	bf18      	it	ne
 8000570:	4249      	negne	r1, r1
 8000572:	ea92 0f03 	teq	r2, r3
 8000576:	d03f      	beq.n	80005f8 <__addsf3+0xd8>
 8000578:	f1a2 0201 	sub.w	r2, r2, #1
 800057c:	fa41 fc03 	asr.w	ip, r1, r3
 8000580:	eb10 000c 	adds.w	r0, r0, ip
 8000584:	f1c3 0320 	rsb	r3, r3, #32
 8000588:	fa01 f103 	lsl.w	r1, r1, r3
 800058c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000590:	d502      	bpl.n	8000598 <__addsf3+0x78>
 8000592:	4249      	negs	r1, r1
 8000594:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000598:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800059c:	d313      	bcc.n	80005c6 <__addsf3+0xa6>
 800059e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005a2:	d306      	bcc.n	80005b2 <__addsf3+0x92>
 80005a4:	0840      	lsrs	r0, r0, #1
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	f102 0201 	add.w	r2, r2, #1
 80005ae:	2afe      	cmp	r2, #254	@ 0xfe
 80005b0:	d251      	bcs.n	8000656 <__addsf3+0x136>
 80005b2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80005b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005ba:	bf08      	it	eq
 80005bc:	f020 0001 	biceq.w	r0, r0, #1
 80005c0:	ea40 0003 	orr.w	r0, r0, r3
 80005c4:	4770      	bx	lr
 80005c6:	0049      	lsls	r1, r1, #1
 80005c8:	eb40 0000 	adc.w	r0, r0, r0
 80005cc:	3a01      	subs	r2, #1
 80005ce:	bf28      	it	cs
 80005d0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80005d4:	d2ed      	bcs.n	80005b2 <__addsf3+0x92>
 80005d6:	fab0 fc80 	clz	ip, r0
 80005da:	f1ac 0c08 	sub.w	ip, ip, #8
 80005de:	ebb2 020c 	subs.w	r2, r2, ip
 80005e2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005e6:	bfaa      	itet	ge
 80005e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ec:	4252      	neglt	r2, r2
 80005ee:	4318      	orrge	r0, r3
 80005f0:	bfbc      	itt	lt
 80005f2:	40d0      	lsrlt	r0, r2
 80005f4:	4318      	orrlt	r0, r3
 80005f6:	4770      	bx	lr
 80005f8:	f092 0f00 	teq	r2, #0
 80005fc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000600:	bf06      	itte	eq
 8000602:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000606:	3201      	addeq	r2, #1
 8000608:	3b01      	subne	r3, #1
 800060a:	e7b5      	b.n	8000578 <__addsf3+0x58>
 800060c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000610:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000614:	bf18      	it	ne
 8000616:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800061a:	d021      	beq.n	8000660 <__addsf3+0x140>
 800061c:	ea92 0f03 	teq	r2, r3
 8000620:	d004      	beq.n	800062c <__addsf3+0x10c>
 8000622:	f092 0f00 	teq	r2, #0
 8000626:	bf08      	it	eq
 8000628:	4608      	moveq	r0, r1
 800062a:	4770      	bx	lr
 800062c:	ea90 0f01 	teq	r0, r1
 8000630:	bf1c      	itt	ne
 8000632:	2000      	movne	r0, #0
 8000634:	4770      	bxne	lr
 8000636:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800063a:	d104      	bne.n	8000646 <__addsf3+0x126>
 800063c:	0040      	lsls	r0, r0, #1
 800063e:	bf28      	it	cs
 8000640:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000644:	4770      	bx	lr
 8000646:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800064a:	bf3c      	itt	cc
 800064c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000650:	4770      	bxcc	lr
 8000652:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000656:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800065a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800065e:	4770      	bx	lr
 8000660:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000664:	bf16      	itet	ne
 8000666:	4608      	movne	r0, r1
 8000668:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800066c:	4601      	movne	r1, r0
 800066e:	0242      	lsls	r2, r0, #9
 8000670:	bf06      	itte	eq
 8000672:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000676:	ea90 0f01 	teqeq	r0, r1
 800067a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800067e:	4770      	bx	lr

08000680 <__aeabi_ui2f>:
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e004      	b.n	8000690 <__aeabi_i2f+0x8>
 8000686:	bf00      	nop

08000688 <__aeabi_i2f>:
 8000688:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800068c:	bf48      	it	mi
 800068e:	4240      	negmi	r0, r0
 8000690:	ea5f 0c00 	movs.w	ip, r0
 8000694:	bf08      	it	eq
 8000696:	4770      	bxeq	lr
 8000698:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800069c:	4601      	mov	r1, r0
 800069e:	f04f 0000 	mov.w	r0, #0
 80006a2:	e01c      	b.n	80006de <__aeabi_l2f+0x2a>

080006a4 <__aeabi_ul2f>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	e00a      	b.n	80006c8 <__aeabi_l2f+0x14>
 80006b2:	bf00      	nop

080006b4 <__aeabi_l2f>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80006c0:	d502      	bpl.n	80006c8 <__aeabi_l2f+0x14>
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	ea5f 0c01 	movs.w	ip, r1
 80006cc:	bf02      	ittt	eq
 80006ce:	4684      	moveq	ip, r0
 80006d0:	4601      	moveq	r1, r0
 80006d2:	2000      	moveq	r0, #0
 80006d4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80006d8:	bf08      	it	eq
 80006da:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80006de:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006e2:	fabc f28c 	clz	r2, ip
 80006e6:	3a08      	subs	r2, #8
 80006e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ec:	db10      	blt.n	8000710 <__aeabi_l2f+0x5c>
 80006ee:	fa01 fc02 	lsl.w	ip, r1, r2
 80006f2:	4463      	add	r3, ip
 80006f4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006f8:	f1c2 0220 	rsb	r2, r2, #32
 80006fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000700:	fa20 f202 	lsr.w	r2, r0, r2
 8000704:	eb43 0002 	adc.w	r0, r3, r2
 8000708:	bf08      	it	eq
 800070a:	f020 0001 	biceq.w	r0, r0, #1
 800070e:	4770      	bx	lr
 8000710:	f102 0220 	add.w	r2, r2, #32
 8000714:	fa01 fc02 	lsl.w	ip, r1, r2
 8000718:	f1c2 0220 	rsb	r2, r2, #32
 800071c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000720:	fa21 f202 	lsr.w	r2, r1, r2
 8000724:	eb43 0002 	adc.w	r0, r3, r2
 8000728:	bf08      	it	eq
 800072a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800072e:	4770      	bx	lr

08000730 <__aeabi_fmul>:
 8000730:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000734:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000738:	bf1e      	ittt	ne
 800073a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800073e:	ea92 0f0c 	teqne	r2, ip
 8000742:	ea93 0f0c 	teqne	r3, ip
 8000746:	d06f      	beq.n	8000828 <__aeabi_fmul+0xf8>
 8000748:	441a      	add	r2, r3
 800074a:	ea80 0c01 	eor.w	ip, r0, r1
 800074e:	0240      	lsls	r0, r0, #9
 8000750:	bf18      	it	ne
 8000752:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000756:	d01e      	beq.n	8000796 <__aeabi_fmul+0x66>
 8000758:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800075c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000760:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000764:	fba0 3101 	umull	r3, r1, r0, r1
 8000768:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800076c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000770:	bf3e      	ittt	cc
 8000772:	0049      	lslcc	r1, r1, #1
 8000774:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000778:	005b      	lslcc	r3, r3, #1
 800077a:	ea40 0001 	orr.w	r0, r0, r1
 800077e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000782:	2afd      	cmp	r2, #253	@ 0xfd
 8000784:	d81d      	bhi.n	80007c2 <__aeabi_fmul+0x92>
 8000786:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800078a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800078e:	bf08      	it	eq
 8000790:	f020 0001 	biceq.w	r0, r0, #1
 8000794:	4770      	bx	lr
 8000796:	f090 0f00 	teq	r0, #0
 800079a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800079e:	bf08      	it	eq
 80007a0:	0249      	lsleq	r1, r1, #9
 80007a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007aa:	3a7f      	subs	r2, #127	@ 0x7f
 80007ac:	bfc2      	ittt	gt
 80007ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80007b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007b6:	4770      	bxgt	lr
 80007b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	dc5d      	bgt.n	8000880 <__aeabi_fmul+0x150>
 80007c4:	f112 0f19 	cmn.w	r2, #25
 80007c8:	bfdc      	itt	le
 80007ca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80007ce:	4770      	bxle	lr
 80007d0:	f1c2 0200 	rsb	r2, r2, #0
 80007d4:	0041      	lsls	r1, r0, #1
 80007d6:	fa21 f102 	lsr.w	r1, r1, r2
 80007da:	f1c2 0220 	rsb	r2, r2, #32
 80007de:	fa00 fc02 	lsl.w	ip, r0, r2
 80007e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007e6:	f140 0000 	adc.w	r0, r0, #0
 80007ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ee:	bf08      	it	eq
 80007f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f4:	4770      	bx	lr
 80007f6:	f092 0f00 	teq	r2, #0
 80007fa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007fe:	bf02      	ittt	eq
 8000800:	0040      	lsleq	r0, r0, #1
 8000802:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000806:	3a01      	subeq	r2, #1
 8000808:	d0f9      	beq.n	80007fe <__aeabi_fmul+0xce>
 800080a:	ea40 000c 	orr.w	r0, r0, ip
 800080e:	f093 0f00 	teq	r3, #0
 8000812:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000816:	bf02      	ittt	eq
 8000818:	0049      	lsleq	r1, r1, #1
 800081a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800081e:	3b01      	subeq	r3, #1
 8000820:	d0f9      	beq.n	8000816 <__aeabi_fmul+0xe6>
 8000822:	ea41 010c 	orr.w	r1, r1, ip
 8000826:	e78f      	b.n	8000748 <__aeabi_fmul+0x18>
 8000828:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800082c:	ea92 0f0c 	teq	r2, ip
 8000830:	bf18      	it	ne
 8000832:	ea93 0f0c 	teqne	r3, ip
 8000836:	d00a      	beq.n	800084e <__aeabi_fmul+0x11e>
 8000838:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800083c:	bf18      	it	ne
 800083e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000842:	d1d8      	bne.n	80007f6 <__aeabi_fmul+0xc6>
 8000844:	ea80 0001 	eor.w	r0, r0, r1
 8000848:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800084c:	4770      	bx	lr
 800084e:	f090 0f00 	teq	r0, #0
 8000852:	bf17      	itett	ne
 8000854:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000858:	4608      	moveq	r0, r1
 800085a:	f091 0f00 	teqne	r1, #0
 800085e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000862:	d014      	beq.n	800088e <__aeabi_fmul+0x15e>
 8000864:	ea92 0f0c 	teq	r2, ip
 8000868:	d101      	bne.n	800086e <__aeabi_fmul+0x13e>
 800086a:	0242      	lsls	r2, r0, #9
 800086c:	d10f      	bne.n	800088e <__aeabi_fmul+0x15e>
 800086e:	ea93 0f0c 	teq	r3, ip
 8000872:	d103      	bne.n	800087c <__aeabi_fmul+0x14c>
 8000874:	024b      	lsls	r3, r1, #9
 8000876:	bf18      	it	ne
 8000878:	4608      	movne	r0, r1
 800087a:	d108      	bne.n	800088e <__aeabi_fmul+0x15e>
 800087c:	ea80 0001 	eor.w	r0, r0, r1
 8000880:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000884:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000888:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800088c:	4770      	bx	lr
 800088e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000892:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000896:	4770      	bx	lr

08000898 <__aeabi_fdiv>:
 8000898:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008a0:	bf1e      	ittt	ne
 80008a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a6:	ea92 0f0c 	teqne	r2, ip
 80008aa:	ea93 0f0c 	teqne	r3, ip
 80008ae:	d069      	beq.n	8000984 <__aeabi_fdiv+0xec>
 80008b0:	eba2 0203 	sub.w	r2, r2, r3
 80008b4:	ea80 0c01 	eor.w	ip, r0, r1
 80008b8:	0249      	lsls	r1, r1, #9
 80008ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008be:	d037      	beq.n	8000930 <__aeabi_fdiv+0x98>
 80008c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80008c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008d0:	428b      	cmp	r3, r1
 80008d2:	bf38      	it	cc
 80008d4:	005b      	lslcc	r3, r3, #1
 80008d6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80008da:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80008de:	428b      	cmp	r3, r1
 80008e0:	bf24      	itt	cs
 80008e2:	1a5b      	subcs	r3, r3, r1
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008ec:	bf24      	itt	cs
 80008ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008fa:	bf24      	itt	cs
 80008fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000908:	bf24      	itt	cs
 800090a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800090e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	bf18      	it	ne
 8000916:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800091a:	d1e0      	bne.n	80008de <__aeabi_fdiv+0x46>
 800091c:	2afd      	cmp	r2, #253	@ 0xfd
 800091e:	f63f af50 	bhi.w	80007c2 <__aeabi_fmul+0x92>
 8000922:	428b      	cmp	r3, r1
 8000924:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000928:	bf08      	it	eq
 800092a:	f020 0001 	biceq.w	r0, r0, #1
 800092e:	4770      	bx	lr
 8000930:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000934:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000938:	327f      	adds	r2, #127	@ 0x7f
 800093a:	bfc2      	ittt	gt
 800093c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000940:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000944:	4770      	bxgt	lr
 8000946:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	3a01      	subs	r2, #1
 8000950:	e737      	b.n	80007c2 <__aeabi_fmul+0x92>
 8000952:	f092 0f00 	teq	r2, #0
 8000956:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800095a:	bf02      	ittt	eq
 800095c:	0040      	lsleq	r0, r0, #1
 800095e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000962:	3a01      	subeq	r2, #1
 8000964:	d0f9      	beq.n	800095a <__aeabi_fdiv+0xc2>
 8000966:	ea40 000c 	orr.w	r0, r0, ip
 800096a:	f093 0f00 	teq	r3, #0
 800096e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000972:	bf02      	ittt	eq
 8000974:	0049      	lsleq	r1, r1, #1
 8000976:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800097a:	3b01      	subeq	r3, #1
 800097c:	d0f9      	beq.n	8000972 <__aeabi_fdiv+0xda>
 800097e:	ea41 010c 	orr.w	r1, r1, ip
 8000982:	e795      	b.n	80008b0 <__aeabi_fdiv+0x18>
 8000984:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000988:	ea92 0f0c 	teq	r2, ip
 800098c:	d108      	bne.n	80009a0 <__aeabi_fdiv+0x108>
 800098e:	0242      	lsls	r2, r0, #9
 8000990:	f47f af7d 	bne.w	800088e <__aeabi_fmul+0x15e>
 8000994:	ea93 0f0c 	teq	r3, ip
 8000998:	f47f af70 	bne.w	800087c <__aeabi_fmul+0x14c>
 800099c:	4608      	mov	r0, r1
 800099e:	e776      	b.n	800088e <__aeabi_fmul+0x15e>
 80009a0:	ea93 0f0c 	teq	r3, ip
 80009a4:	d104      	bne.n	80009b0 <__aeabi_fdiv+0x118>
 80009a6:	024b      	lsls	r3, r1, #9
 80009a8:	f43f af4c 	beq.w	8000844 <__aeabi_fmul+0x114>
 80009ac:	4608      	mov	r0, r1
 80009ae:	e76e      	b.n	800088e <__aeabi_fmul+0x15e>
 80009b0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80009b4:	bf18      	it	ne
 80009b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80009ba:	d1ca      	bne.n	8000952 <__aeabi_fdiv+0xba>
 80009bc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80009c0:	f47f af5c 	bne.w	800087c <__aeabi_fmul+0x14c>
 80009c4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80009c8:	f47f af3c 	bne.w	8000844 <__aeabi_fmul+0x114>
 80009cc:	e75f      	b.n	800088e <__aeabi_fmul+0x15e>
 80009ce:	bf00      	nop

080009d0 <__gesf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpsf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__lesf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpsf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpsf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fa:	d011      	beq.n	8000a20 <__cmpsf2+0x40>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a02:	bf18      	it	ne
 8000a04:	ea90 0f01 	teqne	r0, r1
 8000a08:	bf58      	it	pl
 8000a0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a0e:	bf88      	it	hi
 8000a10:	17c8      	asrhi	r0, r1, #31
 8000a12:	bf38      	it	cc
 8000a14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a18:	bf18      	it	ne
 8000a1a:	f040 0001 	orrne.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a24:	d102      	bne.n	8000a2c <__cmpsf2+0x4c>
 8000a26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a2a:	d105      	bne.n	8000a38 <__cmpsf2+0x58>
 8000a2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a30:	d1e4      	bne.n	80009fc <__cmpsf2+0x1c>
 8000a32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a36:	d0e1      	beq.n	80009fc <__cmpsf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cfrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4608      	mov	r0, r1
 8000a44:	4661      	mov	r1, ip
 8000a46:	e7ff      	b.n	8000a48 <__aeabi_cfcmpeq>

08000a48 <__aeabi_cfcmpeq>:
 8000a48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a4a:	f7ff ffc9 	bl	80009e0 <__cmpsf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a58 <__aeabi_fcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cfcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_fcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffd2 	bl	8000a40 <__aeabi_cfrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_fcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc8 	bl	8000a40 <__aeabi_cfrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6153      	str	r3, [r2, #20]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <MX_DMA_Init+0x78>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f001 fe89 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f001 fea2 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200d      	movs	r0, #13
 8000af0:	f001 fe81 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000af4:	200d      	movs	r0, #13
 8000af6:	f001 fe9a 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200f      	movs	r0, #15
 8000b00:	f001 fe79 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f001 fe92 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2010      	movs	r0, #16
 8000b10:	f001 fe71 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b14:	2010      	movs	r0, #16
 8000b16:	f001 fe8a 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2011      	movs	r0, #17
 8000b20:	f001 fe69 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b24:	2011      	movs	r0, #17
 8000b26:	f001 fe82 	bl	800282e <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <apply_deadzone>:
 *	应用死区处理
 * @param raw 原始输入值
 * @param processed 处理后的值
 */
static void apply_deadzone(int raw, int *processed)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	*processed = raw;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]

	// 中心死区
	if (abs(raw - CENTER) <= CENTER_DEADZONE)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b4e:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 8000b52:	db09      	blt.n	8000b68 <apply_deadzone+0x30>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b5c:	dc04      	bgt.n	8000b68 <apply_deadzone+0x30>
	{
		*processed = CENTER;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b64:	601a      	str	r2, [r3, #0]
	}
	else if (raw >= 4096 - EDGE_DEADZONE)
	{
		*processed = 4096;
	}
}
 8000b66:	e00f      	b.n	8000b88 <apply_deadzone+0x50>
	else if (raw <= EDGE_DEADZONE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b14      	cmp	r3, #20
 8000b6c:	dc03      	bgt.n	8000b76 <apply_deadzone+0x3e>
		*processed = 0;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
}
 8000b74:	e008      	b.n	8000b88 <apply_deadzone+0x50>
	else if (raw >= 4096 - EDGE_DEADZONE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	dd03      	ble.n	8000b88 <apply_deadzone+0x50>
		*processed = 4096;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <speed_to_pwm>:
/* 速度转PWM值
 * @param speed 速度值 (-1.0到1.0)
 * @return PWM值 (0到100%)
 */
static int speed_to_pwm(float speed)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	float abs_speed = fabsf(speed);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ba2:	60fb      	str	r3, [r7, #12]
	if (abs_speed <= 0)
 8000ba4:	f04f 0100 	mov.w	r1, #0
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff ff69 	bl	8000a80 <__aeabi_fcmple>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <speed_to_pwm+0x24>
		return 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e024      	b.n	8000c02 <speed_to_pwm+0x6e>
	return (int)round(PWM_MIN + ((abs_speed - 1) / 99) * PWM_RANGE);
 8000bb8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff fcad 	bl	800051c <__aeabi_fsub>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4911      	ldr	r1, [pc, #68]	@ (8000c0c <speed_to_pwm+0x78>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe66 	bl	8000898 <__aeabi_fdiv>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4910      	ldr	r1, [pc, #64]	@ (8000c10 <speed_to_pwm+0x7c>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fdad 	bl	8000730 <__aeabi_fmul>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	490e      	ldr	r1, [pc, #56]	@ (8000c14 <speed_to_pwm+0x80>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fca0 	bl	8000520 <__addsf3>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc16 	bl	8000414 <__aeabi_f2d>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f008 f9ca 	bl	8008f88 <round>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fc62 	bl	80004c4 <__aeabi_d2iz>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	42c60000 	.word	0x42c60000
 8000c10:	428c0000 	.word	0x428c0000
 8000c14:	4414c000 	.word	0x4414c000

08000c18 <motor_control>:
 *	@param motor 电机控制结构体
 *	@param speed 速度值 (-1.0到1.0)
 *   @return 无
 */
static void motor_control(MotorController *motor, float speed)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	// 计算PWM值
	int pwm = speed_to_pwm(speed);
 8000c22:	6838      	ldr	r0, [r7, #0]
 8000c24:	f7ff ffb6 	bl	8000b94 <speed_to_pwm>
 8000c28:	60f8      	str	r0, [r7, #12]

	if (throttle_percent > 0)
 8000c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e14 <motor_control+0x1fc>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 0100 	mov.w	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff38 	bl	8000aa8 <__aeabi_fcmpgt>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 809f 	beq.w	8000d7e <motor_control+0x166>
	{
		if (speed >= 0)
 8000c40:	f04f 0100 	mov.w	r1, #0
 8000c44:	6838      	ldr	r0, [r7, #0]
 8000c46:	f7ff ff25 	bl	8000a94 <__aeabi_fcmpge>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d046      	beq.n	8000cde <motor_control+0xc6>
		{
			/* code */
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d105      	bne.n	8000c64 <motor_control+0x4c>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c62:	e018      	b.n	8000c96 <motor_control+0x7e>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d105      	bne.n	8000c78 <motor_control+0x60>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	2300      	movs	r3, #0
 8000c74:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c76:	e00e      	b.n	8000c96 <motor_control+0x7e>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d105      	bne.n	8000c8c <motor_control+0x74>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	2300      	movs	r3, #0
 8000c88:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c8a:	e004      	b.n	8000c96 <motor_control+0x7e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	2300      	movs	r3, #0
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, pwm);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d105      	bne.n	8000caa <motor_control+0x92>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	635a      	str	r2, [r3, #52]	@ 0x34
	else
	{
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
	}
}
 8000ca8:	e0b0      	b.n	8000e0c <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, pwm);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d105      	bne.n	8000cbe <motor_control+0xa6>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cbc:	e0a6      	b.n	8000e0c <motor_control+0x1f4>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d105      	bne.n	8000cd2 <motor_control+0xba>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cd0:	e09c      	b.n	8000e0c <motor_control+0x1f4>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cdc:	e096      	b.n	8000e0c <motor_control+0x1f4>
		else if (speed <= 0)
 8000cde:	f04f 0100 	mov.w	r1, #0
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	f7ff fecc 	bl	8000a80 <__aeabi_fcmple>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <motor_control+0xd8>
}
 8000cee:	e08d      	b.n	8000e0c <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, pwm);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d105      	bne.n	8000d04 <motor_control+0xec>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d02:	e018      	b.n	8000d36 <motor_control+0x11e>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d105      	bne.n	8000d18 <motor_control+0x100>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d16:	e00e      	b.n	8000d36 <motor_control+0x11e>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d105      	bne.n	8000d2c <motor_control+0x114>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d2a:	e004      	b.n	8000d36 <motor_control+0x11e>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d105      	bne.n	8000d4a <motor_control+0x132>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d48:	e060      	b.n	8000e0c <motor_control+0x1f4>
			__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d105      	bne.n	8000d5e <motor_control+0x146>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d5c:	e056      	b.n	8000e0c <motor_control+0x1f4>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d105      	bne.n	8000d72 <motor_control+0x15a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d70:	e04c      	b.n	8000e0c <motor_control+0x1f4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d7c:	e046      	b.n	8000e0c <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in1_channel, 0);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d105      	bne.n	8000d92 <motor_control+0x17a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d90:	e018      	b.n	8000dc4 <motor_control+0x1ac>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d105      	bne.n	8000da6 <motor_control+0x18e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2300      	movs	r3, #0
 8000da2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000da4:	e00e      	b.n	8000dc4 <motor_control+0x1ac>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d105      	bne.n	8000dba <motor_control+0x1a2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2300      	movs	r3, #0
 8000db6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000db8:	e004      	b.n	8000dc4 <motor_control+0x1ac>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d105      	bne.n	8000dd8 <motor_control+0x1c0>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000dd6:	e019      	b.n	8000e0c <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d105      	bne.n	8000dec <motor_control+0x1d4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000dea:	e00f      	b.n	8000e0c <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d105      	bne.n	8000e00 <motor_control+0x1e8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000dfe:	e005      	b.n	8000e0c <motor_control+0x1f4>
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_in2_channel, 0);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e0a:	e7ff      	b.n	8000e0c <motor_control+0x1f4>
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000bc 	.word	0x200000bc

08000e18 <update_motion_control>:

// 主控制函数
void update_motion_control(int *input_array)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	int x_processed, y_processed;  // 处理后的输入值
	float x_norm, y_norm;		   // 归一化后的输入值
	float left_speed, right_speed; // 左右电机速度

	// 1. 应用死区处理
	apply_deadzone(input_array[0], &x_processed);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fe84 	bl	8000b38 <apply_deadzone>
	apply_deadzone(input_array[1], &y_processed);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3304      	adds	r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f107 0208 	add.w	r2, r7, #8
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe7b 	bl	8000b38 <apply_deadzone>

	// 2. 归一化处理 (-1.0到1.0范围)
	x_norm = (x_processed - CENTER) / (float)(CENTER - EDGE_DEADZONE);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc1d 	bl	8000688 <__aeabi_i2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	495f      	ldr	r1, [pc, #380]	@ (8000fd0 <update_motion_control+0x1b8>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fd20 	bl	8000898 <__aeabi_fdiv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	61fb      	str	r3, [r7, #28]
	y_norm = (y_processed - CENTER) / (float)(CENTER - EDGE_DEADZONE);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fc10 	bl	8000688 <__aeabi_i2f>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4959      	ldr	r1, [pc, #356]	@ (8000fd0 <update_motion_control+0x1b8>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd13 	bl	8000898 <__aeabi_fdiv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	61bb      	str	r3, [r7, #24]

	// 限制在[-1, 1]范围内
	x_norm = fmaxf(-1.0f, fminf(1.0f, x_norm));
 8000e76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e7a:	69f8      	ldr	r0, [r7, #28]
 8000e7c:	f008 f855 	bl	8008f2a <fminf>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4954      	ldr	r1, [pc, #336]	@ (8000fd4 <update_motion_control+0x1bc>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f008 f83b 	bl	8008f00 <fmaxf>
 8000e8a:	61f8      	str	r0, [r7, #28]
	y_norm = fmaxf(-1.0f, fminf(1.0f, y_norm));
 8000e8c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e90:	69b8      	ldr	r0, [r7, #24]
 8000e92:	f008 f84a 	bl	8008f2a <fminf>
 8000e96:	4603      	mov	r3, r0
 8000e98:	494e      	ldr	r1, [pc, #312]	@ (8000fd4 <update_motion_control+0x1bc>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f008 f830 	bl	8008f00 <fmaxf>
 8000ea0:	61b8      	str	r0, [r7, #24]

	// 3. 计算油门百分比 (0-100%)
	if (input_array[2] > CENTER && input_array[2] < (4096 - EDGE_DEADZONE))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000eac:	dd24      	ble.n	8000ef8 <update_motion_control+0xe0>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	dc1d      	bgt.n	8000ef8 <update_motion_control+0xe0>
	{
		throttle_percent = ((input_array[2] - 2048) / (float)2048) * 99 + 1; // 范围 在1到100之间
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fbde 	bl	8000688 <__aeabi_i2f>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fce0 	bl	8000898 <__aeabi_fdiv>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	493f      	ldr	r1, [pc, #252]	@ (8000fd8 <update_motion_control+0x1c0>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fc27 	bl	8000730 <__aeabi_fmul>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fb19 	bl	8000520 <__addsf3>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <update_motion_control+0x1c4>)
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e014      	b.n	8000f22 <update_motion_control+0x10a>
	}
	else if (input_array[2] >= (4096 - EDGE_DEADZONE))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3308      	adds	r3, #8
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8000f02:	4293      	cmp	r3, r2
 8000f04:	dd03      	ble.n	8000f0e <update_motion_control+0xf6>
	{
		throttle_percent = 100;
 8000f06:	4b35      	ldr	r3, [pc, #212]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f08:	4a35      	ldr	r2, [pc, #212]	@ (8000fe0 <update_motion_control+0x1c8>)
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e009      	b.n	8000f22 <update_motion_control+0x10a>
	}
	else if (input_array[2] <= CENTER)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3308      	adds	r3, #8
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f18:	dc03      	bgt.n	8000f22 <update_motion_control+0x10a>
	{
		throttle_percent = 0;
 8000f1a:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	}
	
	// 限制在[0, 100]范围内
	throttle_percent = fmaxf(0.0f, fminf(100.0f, throttle_percent));
 8000f22:	4b2e      	ldr	r3, [pc, #184]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	492e      	ldr	r1, [pc, #184]	@ (8000fe0 <update_motion_control+0x1c8>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fffe 	bl	8008f2a <fminf>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f04f 0100 	mov.w	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 ffe3 	bl	8008f00 <fmaxf>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a27      	ldr	r2, [pc, #156]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f3e:	6013      	str	r3, [r2, #0]

	// 4. 差速驱动计算
	left_speed = (y_norm + x_norm) * throttle_percent / 100.0f;	 // 左电机速度
 8000f40:	69f9      	ldr	r1, [r7, #28]
 8000f42:	69b8      	ldr	r0, [r7, #24]
 8000f44:	f7ff faec 	bl	8000520 <__addsf3>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f7ff fbec 	bl	8000730 <__aeabi_fmul>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4921      	ldr	r1, [pc, #132]	@ (8000fe0 <update_motion_control+0x1c8>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fc9b 	bl	8000898 <__aeabi_fdiv>
 8000f62:	4603      	mov	r3, r0
 8000f64:	617b      	str	r3, [r7, #20]
	right_speed = (y_norm - x_norm) * throttle_percent / 100.0f; // 右电机速度
 8000f66:	69f9      	ldr	r1, [r7, #28]
 8000f68:	69b8      	ldr	r0, [r7, #24]
 8000f6a:	f7ff fad7 	bl	800051c <__aeabi_fsub>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <update_motion_control+0x1c4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4610      	mov	r0, r2
 8000f7a:	f7ff fbd9 	bl	8000730 <__aeabi_fmul>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4917      	ldr	r1, [pc, #92]	@ (8000fe0 <update_motion_control+0x1c8>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fc88 	bl	8000898 <__aeabi_fdiv>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	613b      	str	r3, [r7, #16]

	// 限幅处理 (确保在-100%到100%之间)
	left_speed = fmaxf(-1.0f, fminf(1.0f, left_speed));
 8000f8c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f90:	6978      	ldr	r0, [r7, #20]
 8000f92:	f007 ffca 	bl	8008f2a <fminf>
 8000f96:	4603      	mov	r3, r0
 8000f98:	490e      	ldr	r1, [pc, #56]	@ (8000fd4 <update_motion_control+0x1bc>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 ffb0 	bl	8008f00 <fmaxf>
 8000fa0:	6178      	str	r0, [r7, #20]
	right_speed = fmaxf(-1.0f, fminf(1.0f, right_speed));
 8000fa2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000fa6:	6938      	ldr	r0, [r7, #16]
 8000fa8:	f007 ffbf 	bl	8008f2a <fminf>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4909      	ldr	r1, [pc, #36]	@ (8000fd4 <update_motion_control+0x1bc>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f007 ffa5 	bl	8008f00 <fmaxf>
 8000fb6:	6138      	str	r0, [r7, #16]

	// 5. 控制电机
	motor_control(&left_motor, left_speed);
 8000fb8:	6979      	ldr	r1, [r7, #20]
 8000fba:	480a      	ldr	r0, [pc, #40]	@ (8000fe4 <update_motion_control+0x1cc>)
 8000fbc:	f7ff fe2c 	bl	8000c18 <motor_control>
	motor_control(&right_motor, right_speed);
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <update_motion_control+0x1d0>)
 8000fc4:	f7ff fe28 	bl	8000c18 <motor_control>
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	44fd8000 	.word	0x44fd8000
 8000fd4:	bf800000 	.word	0xbf800000
 8000fd8:	42c60000 	.word	0x42c60000
 8000fdc:	200000bc 	.word	0x200000bc
 8000fe0:	42c80000 	.word	0x42c80000
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	2000001c 	.word	0x2000001c

08000fec <quiescent>:

// 停止电机
void quiescent(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	motor_control(&left_motor, 0);
 8000ff0:	f04f 0100 	mov.w	r1, #0
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <quiescent+0x1c>)
 8000ff6:	f7ff fe0f 	bl	8000c18 <motor_control>
	motor_control(&right_motor, 0);
 8000ffa:	f04f 0100 	mov.w	r1, #0
 8000ffe:	4803      	ldr	r0, [pc, #12]	@ (800100c <quiescent+0x20>)
 8001000:	f7ff fe0a 	bl	8000c18 <motor_control>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	2000001c 	.word	0x2000001c

08001010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	4b45      	ldr	r3, [pc, #276]	@ (800113c <MX_GPIO_Init+0x12c>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a44      	ldr	r2, [pc, #272]	@ (800113c <MX_GPIO_Init+0x12c>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b42      	ldr	r3, [pc, #264]	@ (800113c <MX_GPIO_Init+0x12c>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103c:	4b3f      	ldr	r3, [pc, #252]	@ (800113c <MX_GPIO_Init+0x12c>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a3e      	ldr	r2, [pc, #248]	@ (800113c <MX_GPIO_Init+0x12c>)
 8001042:	f043 0320 	orr.w	r3, r3, #32
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b3c      	ldr	r3, [pc, #240]	@ (800113c <MX_GPIO_Init+0x12c>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b39      	ldr	r3, [pc, #228]	@ (800113c <MX_GPIO_Init+0x12c>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a38      	ldr	r2, [pc, #224]	@ (800113c <MX_GPIO_Init+0x12c>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b36      	ldr	r3, [pc, #216]	@ (800113c <MX_GPIO_Init+0x12c>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b33      	ldr	r3, [pc, #204]	@ (800113c <MX_GPIO_Init+0x12c>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a32      	ldr	r2, [pc, #200]	@ (800113c <MX_GPIO_Init+0x12c>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b30      	ldr	r3, [pc, #192]	@ (800113c <MX_GPIO_Init+0x12c>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800108a:	482d      	ldr	r0, [pc, #180]	@ (8001140 <MX_GPIO_Init+0x130>)
 800108c:	f002 f81c 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2103      	movs	r1, #3
 8001094:	482b      	ldr	r0, [pc, #172]	@ (8001144 <MX_GPIO_Init+0x134>)
 8001096:	f002 f817 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 41ea 	mov.w	r1, #29952	@ 0x7500
 80010a0:	4828      	ldr	r0, [pc, #160]	@ (8001144 <MX_GPIO_Init+0x134>)
 80010a2:	f002 f811 	bl	80030c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4820      	ldr	r0, [pc, #128]	@ (8001140 <MX_GPIO_Init+0x130>)
 80010c0:	f001 fe7e 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 80010c4:	2310      	movs	r3, #16
 80010c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	481c      	ldr	r0, [pc, #112]	@ (8001148 <MX_GPIO_Init+0x138>)
 80010d8:	f001 fe72 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 80010dc:	2303      	movs	r3, #3
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4814      	ldr	r0, [pc, #80]	@ (8001144 <MX_GPIO_Init+0x134>)
 80010f4:	f001 fe64 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80010f8:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <MX_GPIO_Init+0x134>)
 8001112:	f001 fe55 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800111c:	2311      	movs	r3, #17
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_GPIO_Init+0x134>)
 8001130:	f001 fe46 	bl	8002dc0 <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	40011000 	.word	0x40011000
 8001144:	40010c00 	.word	0x40010c00
 8001148:	40010800 	.word	0x40010800

0800114c <HAL_UART_RxCpltCallback>:
uint8_t gps_data_parsed = 0; // GPS数据解析完成标志
uint8_t gps_data_received = 0; // GPS数据接收完成标志
uint8_t gps_data_error = 0; // GPS数据错误标志

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_UART_RxCpltCallback+0x24>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d102      	bne.n	8001164 <HAL_UART_RxCpltCallback+0x18>
    {
        // 接收数据完成，设置标志位
        gps_data_received = 1;
 800115e:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <HAL_UART_RxCpltCallback+0x28>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
    }
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40013800 	.word	0x40013800
 8001174:	200000c0 	.word	0x200000c0

08001178 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_I2C1_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <MX_I2C1_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001182:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_I2C1_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	@ (80011d0 <MX_I2C1_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_I2C1_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <MX_I2C1_Init+0x50>)
 80011b6:	f001 ffb9 	bl	800312c <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 f993 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000c4 	.word	0x200000c4
 80011cc:	40005400 	.word	0x40005400
 80011d0:	00061a80 	.word	0x00061a80

080011d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a45      	ldr	r2, [pc, #276]	@ (8001304 <HAL_I2C_MspInit+0x130>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	f040 8082 	bne.w	80012fa <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b44      	ldr	r3, [pc, #272]	@ (8001308 <HAL_I2C_MspInit+0x134>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a43      	ldr	r2, [pc, #268]	@ (8001308 <HAL_I2C_MspInit+0x134>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b41      	ldr	r3, [pc, #260]	@ (8001308 <HAL_I2C_MspInit+0x134>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800120e:	23c0      	movs	r3, #192	@ 0xc0
 8001210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001212:	2312      	movs	r3, #18
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4619      	mov	r1, r3
 8001220:	483a      	ldr	r0, [pc, #232]	@ (800130c <HAL_I2C_MspInit+0x138>)
 8001222:	f001 fdcd 	bl	8002dc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001226:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <HAL_I2C_MspInit+0x134>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a37      	ldr	r2, [pc, #220]	@ (8001308 <HAL_I2C_MspInit+0x134>)
 800122c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b35      	ldr	r3, [pc, #212]	@ (8001308 <HAL_I2C_MspInit+0x134>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800123e:	4b34      	ldr	r3, [pc, #208]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 8001240:	4a34      	ldr	r2, [pc, #208]	@ (8001314 <HAL_I2C_MspInit+0x140>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001244:	4b32      	ldr	r3, [pc, #200]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124a:	4b31      	ldr	r3, [pc, #196]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001250:	4b2f      	ldr	r3, [pc, #188]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001256:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800125c:	4b2c      	ldr	r3, [pc, #176]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001262:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001268:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 800126a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800126e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001270:	4827      	ldr	r0, [pc, #156]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 8001272:	f001 faf7 	bl	8002864 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 800127c:	f000 f935 	bl	80014ea <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 8001284:	639a      	str	r2, [r3, #56]	@ 0x38
 8001286:	4a22      	ldr	r2, [pc, #136]	@ (8001310 <HAL_I2C_MspInit+0x13c>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 800128e:	4a23      	ldr	r2, [pc, #140]	@ (800131c <HAL_I2C_MspInit+0x148>)
 8001290:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 8001294:	2210      	movs	r2, #16
 8001296:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 80012b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80012be:	4816      	ldr	r0, [pc, #88]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 80012c0:	f001 fad0 	bl	8002864 <HAL_DMA_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80012ca:	f000 f90e 	bl	80014ea <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a11      	ldr	r2, [pc, #68]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 80012d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d4:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <HAL_I2C_MspInit+0x144>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	201f      	movs	r0, #31
 80012e0:	f001 fa89 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012e4:	201f      	movs	r0, #31
 80012e6:	f001 faa2 	bl	800282e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2020      	movs	r0, #32
 80012f0:	f001 fa81 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012f4:	2020      	movs	r0, #32
 80012f6:	f001 fa9a 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40005400 	.word	0x40005400
 8001308:	40021000 	.word	0x40021000
 800130c:	40010c00 	.word	0x40010c00
 8001310:	20000118 	.word	0x20000118
 8001314:	40020080 	.word	0x40020080
 8001318:	2000015c 	.word	0x2000015c
 800131c:	4002006c 	.word	0x4002006c

08001320 <parse_input_str>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void parse_input_str(char *str, int arr[4])
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  char *token = strtok(str, ",");
 800132a:	4911      	ldr	r1, [pc, #68]	@ (8001370 <parse_input_str+0x50>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f006 fee3 	bl	80080f8 <strtok>
 8001332:	60f8      	str	r0, [r7, #12]
  for (int i = 0; i < 4 && token != NULL; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	e010      	b.n	800135c <parse_input_str+0x3c>
  {
    arr[i] = atoi(token);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	18d4      	adds	r4, r2, r3
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f006 fd42 	bl	8007dcc <atoi>
 8001348:	4603      	mov	r3, r0
 800134a:	6023      	str	r3, [r4, #0]
    token = strtok(NULL, ",");
 800134c:	4908      	ldr	r1, [pc, #32]	@ (8001370 <parse_input_str+0x50>)
 800134e:	2000      	movs	r0, #0
 8001350:	f006 fed2 	bl	80080f8 <strtok>
 8001354:	60f8      	str	r0, [r7, #12]
  for (int i = 0; i < 4 && token != NULL; i++)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3301      	adds	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b03      	cmp	r3, #3
 8001360:	dc02      	bgt.n	8001368 <parse_input_str+0x48>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e8      	bne.n	800133a <parse_input_str+0x1a>
  }
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	0800902c 	.word	0x0800902c

08001374 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t i = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f001 f8dd 	bl	800253c <HAL_Init>
  /* USER CODE BEGIN Init */
  //  HAL_SYSTICK_IRQHandler();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f86d 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f7ff fe43 	bl	8001010 <MX_GPIO_Init>
  MX_DMA_Init();
 800138a:	f7ff fb97 	bl	8000abc <MX_DMA_Init>
  MX_I2C1_Init();
 800138e:	f7ff fef3 	bl	8001178 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001392:	f000 fc21 	bl	8001bd8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001396:	f001 f82d 	bl	80023f4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800139a:	f000 fe91 	bl	80020c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800139e:	f000 fee1 	bl	8002164 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // 启动定时器中断
  HAL_TIM_Base_Start_IT(&htim1);
 80013a2:	4829      	ldr	r0, [pc, #164]	@ (8001448 <main+0xd4>)
 80013a4:	f005 f8d8 	bl	8006558 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013a8:	2100      	movs	r1, #0
 80013aa:	4828      	ldr	r0, [pc, #160]	@ (800144c <main+0xd8>)
 80013ac:	f005 f97e 	bl	80066ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013b0:	2104      	movs	r1, #4
 80013b2:	4826      	ldr	r0, [pc, #152]	@ (800144c <main+0xd8>)
 80013b4:	f005 f97a 	bl	80066ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013b8:	2108      	movs	r1, #8
 80013ba:	4824      	ldr	r0, [pc, #144]	@ (800144c <main+0xd8>)
 80013bc:	f005 f976 	bl	80066ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80013c0:	210c      	movs	r1, #12
 80013c2:	4822      	ldr	r0, [pc, #136]	@ (800144c <main+0xd8>)
 80013c4:	f005 f972 	bl	80066ac <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // 设置占空比50%
 80013c8:	4b20      	ldr	r3, [pc, #128]	@ (800144c <main+0xd8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); // 设置占空比50%
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <main+0xd8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	639a      	str	r2, [r3, #56]	@ 0x38

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0); // 设置占空比50%
 80013d8:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <main+0xd8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2200      	movs	r2, #0
 80013de:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0); // 设置占空比50%
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <main+0xd8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	641a      	str	r2, [r3, #64]	@ 0x40

  //	OLED_Init();

  // RF24L01引脚初始化
  NRF24L01_Gpio_Init();
 80013e8:	f000 fb74 	bl	8001ad4 <NRF24L01_Gpio_Init>

  // 检测nRF24L01
  while (NRF24L01_check_DMA() == 0)
 80013ec:	bf00      	nop
 80013ee:	f000 fa2f 	bl	8001850 <NRF24L01_check_DMA>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0fa      	beq.n	80013ee <main+0x7a>
    ;
  RF24L01_Init_DMA();
 80013f8:	f000 fb88 	bl	8001b0c <RF24L01_Init_DMA>
  RF24L01_Set_Mode_DMA(MODE_RX); // 发送模式
 80013fc:	2001      	movs	r0, #1
 80013fe:	f000 fab7 	bl	8001970 <RF24L01_Set_Mode_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (0 != NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer)) // 接收字节
 8001402:	4813      	ldr	r0, [pc, #76]	@ (8001450 <main+0xdc>)
 8001404:	f000 fb0c 	bl	8001a20 <NRF24L01_RxPacket_DMA>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d012      	beq.n	8001434 <main+0xc0>
    {
      parse_input_str(g_RF24L01RxBuffer, RX_BUFF); // 解析接收数据
 800140e:	4911      	ldr	r1, [pc, #68]	@ (8001454 <main+0xe0>)
 8001410:	480f      	ldr	r0, [pc, #60]	@ (8001450 <main+0xdc>)
 8001412:	f7ff ff85 	bl	8001320 <parse_input_str>

      update_motion_control(RX_BUFF); // 更新电机控制
 8001416:	480f      	ldr	r0, [pc, #60]	@ (8001454 <main+0xe0>)
 8001418:	f7ff fcfe 	bl	8000e18 <update_motion_control>

      conversion++;
 800141c:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <main+0xe4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <main+0xe4>)
 8001426:	701a      	strb	r2, [r3, #0]

      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001428:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800142c:	480b      	ldr	r0, [pc, #44]	@ (800145c <main+0xe8>)
 800142e:	f001 fe63 	bl	80030f8 <HAL_GPIO_TogglePin>
 8001432:	e7e6      	b.n	8001402 <main+0x8e>
    }
    else if (0 == NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer))
 8001434:	4806      	ldr	r0, [pc, #24]	@ (8001450 <main+0xdc>)
 8001436:	f000 faf3 	bl	8001a20 <NRF24L01_RxPacket_DMA>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e0      	bne.n	8001402 <main+0x8e>
    {
      quiescent();
 8001440:	f7ff fdd4 	bl	8000fec <quiescent>
    if (0 != NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer)) // 接收字节
 8001444:	e7dd      	b.n	8001402 <main+0x8e>
 8001446:	bf00      	nop
 8001448:	200002b4 	.word	0x200002b4
 800144c:	200002fc 	.word	0x200002fc
 8001450:	200001b0 	.word	0x200001b0
 8001454:	200001a0 	.word	0x200001a0
 8001458:	200001c4 	.word	0x200001c4
 800145c:	40011000 	.word	0x40011000

08001460 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b090      	sub	sp, #64	@ 0x40
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2228      	movs	r2, #40	@ 0x28
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f006 fe39 	bl	80080e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001482:	2301      	movs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	2301      	movs	r3, #1
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001494:	2302      	movs	r3, #2
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001498:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800149e:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fc91 	bl	8004dd0 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014b4:	f000 f819 	bl	80014ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b8:	230f      	movs	r3, #15
 80014ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2302      	movs	r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fefe 	bl	80052d4 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014de:	f000 f804 	bl	80014ea <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3740      	adds	r7, #64	@ 0x40
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ee:	b672      	cpsid	i
}
 80014f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f2:	bf00      	nop
 80014f4:	e7fd      	b.n	80014f2 <Error_Handler+0x8>
	...

080014f8 <drv_spi_read_write_byte>:
 *         @TxByte: 发送的数据字节
 * @note  :非堵塞式，一旦等待超时，函数会自动退出
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte(uint8_t TxByte)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1, &TxByte, &rx_data, 1, HAL_MAX_DELAY);
 8001502:	f107 020f 	add.w	r2, r7, #15
 8001506:	1df9      	adds	r1, r7, #7
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <drv_spi_read_write_byte+0x28>)
 8001512:	f004 f8f1 	bl	80056f8 <HAL_SPI_TransmitReceive>
//    HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
//    while (HAL_SPI_GetState(&SPI1))!=HAL_SPI_STATE_READY);
	return rx_data;      //返回
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001c8 	.word	0x200001c8

08001524 <drv_spi_read_write_byte_dma>:
 *         @TxByte: 发送的数据字节
 * @note  :使用DMA进行SPI传输，需要等待传输完成
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte_dma(uint8_t TxByte)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_StatusTypeDef status;

	// 使用DMA进行SPI传输
	status = HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
 800152e:	f107 020e 	add.w	r2, r7, #14
 8001532:	1df9      	adds	r1, r7, #7
 8001534:	2301      	movs	r3, #1
 8001536:	480b      	ldr	r0, [pc, #44]	@ (8001564 <drv_spi_read_write_byte_dma+0x40>)
 8001538:	f004 fb3a 	bl	8005bb0 <HAL_SPI_TransmitReceive_DMA>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <drv_spi_read_write_byte_dma+0x26>
	{
		// 处理错误情况
		Error_Handler();
 8001546:	f7ff ffd0 	bl	80014ea <Error_Handler>
	}

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800154a:	bf00      	nop
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <drv_spi_read_write_byte_dma+0x40>)
 800154e:	f004 fd50 	bl	8005ff2 <HAL_SPI_GetState>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	d1f9      	bne.n	800154c <drv_spi_read_write_byte_dma+0x28>

	return rx_data;
 8001558:	7bbb      	ldrb	r3, [r7, #14]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001c8 	.word	0x200001c8

08001568 <drv_spi_read_write_buffer_dma>:
/*​
 * @brief SPI DMA方式读写缓冲区
 */
HAL_StatusTypeDef drv_spi_read_write_buffer_dma(uint8_t *tx_buf,
        uint8_t *rx_buf, uint16_t len)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	4613      	mov	r3, r2
 8001574:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf,
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <drv_spi_read_write_buffer_dma+0x38>)
 800157e:	f004 fb17 	bl	8005bb0 <HAL_SPI_TransmitReceive_DMA>
 8001582:	4603      	mov	r3, r0
 8001584:	75fb      	strb	r3, [r7, #23]
	        rx_buf, len);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001586:	bf00      	nop
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <drv_spi_read_write_buffer_dma+0x38>)
 800158a:	f004 fd32 	bl	8005ff2 <HAL_SPI_GetState>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	d1f9      	bne.n	8001588 <drv_spi_read_write_buffer_dma+0x20>
	return status;
 8001594:	7dfb      	ldrb	r3, [r7, #23]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001c8 	.word	0x200001c8

080015a4 <NRF24L01_Read_Reg_DMA>:
 *         @RegAddr:寄存器地址
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:读取的数据
 */
uint8_t NRF24L01_Read_Reg_DMA(uint8_t RegAddr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[2] = { NRF_READ_REG | RegAddr, 0xFF };  // 命令+空数据
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	733b      	strb	r3, [r7, #12]
 80015b2:	23ff      	movs	r3, #255	@ 0xff
 80015b4:	737b      	strb	r3, [r7, #13]
	uint8_t rx_buf[2] = { 0 };                            // 接收缓冲区
 80015b6:	2300      	movs	r3, #0
 80015b8:	813b      	strh	r3, [r7, #8]

	RF24L01_SET_CS_LOW();          // 片选
 80015ba:	2200      	movs	r2, #0
 80015bc:	2102      	movs	r1, #2
 80015be:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <NRF24L01_Read_Reg_DMA+0x54>)
 80015c0:	f001 fd82 	bl	80030c8 <HAL_GPIO_WritePin>

	// 使用DMA进行SPI传输
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 80015c4:	f107 0208 	add.w	r2, r7, #8
 80015c8:	f107 010c 	add.w	r1, r7, #12
 80015cc:	2302      	movs	r3, #2
 80015ce:	480b      	ldr	r0, [pc, #44]	@ (80015fc <NRF24L01_Read_Reg_DMA+0x58>)
 80015d0:	f004 faee 	bl	8005bb0 <HAL_SPI_TransmitReceive_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80015d4:	bf00      	nop
 80015d6:	4809      	ldr	r0, [pc, #36]	@ (80015fc <NRF24L01_Read_Reg_DMA+0x58>)
 80015d8:	f004 fd0b 	bl	8005ff2 <HAL_SPI_GetState>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d1f9      	bne.n	80015d6 <NRF24L01_Read_Reg_DMA+0x32>

	RF24L01_SET_CS_HIGH();         // 取消片选
 80015e2:	2201      	movs	r2, #1
 80015e4:	2102      	movs	r1, #2
 80015e6:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <NRF24L01_Read_Reg_DMA+0x54>)
 80015e8:	f001 fd6e 	bl	80030c8 <HAL_GPIO_WritePin>

	return rx_buf[1];              // 返回接收到的数据
 80015ec:	7a7b      	ldrb	r3, [r7, #9]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	200001c8 	.word	0x200001c8

08001600 <NRF24L01_Read_Buf_DMA>:
 *         @len: 数据长度
 * @note  :数据长度不超过255，地址在设备中有效
 * @retval:无
 */
void NRF24L01_Read_Buf_DMA(uint8_t RegAddr, uint8_t *pBuf, uint8_t len)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b092      	sub	sp, #72	@ 0x48
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	4613      	mov	r3, r2
 800160e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[32];  // 最大32字节
	uint8_t rx_buf[32];

	// 准备发送数据
	tx_buf[0] = NRF_READ_REG | RegAddr;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	memset(&tx_buf[1], 0xFF, len);  // 填充0xFF用于读取
 8001616:	79ba      	ldrb	r2, [r7, #6]
 8001618:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161c:	3301      	adds	r3, #1
 800161e:	21ff      	movs	r1, #255	@ 0xff
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fd60 	bl	80080e6 <memset>

	RF24L01_SET_CS_LOW();          // 片选
 8001626:	2200      	movs	r2, #0
 8001628:	2102      	movs	r1, #2
 800162a:	480f      	ldr	r0, [pc, #60]	@ (8001668 <NRF24L01_Read_Buf_DMA+0x68>)
 800162c:	f001 fd4c 	bl	80030c8 <HAL_GPIO_WritePin>

	// 使用DMA批量传输
	drv_spi_read_write_buffer_dma(tx_buf, rx_buf, len + 1);
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	b29b      	uxth	r3, r3
 8001634:	3301      	adds	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	f107 0108 	add.w	r1, r7, #8
 800163c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff91 	bl	8001568 <drv_spi_read_write_buffer_dma>

	// 复制接收到的数据到输出缓冲区
	memcpy(pBuf, &rx_buf[1], len);
 8001646:	79ba      	ldrb	r2, [r7, #6]
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	3301      	adds	r3, #1
 800164e:	4619      	mov	r1, r3
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f006 fe20 	bl	8008296 <memcpy>

	RF24L01_SET_CS_HIGH();         // 取消片选
 8001656:	2201      	movs	r2, #1
 8001658:	2102      	movs	r1, #2
 800165a:	4803      	ldr	r0, [pc, #12]	@ (8001668 <NRF24L01_Read_Buf_DMA+0x68>)
 800165c:	f001 fd34 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8001660:	bf00      	nop
 8001662:	3748      	adds	r7, #72	@ 0x48
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40010c00 	.word	0x40010c00

0800166c <NRF24L01_Write_Reg_DMA>:
 *         @Value:要写入的值
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:无
 */
void NRF24L01_Write_Reg_DMA(uint8_t RegAddr, uint8_t Value)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[2] = { NRF_WRITE_REG | RegAddr, Value };  // 命令+数据
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	b2db      	uxtb	r3, r3
 8001684:	733b      	strb	r3, [r7, #12]
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();      // 片选
 800168a:	2200      	movs	r2, #0
 800168c:	2102      	movs	r1, #2
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <NRF24L01_Write_Reg_DMA+0x58>)
 8001690:	f001 fd1a 	bl	80030c8 <HAL_GPIO_WritePin>

	// 使用DMA进行SPI传输
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2202      	movs	r2, #2
 800169a:	4619      	mov	r1, r3
 800169c:	480a      	ldr	r0, [pc, #40]	@ (80016c8 <NRF24L01_Write_Reg_DMA+0x5c>)
 800169e:	f004 f9d5 	bl	8005a4c <HAL_SPI_Transmit_DMA>

	// 等待DMA传输完成
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80016a2:	bf00      	nop
 80016a4:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <NRF24L01_Write_Reg_DMA+0x5c>)
 80016a6:	f004 fca4 	bl	8005ff2 <HAL_SPI_GetState>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d1f9      	bne.n	80016a4 <NRF24L01_Write_Reg_DMA+0x38>

	RF24L01_SET_CS_HIGH();     // 取消片选
 80016b0:	2201      	movs	r2, #1
 80016b2:	2102      	movs	r1, #2
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <NRF24L01_Write_Reg_DMA+0x58>)
 80016b6:	f001 fd07 	bl	80030c8 <HAL_GPIO_WritePin>
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	200001c8 	.word	0x200001c8

080016cc <NRF24L01_Read_Status_Register>:
 * @param :无
 * @note  :无
 * @retval:RF24L01状态
 */
uint8_t NRF24L01_Read_Status_Register(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
	uint8_t Status;

	RF24L01_SET_CS_LOW();      //片选
 80016d2:	2200      	movs	r2, #0
 80016d4:	2102      	movs	r1, #2
 80016d6:	4809      	ldr	r0, [pc, #36]	@ (80016fc <NRF24L01_Read_Status_Register+0x30>)
 80016d8:	f001 fcf6 	bl	80030c8 <HAL_GPIO_WritePin>

	Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS);  //读状态寄存器
 80016dc:	2007      	movs	r0, #7
 80016de:	f7ff ff0b 	bl	80014f8 <drv_spi_read_write_byte>
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]

	RF24L01_SET_CS_HIGH();     //取消片选
 80016e6:	2201      	movs	r2, #1
 80016e8:	2102      	movs	r1, #2
 80016ea:	4804      	ldr	r0, [pc, #16]	@ (80016fc <NRF24L01_Read_Status_Register+0x30>)
 80016ec:	f001 fcec 	bl	80030c8 <HAL_GPIO_WritePin>

	return Status;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40010c00 	.word	0x40010c00

08001700 <NRF24L01_Clear_IRQ_Flag>:
 @IRQ_Source:中断源
 * @note  :无
 * @retval:清除后状态寄存器的值
 */
uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); // 保留有效中断位
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001710:	71fb      	strb	r3, [r7, #7]
	status = NRF24L01_Read_Status_Register();                  // 读取当前状态
 8001712:	f7ff ffdb 	bl	80016cc <NRF24L01_Read_Status_Register>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // 拉低CSN
 800171a:	2200      	movs	r2, #0
 800171c:	2102      	movs	r1, #2
 800171e:	480c      	ldr	r0, [pc, #48]	@ (8001750 <NRF24L01_Clear_IRQ_Flag+0x50>)
 8001720:	f001 fcd2 	bl	80030c8 <HAL_GPIO_WritePin>
	drv_spi_read_write_byte(NRF_WRITE_REG + STATUS);          // 发送写命令
 8001724:	2027      	movs	r0, #39	@ 0x27
 8001726:	f7ff fee7 	bl	80014f8 <drv_spi_read_write_byte>
	drv_spi_read_write_byte(status | IRQ_Source);             // 写1清中断标志[1]
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4313      	orrs	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fee0 	bl	80014f8 <drv_spi_read_write_byte>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // 拉高CSN
 8001738:	2201      	movs	r2, #1
 800173a:	2102      	movs	r1, #2
 800173c:	4804      	ldr	r0, [pc, #16]	@ (8001750 <NRF24L01_Clear_IRQ_Flag+0x50>)
 800173e:	f001 fcc3 	bl	80030c8 <HAL_GPIO_WritePin>

	return NRF24L01_Read_Status_Register();                   // 返回新状态
 8001742:	f7ff ffc3 	bl	80016cc <NRF24L01_Read_Status_Register>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40010c00 	.word	0x40010c00

08001754 <NRF24L01_Set_TxAddr_DMA>:
 * @param :
 *         @pAddr:地址存放地址
 *         @len:长度
 */
void NRF24L01_Set_TxAddr_DMA(uint8_t *pAddr, uint8_t len)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
	uint8_t tx_buf[6];  // 命令+5字节地址

	len = (len > 5) ? 5 : len;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b05      	cmp	r3, #5
 8001764:	bf28      	it	cs
 8001766:	2305      	movcs	r3, #5
 8001768:	70fb      	strb	r3, [r7, #3]
	tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 800176a:	2330      	movs	r3, #48	@ 0x30
 800176c:	723b      	strb	r3, [r7, #8]
	memcpy(&tx_buf[1], pAddr, len);
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	3301      	adds	r3, #1
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	f006 fd8c 	bl	8008296 <memcpy>

	RF24L01_SET_CS_LOW();
 800177e:	2200      	movs	r2, #0
 8001780:	2102      	movs	r1, #2
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <NRF24L01_Set_TxAddr_DMA+0x68>)
 8001784:	f001 fca0 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, len + 1);
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	b29b      	uxth	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4619      	mov	r1, r3
 8001796:	480a      	ldr	r0, [pc, #40]	@ (80017c0 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8001798:	f004 f958 	bl	8005a4c <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800179c:	bf00      	nop
 800179e:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 80017a0:	f004 fc27 	bl	8005ff2 <HAL_SPI_GetState>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d1f9      	bne.n	800179e <NRF24L01_Set_TxAddr_DMA+0x4a>
	RF24L01_SET_CS_HIGH();
 80017aa:	2201      	movs	r2, #1
 80017ac:	2102      	movs	r1, #2
 80017ae:	4803      	ldr	r0, [pc, #12]	@ (80017bc <NRF24L01_Set_TxAddr_DMA+0x68>)
 80017b0:	f001 fc8a 	bl	80030c8 <HAL_GPIO_WritePin>
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40010c00 	.word	0x40010c00
 80017c0:	200001c8 	.word	0x200001c8

080017c4 <NRF24L01_Set_RxAddr_DMA>:
 *         @PipeNum:通道
 *         @pAddr:地址存放地址
 *         @Len:长度
 */
void NRF24L01_Set_RxAddr_DMA(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	4613      	mov	r3, r2
 80017d2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[6];  // 命令+5字节地址

	Len = (Len > 5) ? 5 : Len;
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	bf28      	it	cs
 80017da:	2305      	movcs	r3, #5
 80017dc:	71bb      	strb	r3, [r7, #6]
	PipeNum = (PipeNum > 5) ? 5 : PipeNum;
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	bf28      	it	cs
 80017e4:	2305      	movcs	r3, #5
 80017e6:	71fb      	strb	r3, [r7, #7]

	tx_buf[0] = NRF_WRITE_REG | (RX_ADDR_P0 + PipeNum);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	330a      	adds	r3, #10
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	723b      	strb	r3, [r7, #8]
	memcpy(&tx_buf[1], pAddr, Len);
 80017fa:	79ba      	ldrb	r2, [r7, #6]
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	3301      	adds	r3, #1
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f006 fd46 	bl	8008296 <memcpy>

	RF24L01_SET_CS_LOW();
 800180a:	2200      	movs	r2, #0
 800180c:	2102      	movs	r1, #2
 800180e:	480e      	ldr	r0, [pc, #56]	@ (8001848 <NRF24L01_Set_RxAddr_DMA+0x84>)
 8001810:	f001 fc5a 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, Len + 1);
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	b29b      	uxth	r3, r3
 8001818:	3301      	adds	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4619      	mov	r1, r3
 8001822:	480a      	ldr	r0, [pc, #40]	@ (800184c <NRF24L01_Set_RxAddr_DMA+0x88>)
 8001824:	f004 f912 	bl	8005a4c <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001828:	bf00      	nop
 800182a:	4808      	ldr	r0, [pc, #32]	@ (800184c <NRF24L01_Set_RxAddr_DMA+0x88>)
 800182c:	f004 fbe1 	bl	8005ff2 <HAL_SPI_GetState>
 8001830:	4603      	mov	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d1f9      	bne.n	800182a <NRF24L01_Set_RxAddr_DMA+0x66>
	RF24L01_SET_CS_HIGH();
 8001836:	2201      	movs	r2, #1
 8001838:	2102      	movs	r1, #2
 800183a:	4803      	ldr	r0, [pc, #12]	@ (8001848 <NRF24L01_Set_RxAddr_DMA+0x84>)
 800183c:	f001 fc44 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010c00 	.word	0x40010c00
 800184c:	200001c8 	.word	0x200001c8

08001850 <NRF24L01_check_DMA>:
 * @param :无
 * @note  :使用DMA进行SPI传输检测模块
 * @retval:检测结果(0:失败, 1:成功)
 */
uint8_t NRF24L01_check_DMA(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t buf[5] = { 0xA5, 0xA5, 0xA5, 0xA5, 0xA5 };
 8001856:	4a42      	ldr	r2, [pc, #264]	@ (8001960 <NRF24L01_check_DMA+0x110>)
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001860:	6018      	str	r0, [r3, #0]
 8001862:	3304      	adds	r3, #4
 8001864:	7019      	strb	r1, [r3, #0]
	uint8_t tx_buf[6], rx_buf[6];
	uint32_t start_time = HAL_GetTick();
 8001866:	f000 fec1 	bl	80025ec <HAL_GetTick>
 800186a:	61b8      	str	r0, [r7, #24]

	while (1)
	{
		// 使用DMA写入地址
		tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 800186c:	2330      	movs	r3, #48	@ 0x30
 800186e:	723b      	strb	r3, [r7, #8]
		memcpy(&tx_buf[1], buf, 5);
 8001870:	f107 0309 	add.w	r3, r7, #9
 8001874:	f107 0210 	add.w	r2, r7, #16
 8001878:	6810      	ldr	r0, [r2, #0]
 800187a:	6018      	str	r0, [r3, #0]
 800187c:	7912      	ldrb	r2, [r2, #4]
 800187e:	711a      	strb	r2, [r3, #4]

		RF24L01_SET_CS_LOW();
 8001880:	2200      	movs	r2, #0
 8001882:	2102      	movs	r1, #2
 8001884:	4837      	ldr	r0, [pc, #220]	@ (8001964 <NRF24L01_check_DMA+0x114>)
 8001886:	f001 fc1f 	bl	80030c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 6);
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	2206      	movs	r2, #6
 8001890:	4619      	mov	r1, r3
 8001892:	4835      	ldr	r0, [pc, #212]	@ (8001968 <NRF24L01_check_DMA+0x118>)
 8001894:	f004 f8da 	bl	8005a4c <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001898:	bf00      	nop
 800189a:	4833      	ldr	r0, [pc, #204]	@ (8001968 <NRF24L01_check_DMA+0x118>)
 800189c:	f004 fba9 	bl	8005ff2 <HAL_SPI_GetState>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d1f9      	bne.n	800189a <NRF24L01_check_DMA+0x4a>
		RF24L01_SET_CS_HIGH();
 80018a6:	2201      	movs	r2, #1
 80018a8:	2102      	movs	r1, #2
 80018aa:	482e      	ldr	r0, [pc, #184]	@ (8001964 <NRF24L01_check_DMA+0x114>)
 80018ac:	f001 fc0c 	bl	80030c8 <HAL_GPIO_WritePin>

		// 使用DMA读取地址
		tx_buf[0] = NRF_READ_REG | TX_ADDR;
 80018b0:	2310      	movs	r3, #16
 80018b2:	723b      	strb	r3, [r7, #8]
		memset(&tx_buf[1], 0xFF, 5);
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	3301      	adds	r3, #1
 80018ba:	2205      	movs	r2, #5
 80018bc:	21ff      	movs	r1, #255	@ 0xff
 80018be:	4618      	mov	r0, r3
 80018c0:	f006 fc11 	bl	80080e6 <memset>

		RF24L01_SET_CS_LOW();
 80018c4:	2200      	movs	r2, #0
 80018c6:	2102      	movs	r1, #2
 80018c8:	4826      	ldr	r0, [pc, #152]	@ (8001964 <NRF24L01_check_DMA+0x114>)
 80018ca:	f001 fbfd 	bl	80030c8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 6);
 80018ce:	463a      	mov	r2, r7
 80018d0:	f107 0108 	add.w	r1, r7, #8
 80018d4:	2306      	movs	r3, #6
 80018d6:	4824      	ldr	r0, [pc, #144]	@ (8001968 <NRF24L01_check_DMA+0x118>)
 80018d8:	f004 f96a 	bl	8005bb0 <HAL_SPI_TransmitReceive_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80018dc:	bf00      	nop
 80018de:	4822      	ldr	r0, [pc, #136]	@ (8001968 <NRF24L01_check_DMA+0x118>)
 80018e0:	f004 fb87 	bl	8005ff2 <HAL_SPI_GetState>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d1f9      	bne.n	80018de <NRF24L01_check_DMA+0x8e>
		RF24L01_SET_CS_HIGH();
 80018ea:	2201      	movs	r2, #1
 80018ec:	2102      	movs	r1, #2
 80018ee:	481d      	ldr	r0, [pc, #116]	@ (8001964 <NRF24L01_check_DMA+0x114>)
 80018f0:	f001 fbea 	bl	80030c8 <HAL_GPIO_WritePin>

		// 比较结果
		for (i = 0; i < 5; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	77fb      	strb	r3, [r7, #31]
 80018f8:	e00f      	b.n	800191a <NRF24L01_check_DMA+0xca>
		{
			if (buf[i] != rx_buf[i + 1])
 80018fa:	7ffb      	ldrb	r3, [r7, #31]
 80018fc:	3320      	adds	r3, #32
 80018fe:	443b      	add	r3, r7
 8001900:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	3301      	adds	r3, #1
 8001908:	3320      	adds	r3, #32
 800190a:	443b      	add	r3, r7
 800190c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001910:	429a      	cmp	r2, r3
 8001912:	d106      	bne.n	8001922 <NRF24L01_check_DMA+0xd2>
		for (i = 0; i < 5; i++)
 8001914:	7ffb      	ldrb	r3, [r7, #31]
 8001916:	3301      	adds	r3, #1
 8001918:	77fb      	strb	r3, [r7, #31]
 800191a:	7ffb      	ldrb	r3, [r7, #31]
 800191c:	2b04      	cmp	r3, #4
 800191e:	d9ec      	bls.n	80018fa <NRF24L01_check_DMA+0xaa>
 8001920:	e000      	b.n	8001924 <NRF24L01_check_DMA+0xd4>
			{
				break;
 8001922:	bf00      	nop
			}
		}

		if (i == 5)
 8001924:	7ffb      	ldrb	r3, [r7, #31]
 8001926:	2b05      	cmp	r3, #5
 8001928:	d101      	bne.n	800192e <NRF24L01_check_DMA+0xde>
		{
			return 1; // 检测成功
 800192a:	2301      	movs	r3, #1
 800192c:	e013      	b.n	8001956 <NRF24L01_check_DMA+0x106>
		}

		// 超时处理(5秒超时)
		if (HAL_GetTick() - start_time > 5000)
 800192e:	f000 fe5d 	bl	80025ec <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <NRF24L01_check_DMA+0xf4>
		{
			return 0; // 检测失败
 8001940:	2300      	movs	r3, #0
 8001942:	e008      	b.n	8001956 <NRF24L01_check_DMA+0x106>
		}

		// 错误指示
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001948:	4808      	ldr	r0, [pc, #32]	@ (800196c <NRF24L01_check_DMA+0x11c>)
 800194a:	f001 fbd5 	bl	80030f8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800194e:	2064      	movs	r0, #100	@ 0x64
 8001950:	f000 fe56 	bl	8002600 <HAL_Delay>
		tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8001954:	e78a      	b.n	800186c <NRF24L01_check_DMA+0x1c>
	}
}
 8001956:	4618      	mov	r0, r3
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	0800904c 	.word	0x0800904c
 8001964:	40010c00 	.word	0x40010c00
 8001968:	200001c8 	.word	0x200001c8
 800196c:	40011000 	.word	0x40011000

08001970 <RF24L01_Set_Mode_DMA>:
 *         @Mode:模式发送模式或接收模式
 * @note  :使用DMA进行寄存器读写
 * @retval:无
 */
void RF24L01_Set_Mode_DMA(nRf24l01ModeType Mode)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[2], rx_buf[2];

	// 使用DMA读取CONFIG寄存器
	tx_buf[0] = NRF_READ_REG | CONFIG;
 800197a:	2300      	movs	r3, #0
 800197c:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0xFF;
 800197e:	23ff      	movs	r3, #255	@ 0xff
 8001980:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();
 8001982:	2200      	movs	r2, #0
 8001984:	2102      	movs	r1, #2
 8001986:	4824      	ldr	r0, [pc, #144]	@ (8001a18 <RF24L01_Set_Mode_DMA+0xa8>)
 8001988:	f001 fb9e 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 800198c:	f107 0208 	add.w	r2, r7, #8
 8001990:	f107 010c 	add.w	r1, r7, #12
 8001994:	2302      	movs	r3, #2
 8001996:	4821      	ldr	r0, [pc, #132]	@ (8001a1c <RF24L01_Set_Mode_DMA+0xac>)
 8001998:	f004 f90a 	bl	8005bb0 <HAL_SPI_TransmitReceive_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800199c:	bf00      	nop
 800199e:	481f      	ldr	r0, [pc, #124]	@ (8001a1c <RF24L01_Set_Mode_DMA+0xac>)
 80019a0:	f004 fb27 	bl	8005ff2 <HAL_SPI_GetState>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d1f9      	bne.n	800199e <RF24L01_Set_Mode_DMA+0x2e>
	RF24L01_SET_CS_HIGH();
 80019aa:	2201      	movs	r2, #1
 80019ac:	2102      	movs	r1, #2
 80019ae:	481a      	ldr	r0, [pc, #104]	@ (8001a18 <RF24L01_Set_Mode_DMA+0xa8>)
 80019b0:	f001 fb8a 	bl	80030c8 <HAL_GPIO_WritePin>

	uint8_t controlreg = rx_buf[1];
 80019b4:	7a7b      	ldrb	r3, [r7, #9]
 80019b6:	73fb      	strb	r3, [r7, #15]

	// 修改模式位
	if (Mode == MODE_TX)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d104      	bne.n	80019c8 <RF24L01_Set_Mode_DMA+0x58>
	{
		controlreg &= ~(1 << PRIM_RX);
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e006      	b.n	80019d6 <RF24L01_Set_Mode_DMA+0x66>
	}
	else if (Mode == MODE_RX)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d103      	bne.n	80019d6 <RF24L01_Set_Mode_DMA+0x66>
	{
		controlreg |= (1 << PRIM_RX);
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
	}

	// 使用DMA写入CONFIG寄存器
	tx_buf[0] = NRF_WRITE_REG | CONFIG;
 80019d6:	2320      	movs	r3, #32
 80019d8:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = controlreg;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	737b      	strb	r3, [r7, #13]

	RF24L01_SET_CS_LOW();
 80019de:	2200      	movs	r2, #0
 80019e0:	2102      	movs	r1, #2
 80019e2:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <RF24L01_Set_Mode_DMA+0xa8>)
 80019e4:	f001 fb70 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2202      	movs	r2, #2
 80019ee:	4619      	mov	r1, r3
 80019f0:	480a      	ldr	r0, [pc, #40]	@ (8001a1c <RF24L01_Set_Mode_DMA+0xac>)
 80019f2:	f004 f82b 	bl	8005a4c <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80019f6:	bf00      	nop
 80019f8:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <RF24L01_Set_Mode_DMA+0xac>)
 80019fa:	f004 fafa 	bl	8005ff2 <HAL_SPI_GetState>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d1f9      	bne.n	80019f8 <RF24L01_Set_Mode_DMA+0x88>
	RF24L01_SET_CS_HIGH();
 8001a04:	2201      	movs	r2, #1
 8001a06:	2102      	movs	r1, #2
 8001a08:	4803      	ldr	r0, [pc, #12]	@ (8001a18 <RF24L01_Set_Mode_DMA+0xa8>)
 8001a0a:	f001 fb5d 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	200001c8 	.word	0x200001c8

08001a20 <NRF24L01_RxPacket_DMA>:
 *         @rxbuf:接收数据存放地址
 * @note  :无
 * @retval:接收的数据个数
 */
uint8_t NRF24L01_RxPacket_DMA(uint8_t *rxbuf)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	uint8_t l_Status = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	75fb      	strb	r3, [r7, #23]
	uint32_t start_time = HAL_GetTick();
 8001a2c:	f000 fdde 	bl	80025ec <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]
	uint8_t l_RxLength = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]

	RF24L01_SET_CS_LOW();      //片选
 8001a36:	2200      	movs	r2, #0
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4824      	ldr	r0, [pc, #144]	@ (8001acc <NRF24L01_RxPacket_DMA+0xac>)
 8001a3c:	f001 fb44 	bl	80030c8 <HAL_GPIO_WritePin>
	drv_spi_read_write_byte_dma( FLUSH_RX);
 8001a40:	20e2      	movs	r0, #226	@ 0xe2
 8001a42:	f7ff fd6f 	bl	8001524 <drv_spi_read_write_byte_dma>
	RF24L01_SET_CS_HIGH();
 8001a46:	2201      	movs	r2, #1
 8001a48:	2102      	movs	r1, #2
 8001a4a:	4820      	ldr	r0, [pc, #128]	@ (8001acc <NRF24L01_RxPacket_DMA+0xac>)
 8001a4c:	f001 fb3c 	bl	80030c8 <HAL_GPIO_WritePin>

	// 等待传输完成或超时
		while (RF24L01_GET_IRQ_STATUS() != 0)
 8001a50:	e011      	b.n	8001a76 <NRF24L01_RxPacket_DMA+0x56>
		{
			if (HAL_GetTick() - start_time > 100)  // 500ms超时
 8001a52:	f000 fdcb 	bl	80025ec <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	@ 0x64
 8001a5e:	d907      	bls.n	8001a70 <NRF24L01_RxPacket_DMA+0x50>
			{
				NRF24L01_Gpio_Init();
 8001a60:	f000 f838 	bl	8001ad4 <NRF24L01_Gpio_Init>
				RF24L01_Init_DMA();
 8001a64:	f000 f852 	bl	8001b0c <RF24L01_Init_DMA>
				RF24L01_Set_Mode_DMA(MODE_RX);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7ff ff81 	bl	8001970 <RF24L01_Set_Mode_DMA>
				break;
 8001a6e:	e008      	b.n	8001a82 <NRF24L01_RxPacket_DMA+0x62>
			}
			HAL_Delay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f000 fdc5 	bl	8002600 <HAL_Delay>
		while (RF24L01_GET_IRQ_STATUS() != 0)
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <NRF24L01_RxPacket_DMA+0xb0>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d0e7      	beq.n	8001a52 <NRF24L01_RxPacket_DMA+0x32>
		}

	l_Status = NRF24L01_Read_Reg_DMA( STATUS);     //读状态寄存器
 8001a82:	2007      	movs	r0, #7
 8001a84:	f7ff fd8e 	bl	80015a4 <NRF24L01_Read_Reg_DMA>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	75fb      	strb	r3, [r7, #23]
	NRF24L01_Write_Reg_DMA( STATUS, l_Status);      //清中断标志
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	2007      	movs	r0, #7
 8001a92:	f7ff fdeb 	bl	800166c <NRF24L01_Write_Reg_DMA>
	if (l_Status & RX_OK)   //接收到数据
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
 8001a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d010      	beq.n	8001ac2 <NRF24L01_RxPacket_DMA+0xa2>
	{
		l_RxLength = NRF24L01_Read_Reg_DMA( R_RX_PL_WID);      //读取接收到的数据个数
 8001aa0:	2060      	movs	r0, #96	@ 0x60
 8001aa2:	f7ff fd7f 	bl	80015a4 <NRF24L01_Read_Reg_DMA>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
		NRF24L01_Read_Buf_DMA( RD_RX_PLOAD, rxbuf, l_RxLength);  //接收到数据
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	461a      	mov	r2, r3
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	2061      	movs	r0, #97	@ 0x61
 8001ab2:	f7ff fda5 	bl	8001600 <NRF24L01_Read_Buf_DMA>
		NRF24L01_Write_Reg_DMA( FLUSH_RX, 0xff);                //清除RX FIFO
 8001ab6:	21ff      	movs	r1, #255	@ 0xff
 8001ab8:	20e2      	movs	r0, #226	@ 0xe2
 8001aba:	f7ff fdd7 	bl	800166c <NRF24L01_Write_Reg_DMA>
		return l_RxLength;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	e000      	b.n	8001ac4 <NRF24L01_RxPacket_DMA+0xa4>
	}

	return 0;               //没有收到数据
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40010c00 	.word	0x40010c00
 8001ad0:	40010800 	.word	0x40010800

08001ad4 <NRF24L01_Gpio_Init>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void NRF24L01_Gpio_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2101      	movs	r1, #1
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <NRF24L01_Gpio_Init+0x30>)
 8001ade:	f001 faf3 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	4808      	ldr	r0, [pc, #32]	@ (8001b08 <NRF24L01_Gpio_Init+0x34>)
 8001ae8:	f001 faee 	bl	80030c8 <HAL_GPIO_WritePin>

	RF24L01_SET_CE_LOW();      //??24L01
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	4804      	ldr	r0, [pc, #16]	@ (8001b04 <NRF24L01_Gpio_Init+0x30>)
 8001af2:	f001 fae9 	bl	80030c8 <HAL_GPIO_WritePin>
	RF24L01_SET_CS_HIGH();     //??SPI??
 8001af6:	2201      	movs	r2, #1
 8001af8:	2102      	movs	r1, #2
 8001afa:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <NRF24L01_Gpio_Init+0x30>)
 8001afc:	f001 fae4 	bl	80030c8 <HAL_GPIO_WritePin>

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	40010800 	.word	0x40010800

08001b0c <RF24L01_Init_DMA>:
 * @param :无
 * @note  :使用DMA批量配置寄存器，提高初始化速度
 * @retval:无
 */
void RF24L01_Init_DMA(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
	uint8_t addr[5] = { INIT_ADDR };
 8001b12:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc8 <RF24L01_Init_DMA+0xbc>)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1a:	6018      	str	r0, [r3, #0]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	7019      	strb	r1, [r3, #0]

	// 初始化状态
	RF24L01_SET_CE_HIGH();
 8001b20:	2201      	movs	r2, #1
 8001b22:	2101      	movs	r1, #1
 8001b24:	4829      	ldr	r0, [pc, #164]	@ (8001bcc <RF24L01_Init_DMA+0xc0>)
 8001b26:	f001 facf 	bl	80030c8 <HAL_GPIO_WritePin>
	NRF24L01_Clear_IRQ_Flag(IRQ_ALL);
 8001b2a:	2070      	movs	r0, #112	@ 0x70
 8001b2c:	f7ff fde8 	bl	8001700 <NRF24L01_Clear_IRQ_Flag>
	                AW_5BYTES },
	        { SETUP_RETR, ARD_4000US | (REPEAT_CNT & 0x0F) }, { RF_CH, 60 }, {
	                RF_SETUP, 0x26 } };

	// 使用DMA批量写入寄存器配置
	for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e036      	b.n	8001ba4 <RF24L01_Init_DMA+0x98>
	{
		uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 8001b36:	4a26      	ldr	r2, [pc, #152]	@ (8001bd0 <RF24L01_Init_DMA+0xc4>)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	703b      	strb	r3, [r7, #0]
		        init_config[i].val };
 8001b46:	4a22      	ldr	r2, [pc, #136]	@ (8001bd0 <RF24L01_Init_DMA+0xc4>)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	785b      	ldrb	r3, [r3, #1]
		uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 8001b50:	707b      	strb	r3, [r7, #1]

		RF24L01_SET_CS_LOW();
 8001b52:	2200      	movs	r2, #0
 8001b54:	2102      	movs	r1, #2
 8001b56:	481d      	ldr	r0, [pc, #116]	@ (8001bcc <RF24L01_Init_DMA+0xc0>)
 8001b58:	f001 fab6 	bl	80030c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4619      	mov	r1, r3
 8001b62:	481c      	ldr	r0, [pc, #112]	@ (8001bd4 <RF24L01_Init_DMA+0xc8>)
 8001b64:	f003 ff72 	bl	8005a4c <HAL_SPI_Transmit_DMA>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001b68:	bf00      	nop
 8001b6a:	481a      	ldr	r0, [pc, #104]	@ (8001bd4 <RF24L01_Init_DMA+0xc8>)
 8001b6c:	f004 fa41 	bl	8005ff2 <HAL_SPI_GetState>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d1f9      	bne.n	8001b6a <RF24L01_Init_DMA+0x5e>
		RF24L01_SET_CS_HIGH();
 8001b76:	2201      	movs	r2, #1
 8001b78:	2102      	movs	r1, #2
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <RF24L01_Init_DMA+0xc0>)
 8001b7c:	f001 faa4 	bl	80030c8 <HAL_GPIO_WritePin>

		// 添加必要的延时(某些寄存器写入后需要稳定时间)
		if (init_config[i].reg == CONFIG || init_config[i].reg == RF_SETUP)
 8001b80:	4a13      	ldr	r2, [pc, #76]	@ (8001bd0 <RF24L01_Init_DMA+0xc4>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <RF24L01_Init_DMA+0x8c>
 8001b8c:	4a10      	ldr	r2, [pc, #64]	@ (8001bd0 <RF24L01_Init_DMA+0xc4>)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001b94:	2b06      	cmp	r3, #6
 8001b96:	d102      	bne.n	8001b9e <RF24L01_Init_DMA+0x92>
		{
			HAL_Delay(1);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f000 fd31 	bl	8002600 <HAL_Delay>
	for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d9c5      	bls.n	8001b36 <RF24L01_Init_DMA+0x2a>
		}
	}

	// 设置地址(使用DMA版本)
	NRF24L01_Set_TxAddr_DMA(&addr[0], 5);       // 设置TX地址
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2105      	movs	r1, #5
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fdd0 	bl	8001754 <NRF24L01_Set_TxAddr_DMA>
	NRF24L01_Set_RxAddr_DMA(0, &addr[0], 5);    // 设置RX地址
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2205      	movs	r2, #5
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff fe02 	bl	80017c4 <NRF24L01_Set_RxAddr_DMA>

	// 可选的速度和功率设置
	// NRF24L01_Set_Speed_DMA(SPEED_1M);
	// NRF24L01_Set_Power_DMA(POWER_F18DBM);
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	08009054 	.word	0x08009054
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	0800905c 	.word	0x0800905c
 8001bd4:	200001c8 	.word	0x200001c8

08001bd8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bde:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <MX_SPI1_Init+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001be4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c0c:	2218      	movs	r2, #24
 8001c0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c24:	220a      	movs	r2, #10
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c2a:	f003 fce1 	bl	80055f0 <HAL_SPI_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c34:	f7ff fc59 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200001c8 	.word	0x200001c8
 8001c40:	40013000 	.word	0x40013000

08001c44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a47      	ldr	r2, [pc, #284]	@ (8001d7c <HAL_SPI_MspInit+0x138>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	f040 8086 	bne.w	8001d72 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c66:	4b46      	ldr	r3, [pc, #280]	@ (8001d80 <HAL_SPI_MspInit+0x13c>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	4a45      	ldr	r2, [pc, #276]	@ (8001d80 <HAL_SPI_MspInit+0x13c>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c70:	6193      	str	r3, [r2, #24]
 8001c72:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <HAL_SPI_MspInit+0x13c>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <HAL_SPI_MspInit+0x13c>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a3f      	ldr	r2, [pc, #252]	@ (8001d80 <HAL_SPI_MspInit+0x13c>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <HAL_SPI_MspInit+0x13c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c96:	23a0      	movs	r3, #160	@ 0xa0
 8001c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4836      	ldr	r0, [pc, #216]	@ (8001d84 <HAL_SPI_MspInit+0x140>)
 8001caa:	f001 f889 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cae:	2340      	movs	r3, #64	@ 0x40
 8001cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4830      	ldr	r0, [pc, #192]	@ (8001d84 <HAL_SPI_MspInit+0x140>)
 8001cc2:	f001 f87d 	bl	8002dc0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001cc6:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001cc8:	4a30      	ldr	r2, [pc, #192]	@ (8001d8c <HAL_SPI_MspInit+0x148>)
 8001cca:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cde:	4b2a      	ldr	r3, [pc, #168]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce4:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001cea:	4b27      	ldr	r3, [pc, #156]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cf0:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001cf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001cf8:	4823      	ldr	r0, [pc, #140]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001cfa:	f000 fdb3 	bl	8002864 <HAL_DMA_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001d04:	f7ff fbf1 	bl	80014ea <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d88 <HAL_SPI_MspInit+0x144>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d16:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <HAL_SPI_MspInit+0x150>)
 8001d18:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d46:	4812      	ldr	r0, [pc, #72]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d48:	f000 fd8c 	bl	8002864 <HAL_DMA_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001d52:	f7ff fbca 	bl	80014ea <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d5a:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <HAL_SPI_MspInit+0x14c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2023      	movs	r0, #35	@ 0x23
 8001d68:	f000 fd45 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d6c:	2023      	movs	r0, #35	@ 0x23
 8001d6e:	f000 fd5e 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40013000 	.word	0x40013000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010800 	.word	0x40010800
 8001d88:	20000220 	.word	0x20000220
 8001d8c:	4002001c 	.word	0x4002001c
 8001d90:	20000264 	.word	0x20000264
 8001d94:	40020030 	.word	0x40020030

08001d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_MspInit+0x5c>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	4a14      	ldr	r2, [pc, #80]	@ (8001df4 <HAL_MspInit+0x5c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6193      	str	r3, [r2, #24]
 8001daa:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_MspInit+0x5c>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <HAL_MspInit+0x5c>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a0e      	ldr	r2, [pc, #56]	@ (8001df4 <HAL_MspInit+0x5c>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	61d3      	str	r3, [r2, #28]
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <HAL_MspInit+0x5c>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_MspInit+0x60>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_MspInit+0x60>)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <NMI_Handler+0x4>

08001e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <MemManage_Handler+0x4>

08001e14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 fbbc 	bl	80025c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <DMA1_Channel2_IRQHandler+0x10>)
 8001e5a:	f000 fe71 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000220 	.word	0x20000220

08001e68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <DMA1_Channel3_IRQHandler+0x10>)
 8001e6e:	f000 fe67 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000264 	.word	0x20000264

08001e7c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <DMA1_Channel5_IRQHandler+0x10>)
 8001e82:	f000 fe5d 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000344 	.word	0x20000344

08001e90 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <DMA1_Channel6_IRQHandler+0x10>)
 8001e96:	f000 fe53 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000015c 	.word	0x2000015c

08001ea4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <DMA1_Channel7_IRQHandler+0x10>)
 8001eaa:	f000 fe49 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000118 	.word	0x20000118

08001eb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <TIM1_UP_IRQHandler+0x10>)
 8001ebe:	f004 fc97 	bl	80067f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200002b4 	.word	0x200002b4

08001ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <TIM2_IRQHandler+0x10>)
 8001ed2:	f004 fc8d 	bl	80067f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200002fc 	.word	0x200002fc

08001ee0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	@ (8001ef0 <I2C1_EV_IRQHandler+0x10>)
 8001ee6:	f001 fa79 	bl	80033dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200000c4 	.word	0x200000c4

08001ef4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ef8:	4802      	ldr	r0, [pc, #8]	@ (8001f04 <I2C1_ER_IRQHandler+0x10>)
 8001efa:	f001 fbe0 	bl	80036be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200000c4 	.word	0x200000c4

08001f08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <SPI1_IRQHandler+0x10>)
 8001f0e:	f003 ff4b 	bl	8005da8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200001c8 	.word	0x200001c8

08001f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <USART1_IRQHandler+0x10>)
 8001f22:	f005 fa7b 	bl	800741c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000388 	.word	0x20000388

08001f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <_kill>:

int _kill(int pid, int sig)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f48:	f006 f978 	bl	800823c <__errno>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2216      	movs	r2, #22
 8001f50:	601a      	str	r2, [r3, #0]
  return -1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_exit>:

void _exit (int status)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f66:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffe7 	bl	8001f3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <_exit+0x12>

08001f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e00a      	b.n	8001f9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f86:	f3af 8000 	nop.w
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbf0      	blt.n	8001f86 <_read+0x12>
  }

  return len;
 8001fa4:	687b      	ldr	r3, [r7, #4]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e009      	b.n	8001fd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	60ba      	str	r2, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbf1      	blt.n	8001fc0 <_write+0x12>
  }
  return len;
 8001fdc:	687b      	ldr	r3, [r7, #4]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_close>:

int _close(int file)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800200c:	605a      	str	r2, [r3, #4]
  return 0;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <_isatty>:

int _isatty(int file)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f006 f8e0 	bl	800823c <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20005000 	.word	0x20005000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	200002a8 	.word	0x200002a8
 80020b0:	20000520 	.word	0x20000520

080020b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d4:	463b      	mov	r3, r7
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <MX_TIM1_Init+0x9c>)
 80020de:	4a20      	ldr	r2, [pc, #128]	@ (8002160 <MX_TIM1_Init+0xa0>)
 80020e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <MX_TIM1_Init+0x9c>)
 80020e4:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80020e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_TIM1_Init+0x9c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_TIM1_Init+0x9c>)
 80020f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80020f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <MX_TIM1_Init+0x9c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020fe:	4b17      	ldr	r3, [pc, #92]	@ (800215c <MX_TIM1_Init+0x9c>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002104:	4b15      	ldr	r3, [pc, #84]	@ (800215c <MX_TIM1_Init+0x9c>)
 8002106:	2280      	movs	r2, #128	@ 0x80
 8002108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800210a:	4814      	ldr	r0, [pc, #80]	@ (800215c <MX_TIM1_Init+0x9c>)
 800210c:	f004 f9d5 	bl	80064ba <HAL_TIM_Base_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002116:	f7ff f9e8 	bl	80014ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800211e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	4619      	mov	r1, r3
 8002126:	480d      	ldr	r0, [pc, #52]	@ (800215c <MX_TIM1_Init+0x9c>)
 8002128:	f004 fd14 	bl	8006b54 <HAL_TIM_ConfigClockSource>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002132:	f7ff f9da 	bl	80014ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213e:	463b      	mov	r3, r7
 8002140:	4619      	mov	r1, r3
 8002142:	4806      	ldr	r0, [pc, #24]	@ (800215c <MX_TIM1_Init+0x9c>)
 8002144:	f005 f8aa 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800214e:	f7ff f9cc 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200002b4 	.word	0x200002b4
 8002160:	40012c00 	.word	0x40012c00

08002164 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08e      	sub	sp, #56	@ 0x38
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	f107 0320 	add.w	r3, r7, #32
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002194:	4b44      	ldr	r3, [pc, #272]	@ (80022a8 <MX_TIM2_Init+0x144>)
 8002196:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800219a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800219c:	4b42      	ldr	r3, [pc, #264]	@ (80022a8 <MX_TIM2_Init+0x144>)
 800219e:	2200      	movs	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b41      	ldr	r3, [pc, #260]	@ (80022a8 <MX_TIM2_Init+0x144>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 80021a8:	4b3f      	ldr	r3, [pc, #252]	@ (80022a8 <MX_TIM2_Init+0x144>)
 80021aa:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80021ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b0:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <MX_TIM2_Init+0x144>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021b6:	4b3c      	ldr	r3, [pc, #240]	@ (80022a8 <MX_TIM2_Init+0x144>)
 80021b8:	2280      	movs	r2, #128	@ 0x80
 80021ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021bc:	483a      	ldr	r0, [pc, #232]	@ (80022a8 <MX_TIM2_Init+0x144>)
 80021be:	f004 f97c 	bl	80064ba <HAL_TIM_Base_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021c8:	f7ff f98f 	bl	80014ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021d6:	4619      	mov	r1, r3
 80021d8:	4833      	ldr	r0, [pc, #204]	@ (80022a8 <MX_TIM2_Init+0x144>)
 80021da:	f004 fcbb 	bl	8006b54 <HAL_TIM_ConfigClockSource>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021e4:	f7ff f981 	bl	80014ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021e8:	482f      	ldr	r0, [pc, #188]	@ (80022a8 <MX_TIM2_Init+0x144>)
 80021ea:	f004 fa07 	bl	80065fc <HAL_TIM_PWM_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80021f4:	f7ff f979 	bl	80014ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002200:	f107 0320 	add.w	r3, r7, #32
 8002204:	4619      	mov	r1, r3
 8002206:	4828      	ldr	r0, [pc, #160]	@ (80022a8 <MX_TIM2_Init+0x144>)
 8002208:	f005 f848 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002212:	f7ff f96a 	bl	80014ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002216:	2360      	movs	r3, #96	@ 0x60
 8002218:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = Rpwm_in1;
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <MX_TIM2_Init+0x148>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002226:	2304      	movs	r3, #4
 8002228:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2200      	movs	r2, #0
 800222e:	4619      	mov	r1, r3
 8002230:	481d      	ldr	r0, [pc, #116]	@ (80022a8 <MX_TIM2_Init+0x144>)
 8002232:	f004 fbcd 	bl	80069d0 <HAL_TIM_PWM_ConfigChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800223c:	f7ff f955 	bl	80014ea <Error_Handler>
  }
  sConfigOC.Pulse = Rpwm_in2;
 8002240:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <MX_TIM2_Init+0x14c>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2204      	movs	r2, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4816      	ldr	r0, [pc, #88]	@ (80022a8 <MX_TIM2_Init+0x144>)
 8002250:	f004 fbbe 	bl	80069d0 <HAL_TIM_PWM_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800225a:	f7ff f946 	bl	80014ea <Error_Handler>
  }
  sConfigOC.Pulse = Lpwm_in1;
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <MX_TIM2_Init+0x150>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2208      	movs	r2, #8
 800226a:	4619      	mov	r1, r3
 800226c:	480e      	ldr	r0, [pc, #56]	@ (80022a8 <MX_TIM2_Init+0x144>)
 800226e:	f004 fbaf 	bl	80069d0 <HAL_TIM_PWM_ConfigChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8002278:	f7ff f937 	bl	80014ea <Error_Handler>
  }
  sConfigOC.Pulse = Lpwm_in2;
 800227c:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <MX_TIM2_Init+0x154>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	220c      	movs	r2, #12
 8002288:	4619      	mov	r1, r3
 800228a:	4807      	ldr	r0, [pc, #28]	@ (80022a8 <MX_TIM2_Init+0x144>)
 800228c:	f004 fba0 	bl	80069d0 <HAL_TIM_PWM_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 8002296:	f7ff f928 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800229a:	4803      	ldr	r0, [pc, #12]	@ (80022a8 <MX_TIM2_Init+0x144>)
 800229c:	f000 f87a 	bl	8002394 <HAL_TIM_MspPostInit>

}
 80022a0:	bf00      	nop
 80022a2:	3738      	adds	r7, #56	@ 0x38
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200002fc 	.word	0x200002fc
 80022ac:	200002ac 	.word	0x200002ac
 80022b0:	200002ae 	.word	0x200002ae
 80022b4:	200002b0 	.word	0x200002b0
 80022b8:	200002b2 	.word	0x200002b2

080022bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002384 <HAL_TIM_Base_MspInit+0xc8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d114      	bne.n	80022f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <HAL_TIM_Base_MspInit+0xcc>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002388 <HAL_TIM_Base_MspInit+0xcc>)
 80022d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022d8:	6193      	str	r3, [r2, #24]
 80022da:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <HAL_TIM_Base_MspInit+0xcc>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2019      	movs	r0, #25
 80022ec:	f000 fa83 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022f0:	2019      	movs	r0, #25
 80022f2:	f000 fa9c 	bl	800282e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022f6:	e040      	b.n	800237a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002300:	d13b      	bne.n	800237a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002302:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <HAL_TIM_Base_MspInit+0xcc>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a20      	ldr	r2, [pc, #128]	@ (8002388 <HAL_TIM_Base_MspInit+0xcc>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	61d3      	str	r3, [r2, #28]
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <HAL_TIM_Base_MspInit+0xcc>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800231a:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 800231c:	4a1c      	ldr	r2, [pc, #112]	@ (8002390 <HAL_TIM_Base_MspInit+0xd4>)
 800231e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 8002322:	2200      	movs	r2, #0
 8002324:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002326:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800232c:	4b17      	ldr	r3, [pc, #92]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 800232e:	2280      	movs	r2, #128	@ 0x80
 8002330:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002332:	4b16      	ldr	r3, [pc, #88]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 8002334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002338:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 800233c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002340:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002342:	4b12      	ldr	r3, [pc, #72]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002348:	4b10      	ldr	r3, [pc, #64]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800234e:	480f      	ldr	r0, [pc, #60]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 8002350:	f000 fa88 	bl	8002864 <HAL_DMA_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_TIM_Base_MspInit+0xa2>
      Error_Handler();
 800235a:	f7ff f8c6 	bl	80014ea <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 8002362:	625a      	str	r2, [r3, #36]	@ 0x24
 8002364:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_TIM_Base_MspInit+0xd0>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	201c      	movs	r0, #28
 8002370:	f000 fa41 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002374:	201c      	movs	r0, #28
 8002376:	f000 fa5a 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40021000 	.word	0x40021000
 800238c:	20000344 	.word	0x20000344
 8002390:	40020058 	.word	0x40020058

08002394 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b2:	d117      	bne.n	80023e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b4:	4b0d      	ldr	r3, [pc, #52]	@ (80023ec <HAL_TIM_MspPostInit+0x58>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a0c      	ldr	r2, [pc, #48]	@ (80023ec <HAL_TIM_MspPostInit+0x58>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <HAL_TIM_MspPostInit+0x58>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Rpwm_in1_Pin|Rpwm_in2_Pin|Lpwm_in1_Pin|Lpwm_in2_Pin;
 80023cc:	230f      	movs	r3, #15
 80023ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4619      	mov	r1, r3
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <HAL_TIM_MspPostInit+0x5c>)
 80023e0:	f000 fcee 	bl	8002dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023e4:	bf00      	nop
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010800 	.word	0x40010800

080023f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <MX_USART1_UART_Init+0x50>)
 80023fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 800241a:	220c      	movs	r2, #12
 800241c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800242a:	4805      	ldr	r0, [pc, #20]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 800242c:	f004 ffa6 	bl	800737c <HAL_UART_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002436:	f7ff f858 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000388 	.word	0x20000388
 8002444:	40013800 	.word	0x40013800

08002448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a20      	ldr	r2, [pc, #128]	@ (80024e4 <HAL_UART_MspInit+0x9c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d139      	bne.n	80024dc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002468:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <HAL_UART_MspInit+0xa0>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a1e      	ldr	r2, [pc, #120]	@ (80024e8 <HAL_UART_MspInit+0xa0>)
 800246e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b1c      	ldr	r3, [pc, #112]	@ (80024e8 <HAL_UART_MspInit+0xa0>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_UART_MspInit+0xa0>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a18      	ldr	r2, [pc, #96]	@ (80024e8 <HAL_UART_MspInit+0xa0>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <HAL_UART_MspInit+0xa0>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800249c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	4619      	mov	r1, r3
 80024ac:	480f      	ldr	r0, [pc, #60]	@ (80024ec <HAL_UART_MspInit+0xa4>)
 80024ae:	f000 fc87 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0310 	add.w	r3, r7, #16
 80024c4:	4619      	mov	r1, r3
 80024c6:	4809      	ldr	r0, [pc, #36]	@ (80024ec <HAL_UART_MspInit+0xa4>)
 80024c8:	f000 fc7a 	bl	8002dc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	2025      	movs	r0, #37	@ 0x25
 80024d2:	f000 f990 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024d6:	2025      	movs	r0, #37	@ 0x25
 80024d8:	f000 f9a9 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010800 	.word	0x40010800

080024f0 <Reset_Handler>:
 80024f0:	f7ff fde0 	bl	80020b4 <SystemInit>
 80024f4:	480b      	ldr	r0, [pc, #44]	@ (8002524 <LoopFillZerobss+0xe>)
 80024f6:	490c      	ldr	r1, [pc, #48]	@ (8002528 <LoopFillZerobss+0x12>)
 80024f8:	4a0c      	ldr	r2, [pc, #48]	@ (800252c <LoopFillZerobss+0x16>)
 80024fa:	2300      	movs	r3, #0
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:
 80024fe:	58d4      	ldr	r4, [r2, r3]
 8002500:	50c4      	str	r4, [r0, r3]
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:
 8002504:	18c4      	adds	r4, r0, r3
 8002506:	428c      	cmp	r4, r1
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
 800250a:	4a09      	ldr	r2, [pc, #36]	@ (8002530 <LoopFillZerobss+0x1a>)
 800250c:	4c09      	ldr	r4, [pc, #36]	@ (8002534 <LoopFillZerobss+0x1e>)
 800250e:	2300      	movs	r3, #0
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:
 8002516:	42a2      	cmp	r2, r4
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>
 800251a:	f005 fe95 	bl	8008248 <__libc_init_array>
 800251e:	f7fe ff29 	bl	8001374 <main>
 8002522:	4770      	bx	lr
 8002524:	20000000 	.word	0x20000000
 8002528:	200000a0 	.word	0x200000a0
 800252c:	08009284 	.word	0x08009284
 8002530:	200000a0 	.word	0x200000a0
 8002534:	20000520 	.word	0x20000520

08002538 <ADC1_2_IRQHandler>:
 8002538:	e7fe      	b.n	8002538 <ADC1_2_IRQHandler>
	...

0800253c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <HAL_Init+0x28>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a07      	ldr	r2, [pc, #28]	@ (8002564 <HAL_Init+0x28>)
 8002546:	f043 0310 	orr.w	r3, r3, #16
 800254a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254c:	2003      	movs	r0, #3
 800254e:	f000 f947 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002552:	200f      	movs	r0, #15
 8002554:	f000 f808 	bl	8002568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002558:	f7ff fc1e 	bl	8001d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002570:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_InitTick+0x54>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_InitTick+0x58>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800257e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f95f 	bl	800284a <HAL_SYSTICK_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00e      	b.n	80025b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0f      	cmp	r3, #15
 800259a:	d80a      	bhi.n	80025b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f000 f927 	bl	80027f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a8:	4a06      	ldr	r2, [pc, #24]	@ (80025c4 <HAL_InitTick+0x5c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000038 	.word	0x20000038
 80025c0:	20000040 	.word	0x20000040
 80025c4:	2000003c 	.word	0x2000003c

080025c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_IncTick+0x1c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_IncTick+0x20>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a03      	ldr	r2, [pc, #12]	@ (80025e8 <HAL_IncTick+0x20>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	20000040 	.word	0x20000040
 80025e8:	200003d0 	.word	0x200003d0

080025ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return uwTick;
 80025f0:	4b02      	ldr	r3, [pc, #8]	@ (80025fc <HAL_GetTick+0x10>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	200003d0 	.word	0x200003d0

08002600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff fff0 	bl	80025ec <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d005      	beq.n	8002626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_Delay+0x44>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002626:	bf00      	nop
 8002628:	f7ff ffe0 	bl	80025ec <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d8f7      	bhi.n	8002628 <HAL_Delay+0x28>
  {
  }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000040 	.word	0x20000040

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	@ (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4906      	ldr	r1, [pc, #24]	@ (80026e0 <__NVIC_EnableIRQ+0x34>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	@ (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	@ (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	@ 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff90 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff2d 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff42 	bl	8002690 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff90 	bl	8002738 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5f 	bl	80026e4 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff35 	bl	80026ac <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e043      	b.n	8002902 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4b22      	ldr	r3, [pc, #136]	@ (800290c <HAL_DMA_Init+0xa8>)
 8002882:	4413      	add	r3, r2
 8002884:	4a22      	ldr	r2, [pc, #136]	@ (8002910 <HAL_DMA_Init+0xac>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	009a      	lsls	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1f      	ldr	r2, [pc, #124]	@ (8002914 <HAL_DMA_Init+0xb0>)
 8002896:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80028b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	bffdfff8 	.word	0xbffdfff8
 8002910:	cccccccd 	.word	0xcccccccd
 8002914:	40020000 	.word	0x40020000

08002918 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_DMA_Start_IT+0x20>
 8002934:	2302      	movs	r3, #2
 8002936:	e04b      	b.n	80029d0 <HAL_DMA_Start_IT+0xb8>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d13a      	bne.n	80029c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f9f8 	bl	8002d66 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 020e 	orr.w	r2, r2, #14
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e00f      	b.n	80029b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0204 	bic.w	r2, r2, #4
 800299e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 020a 	orr.w	r2, r2, #10
 80029ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e005      	b.n	80029ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d008      	beq.n	8002a02 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2204      	movs	r2, #4
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e020      	b.n	8002a44 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 020e 	bic.w	r2, r2, #14
 8002a10:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d005      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	e051      	b.n	8002b18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 020e 	bic.w	r2, r2, #14
 8002a82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a22      	ldr	r2, [pc, #136]	@ (8002b24 <HAL_DMA_Abort_IT+0xd4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d029      	beq.n	8002af2 <HAL_DMA_Abort_IT+0xa2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a21      	ldr	r2, [pc, #132]	@ (8002b28 <HAL_DMA_Abort_IT+0xd8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d022      	beq.n	8002aee <HAL_DMA_Abort_IT+0x9e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	@ (8002b2c <HAL_DMA_Abort_IT+0xdc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01a      	beq.n	8002ae8 <HAL_DMA_Abort_IT+0x98>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_DMA_Abort_IT+0xe0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d012      	beq.n	8002ae2 <HAL_DMA_Abort_IT+0x92>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b34 <HAL_DMA_Abort_IT+0xe4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00a      	beq.n	8002adc <HAL_DMA_Abort_IT+0x8c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1b      	ldr	r2, [pc, #108]	@ (8002b38 <HAL_DMA_Abort_IT+0xe8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d102      	bne.n	8002ad6 <HAL_DMA_Abort_IT+0x86>
 8002ad0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ad4:	e00e      	b.n	8002af4 <HAL_DMA_Abort_IT+0xa4>
 8002ad6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ada:	e00b      	b.n	8002af4 <HAL_DMA_Abort_IT+0xa4>
 8002adc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ae0:	e008      	b.n	8002af4 <HAL_DMA_Abort_IT+0xa4>
 8002ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae6:	e005      	b.n	8002af4 <HAL_DMA_Abort_IT+0xa4>
 8002ae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aec:	e002      	b.n	8002af4 <HAL_DMA_Abort_IT+0xa4>
 8002aee:	2310      	movs	r3, #16
 8002af0:	e000      	b.n	8002af4 <HAL_DMA_Abort_IT+0xa4>
 8002af2:	2301      	movs	r3, #1
 8002af4:	4a11      	ldr	r2, [pc, #68]	@ (8002b3c <HAL_DMA_Abort_IT+0xec>)
 8002af6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
    } 
  }
  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40020008 	.word	0x40020008
 8002b28:	4002001c 	.word	0x4002001c
 8002b2c:	40020030 	.word	0x40020030
 8002b30:	40020044 	.word	0x40020044
 8002b34:	40020058 	.word	0x40020058
 8002b38:	4002006c 	.word	0x4002006c
 8002b3c:	40020000 	.word	0x40020000

08002b40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d04f      	beq.n	8002c08 <HAL_DMA_IRQHandler+0xc8>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d04a      	beq.n	8002c08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a66      	ldr	r2, [pc, #408]	@ (8002d30 <HAL_DMA_IRQHandler+0x1f0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d029      	beq.n	8002bee <HAL_DMA_IRQHandler+0xae>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a65      	ldr	r2, [pc, #404]	@ (8002d34 <HAL_DMA_IRQHandler+0x1f4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_DMA_IRQHandler+0xaa>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a63      	ldr	r2, [pc, #396]	@ (8002d38 <HAL_DMA_IRQHandler+0x1f8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01a      	beq.n	8002be4 <HAL_DMA_IRQHandler+0xa4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a62      	ldr	r2, [pc, #392]	@ (8002d3c <HAL_DMA_IRQHandler+0x1fc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d012      	beq.n	8002bde <HAL_DMA_IRQHandler+0x9e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a60      	ldr	r2, [pc, #384]	@ (8002d40 <HAL_DMA_IRQHandler+0x200>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x98>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d44 <HAL_DMA_IRQHandler+0x204>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <HAL_DMA_IRQHandler+0x92>
 8002bcc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bd0:	e00e      	b.n	8002bf0 <HAL_DMA_IRQHandler+0xb0>
 8002bd2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bd6:	e00b      	b.n	8002bf0 <HAL_DMA_IRQHandler+0xb0>
 8002bd8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bdc:	e008      	b.n	8002bf0 <HAL_DMA_IRQHandler+0xb0>
 8002bde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002be2:	e005      	b.n	8002bf0 <HAL_DMA_IRQHandler+0xb0>
 8002be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002be8:	e002      	b.n	8002bf0 <HAL_DMA_IRQHandler+0xb0>
 8002bea:	2340      	movs	r3, #64	@ 0x40
 8002bec:	e000      	b.n	8002bf0 <HAL_DMA_IRQHandler+0xb0>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	4a55      	ldr	r2, [pc, #340]	@ (8002d48 <HAL_DMA_IRQHandler+0x208>)
 8002bf2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8094 	beq.w	8002d26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c06:	e08e      	b.n	8002d26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d056      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x186>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d051      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 020a 	bic.w	r2, r2, #10
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a38      	ldr	r2, [pc, #224]	@ (8002d30 <HAL_DMA_IRQHandler+0x1f0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d029      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x166>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a37      	ldr	r2, [pc, #220]	@ (8002d34 <HAL_DMA_IRQHandler+0x1f4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x162>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a35      	ldr	r2, [pc, #212]	@ (8002d38 <HAL_DMA_IRQHandler+0x1f8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01a      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x15c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a34      	ldr	r2, [pc, #208]	@ (8002d3c <HAL_DMA_IRQHandler+0x1fc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d012      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x156>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a32      	ldr	r2, [pc, #200]	@ (8002d40 <HAL_DMA_IRQHandler+0x200>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00a      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x150>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a31      	ldr	r2, [pc, #196]	@ (8002d44 <HAL_DMA_IRQHandler+0x204>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d102      	bne.n	8002c8a <HAL_DMA_IRQHandler+0x14a>
 8002c84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c88:	e00e      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x168>
 8002c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8e:	e00b      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x168>
 8002c90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c94:	e008      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x168>
 8002c96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c9a:	e005      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x168>
 8002c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca0:	e002      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x168>
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e000      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x168>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	4a27      	ldr	r2, [pc, #156]	@ (8002d48 <HAL_DMA_IRQHandler+0x208>)
 8002caa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d034      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cc4:	e02f      	b.n	8002d26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	2208      	movs	r2, #8
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d028      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x1e8>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 020e 	bic.w	r2, r2, #14
 8002cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
    }
  }
  return;
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
}
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40020008 	.word	0x40020008
 8002d34:	4002001c 	.word	0x4002001c
 8002d38:	40020030 	.word	0x40020030
 8002d3c:	40020044 	.word	0x40020044
 8002d40:	40020058 	.word	0x40020058
 8002d44:	4002006c 	.word	0x4002006c
 8002d48:	40020000 	.word	0x40020000

08002d4c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d5a:	b2db      	uxtb	r3, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d108      	bne.n	8002da6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002da4:	e007      	b.n	8002db6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	60da      	str	r2, [r3, #12]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b08b      	sub	sp, #44	@ 0x2c
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd2:	e169      	b.n	80030a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f040 8158 	bne.w	80030a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4a9a      	ldr	r2, [pc, #616]	@ (8003060 <HAL_GPIO_Init+0x2a0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d05e      	beq.n	8002eba <HAL_GPIO_Init+0xfa>
 8002dfc:	4a98      	ldr	r2, [pc, #608]	@ (8003060 <HAL_GPIO_Init+0x2a0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d875      	bhi.n	8002eee <HAL_GPIO_Init+0x12e>
 8002e02:	4a98      	ldr	r2, [pc, #608]	@ (8003064 <HAL_GPIO_Init+0x2a4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d058      	beq.n	8002eba <HAL_GPIO_Init+0xfa>
 8002e08:	4a96      	ldr	r2, [pc, #600]	@ (8003064 <HAL_GPIO_Init+0x2a4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d86f      	bhi.n	8002eee <HAL_GPIO_Init+0x12e>
 8002e0e:	4a96      	ldr	r2, [pc, #600]	@ (8003068 <HAL_GPIO_Init+0x2a8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d052      	beq.n	8002eba <HAL_GPIO_Init+0xfa>
 8002e14:	4a94      	ldr	r2, [pc, #592]	@ (8003068 <HAL_GPIO_Init+0x2a8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d869      	bhi.n	8002eee <HAL_GPIO_Init+0x12e>
 8002e1a:	4a94      	ldr	r2, [pc, #592]	@ (800306c <HAL_GPIO_Init+0x2ac>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d04c      	beq.n	8002eba <HAL_GPIO_Init+0xfa>
 8002e20:	4a92      	ldr	r2, [pc, #584]	@ (800306c <HAL_GPIO_Init+0x2ac>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d863      	bhi.n	8002eee <HAL_GPIO_Init+0x12e>
 8002e26:	4a92      	ldr	r2, [pc, #584]	@ (8003070 <HAL_GPIO_Init+0x2b0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d046      	beq.n	8002eba <HAL_GPIO_Init+0xfa>
 8002e2c:	4a90      	ldr	r2, [pc, #576]	@ (8003070 <HAL_GPIO_Init+0x2b0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d85d      	bhi.n	8002eee <HAL_GPIO_Init+0x12e>
 8002e32:	2b12      	cmp	r3, #18
 8002e34:	d82a      	bhi.n	8002e8c <HAL_GPIO_Init+0xcc>
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d859      	bhi.n	8002eee <HAL_GPIO_Init+0x12e>
 8002e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <HAL_GPIO_Init+0x80>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002ebb 	.word	0x08002ebb
 8002e44:	08002e95 	.word	0x08002e95
 8002e48:	08002ea7 	.word	0x08002ea7
 8002e4c:	08002ee9 	.word	0x08002ee9
 8002e50:	08002eef 	.word	0x08002eef
 8002e54:	08002eef 	.word	0x08002eef
 8002e58:	08002eef 	.word	0x08002eef
 8002e5c:	08002eef 	.word	0x08002eef
 8002e60:	08002eef 	.word	0x08002eef
 8002e64:	08002eef 	.word	0x08002eef
 8002e68:	08002eef 	.word	0x08002eef
 8002e6c:	08002eef 	.word	0x08002eef
 8002e70:	08002eef 	.word	0x08002eef
 8002e74:	08002eef 	.word	0x08002eef
 8002e78:	08002eef 	.word	0x08002eef
 8002e7c:	08002eef 	.word	0x08002eef
 8002e80:	08002eef 	.word	0x08002eef
 8002e84:	08002e9d 	.word	0x08002e9d
 8002e88:	08002eb1 	.word	0x08002eb1
 8002e8c:	4a79      	ldr	r2, [pc, #484]	@ (8003074 <HAL_GPIO_Init+0x2b4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e92:	e02c      	b.n	8002eee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	623b      	str	r3, [r7, #32]
          break;
 8002e9a:	e029      	b.n	8002ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	623b      	str	r3, [r7, #32]
          break;
 8002ea4:	e024      	b.n	8002ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	3308      	adds	r3, #8
 8002eac:	623b      	str	r3, [r7, #32]
          break;
 8002eae:	e01f      	b.n	8002ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	623b      	str	r3, [r7, #32]
          break;
 8002eb8:	e01a      	b.n	8002ef0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	623b      	str	r3, [r7, #32]
          break;
 8002ec6:	e013      	b.n	8002ef0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	611a      	str	r2, [r3, #16]
          break;
 8002eda:	e009      	b.n	8002ef0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002edc:	2308      	movs	r3, #8
 8002ede:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	615a      	str	r2, [r3, #20]
          break;
 8002ee6:	e003      	b.n	8002ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
          break;
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x130>
          break;
 8002eee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2bff      	cmp	r3, #255	@ 0xff
 8002ef4:	d801      	bhi.n	8002efa <HAL_GPIO_Init+0x13a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	e001      	b.n	8002efe <HAL_GPIO_Init+0x13e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2bff      	cmp	r3, #255	@ 0xff
 8002f04:	d802      	bhi.n	8002f0c <HAL_GPIO_Init+0x14c>
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	e002      	b.n	8002f12 <HAL_GPIO_Init+0x152>
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	3b08      	subs	r3, #8
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	210f      	movs	r1, #15
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	401a      	ands	r2, r3
 8002f24:	6a39      	ldr	r1, [r7, #32]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80b1 	beq.w	80030a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f40:	4b4d      	ldr	r3, [pc, #308]	@ (8003078 <HAL_GPIO_Init+0x2b8>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4a4c      	ldr	r2, [pc, #304]	@ (8003078 <HAL_GPIO_Init+0x2b8>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6193      	str	r3, [r2, #24]
 8002f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <HAL_GPIO_Init+0x2b8>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f58:	4a48      	ldr	r2, [pc, #288]	@ (800307c <HAL_GPIO_Init+0x2bc>)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3302      	adds	r3, #2
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	220f      	movs	r2, #15
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a40      	ldr	r2, [pc, #256]	@ (8003080 <HAL_GPIO_Init+0x2c0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d013      	beq.n	8002fac <HAL_GPIO_Init+0x1ec>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3f      	ldr	r2, [pc, #252]	@ (8003084 <HAL_GPIO_Init+0x2c4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3e      	ldr	r2, [pc, #248]	@ (8003088 <HAL_GPIO_Init+0x2c8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d007      	beq.n	8002fa4 <HAL_GPIO_Init+0x1e4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3d      	ldr	r2, [pc, #244]	@ (800308c <HAL_GPIO_Init+0x2cc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_GPIO_Init+0x1e0>
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e006      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	e004      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e002      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_GPIO_Init+0x1ee>
 8002fac:	2300      	movs	r3, #0
 8002fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb0:	f002 0203 	and.w	r2, r2, #3
 8002fb4:	0092      	lsls	r2, r2, #2
 8002fb6:	4093      	lsls	r3, r2
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fbe:	492f      	ldr	r1, [pc, #188]	@ (800307c <HAL_GPIO_Init+0x2bc>)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	492c      	ldr	r1, [pc, #176]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	4928      	ldr	r1, [pc, #160]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003000:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	4922      	ldr	r1, [pc, #136]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	60cb      	str	r3, [r1, #12]
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800300e:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	43db      	mvns	r3, r3
 8003016:	491e      	ldr	r1, [pc, #120]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003018:	4013      	ands	r3, r2
 800301a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d006      	beq.n	8003036 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	4918      	ldr	r1, [pc, #96]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	e006      	b.n	8003044 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003036:	4b16      	ldr	r3, [pc, #88]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	43db      	mvns	r3, r3
 800303e:	4914      	ldr	r1, [pc, #80]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003040:	4013      	ands	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d021      	beq.n	8003094 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003050:	4b0f      	ldr	r3, [pc, #60]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	490e      	ldr	r1, [pc, #56]	@ (8003090 <HAL_GPIO_Init+0x2d0>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e021      	b.n	80030a2 <HAL_GPIO_Init+0x2e2>
 800305e:	bf00      	nop
 8003060:	10320000 	.word	0x10320000
 8003064:	10310000 	.word	0x10310000
 8003068:	10220000 	.word	0x10220000
 800306c:	10210000 	.word	0x10210000
 8003070:	10120000 	.word	0x10120000
 8003074:	10110000 	.word	0x10110000
 8003078:	40021000 	.word	0x40021000
 800307c:	40010000 	.word	0x40010000
 8003080:	40010800 	.word	0x40010800
 8003084:	40010c00 	.word	0x40010c00
 8003088:	40011000 	.word	0x40011000
 800308c:	40011400 	.word	0x40011400
 8003090:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_GPIO_Init+0x304>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	43db      	mvns	r3, r3
 800309c:	4909      	ldr	r1, [pc, #36]	@ (80030c4 <HAL_GPIO_Init+0x304>)
 800309e:	4013      	ands	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	3301      	adds	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f47f ae8e 	bne.w	8002dd4 <HAL_GPIO_Init+0x14>
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	372c      	adds	r7, #44	@ 0x2c
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40010400 	.word	0x40010400

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030e4:	e003      	b.n	80030ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	041a      	lsls	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	611a      	str	r2, [r3, #16]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800310a:	887a      	ldrh	r2, [r7, #2]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4013      	ands	r3, r2
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43d9      	mvns	r1, r3
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	400b      	ands	r3, r1
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	611a      	str	r2, [r3, #16]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e12b      	b.n	8003396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f83e 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	@ 0x24
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800317e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800318e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003190:	f002 f9e8 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 8003194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4a81      	ldr	r2, [pc, #516]	@ (80033a0 <HAL_I2C_Init+0x274>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d807      	bhi.n	80031b0 <HAL_I2C_Init+0x84>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a80      	ldr	r2, [pc, #512]	@ (80033a4 <HAL_I2C_Init+0x278>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e006      	b.n	80031be <HAL_I2C_Init+0x92>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a7d      	ldr	r2, [pc, #500]	@ (80033a8 <HAL_I2C_Init+0x27c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e0e7      	b.n	8003396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a78      	ldr	r2, [pc, #480]	@ (80033ac <HAL_I2C_Init+0x280>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0c9b      	lsrs	r3, r3, #18
 80031d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a6a      	ldr	r2, [pc, #424]	@ (80033a0 <HAL_I2C_Init+0x274>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d802      	bhi.n	8003200 <HAL_I2C_Init+0xd4>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	3301      	adds	r3, #1
 80031fe:	e009      	b.n	8003214 <HAL_I2C_Init+0xe8>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	4a69      	ldr	r2, [pc, #420]	@ (80033b0 <HAL_I2C_Init+0x284>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	3301      	adds	r3, #1
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003226:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	495c      	ldr	r1, [pc, #368]	@ (80033a0 <HAL_I2C_Init+0x274>)
 8003230:	428b      	cmp	r3, r1
 8003232:	d819      	bhi.n	8003268 <HAL_I2C_Init+0x13c>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e59      	subs	r1, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003242:	1c59      	adds	r1, r3, #1
 8003244:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003248:	400b      	ands	r3, r1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_I2C_Init+0x138>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1e59      	subs	r1, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fbb1 f3f3 	udiv	r3, r1, r3
 800325c:	3301      	adds	r3, #1
 800325e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003262:	e051      	b.n	8003308 <HAL_I2C_Init+0x1dc>
 8003264:	2304      	movs	r3, #4
 8003266:	e04f      	b.n	8003308 <HAL_I2C_Init+0x1dc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d111      	bne.n	8003294 <HAL_I2C_Init+0x168>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1e58      	subs	r0, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e012      	b.n	80032ba <HAL_I2C_Init+0x18e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	0099      	lsls	r1, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Init+0x196>
 80032be:	2301      	movs	r3, #1
 80032c0:	e022      	b.n	8003308 <HAL_I2C_Init+0x1dc>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10e      	bne.n	80032e8 <HAL_I2C_Init+0x1bc>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e58      	subs	r0, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	440b      	add	r3, r1
 80032d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032dc:	3301      	adds	r3, #1
 80032de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032e6:	e00f      	b.n	8003308 <HAL_I2C_Init+0x1dc>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	0099      	lsls	r1, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	6809      	ldr	r1, [r1, #0]
 800330c:	4313      	orrs	r3, r2
 800330e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003336:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6911      	ldr	r1, [r2, #16]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68d2      	ldr	r2, [r2, #12]
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	430b      	orrs	r3, r1
 800334a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	000186a0 	.word	0x000186a0
 80033a4:	001e847f 	.word	0x001e847f
 80033a8:	003d08ff 	.word	0x003d08ff
 80033ac:	431bde83 	.word	0x431bde83
 80033b0:	10624dd3 	.word	0x10624dd3

080033b4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c6:	2b80      	cmp	r3, #128	@ 0x80
 80033c8:	d103      	bne.n	80033d2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003404:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b10      	cmp	r3, #16
 800340a:	d003      	beq.n	8003414 <HAL_I2C_EV_IRQHandler+0x38>
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b40      	cmp	r3, #64	@ 0x40
 8003410:	f040 80c1 	bne.w	8003596 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_I2C_EV_IRQHandler+0x6e>
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003434:	d003      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x62>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800343c:	d101      	bne.n	8003442 <HAL_I2C_EV_IRQHandler+0x66>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x68>
 8003442:	2300      	movs	r3, #0
 8003444:	2b01      	cmp	r3, #1
 8003446:	f000 8132 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x92>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	0a5b      	lsrs	r3, r3, #9
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d006      	beq.n	800346e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f001 fc9b 	bl	8004d9c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fd99 	bl	8003f9e <I2C_Master_SB>
 800346c:	e092      	b.n	8003594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	08db      	lsrs	r3, r3, #3
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <HAL_I2C_EV_IRQHandler+0xb2>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	0a5b      	lsrs	r3, r3, #9
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fe0e 	bl	80040a8 <I2C_Master_ADD10>
 800348c:	e082      	b.n	8003594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_I2C_EV_IRQHandler+0xd2>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	0a5b      	lsrs	r3, r3, #9
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fe27 	bl	80040fa <I2C_Master_ADDR>
 80034ac:	e072      	b.n	8003594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d03b      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034c8:	f000 80f3 	beq.w	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	09db      	lsrs	r3, r3, #7
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00f      	beq.n	80034f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d009      	beq.n	80034f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f9f1 	bl	80038d8 <I2C_MasterTransmit_TXE>
 80034f6:	e04d      	b.n	8003594 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80d6 	beq.w	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	0a5b      	lsrs	r3, r3, #9
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80cf 	beq.w	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003514:	7bbb      	ldrb	r3, [r7, #14]
 8003516:	2b21      	cmp	r3, #33	@ 0x21
 8003518:	d103      	bne.n	8003522 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa78 	bl	8003a10 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003520:	e0c7      	b.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	f040 80c4 	bne.w	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fae6 	bl	8003afc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003530:	e0bf      	b.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800353c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003540:	f000 80b7 	beq.w	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00f      	beq.n	8003570 <HAL_I2C_EV_IRQHandler+0x194>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	0a9b      	lsrs	r3, r3, #10
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_I2C_EV_IRQHandler+0x194>
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fb5f 	bl	8003c2c <I2C_MasterReceive_RXNE>
 800356e:	e011      	b.n	8003594 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 809a 	beq.w	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	0a5b      	lsrs	r3, r3, #9
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8093 	beq.w	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fc15 	bl	8003dbc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003592:	e08e      	b.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003594:	e08d      	b.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e007      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	085b      	lsrs	r3, r3, #1
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d012      	beq.n	80035ea <HAL_I2C_EV_IRQHandler+0x20e>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	0a5b      	lsrs	r3, r3, #9
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00c      	beq.n	80035ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035e0:	69b9      	ldr	r1, [r7, #24]
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 ffe0 	bl	80045a8 <I2C_Slave_ADDR>
 80035e8:	e066      	b.n	80036b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_I2C_EV_IRQHandler+0x22e>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	0a5b      	lsrs	r3, r3, #9
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f001 f81a 	bl	800463c <I2C_Slave_STOPF>
 8003608:	e056      	b.n	80036b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800360a:	7bbb      	ldrb	r3, [r7, #14]
 800360c:	2b21      	cmp	r3, #33	@ 0x21
 800360e:	d002      	beq.n	8003616 <HAL_I2C_EV_IRQHandler+0x23a>
 8003610:	7bbb      	ldrb	r3, [r7, #14]
 8003612:	2b29      	cmp	r3, #41	@ 0x29
 8003614:	d125      	bne.n	8003662 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	09db      	lsrs	r3, r3, #7
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00f      	beq.n	8003642 <HAL_I2C_EV_IRQHandler+0x266>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	0a9b      	lsrs	r3, r3, #10
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_I2C_EV_IRQHandler+0x266>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fef8 	bl	8004430 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003640:	e039      	b.n	80036b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d033      	beq.n	80036b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	0a5b      	lsrs	r3, r3, #9
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02d      	beq.n	80036b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 ff25 	bl	80044aa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003660:	e029      	b.n	80036b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00f      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x2b2>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	0a9b      	lsrs	r3, r3, #10
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x2b2>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 ff2f 	bl	80044ea <I2C_SlaveReceive_RXNE>
 800368c:	e014      	b.n	80036b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	0a5b      	lsrs	r3, r3, #9
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 ff5d 	bl	8004566 <I2C_SlaveReceive_BTF>
 80036ac:	e004      	b.n	80036b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b08a      	sub	sp, #40	@ 0x28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_I2C_ER_IRQHandler+0x5e>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d010      	beq.n	800371c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800370a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	0a5b      	lsrs	r3, r3, #9
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <HAL_I2C_ER_IRQHandler+0x88>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003744:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	0a9b      	lsrs	r3, r3, #10
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d03f      	beq.n	80037d2 <HAL_I2C_ER_IRQHandler+0x114>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d039      	beq.n	80037d2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800375e:	7efb      	ldrb	r3, [r7, #27]
 8003760:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003770:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003778:	7ebb      	ldrb	r3, [r7, #26]
 800377a:	2b20      	cmp	r3, #32
 800377c:	d112      	bne.n	80037a4 <HAL_I2C_ER_IRQHandler+0xe6>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10f      	bne.n	80037a4 <HAL_I2C_ER_IRQHandler+0xe6>
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	2b21      	cmp	r3, #33	@ 0x21
 8003788:	d008      	beq.n	800379c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b29      	cmp	r3, #41	@ 0x29
 800378e:	d005      	beq.n	800379c <HAL_I2C_ER_IRQHandler+0xde>
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	2b28      	cmp	r3, #40	@ 0x28
 8003794:	d106      	bne.n	80037a4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b21      	cmp	r3, #33	@ 0x21
 800379a:	d103      	bne.n	80037a4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f001 f87d 	bl	800489c <I2C_Slave_AF>
 80037a2:	e016      	b.n	80037d2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037b6:	7efb      	ldrb	r3, [r7, #27]
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d002      	beq.n	80037c2 <HAL_I2C_ER_IRQHandler+0x104>
 80037bc:	7efb      	ldrb	r3, [r7, #27]
 80037be:	2b40      	cmp	r3, #64	@ 0x40
 80037c0:	d107      	bne.n	80037d2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	0adb      	lsrs	r3, r3, #11
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00e      	beq.n	80037fc <HAL_I2C_ER_IRQHandler+0x13e>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80037fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f001 f8b8 	bl	8004984 <I2C_ITError>
  }
}
 8003814:	bf00      	nop
 8003816:	3728      	adds	r7, #40	@ 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
 8003870:	4613      	mov	r3, r2
 8003872:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d150      	bne.n	80039a0 <I2C_MasterTransmit_TXE+0xc8>
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b21      	cmp	r3, #33	@ 0x21
 8003902:	d14d      	bne.n	80039a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b08      	cmp	r3, #8
 8003908:	d01d      	beq.n	8003946 <I2C_MasterTransmit_TXE+0x6e>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b20      	cmp	r3, #32
 800390e:	d01a      	beq.n	8003946 <I2C_MasterTransmit_TXE+0x6e>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003916:	d016      	beq.n	8003946 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003926:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2211      	movs	r2, #17
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ff6c 	bl	800381c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003944:	e060      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003954:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003964:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b40      	cmp	r3, #64	@ 0x40
 800397e:	d107      	bne.n	8003990 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff81 	bl	8003890 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800398e:	e03b      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff3f 	bl	800381c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800399e:	e033      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b21      	cmp	r3, #33	@ 0x21
 80039a4:	d005      	beq.n	80039b2 <I2C_MasterTransmit_TXE+0xda>
 80039a6:	7bbb      	ldrb	r3, [r7, #14]
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d12d      	bne.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b22      	cmp	r3, #34	@ 0x22
 80039b0:	d12a      	bne.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d108      	bne.n	80039ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039cc:	e01c      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b40      	cmp	r3, #64	@ 0x40
 80039d8:	d103      	bne.n	80039e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f88e 	bl	8003afc <I2C_MemoryTransmit_TXE_BTF>
}
 80039e0:	e012      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a06:	e7ff      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b21      	cmp	r3, #33	@ 0x21
 8003a28:	d164      	bne.n	8003af4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a58:	e04c      	b.n	8003af4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d01d      	beq.n	8003a9c <I2C_MasterTransmit_BTF+0x8c>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d01a      	beq.n	8003a9c <I2C_MasterTransmit_BTF+0x8c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a6c:	d016      	beq.n	8003a9c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a7c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2211      	movs	r2, #17
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fec1 	bl	800381c <HAL_I2C_MasterTxCpltCallback>
}
 8003a9a:	e02b      	b.n	8003af4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aaa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d107      	bne.n	8003ae6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fed6 	bl	8003890 <HAL_I2C_MemTxCpltCallback>
}
 8003ae4:	e006      	b.n	8003af4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fe94 	bl	800381c <HAL_I2C_MasterTxCpltCallback>
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11d      	bne.n	8003b50 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10b      	bne.n	8003b34 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b32:	e077      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	121b      	asrs	r3, r3, #8
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b4e:	e069      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10b      	bne.n	8003b70 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b6e:	e059      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d152      	bne.n	8003c1e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b22      	cmp	r3, #34	@ 0x22
 8003b7c:	d10d      	bne.n	8003b9a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b8c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b98:	e044      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b21      	cmp	r3, #33	@ 0x21
 8003ba8:	d112      	bne.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bce:	e029      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d124      	bne.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b21      	cmp	r3, #33	@ 0x21
 8003bde:	d121      	bne.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fe3a 	bl	8003890 <HAL_I2C_MemTxCpltCallback>
}
 8003c1c:	e002      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fbc8 	bl	80033b4 <I2C_Flush_DR>
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b22      	cmp	r3, #34	@ 0x22
 8003c3e:	f040 80b9 	bne.w	8003db4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d921      	bls.n	8003c9a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	f040 8096 	bne.w	8003db4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c96:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c98:	e08c      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d07f      	beq.n	8003da2 <I2C_MasterReceive_RXNE+0x176>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d002      	beq.n	8003cae <I2C_MasterReceive_RXNE+0x82>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d179      	bne.n	8003da2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f001 f842 	bl	8004d38 <I2C_WaitOnSTOPRequestThroughIT>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d14c      	bne.n	8003d54 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cd8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b40      	cmp	r3, #64	@ 0x40
 8003d12:	d10a      	bne.n	8003d2a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fdbd 	bl	80038a2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d28:	e044      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d002      	beq.n	8003d3e <I2C_MasterReceive_RXNE+0x112>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d103      	bne.n	8003d46 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d44:	e002      	b.n	8003d4c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2212      	movs	r2, #18
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fd6e 	bl	800382e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d52:	e02f      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fd8a 	bl	80038b4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003da0:	e008      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db0:	605a      	str	r2, [r3, #4]
}
 8003db2:	e7ff      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d11b      	bne.n	8003e0c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e0a:	e0c4      	b.n	8003f96 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d129      	bne.n	8003e6a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e24:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d00a      	beq.n	8003e42 <I2C_MasterReceive_BTF+0x86>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d007      	beq.n	8003e42 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e68:	e095      	b.n	8003f96 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d17d      	bne.n	8003f70 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d002      	beq.n	8003e80 <I2C_MasterReceive_BTF+0xc4>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d108      	bne.n	8003e92 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e016      	b.n	8003ec0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d002      	beq.n	8003e9e <I2C_MasterReceive_BTF+0xe2>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d108      	bne.n	8003eb0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e007      	b.n	8003ec0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d10a      	bne.n	8003f46 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fcaf 	bl	80038a2 <HAL_I2C_MemRxCpltCallback>
}
 8003f44:	e027      	b.n	8003f96 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d002      	beq.n	8003f5a <I2C_MasterReceive_BTF+0x19e>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d103      	bne.n	8003f62 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f60:	e002      	b.n	8003f68 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2212      	movs	r2, #18
 8003f66:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fc60 	bl	800382e <HAL_I2C_MasterRxCpltCallback>
}
 8003f6e:	e012      	b.n	8003f96 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d117      	bne.n	8003fe2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003fcc:	e067      	b.n	800409e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]
}
 8003fe0:	e05d      	b.n	800409e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fea:	d133      	bne.n	8004054 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b21      	cmp	r3, #33	@ 0x21
 8003ff6:	d109      	bne.n	800400c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e008      	b.n	800401e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	2b00      	cmp	r3, #0
 8004024:	d004      	beq.n	8004030 <I2C_Master_SB+0x92>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	d108      	bne.n	8004042 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	2b00      	cmp	r3, #0
 8004036:	d032      	beq.n	800409e <I2C_Master_SB+0x100>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	2b00      	cmp	r3, #0
 8004040:	d02d      	beq.n	800409e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004050:	605a      	str	r2, [r3, #4]
}
 8004052:	e024      	b.n	800409e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10e      	bne.n	800407a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004060:	b29b      	uxth	r3, r3
 8004062:	11db      	asrs	r3, r3, #7
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0306 	and.w	r3, r3, #6
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f063 030f 	orn	r3, r3, #15
 8004070:	b2da      	uxtb	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	611a      	str	r2, [r3, #16]
}
 8004078:	e011      	b.n	800409e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10d      	bne.n	800409e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	b29b      	uxth	r3, r3
 8004088:	11db      	asrs	r3, r3, #7
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f003 0306 	and.w	r3, r3, #6
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f063 030e 	orn	r3, r3, #14
 8004096:	b2da      	uxtb	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <I2C_Master_ADD10+0x26>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <I2C_Master_ADD10+0x48>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040ee:	605a      	str	r2, [r3, #4]
  }
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b091      	sub	sp, #68	@ 0x44
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004108:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b22      	cmp	r3, #34	@ 0x22
 8004122:	f040 8174 	bne.w	800440e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <I2C_Master_ADDR+0x54>
 800412e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d10b      	bne.n	800414e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2300      	movs	r3, #0
 8004138:	633b      	str	r3, [r7, #48]	@ 0x30
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	633b      	str	r3, [r7, #48]	@ 0x30
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	633b      	str	r3, [r7, #48]	@ 0x30
 800414a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414c:	e16b      	b.n	8004426 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11d      	bne.n	8004192 <I2C_Master_ADDR+0x98>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800415e:	d118      	bne.n	8004192 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004160:	2300      	movs	r3, #0
 8004162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004184:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004190:	e149      	b.n	8004426 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d113      	bne.n	80041c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419c:	2300      	movs	r3, #0
 800419e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e120      	b.n	8004406 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	f040 808a 	bne.w	80042e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80041d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041d6:	d137      	bne.n	8004248 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f6:	d113      	bne.n	8004220 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004206:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	e0f2      	b.n	8004406 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004220:	2300      	movs	r3, #0
 8004222:	623b      	str	r3, [r7, #32]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e0de      	b.n	8004406 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424a:	2b08      	cmp	r3, #8
 800424c:	d02e      	beq.n	80042ac <I2C_Master_ADDR+0x1b2>
 800424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004250:	2b20      	cmp	r3, #32
 8004252:	d02b      	beq.n	80042ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	2b12      	cmp	r3, #18
 8004258:	d102      	bne.n	8004260 <I2C_Master_ADDR+0x166>
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425c:	2b01      	cmp	r3, #1
 800425e:	d125      	bne.n	80042ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004262:	2b04      	cmp	r3, #4
 8004264:	d00e      	beq.n	8004284 <I2C_Master_ADDR+0x18a>
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004268:	2b02      	cmp	r3, #2
 800426a:	d00b      	beq.n	8004284 <I2C_Master_ADDR+0x18a>
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	2b10      	cmp	r3, #16
 8004270:	d008      	beq.n	8004284 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e007      	b.n	8004294 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004292:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	e0ac      	b.n	8004406 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042bc:	2300      	movs	r3, #0
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e090      	b.n	8004406 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d158      	bne.n	80043a0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d021      	beq.n	8004338 <I2C_Master_ADDR+0x23e>
 80042f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d01e      	beq.n	8004338 <I2C_Master_ADDR+0x23e>
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d01b      	beq.n	8004338 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800430e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e012      	b.n	800435e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004346:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800436c:	d14b      	bne.n	8004406 <I2C_Master_ADDR+0x30c>
 800436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004370:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004374:	d00b      	beq.n	800438e <I2C_Master_ADDR+0x294>
 8004376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004378:	2b01      	cmp	r3, #1
 800437a:	d008      	beq.n	800438e <I2C_Master_ADDR+0x294>
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	2b08      	cmp	r3, #8
 8004380:	d005      	beq.n	800438e <I2C_Master_ADDR+0x294>
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	2b10      	cmp	r3, #16
 8004386:	d002      	beq.n	800438e <I2C_Master_ADDR+0x294>
 8004388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438a:	2b20      	cmp	r3, #32
 800438c:	d13b      	bne.n	8004406 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	e032      	b.n	8004406 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043ae:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043be:	d117      	bne.n	80043f0 <I2C_Master_ADDR+0x2f6>
 80043c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043c6:	d00b      	beq.n	80043e0 <I2C_Master_ADDR+0x2e6>
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d008      	beq.n	80043e0 <I2C_Master_ADDR+0x2e6>
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d005      	beq.n	80043e0 <I2C_Master_ADDR+0x2e6>
 80043d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d002      	beq.n	80043e0 <I2C_Master_ADDR+0x2e6>
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d107      	bne.n	80043f0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043ee:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800440c:	e00b      	b.n	8004426 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]
}
 8004424:	e7ff      	b.n	8004426 <I2C_Master_ADDR+0x32c>
 8004426:	bf00      	nop
 8004428:	3744      	adds	r7, #68	@ 0x44
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d02b      	beq.n	80044a2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	781a      	ldrb	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d114      	bne.n	80044a2 <I2C_SlaveTransmit_TXE+0x72>
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b29      	cmp	r3, #41	@ 0x29
 800447c:	d111      	bne.n	80044a2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800448c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2221      	movs	r2, #33	@ 0x21
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2228      	movs	r2, #40	@ 0x28
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff f9cf 	bl	8003840 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d011      	beq.n	80044e0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d02c      	beq.n	800455e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d114      	bne.n	800455e <I2C_SlaveReceive_RXNE+0x74>
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b2a      	cmp	r3, #42	@ 0x2a
 8004538:	d111      	bne.n	800455e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004548:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2222      	movs	r2, #34	@ 0x22
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2228      	movs	r2, #40	@ 0x28
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff f97a 	bl	8003852 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d012      	beq.n	800459e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045c2:	2b28      	cmp	r3, #40	@ 0x28
 80045c4:	d127      	bne.n	8004616 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	089b      	lsrs	r3, r3, #2
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80045e2:	2301      	movs	r3, #1
 80045e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	09db      	lsrs	r3, r3, #7
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	81bb      	strh	r3, [r7, #12]
 80045f8:	e002      	b.n	8004600 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004608:	89ba      	ldrh	r2, [r7, #12]
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff f928 	bl	8003864 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004614:	e00e      	b.n	8004634 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800465a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004688:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004698:	d172      	bne.n	8004780 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b22      	cmp	r3, #34	@ 0x22
 800469e:	d002      	beq.n	80046a6 <I2C_Slave_STOPF+0x6a>
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046a4:	d135      	bne.n	8004712 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	f043 0204 	orr.w	r2, r3, #4
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fb34 	bl	8002d4c <HAL_DMA_GetState>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d049      	beq.n	800477e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	4a69      	ldr	r2, [pc, #420]	@ (8004894 <I2C_Slave_STOPF+0x258>)
 80046f0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe f9aa 	bl	8002a50 <HAL_DMA_Abort_IT>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d03d      	beq.n	800477e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800470c:	4610      	mov	r0, r2
 800470e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004710:	e035      	b.n	800477e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	f043 0204 	orr.w	r2, r3, #4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004744:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fafe 	bl	8002d4c <HAL_DMA_GetState>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d014      	beq.n	8004780 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475a:	4a4e      	ldr	r2, [pc, #312]	@ (8004894 <I2C_Slave_STOPF+0x258>)
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe f974 	bl	8002a50 <HAL_DMA_Abort_IT>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004778:	4610      	mov	r0, r2
 800477a:	4798      	blx	r3
 800477c:	e000      	b.n	8004780 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800477e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03e      	beq.n	8004808 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b04      	cmp	r3, #4
 8004796:	d112      	bne.n	80047be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d112      	bne.n	80047f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	f043 0204 	orr.w	r2, r3, #4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8b7 	bl	8004984 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004816:	e039      	b.n	800488c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b2a      	cmp	r3, #42	@ 0x2a
 800481c:	d109      	bne.n	8004832 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2228      	movs	r2, #40	@ 0x28
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff f810 	bl	8003852 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b28      	cmp	r3, #40	@ 0x28
 800483c:	d111      	bne.n	8004862 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a15      	ldr	r2, [pc, #84]	@ (8004898 <I2C_Slave_STOPF+0x25c>)
 8004842:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff f80f 	bl	800387e <HAL_I2C_ListenCpltCallback>
}
 8004860:	e014      	b.n	800488c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	2b22      	cmp	r3, #34	@ 0x22
 8004868:	d002      	beq.n	8004870 <I2C_Slave_STOPF+0x234>
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b22      	cmp	r3, #34	@ 0x22
 800486e:	d10d      	bne.n	800488c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fe ffe3 	bl	8003852 <HAL_I2C_SlaveRxCpltCallback>
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	08004be9 	.word	0x08004be9
 8004898:	ffff0000 	.word	0xffff0000

0800489c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048aa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d002      	beq.n	80048be <I2C_Slave_AF+0x22>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d129      	bne.n	8004912 <I2C_Slave_AF+0x76>
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	2b28      	cmp	r3, #40	@ 0x28
 80048c2:	d126      	bne.n	8004912 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004980 <I2C_Slave_AF+0xe4>)
 80048c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048d8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048e2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fe ffb7 	bl	800387e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004910:	e031      	b.n	8004976 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b21      	cmp	r3, #33	@ 0x21
 8004916:	d129      	bne.n	800496c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a19      	ldr	r2, [pc, #100]	@ (8004980 <I2C_Slave_AF+0xe4>)
 800491c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2221      	movs	r2, #33	@ 0x21
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004942:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800494c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800495c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fe fd28 	bl	80033b4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fe ff6b 	bl	8003840 <HAL_I2C_SlaveTxCpltCallback>
}
 800496a:	e004      	b.n	8004976 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004974:	615a      	str	r2, [r3, #20]
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	ffff0000 	.word	0xffff0000

08004984 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004992:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800499a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800499c:	7bbb      	ldrb	r3, [r7, #14]
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d002      	beq.n	80049a8 <I2C_ITError+0x24>
 80049a2:	7bbb      	ldrb	r3, [r7, #14]
 80049a4:	2b40      	cmp	r3, #64	@ 0x40
 80049a6:	d10a      	bne.n	80049be <I2C_ITError+0x3a>
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b22      	cmp	r3, #34	@ 0x22
 80049ac:	d107      	bne.n	80049be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049c4:	2b28      	cmp	r3, #40	@ 0x28
 80049c6:	d107      	bne.n	80049d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2228      	movs	r2, #40	@ 0x28
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80049d6:	e015      	b.n	8004a04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e6:	d00a      	beq.n	80049fe <I2C_ITError+0x7a>
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b60      	cmp	r3, #96	@ 0x60
 80049ec:	d007      	beq.n	80049fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a12:	d162      	bne.n	8004ada <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d020      	beq.n	8004a74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a36:	4a6a      	ldr	r2, [pc, #424]	@ (8004be0 <I2C_ITError+0x25c>)
 8004a38:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe f806 	bl	8002a50 <HAL_DMA_Abort_IT>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8089 	beq.w	8004b5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4798      	blx	r3
 8004a72:	e074      	b.n	8004b5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a78:	4a59      	ldr	r2, [pc, #356]	@ (8004be0 <I2C_ITError+0x25c>)
 8004a7a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fd ffe5 	bl	8002a50 <HAL_DMA_Abort_IT>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d068      	beq.n	8004b5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a96:	2b40      	cmp	r3, #64	@ 0x40
 8004a98:	d10b      	bne.n	8004ab2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4798      	blx	r3
 8004ad8:	e041      	b.n	8004b5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b60      	cmp	r3, #96	@ 0x60
 8004ae4:	d125      	bne.n	8004b32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afe:	2b40      	cmp	r3, #64	@ 0x40
 8004b00:	d10b      	bne.n	8004b1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fe fecb 	bl	80038c6 <HAL_I2C_AbortCpltCallback>
 8004b30:	e015      	b.n	8004b5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d10b      	bne.n	8004b58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fe feab 	bl	80038b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10e      	bne.n	8004b8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d113      	bne.n	8004bd8 <I2C_ITError+0x254>
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b28      	cmp	r3, #40	@ 0x28
 8004bb4:	d110      	bne.n	8004bd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004be4 <I2C_ITError+0x260>)
 8004bba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fe fe53 	bl	800387e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	08004be9 	.word	0x08004be9
 8004be4:	ffff0000 	.word	0xffff0000

08004be8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c02:	4b4b      	ldr	r3, [pc, #300]	@ (8004d30 <I2C_DMAAbort+0x148>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	4a4a      	ldr	r2, [pc, #296]	@ (8004d34 <I2C_DMAAbort+0x14c>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0a1a      	lsrs	r2, r3, #8
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00da      	lsls	r2, r3, #3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f043 0220 	orr.w	r2, r3, #32
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004c2e:	e00a      	b.n	8004c46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c44:	d0ea      	beq.n	8004c1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c52:	2200      	movs	r2, #0
 8004c54:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	2200      	movs	r2, #0
 8004c64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c88:	2200      	movs	r2, #0
 8004c8a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c98:	2200      	movs	r2, #0
 8004c9a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b60      	cmp	r3, #96	@ 0x60
 8004cb6:	d10e      	bne.n	8004cd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cce:	6978      	ldr	r0, [r7, #20]
 8004cd0:	f7fe fdf9 	bl	80038c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cd4:	e027      	b.n	8004d26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cdc:	2b28      	cmp	r3, #40	@ 0x28
 8004cde:	d117      	bne.n	8004d10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2228      	movs	r2, #40	@ 0x28
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d0e:	e007      	b.n	8004d20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d20:	6978      	ldr	r0, [r7, #20]
 8004d22:	f7fe fdc7 	bl	80038b4 <HAL_I2C_ErrorCallback>
}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000038 	.word	0x20000038
 8004d34:	14f8b589 	.word	0x14f8b589

08004d38 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d44:	4b13      	ldr	r3, [pc, #76]	@ (8004d94 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	4a13      	ldr	r2, [pc, #76]	@ (8004d98 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	0a1a      	lsrs	r2, r3, #8
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d107      	bne.n	8004d76 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	f043 0220 	orr.w	r2, r3, #32
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e008      	b.n	8004d88 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d84:	d0e9      	beq.n	8004d5a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000038 	.word	0x20000038
 8004d98:	14f8b589 	.word	0x14f8b589

08004d9c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004dac:	d103      	bne.n	8004db6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004db4:	e007      	b.n	8004dc6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004dbe:	d102      	bne.n	8004dc6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e272      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8087 	beq.w	8004efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004df0:	4b92      	ldr	r3, [pc, #584]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d00c      	beq.n	8004e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d112      	bne.n	8004e2e <HAL_RCC_OscConfig+0x5e>
 8004e08:	4b8c      	ldr	r3, [pc, #560]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e14:	d10b      	bne.n	8004e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e16:	4b89      	ldr	r3, [pc, #548]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d06c      	beq.n	8004efc <HAL_RCC_OscConfig+0x12c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d168      	bne.n	8004efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e24c      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x76>
 8004e38:	4b80      	ldr	r3, [pc, #512]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a7f      	ldr	r2, [pc, #508]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e02e      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x98>
 8004e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a7a      	ldr	r2, [pc, #488]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	4b78      	ldr	r3, [pc, #480]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a77      	ldr	r2, [pc, #476]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e01d      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0xbc>
 8004e72:	4b72      	ldr	r3, [pc, #456]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a71      	ldr	r2, [pc, #452]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a6e      	ldr	r2, [pc, #440]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6a      	ldr	r2, [pc, #424]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b68      	ldr	r3, [pc, #416]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a67      	ldr	r2, [pc, #412]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d013      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fd fb9e 	bl	80025ec <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb4:	f7fd fb9a 	bl	80025ec <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	@ 0x64
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e200      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0xe4>
 8004ed2:	e014      	b.n	8004efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fb8a 	bl	80025ec <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fd fb86 	bl	80025ec <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	@ 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e1ec      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	4b53      	ldr	r3, [pc, #332]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x10c>
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d063      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00b      	beq.n	8004f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f16:	4b49      	ldr	r3, [pc, #292]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d11c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x18c>
 8004f22:	4b46      	ldr	r3, [pc, #280]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d116      	bne.n	8004f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2e:	4b43      	ldr	r3, [pc, #268]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_RCC_OscConfig+0x176>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e1c0      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f46:	4b3d      	ldr	r3, [pc, #244]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4939      	ldr	r1, [pc, #228]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5a:	e03a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d020      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f64:	4b36      	ldr	r3, [pc, #216]	@ (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7fd fb3f 	bl	80025ec <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f72:	f7fd fb3b 	bl	80025ec <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e1a1      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f84:	4b2d      	ldr	r3, [pc, #180]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f90:	4b2a      	ldr	r3, [pc, #168]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4927      	ldr	r1, [pc, #156]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]
 8004fa4:	e015      	b.n	8004fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa6:	4b26      	ldr	r3, [pc, #152]	@ (8005040 <HAL_RCC_OscConfig+0x270>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fac:	f7fd fb1e 	bl	80025ec <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb4:	f7fd fb1a 	bl	80025ec <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e180      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d03a      	beq.n	8005054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d019      	beq.n	800501a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe6:	4b17      	ldr	r3, [pc, #92]	@ (8005044 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fec:	f7fd fafe 	bl	80025ec <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fd fafa 	bl	80025ec <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e160      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005012:	2001      	movs	r0, #1
 8005014:	f000 face 	bl	80055b4 <RCC_Delay>
 8005018:	e01c      	b.n	8005054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800501a:	4b0a      	ldr	r3, [pc, #40]	@ (8005044 <HAL_RCC_OscConfig+0x274>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005020:	f7fd fae4 	bl	80025ec <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005026:	e00f      	b.n	8005048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005028:	f7fd fae0 	bl	80025ec <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d908      	bls.n	8005048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e146      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	42420000 	.word	0x42420000
 8005044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005048:	4b92      	ldr	r3, [pc, #584]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e9      	bne.n	8005028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80a6 	beq.w	80051ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005066:	4b8b      	ldr	r3, [pc, #556]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10d      	bne.n	800508e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	4b88      	ldr	r3, [pc, #544]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	4a87      	ldr	r2, [pc, #540]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507c:	61d3      	str	r3, [r2, #28]
 800507e:	4b85      	ldr	r3, [pc, #532]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508e:	4b82      	ldr	r3, [pc, #520]	@ (8005298 <HAL_RCC_OscConfig+0x4c8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d118      	bne.n	80050cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509a:	4b7f      	ldr	r3, [pc, #508]	@ (8005298 <HAL_RCC_OscConfig+0x4c8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a7e      	ldr	r2, [pc, #504]	@ (8005298 <HAL_RCC_OscConfig+0x4c8>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a6:	f7fd faa1 	bl	80025ec <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ae:	f7fd fa9d 	bl	80025ec <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	@ 0x64
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e103      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	4b75      	ldr	r3, [pc, #468]	@ (8005298 <HAL_RCC_OscConfig+0x4c8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d106      	bne.n	80050e2 <HAL_RCC_OscConfig+0x312>
 80050d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	6213      	str	r3, [r2, #32]
 80050e0:	e02d      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10c      	bne.n	8005104 <HAL_RCC_OscConfig+0x334>
 80050ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	4a69      	ldr	r2, [pc, #420]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	6213      	str	r3, [r2, #32]
 80050f6:	4b67      	ldr	r3, [pc, #412]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	4a66      	ldr	r2, [pc, #408]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	f023 0304 	bic.w	r3, r3, #4
 8005100:	6213      	str	r3, [r2, #32]
 8005102:	e01c      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b05      	cmp	r3, #5
 800510a:	d10c      	bne.n	8005126 <HAL_RCC_OscConfig+0x356>
 800510c:	4b61      	ldr	r3, [pc, #388]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4a60      	ldr	r2, [pc, #384]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005112:	f043 0304 	orr.w	r3, r3, #4
 8005116:	6213      	str	r3, [r2, #32]
 8005118:	4b5e      	ldr	r3, [pc, #376]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	4a5d      	ldr	r2, [pc, #372]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	6213      	str	r3, [r2, #32]
 8005124:	e00b      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 8005126:	4b5b      	ldr	r3, [pc, #364]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	4a5a      	ldr	r2, [pc, #360]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	6213      	str	r3, [r2, #32]
 8005132:	4b58      	ldr	r3, [pc, #352]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4a57      	ldr	r2, [pc, #348]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d015      	beq.n	8005172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005146:	f7fd fa51 	bl	80025ec <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	e00a      	b.n	8005164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514e:	f7fd fa4d 	bl	80025ec <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515c:	4293      	cmp	r3, r2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0b1      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	4b4b      	ldr	r3, [pc, #300]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0ee      	beq.n	800514e <HAL_RCC_OscConfig+0x37e>
 8005170:	e014      	b.n	800519c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005172:	f7fd fa3b 	bl	80025ec <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005178:	e00a      	b.n	8005190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fd fa37 	bl	80025ec <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e09b      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005190:	4b40      	ldr	r3, [pc, #256]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1ee      	bne.n	800517a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d105      	bne.n	80051ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8087 	beq.w	80052c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b8:	4b36      	ldr	r3, [pc, #216]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d061      	beq.n	8005288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d146      	bne.n	800525a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051cc:	4b33      	ldr	r3, [pc, #204]	@ (800529c <HAL_RCC_OscConfig+0x4cc>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fd fa0b 	bl	80025ec <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051da:	f7fd fa07 	bl	80025ec <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e06d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ec:	4b29      	ldr	r3, [pc, #164]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f0      	bne.n	80051da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005200:	d108      	bne.n	8005214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005202:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	4921      	ldr	r1, [pc, #132]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005214:	4b1f      	ldr	r3, [pc, #124]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a19      	ldr	r1, [r3, #32]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	430b      	orrs	r3, r1
 8005226:	491b      	ldr	r1, [pc, #108]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800522c:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <HAL_RCC_OscConfig+0x4cc>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fd f9db 	bl	80025ec <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523a:	f7fd f9d7 	bl	80025ec <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e03d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800524c:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x46a>
 8005258:	e035      	b.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b10      	ldr	r3, [pc, #64]	@ (800529c <HAL_RCC_OscConfig+0x4cc>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fd f9c4 	bl	80025ec <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005268:	f7fd f9c0 	bl	80025ec <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e026      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527a:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x498>
 8005286:	e01e      	b.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e019      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
 8005294:	40021000 	.word	0x40021000
 8005298:	40007000 	.word	0x40007000
 800529c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <HAL_RCC_OscConfig+0x500>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000

080052d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0d0      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d910      	bls.n	8005318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f6:	4b67      	ldr	r3, [pc, #412]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 0207 	bic.w	r2, r3, #7
 80052fe:	4965      	ldr	r1, [pc, #404]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	4313      	orrs	r3, r2
 8005304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b63      	ldr	r3, [pc, #396]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0b8      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005330:	4b59      	ldr	r3, [pc, #356]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a58      	ldr	r2, [pc, #352]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005336:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800533a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005348:	4b53      	ldr	r3, [pc, #332]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a52      	ldr	r2, [pc, #328]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800534e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b50      	ldr	r3, [pc, #320]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	494d      	ldr	r1, [pc, #308]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d040      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	4b47      	ldr	r3, [pc, #284]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d115      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07f      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005392:	4b41      	ldr	r3, [pc, #260]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e073      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e06b      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053b2:	4b39      	ldr	r3, [pc, #228]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f023 0203 	bic.w	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4936      	ldr	r1, [pc, #216]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c4:	f7fd f912 	bl	80025ec <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	e00a      	b.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053cc:	f7fd f90e 	bl	80025ec <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e053      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 020c 	and.w	r2, r3, #12
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1eb      	bne.n	80053cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053f4:	4b27      	ldr	r3, [pc, #156]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d210      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005402:	4b24      	ldr	r3, [pc, #144]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 0207 	bic.w	r2, r3, #7
 800540a:	4922      	ldr	r1, [pc, #136]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4313      	orrs	r3, r2
 8005410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e032      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b19      	ldr	r3, [pc, #100]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4916      	ldr	r1, [pc, #88]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800544e:	4b12      	ldr	r3, [pc, #72]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490e      	ldr	r1, [pc, #56]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005462:	f000 f821 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490a      	ldr	r1, [pc, #40]	@ (800549c <HAL_RCC_ClockConfig+0x1c8>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <HAL_RCC_ClockConfig+0x1cc>)
 800547c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800547e:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd f870 	bl	8002568 <HAL_InitTick>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40022000 	.word	0x40022000
 8005498:	40021000 	.word	0x40021000
 800549c:	08009070 	.word	0x08009070
 80054a0:	20000038 	.word	0x20000038
 80054a4:	2000003c 	.word	0x2000003c

080054a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054c2:	4b1e      	ldr	r3, [pc, #120]	@ (800553c <HAL_RCC_GetSysClockFreq+0x94>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d002      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x30>
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d003      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x36>
 80054d6:	e027      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054d8:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 80054da:	613b      	str	r3, [r7, #16]
      break;
 80054dc:	e027      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	0c9b      	lsrs	r3, r3, #18
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	4a17      	ldr	r2, [pc, #92]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054e8:	5cd3      	ldrb	r3, [r2, r3]
 80054ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054f6:	4b11      	ldr	r3, [pc, #68]	@ (800553c <HAL_RCC_GetSysClockFreq+0x94>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0c5b      	lsrs	r3, r3, #17
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a0d      	ldr	r2, [pc, #52]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 800550a:	fb03 f202 	mul.w	r2, r3, r2
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e004      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0c      	ldr	r2, [pc, #48]	@ (800554c <HAL_RCC_GetSysClockFreq+0xa4>)
 800551c:	fb02 f303 	mul.w	r3, r2, r3
 8005520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	613b      	str	r3, [r7, #16]
      break;
 8005526:	e002      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005528:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 800552a:	613b      	str	r3, [r7, #16]
      break;
 800552c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800552e:	693b      	ldr	r3, [r7, #16]
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	007a1200 	.word	0x007a1200
 8005544:	08009088 	.word	0x08009088
 8005548:	08009098 	.word	0x08009098
 800554c:	003d0900 	.word	0x003d0900

08005550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b02      	ldr	r3, [pc, #8]	@ (8005560 <HAL_RCC_GetHCLKFreq+0x10>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	20000038 	.word	0x20000038

08005564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005568:	f7ff fff2 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4903      	ldr	r1, [pc, #12]	@ (8005588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	08009080 	.word	0x08009080

0800558c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005590:	f7ff ffde 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b05      	ldr	r3, [pc, #20]	@ (80055ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	0adb      	lsrs	r3, r3, #11
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	4903      	ldr	r1, [pc, #12]	@ (80055b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	08009080 	.word	0x08009080

080055b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055bc:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <RCC_Delay+0x34>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	@ (80055ec <RCC_Delay+0x38>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	0a5b      	lsrs	r3, r3, #9
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055d0:	bf00      	nop
  }
  while (Delay --);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1e5a      	subs	r2, r3, #1
 80055d6:	60fa      	str	r2, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f9      	bne.n	80055d0 <RCC_Delay+0x1c>
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr
 80055e8:	20000038 	.word	0x20000038
 80055ec:	10624dd3 	.word	0x10624dd3

080055f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e076      	b.n	80056f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005612:	d009      	beq.n	8005628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	61da      	str	r2, [r3, #28]
 800561a:	e005      	b.n	8005628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc fafe 	bl	8001c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800565e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ac:	ea42 0103 	orr.w	r1, r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	0c1a      	lsrs	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f002 0204 	and.w	r2, r2, #4
 80056ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	@ 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005706:	2301      	movs	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800570a:	f7fc ff6f 	bl	80025ec <HAL_GetTick>
 800570e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005716:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800571e:	887b      	ldrh	r3, [r7, #2]
 8005720:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005722:	7ffb      	ldrb	r3, [r7, #31]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d00c      	beq.n	8005742 <HAL_SPI_TransmitReceive+0x4a>
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800572e:	d106      	bne.n	800573e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <HAL_SPI_TransmitReceive+0x46>
 8005738:	7ffb      	ldrb	r3, [r7, #31]
 800573a:	2b04      	cmp	r3, #4
 800573c:	d001      	beq.n	8005742 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
 8005740:	e17f      	b.n	8005a42 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_SPI_TransmitReceive+0x5c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_SPI_TransmitReceive+0x5c>
 800574e:	887b      	ldrh	r3, [r7, #2]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e174      	b.n	8005a42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x6e>
 8005762:	2302      	movs	r3, #2
 8005764:	e16d      	b.n	8005a42 <HAL_SPI_TransmitReceive+0x34a>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b04      	cmp	r3, #4
 8005778:	d003      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2205      	movs	r2, #5
 800577e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	887a      	ldrh	r2, [r7, #2]
 8005792:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	887a      	ldrh	r2, [r7, #2]
 8005798:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	887a      	ldrh	r2, [r7, #2]
 80057a4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	887a      	ldrh	r2, [r7, #2]
 80057aa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c2:	2b40      	cmp	r3, #64	@ 0x40
 80057c4:	d007      	beq.n	80057d6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057de:	d17e      	bne.n	80058de <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_SPI_TransmitReceive+0xf6>
 80057e8:	8afb      	ldrh	r3, [r7, #22]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d16c      	bne.n	80058c8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	881a      	ldrh	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fe:	1c9a      	adds	r2, r3, #2
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005812:	e059      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b02      	cmp	r3, #2
 8005820:	d11b      	bne.n	800585a <HAL_SPI_TransmitReceive+0x162>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d016      	beq.n	800585a <HAL_SPI_TransmitReceive+0x162>
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	2b01      	cmp	r3, #1
 8005830:	d113      	bne.n	800585a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	881a      	ldrh	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	1c9a      	adds	r2, r3, #2
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d119      	bne.n	800589c <HAL_SPI_TransmitReceive+0x1a4>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d014      	beq.n	800589c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	b292      	uxth	r2, r2
 800587e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	1c9a      	adds	r2, r3, #2
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005898:	2301      	movs	r3, #1
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800589c:	f7fc fea6 	bl	80025ec <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d80d      	bhi.n	80058c8 <HAL_SPI_TransmitReceive+0x1d0>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d009      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e0bc      	b.n	8005a42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1a0      	bne.n	8005814 <HAL_SPI_TransmitReceive+0x11c>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d19b      	bne.n	8005814 <HAL_SPI_TransmitReceive+0x11c>
 80058dc:	e082      	b.n	80059e4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x1f4>
 80058e6:	8afb      	ldrh	r3, [r7, #22]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d171      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005912:	e05d      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b02      	cmp	r3, #2
 8005920:	d11c      	bne.n	800595c <HAL_SPI_TransmitReceive+0x264>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <HAL_SPI_TransmitReceive+0x264>
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	2b01      	cmp	r3, #1
 8005930:	d114      	bne.n	800595c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b01      	cmp	r3, #1
 8005968:	d119      	bne.n	800599e <HAL_SPI_TransmitReceive+0x2a6>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d014      	beq.n	800599e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800599a:	2301      	movs	r3, #1
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800599e:	f7fc fe25 	bl	80025ec <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d803      	bhi.n	80059b6 <HAL_SPI_TransmitReceive+0x2be>
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_TransmitReceive+0x2c4>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e038      	b.n	8005a42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d19c      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x21c>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d197      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fd35 	bl	8006458 <SPI_EndRxTxTransaction>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e01d      	b.n	8005a42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3728      	adds	r7, #40	@ 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d001      	beq.n	8005a6a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005a66:	2302      	movs	r3, #2
 8005a68:	e097      	b.n	8005b9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_SPI_Transmit_DMA+0x2a>
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e08f      	b.n	8005b9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_SPI_Transmit_DMA+0x3c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e088      	b.n	8005b9a <HAL_SPI_Transmit_DMA+0x14e>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2203      	movs	r2, #3
 8005a94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	88fa      	ldrh	r2, [r7, #6]
 8005aae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad6:	d10f      	bne.n	8005af8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ae6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005af6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005afc:	4a29      	ldr	r2, [pc, #164]	@ (8005ba4 <HAL_SPI_Transmit_DMA+0x158>)
 8005afe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b04:	4a28      	ldr	r2, [pc, #160]	@ (8005ba8 <HAL_SPI_Transmit_DMA+0x15c>)
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b0c:	4a27      	ldr	r2, [pc, #156]	@ (8005bac <HAL_SPI_Transmit_DMA+0x160>)
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b14:	2200      	movs	r2, #0
 8005b16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b20:	4619      	mov	r1, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b30:	f7fc fef2 	bl	8002918 <HAL_DMA_Start_IT>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3e:	f043 0210 	orr.w	r2, r3, #16
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e023      	b.n	8005b9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	d007      	beq.n	8005b70 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b6e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0220 	orr.w	r2, r2, #32
 8005b86:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0202 	orr.w	r2, r2, #2
 8005b96:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	080061e7 	.word	0x080061e7
 8005ba8:	0800600d 	.word	0x0800600d
 8005bac:	0800623b 	.word	0x0800623b

08005bb0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d00c      	beq.n	8005bec <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bd8:	d106      	bne.n	8005be8 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <HAL_SPI_TransmitReceive_DMA+0x38>
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d001      	beq.n	8005bec <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0cf      	b.n	8005d8c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005bf8:	887b      	ldrh	r3, [r7, #2]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0c4      	b.n	8005d8c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e0bd      	b.n	8005d8c <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d003      	beq.n	8005c2c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2205      	movs	r2, #5
 8005c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	887a      	ldrh	r2, [r7, #2]
 8005c42:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	887a      	ldrh	r2, [r7, #2]
 8005c4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	887a      	ldrh	r2, [r7, #2]
 8005c54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d108      	bne.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c72:	4a48      	ldr	r2, [pc, #288]	@ (8005d94 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005c74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7a:	4a47      	ldr	r2, [pc, #284]	@ (8005d98 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005c7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c7e:	e007      	b.n	8005c90 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c84:	4a45      	ldr	r2, [pc, #276]	@ (8005d9c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005c86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8c:	4a44      	ldr	r2, [pc, #272]	@ (8005da0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c94:	4a43      	ldr	r2, [pc, #268]	@ (8005da4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	4619      	mov	r1, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005cb8:	f7fc fe2e 	bl	8002918 <HAL_DMA_Start_IT>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	f043 0210 	orr.w	r2, r3, #16
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e058      	b.n	8005d8c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0201 	orr.w	r2, r2, #1
 8005ce8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cee:	2200      	movs	r2, #0
 8005cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d06:	2200      	movs	r2, #0
 8005d08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	4619      	mov	r1, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d20:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d22:	f7fc fdf9 	bl	8002918 <HAL_DMA_Start_IT>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d30:	f043 0210 	orr.w	r2, r3, #16
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e023      	b.n	8005d8c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d007      	beq.n	8005d62 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d60:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0220 	orr.w	r2, r2, #32
 8005d78:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0202 	orr.w	r2, r2, #2
 8005d88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	08006203 	.word	0x08006203
 8005d98:	080060b3 	.word	0x080060b3
 8005d9c:	0800621f 	.word	0x0800621f
 8005da0:	08006159 	.word	0x08006159
 8005da4:	0800623b 	.word	0x0800623b

08005da8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	099b      	lsrs	r3, r3, #6
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10f      	bne.n	8005dec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	099b      	lsrs	r3, r3, #6
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
    return;
 8005dea:	e0be      	b.n	8005f6a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <HAL_SPI_IRQHandler+0x66>
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	09db      	lsrs	r3, r3, #7
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
    return;
 8005e0c:	e0ad      	b.n	8005f6a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_SPI_IRQHandler+0x80>
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	099b      	lsrs	r3, r3, #6
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80a1 	beq.w	8005f6a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 809a 	beq.w	8005f6a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	099b      	lsrs	r3, r3, #6
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d023      	beq.n	8005e8a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d011      	beq.n	8005e72 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e52:	f043 0204 	orr.w	r2, r3, #4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	e00b      	b.n	8005e8a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e72:	2300      	movs	r3, #0
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	693b      	ldr	r3, [r7, #16]
        return;
 8005e88:	e06f      	b.n	8005f6a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d014      	beq.n	8005ec0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9a:	f043 0201 	orr.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d04f      	beq.n	8005f68 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ed6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <HAL_SPI_IRQHandler+0x14c>
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d034      	beq.n	8005f5e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0203 	bic.w	r2, r2, #3
 8005f02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d011      	beq.n	8005f30 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f10:	4a17      	ldr	r2, [pc, #92]	@ (8005f70 <HAL_SPI_IRQHandler+0x1c8>)
 8005f12:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fc fd99 	bl	8002a50 <HAL_DMA_Abort_IT>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d016      	beq.n	8005f66 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8005f70 <HAL_SPI_IRQHandler+0x1c8>)
 8005f3e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fc fd83 	bl	8002a50 <HAL_DMA_Abort_IT>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005f5c:	e003      	b.n	8005f66 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f83e 	bl	8005fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f64:	e000      	b.n	8005f68 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005f66:	bf00      	nop
    return;
 8005f68:	bf00      	nop
  }
}
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	0800627b 	.word	0x0800627b

08005f74 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr

08005faa <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bc80      	pop	{r7}
 8005fcc:	4770      	bx	lr

08005fce <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006000:	b2db      	uxtb	r3, r3
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800601a:	f7fc fae7 	bl	80025ec <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b20      	cmp	r3, #32
 800602c:	d03b      	beq.n	80060a6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0220 	bic.w	r2, r2, #32
 800603c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0202 	bic.w	r2, r2, #2
 800604c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	2164      	movs	r1, #100	@ 0x64
 8006052:	6978      	ldr	r0, [r7, #20]
 8006054:	f000 fa00 	bl	8006458 <SPI_EndRxTxTransaction>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	f043 0220 	orr.w	r2, r3, #32
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800609e:	6978      	ldr	r0, [r7, #20]
 80060a0:	f7ff ff9e 	bl	8005fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80060a4:	e002      	b.n	80060ac <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80060a6:	6978      	ldr	r0, [r7, #20]
 80060a8:	f7ff ff64 	bl	8005f74 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060be:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060c0:	f7fc fa94 	bl	80025ec <HAL_GetTick>
 80060c4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d03b      	beq.n	800614c <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0220 	bic.w	r2, r2, #32
 80060e2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10d      	bne.n	8006108 <SPI_DMAReceiveCplt+0x56>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f4:	d108      	bne.n	8006108 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0203 	bic.w	r2, r2, #3
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	e007      	b.n	8006118 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	2164      	movs	r1, #100	@ 0x64
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f949 	bl	80063b4 <SPI_EndRxTransaction>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff ff4b 	bl	8005fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800614a:	e002      	b.n	8006152 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff ff1a 	bl	8005f86 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006166:	f7fc fa41 	bl	80025ec <HAL_GetTick>
 800616a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b20      	cmp	r3, #32
 8006178:	d02f      	beq.n	80061da <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0220 	bic.w	r2, r2, #32
 8006188:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	2164      	movs	r1, #100	@ 0x64
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f962 	bl	8006458 <SPI_EndRxTxTransaction>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0203 	bic.w	r2, r2, #3
 80061b4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff ff04 	bl	8005fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80061d8:	e002      	b.n	80061e0 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff fedc 	bl	8005f98 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fed8 	bl	8005faa <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff fed3 	bl	8005fbc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fece 	bl	8005fce <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0203 	bic.w	r2, r2, #3
 8006256:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625c:	f043 0210 	orr.w	r2, r3, #16
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff feb7 	bl	8005fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fea3 	bl	8005fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062b4:	f7fc f99a 	bl	80025ec <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	4413      	add	r3, r2
 80062c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062c4:	f7fc f992 	bl	80025ec <HAL_GetTick>
 80062c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062ca:	4b39      	ldr	r3, [pc, #228]	@ (80063b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	015b      	lsls	r3, r3, #5
 80062d0:	0d1b      	lsrs	r3, r3, #20
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062da:	e054      	b.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d050      	beq.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062e4:	f7fc f982 	bl	80025ec <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d902      	bls.n	80062fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d13d      	bne.n	8006376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006312:	d111      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631c:	d004      	beq.n	8006328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006326:	d107      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006340:	d10f      	bne.n	8006362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e017      	b.n	80063a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	3b01      	subs	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	429a      	cmp	r2, r3
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d19b      	bne.n	80062dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000038 	.word	0x20000038

080063b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c8:	d111      	bne.n	80063ee <SPI_EndRxTransaction+0x3a>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063d2:	d004      	beq.n	80063de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063dc:	d107      	bne.n	80063ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063ec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063f6:	d117      	bne.n	8006428 <SPI_EndRxTransaction+0x74>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006400:	d112      	bne.n	8006428 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	2101      	movs	r1, #1
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff ff49 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e013      	b.n	8006450 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	2180      	movs	r1, #128	@ 0x80
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff ff36 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e000      	b.n	8006450 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2201      	movs	r2, #1
 800646c:	2102      	movs	r1, #2
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff ff18 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e013      	b.n	80064b2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	2180      	movs	r1, #128	@ 0x80
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff ff05 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e000      	b.n	80064b2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e041      	b.n	8006550 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7fb feeb 	bl	80022bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f000 fc1f 	bl	8006d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e03a      	b.n	80065e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a18      	ldr	r2, [pc, #96]	@ (80065f0 <HAL_TIM_Base_Start_IT+0x98>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x58>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659a:	d009      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x58>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a14      	ldr	r2, [pc, #80]	@ (80065f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x58>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a13      	ldr	r2, [pc, #76]	@ (80065f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d111      	bne.n	80065d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b06      	cmp	r3, #6
 80065c0:	d010      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d2:	e007      	b.n	80065e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40000400 	.word	0x40000400
 80065f8:	40000800 	.word	0x40000800

080065fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e041      	b.n	8006692 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f839 	bl	800669a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f000 fb7e 	bl	8006d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <HAL_TIM_PWM_Start+0x24>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	bf14      	ite	ne
 80066c8:	2301      	movne	r3, #1
 80066ca:	2300      	moveq	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	e022      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d109      	bne.n	80066ea <HAL_TIM_PWM_Start+0x3e>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	bf14      	ite	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	2300      	moveq	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	e015      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d109      	bne.n	8006704 <HAL_TIM_PWM_Start+0x58>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	bf14      	ite	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	2300      	moveq	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	e008      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e05e      	b.n	80067dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_TIM_PWM_Start+0x82>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800672c:	e013      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0x92>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800673c:	e00b      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d104      	bne.n	800674e <HAL_TIM_PWM_Start+0xa2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800674c:	e003      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2201      	movs	r2, #1
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fd78 	bl	8007254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1e      	ldr	r2, [pc, #120]	@ (80067e4 <HAL_TIM_PWM_Start+0x138>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d107      	bne.n	800677e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800677c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a18      	ldr	r2, [pc, #96]	@ (80067e4 <HAL_TIM_PWM_Start+0x138>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00e      	beq.n	80067a6 <HAL_TIM_PWM_Start+0xfa>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006790:	d009      	beq.n	80067a6 <HAL_TIM_PWM_Start+0xfa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a14      	ldr	r2, [pc, #80]	@ (80067e8 <HAL_TIM_PWM_Start+0x13c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_TIM_PWM_Start+0xfa>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a12      	ldr	r2, [pc, #72]	@ (80067ec <HAL_TIM_PWM_Start+0x140>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d111      	bne.n	80067ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b06      	cmp	r3, #6
 80067b6:	d010      	beq.n	80067da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c8:	e007      	b.n	80067da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800

080067f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d020      	beq.n	8006854 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01b      	beq.n	8006854 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0202 	mvn.w	r2, #2
 8006824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa63 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa56 	bl	8006cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa65 	bl	8006d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d020      	beq.n	80068a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0204 	mvn.w	r2, #4
 8006870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa3d 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa30 	bl	8006cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fa3f 	bl	8006d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0208 	mvn.w	r2, #8
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2204      	movs	r2, #4
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa17 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa0a 	bl	8006cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa19 	bl	8006d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d020      	beq.n	8006938 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01b      	beq.n	8006938 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0210 	mvn.w	r2, #16
 8006908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2208      	movs	r2, #8
 800690e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9f1 	bl	8006d06 <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9e4 	bl	8006cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9f3 	bl	8006d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0201 	mvn.w	r2, #1
 8006954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f9c3 	bl	8006ce2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00c      	beq.n	8006980 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fcf5 	bl	800736a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00c      	beq.n	80069a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800699c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f9c3 	bl	8006d2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00c      	beq.n	80069c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0220 	mvn.w	r2, #32
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fcc8 	bl	8007358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c8:	bf00      	nop
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e0ae      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b0c      	cmp	r3, #12
 80069fa:	f200 809f 	bhi.w	8006b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006b3d 	.word	0x08006b3d
 8006a0c:	08006b3d 	.word	0x08006b3d
 8006a10:	08006b3d 	.word	0x08006b3d
 8006a14:	08006a79 	.word	0x08006a79
 8006a18:	08006b3d 	.word	0x08006b3d
 8006a1c:	08006b3d 	.word	0x08006b3d
 8006a20:	08006b3d 	.word	0x08006b3d
 8006a24:	08006abb 	.word	0x08006abb
 8006a28:	08006b3d 	.word	0x08006b3d
 8006a2c:	08006b3d 	.word	0x08006b3d
 8006a30:	08006b3d 	.word	0x08006b3d
 8006a34:	08006afb 	.word	0x08006afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f9ea 	bl	8006e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0208 	orr.w	r2, r2, #8
 8006a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0204 	bic.w	r2, r2, #4
 8006a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	619a      	str	r2, [r3, #24]
      break;
 8006a76:	e064      	b.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fa30 	bl	8006ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6999      	ldr	r1, [r3, #24]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	021a      	lsls	r2, r3, #8
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	619a      	str	r2, [r3, #24]
      break;
 8006ab8:	e043      	b.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fa79 	bl	8006fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0208 	orr.w	r2, r2, #8
 8006ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0204 	bic.w	r2, r2, #4
 8006ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69d9      	ldr	r1, [r3, #28]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	61da      	str	r2, [r3, #28]
      break;
 8006af8:	e023      	b.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fac3 	bl	800708c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69d9      	ldr	r1, [r3, #28]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	021a      	lsls	r2, r3, #8
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	61da      	str	r2, [r3, #28]
      break;
 8006b3a:	e002      	b.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e0b4      	b.n	8006cda <HAL_TIM_ConfigClockSource+0x186>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba8:	d03e      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0xd4>
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bae:	f200 8087 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb6:	f000 8086 	beq.w	8006cc6 <HAL_TIM_ConfigClockSource+0x172>
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bbe:	d87f      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b70      	cmp	r3, #112	@ 0x70
 8006bc2:	d01a      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0xa6>
 8006bc4:	2b70      	cmp	r3, #112	@ 0x70
 8006bc6:	d87b      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc8:	2b60      	cmp	r3, #96	@ 0x60
 8006bca:	d050      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x11a>
 8006bcc:	2b60      	cmp	r3, #96	@ 0x60
 8006bce:	d877      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	2b50      	cmp	r3, #80	@ 0x50
 8006bd2:	d03c      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0xfa>
 8006bd4:	2b50      	cmp	r3, #80	@ 0x50
 8006bd6:	d873      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b40      	cmp	r3, #64	@ 0x40
 8006bda:	d058      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x13a>
 8006bdc:	2b40      	cmp	r3, #64	@ 0x40
 8006bde:	d86f      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b30      	cmp	r3, #48	@ 0x30
 8006be2:	d064      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006be4:	2b30      	cmp	r3, #48	@ 0x30
 8006be6:	d86b      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d060      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d867      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d05c      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d05a      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bf8:	e062      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c0a:	f000 fb04 	bl	8007216 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	609a      	str	r2, [r3, #8]
      break;
 8006c26:	e04f      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c38:	f000 faed 	bl	8007216 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c4a:	609a      	str	r2, [r3, #8]
      break;
 8006c4c:	e03c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f000 fa64 	bl	8007128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2150      	movs	r1, #80	@ 0x50
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fabb 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006c6c:	e02c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 fa82 	bl	8007184 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2160      	movs	r1, #96	@ 0x60
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 faab 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e01c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 fa44 	bl	8007128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2140      	movs	r1, #64	@ 0x40
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fa9b 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e00c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f000 fa92 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006cbe:	e003      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc4:	e000      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr

08006d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr

08006d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bc80      	pop	{r7}
 8006d28:	4770      	bx	lr

08006d2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr

08006d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8006e0c <TIM_Base_SetConfig+0xd0>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00b      	beq.n	8006d6c <TIM_Base_SetConfig+0x30>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5a:	d007      	beq.n	8006d6c <TIM_Base_SetConfig+0x30>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006e10 <TIM_Base_SetConfig+0xd4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_Base_SetConfig+0x30>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a2b      	ldr	r2, [pc, #172]	@ (8006e14 <TIM_Base_SetConfig+0xd8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d108      	bne.n	8006d7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a22      	ldr	r2, [pc, #136]	@ (8006e0c <TIM_Base_SetConfig+0xd0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00b      	beq.n	8006d9e <TIM_Base_SetConfig+0x62>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8c:	d007      	beq.n	8006d9e <TIM_Base_SetConfig+0x62>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1f      	ldr	r2, [pc, #124]	@ (8006e10 <TIM_Base_SetConfig+0xd4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d003      	beq.n	8006d9e <TIM_Base_SetConfig+0x62>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a1e      	ldr	r2, [pc, #120]	@ (8006e14 <TIM_Base_SetConfig+0xd8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d108      	bne.n	8006db0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8006e0c <TIM_Base_SetConfig+0xd0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d103      	bne.n	8006de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	611a      	str	r2, [r3, #16]
  }
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr
 8006e0c:	40012c00 	.word	0x40012c00
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800

08006e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f023 0201 	bic.w	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 0302 	bic.w	r3, r3, #2
 8006e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee0 <TIM_OC1_SetConfig+0xc8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d10c      	bne.n	8006e8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0308 	bic.w	r3, r3, #8
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 0304 	bic.w	r3, r3, #4
 8006e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a13      	ldr	r2, [pc, #76]	@ (8006ee0 <TIM_OC1_SetConfig+0xc8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d111      	bne.n	8006eba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00

08006ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f023 0210 	bic.w	r2, r3, #16
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 0320 	bic.w	r3, r3, #32
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb4 <TIM_OC2_SetConfig+0xd0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10d      	bne.n	8006f60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a14      	ldr	r2, [pc, #80]	@ (8006fb4 <TIM_OC2_SetConfig+0xd0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d113      	bne.n	8006f90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr
 8006fb4:	40012c00 	.word	0x40012c00

08006fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a1d      	ldr	r2, [pc, #116]	@ (8007088 <TIM_OC3_SetConfig+0xd0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d10d      	bne.n	8007032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800701c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a14      	ldr	r2, [pc, #80]	@ (8007088 <TIM_OC3_SetConfig+0xd0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d113      	bne.n	8007062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	621a      	str	r2, [r3, #32]
}
 800707c:	bf00      	nop
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40012c00 	.word	0x40012c00

0800708c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	031b      	lsls	r3, r3, #12
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007124 <TIM_OC4_SetConfig+0x98>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d109      	bne.n	8007100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	019b      	lsls	r3, r3, #6
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr
 8007124:	40012c00 	.word	0x40012c00

08007128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0201 	bic.w	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 030a 	bic.w	r3, r3, #10
 8007164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f023 0210 	bic.w	r2, r3, #16
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	031b      	lsls	r3, r3, #12
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr

080071e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	f043 0307 	orr.w	r3, r3, #7
 8007204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	609a      	str	r2, [r3, #8]
}
 800720c:	bf00      	nop
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007216:	b480      	push	{r7}
 8007218:	b087      	sub	sp, #28
 800721a:	af00      	add	r7, sp, #0
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
 8007222:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007230:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	021a      	lsls	r2, r3, #8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	431a      	orrs	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4313      	orrs	r3, r2
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	609a      	str	r2, [r3, #8]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	2201      	movs	r2, #1
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	43db      	mvns	r3, r3
 8007276:	401a      	ands	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	431a      	orrs	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr

0800729c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e046      	b.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a16      	ldr	r2, [pc, #88]	@ (800734c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00e      	beq.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007300:	d009      	beq.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a12      	ldr	r2, [pc, #72]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d004      	beq.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a10      	ldr	r2, [pc, #64]	@ (8007354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d10c      	bne.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800731c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	4313      	orrs	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr
 800734c:	40012c00 	.word	0x40012c00
 8007350:	40000400 	.word	0x40000400
 8007354:	40000800 	.word	0x40000800

08007358 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr

0800736a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e042      	b.n	8007414 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb f850 	bl	8002448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2224      	movs	r2, #36	@ 0x24
 80073ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fc75 	bl	8007cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b0ba      	sub	sp, #232	@ 0xe8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007442:	2300      	movs	r3, #0
 8007444:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007448:	2300      	movs	r3, #0
 800744a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800744e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800745a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10f      	bne.n	8007482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <HAL_UART_IRQHandler+0x66>
 800746e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb5a 	bl	8007b34 <UART_Receive_IT>
      return;
 8007480:	e25b      	b.n	800793a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 80de 	beq.w	8007648 <HAL_UART_IRQHandler+0x22c>
 800748c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800749c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80d1 	beq.w	8007648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00b      	beq.n	80074ca <HAL_UART_IRQHandler+0xae>
 80074b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c2:	f043 0201 	orr.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00b      	beq.n	80074ee <HAL_UART_IRQHandler+0xd2>
 80074d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e6:	f043 0202 	orr.w	r2, r3, #2
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00b      	beq.n	8007512 <HAL_UART_IRQHandler+0xf6>
 80074fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750a:	f043 0204 	orr.w	r2, r3, #4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007516:	f003 0308 	and.w	r3, r3, #8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d011      	beq.n	8007542 <HAL_UART_IRQHandler+0x126>
 800751e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	d105      	bne.n	8007536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800752a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753a:	f043 0208 	orr.w	r2, r3, #8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 81f2 	beq.w	8007930 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800754c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d008      	beq.n	800756a <HAL_UART_IRQHandler+0x14e>
 8007558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fae5 	bl	8007b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <HAL_UART_IRQHandler+0x17a>
 800758e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007592:	2b00      	cmp	r3, #0
 8007594:	d04f      	beq.n	8007636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f9ef 	bl	800797a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d041      	beq.n	800762e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3314      	adds	r3, #20
 80075b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80075c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3314      	adds	r3, #20
 80075d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1d9      	bne.n	80075aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d013      	beq.n	8007626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007602:	4a7e      	ldr	r2, [pc, #504]	@ (80077fc <HAL_UART_IRQHandler+0x3e0>)
 8007604:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760a:	4618      	mov	r0, r3
 800760c:	f7fb fa20 	bl	8002a50 <HAL_DMA_Abort_IT>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d016      	beq.n	8007644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007624:	e00e      	b.n	8007644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f993 	bl	8007952 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762c:	e00a      	b.n	8007644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f98f 	bl	8007952 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007634:	e006      	b.n	8007644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f98b 	bl	8007952 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007642:	e175      	b.n	8007930 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	bf00      	nop
    return;
 8007646:	e173      	b.n	8007930 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764c:	2b01      	cmp	r3, #1
 800764e:	f040 814f 	bne.w	80078f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007656:	f003 0310 	and.w	r3, r3, #16
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8148 	beq.w	80078f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007664:	f003 0310 	and.w	r3, r3, #16
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8141 	beq.w	80078f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800766e:	2300      	movs	r3, #0
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60bb      	str	r3, [r7, #8]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	60bb      	str	r3, [r7, #8]
 8007682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80b6 	beq.w	8007800 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8145 	beq.w	8007934 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076b2:	429a      	cmp	r2, r3
 80076b4:	f080 813e 	bcs.w	8007934 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	f000 8088 	beq.w	80077dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	330c      	adds	r3, #12
 80076d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80076f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007704:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1d9      	bne.n	80076cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007728:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3314      	adds	r3, #20
 8007738:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800773c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007740:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007744:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800774e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e1      	bne.n	8007718 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800776a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007778:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800777a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800777e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007786:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e3      	bne.n	8007754 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	330c      	adds	r3, #12
 80077a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ac:	f023 0310 	bic.w	r3, r3, #16
 80077b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80077be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e3      	bne.n	800779a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fb f8fe 	bl	80029d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8b6 	bl	8007964 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077f8:	e09c      	b.n	8007934 <HAL_UART_IRQHandler+0x518>
 80077fa:	bf00      	nop
 80077fc:	08007a3f 	.word	0x08007a3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007808:	b29b      	uxth	r3, r3
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 808e 	beq.w	8007938 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800781c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8089 	beq.w	8007938 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800783c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800784a:	647a      	str	r2, [r7, #68]	@ 0x44
 800784c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e3      	bne.n	8007826 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3314      	adds	r3, #20
 8007864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	623b      	str	r3, [r7, #32]
   return(result);
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3314      	adds	r3, #20
 800787e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007882:	633a      	str	r2, [r7, #48]	@ 0x30
 8007884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e3      	bne.n	800785e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 0310 	bic.w	r3, r3, #16
 80078ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	330c      	adds	r3, #12
 80078c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80078c8:	61fa      	str	r2, [r7, #28]
 80078ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	69b9      	ldr	r1, [r7, #24]
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	617b      	str	r3, [r7, #20]
   return(result);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e3      	bne.n	80078a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f83b 	bl	8007964 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078ee:	e023      	b.n	8007938 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d009      	beq.n	8007910 <HAL_UART_IRQHandler+0x4f4>
 80078fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f8ac 	bl	8007a66 <UART_Transmit_IT>
    return;
 800790e:	e014      	b.n	800793a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00e      	beq.n	800793a <HAL_UART_IRQHandler+0x51e>
 800791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f8eb 	bl	8007b04 <UART_EndTransmit_IT>
    return;
 800792e:	e004      	b.n	800793a <HAL_UART_IRQHandler+0x51e>
    return;
 8007930:	bf00      	nop
 8007932:	e002      	b.n	800793a <HAL_UART_IRQHandler+0x51e>
      return;
 8007934:	bf00      	nop
 8007936:	e000      	b.n	800793a <HAL_UART_IRQHandler+0x51e>
      return;
 8007938:	bf00      	nop
  }
}
 800793a:	37e8      	adds	r7, #232	@ 0xe8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	bc80      	pop	{r7}
 8007950:	4770      	bx	lr

08007952 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	bc80      	pop	{r7}
 8007962:	4770      	bx	lr

08007964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	bc80      	pop	{r7}
 8007978:	4770      	bx	lr

0800797a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800797a:	b480      	push	{r7}
 800797c:	b095      	sub	sp, #84	@ 0x54
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	330c      	adds	r3, #12
 8007988:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	330c      	adds	r3, #12
 80079a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80079a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e5      	bne.n	8007982 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3314      	adds	r3, #20
 80079bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	f023 0301 	bic.w	r3, r3, #1
 80079cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3314      	adds	r3, #20
 80079d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e5      	bne.n	80079b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d119      	bne.n	8007a26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f023 0310 	bic.w	r3, r3, #16
 8007a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a12:	61ba      	str	r2, [r7, #24]
 8007a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6979      	ldr	r1, [r7, #20]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a34:	bf00      	nop
 8007a36:	3754      	adds	r7, #84	@ 0x54
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr

08007a3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff ff7a 	bl	8007952 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b21      	cmp	r3, #33	@ 0x21
 8007a78:	d13e      	bne.n	8007af8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a82:	d114      	bne.n	8007aae <UART_Transmit_IT+0x48>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d110      	bne.n	8007aae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	1c9a      	adds	r2, r3, #2
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	621a      	str	r2, [r3, #32]
 8007aac:	e008      	b.n	8007ac0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	1c59      	adds	r1, r3, #1
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6211      	str	r1, [r2, #32]
 8007ab8:	781a      	ldrb	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4619      	mov	r1, r3
 8007ace:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10f      	bne.n	8007af4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ae2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007af2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e000      	b.n	8007afa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007af8:	2302      	movs	r3, #2
  }
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc80      	pop	{r7}
 8007b02:	4770      	bx	lr

08007b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff ff0b 	bl	8007940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08c      	sub	sp, #48	@ 0x30
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b22      	cmp	r3, #34	@ 0x22
 8007b46:	f040 80ae 	bne.w	8007ca6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b52:	d117      	bne.n	8007b84 <UART_Receive_IT+0x50>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d113      	bne.n	8007b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7c:	1c9a      	adds	r2, r3, #2
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b82:	e026      	b.n	8007bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b96:	d007      	beq.n	8007ba8 <UART_Receive_IT+0x74>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <UART_Receive_IT+0x82>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d106      	bne.n	8007bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e008      	b.n	8007bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	4619      	mov	r1, r3
 8007be0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d15d      	bne.n	8007ca2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0220 	bic.w	r2, r2, #32
 8007bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695a      	ldr	r2, [r3, #20]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0201 	bic.w	r2, r2, #1
 8007c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d135      	bne.n	8007c98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	330c      	adds	r3, #12
 8007c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	613b      	str	r3, [r7, #16]
   return(result);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f023 0310 	bic.w	r3, r3, #16
 8007c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	330c      	adds	r3, #12
 8007c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c52:	623a      	str	r2, [r7, #32]
 8007c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	69f9      	ldr	r1, [r7, #28]
 8007c58:	6a3a      	ldr	r2, [r7, #32]
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e5      	bne.n	8007c32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d10a      	bne.n	8007c8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fe67 	bl	8007964 <HAL_UARTEx_RxEventCallback>
 8007c96:	e002      	b.n	8007c9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7f9 fa57 	bl	800114c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e002      	b.n	8007ca8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3730      	adds	r7, #48	@ 0x30
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007cea:	f023 030c 	bic.w	r3, r3, #12
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699a      	ldr	r2, [r3, #24]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a2c      	ldr	r2, [pc, #176]	@ (8007dc4 <UART_SetConfig+0x114>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d103      	bne.n	8007d20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007d18:	f7fd fc38 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	e002      	b.n	8007d26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007d20:	f7fd fc20 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 8007d24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009a      	lsls	r2, r3, #2
 8007d30:	441a      	add	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	4a22      	ldr	r2, [pc, #136]	@ (8007dc8 <UART_SetConfig+0x118>)
 8007d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d42:	095b      	lsrs	r3, r3, #5
 8007d44:	0119      	lsls	r1, r3, #4
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009a      	lsls	r2, r3, #2
 8007d50:	441a      	add	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <UART_SetConfig+0x118>)
 8007d5e:	fba3 0302 	umull	r0, r3, r3, r2
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	2064      	movs	r0, #100	@ 0x64
 8007d66:	fb00 f303 	mul.w	r3, r0, r3
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	3332      	adds	r3, #50	@ 0x32
 8007d70:	4a15      	ldr	r2, [pc, #84]	@ (8007dc8 <UART_SetConfig+0x118>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	095b      	lsrs	r3, r3, #5
 8007d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d7c:	4419      	add	r1, r3
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	009a      	lsls	r2, r3, #2
 8007d88:	441a      	add	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d94:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc8 <UART_SetConfig+0x118>)
 8007d96:	fba3 0302 	umull	r0, r3, r3, r2
 8007d9a:	095b      	lsrs	r3, r3, #5
 8007d9c:	2064      	movs	r0, #100	@ 0x64
 8007d9e:	fb00 f303 	mul.w	r3, r0, r3
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	3332      	adds	r3, #50	@ 0x32
 8007da8:	4a07      	ldr	r2, [pc, #28]	@ (8007dc8 <UART_SetConfig+0x118>)
 8007daa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	f003 020f 	and.w	r2, r3, #15
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	440a      	add	r2, r1
 8007dba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	40013800 	.word	0x40013800
 8007dc8:	51eb851f 	.word	0x51eb851f

08007dcc <atoi>:
 8007dcc:	220a      	movs	r2, #10
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f000 b87a 	b.w	8007ec8 <strtol>

08007dd4 <_strtol_l.isra.0>:
 8007dd4:	2b24      	cmp	r3, #36	@ 0x24
 8007dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dda:	4686      	mov	lr, r0
 8007ddc:	4690      	mov	r8, r2
 8007dde:	d801      	bhi.n	8007de4 <_strtol_l.isra.0+0x10>
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d106      	bne.n	8007df2 <_strtol_l.isra.0+0x1e>
 8007de4:	f000 fa2a 	bl	800823c <__errno>
 8007de8:	2316      	movs	r3, #22
 8007dea:	6003      	str	r3, [r0, #0]
 8007dec:	2000      	movs	r0, #0
 8007dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df2:	460d      	mov	r5, r1
 8007df4:	4833      	ldr	r0, [pc, #204]	@ (8007ec4 <_strtol_l.isra.0+0xf0>)
 8007df6:	462a      	mov	r2, r5
 8007df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dfc:	5d06      	ldrb	r6, [r0, r4]
 8007dfe:	f016 0608 	ands.w	r6, r6, #8
 8007e02:	d1f8      	bne.n	8007df6 <_strtol_l.isra.0+0x22>
 8007e04:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e06:	d110      	bne.n	8007e2a <_strtol_l.isra.0+0x56>
 8007e08:	2601      	movs	r6, #1
 8007e0a:	782c      	ldrb	r4, [r5, #0]
 8007e0c:	1c95      	adds	r5, r2, #2
 8007e0e:	f033 0210 	bics.w	r2, r3, #16
 8007e12:	d115      	bne.n	8007e40 <_strtol_l.isra.0+0x6c>
 8007e14:	2c30      	cmp	r4, #48	@ 0x30
 8007e16:	d10d      	bne.n	8007e34 <_strtol_l.isra.0+0x60>
 8007e18:	782a      	ldrb	r2, [r5, #0]
 8007e1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e1e:	2a58      	cmp	r2, #88	@ 0x58
 8007e20:	d108      	bne.n	8007e34 <_strtol_l.isra.0+0x60>
 8007e22:	786c      	ldrb	r4, [r5, #1]
 8007e24:	3502      	adds	r5, #2
 8007e26:	2310      	movs	r3, #16
 8007e28:	e00a      	b.n	8007e40 <_strtol_l.isra.0+0x6c>
 8007e2a:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e2c:	bf04      	itt	eq
 8007e2e:	782c      	ldrbeq	r4, [r5, #0]
 8007e30:	1c95      	addeq	r5, r2, #2
 8007e32:	e7ec      	b.n	8007e0e <_strtol_l.isra.0+0x3a>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f6      	bne.n	8007e26 <_strtol_l.isra.0+0x52>
 8007e38:	2c30      	cmp	r4, #48	@ 0x30
 8007e3a:	bf14      	ite	ne
 8007e3c:	230a      	movne	r3, #10
 8007e3e:	2308      	moveq	r3, #8
 8007e40:	2200      	movs	r2, #0
 8007e42:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e46:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e4a:	fbbc f9f3 	udiv	r9, ip, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e58:	2f09      	cmp	r7, #9
 8007e5a:	d80f      	bhi.n	8007e7c <_strtol_l.isra.0+0xa8>
 8007e5c:	463c      	mov	r4, r7
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	dd1b      	ble.n	8007e9a <_strtol_l.isra.0+0xc6>
 8007e62:	1c57      	adds	r7, r2, #1
 8007e64:	d007      	beq.n	8007e76 <_strtol_l.isra.0+0xa2>
 8007e66:	4581      	cmp	r9, r0
 8007e68:	d314      	bcc.n	8007e94 <_strtol_l.isra.0+0xc0>
 8007e6a:	d101      	bne.n	8007e70 <_strtol_l.isra.0+0x9c>
 8007e6c:	45a2      	cmp	sl, r4
 8007e6e:	db11      	blt.n	8007e94 <_strtol_l.isra.0+0xc0>
 8007e70:	2201      	movs	r2, #1
 8007e72:	fb00 4003 	mla	r0, r0, r3, r4
 8007e76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e7a:	e7eb      	b.n	8007e54 <_strtol_l.isra.0+0x80>
 8007e7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e80:	2f19      	cmp	r7, #25
 8007e82:	d801      	bhi.n	8007e88 <_strtol_l.isra.0+0xb4>
 8007e84:	3c37      	subs	r4, #55	@ 0x37
 8007e86:	e7ea      	b.n	8007e5e <_strtol_l.isra.0+0x8a>
 8007e88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007e8c:	2f19      	cmp	r7, #25
 8007e8e:	d804      	bhi.n	8007e9a <_strtol_l.isra.0+0xc6>
 8007e90:	3c57      	subs	r4, #87	@ 0x57
 8007e92:	e7e4      	b.n	8007e5e <_strtol_l.isra.0+0x8a>
 8007e94:	f04f 32ff 	mov.w	r2, #4294967295
 8007e98:	e7ed      	b.n	8007e76 <_strtol_l.isra.0+0xa2>
 8007e9a:	1c53      	adds	r3, r2, #1
 8007e9c:	d108      	bne.n	8007eb0 <_strtol_l.isra.0+0xdc>
 8007e9e:	2322      	movs	r3, #34	@ 0x22
 8007ea0:	4660      	mov	r0, ip
 8007ea2:	f8ce 3000 	str.w	r3, [lr]
 8007ea6:	f1b8 0f00 	cmp.w	r8, #0
 8007eaa:	d0a0      	beq.n	8007dee <_strtol_l.isra.0+0x1a>
 8007eac:	1e69      	subs	r1, r5, #1
 8007eae:	e006      	b.n	8007ebe <_strtol_l.isra.0+0xea>
 8007eb0:	b106      	cbz	r6, 8007eb4 <_strtol_l.isra.0+0xe0>
 8007eb2:	4240      	negs	r0, r0
 8007eb4:	f1b8 0f00 	cmp.w	r8, #0
 8007eb8:	d099      	beq.n	8007dee <_strtol_l.isra.0+0x1a>
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	d1f6      	bne.n	8007eac <_strtol_l.isra.0+0xd8>
 8007ebe:	f8c8 1000 	str.w	r1, [r8]
 8007ec2:	e794      	b.n	8007dee <_strtol_l.isra.0+0x1a>
 8007ec4:	0800909b 	.word	0x0800909b

08007ec8 <strtol>:
 8007ec8:	4613      	mov	r3, r2
 8007eca:	460a      	mov	r2, r1
 8007ecc:	4601      	mov	r1, r0
 8007ece:	4802      	ldr	r0, [pc, #8]	@ (8007ed8 <strtol+0x10>)
 8007ed0:	6800      	ldr	r0, [r0, #0]
 8007ed2:	f7ff bf7f 	b.w	8007dd4 <_strtol_l.isra.0>
 8007ed6:	bf00      	nop
 8007ed8:	20000050 	.word	0x20000050

08007edc <std>:
 8007edc:	2300      	movs	r3, #0
 8007ede:	b510      	push	{r4, lr}
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eea:	6083      	str	r3, [r0, #8]
 8007eec:	8181      	strh	r1, [r0, #12]
 8007eee:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ef0:	81c2      	strh	r2, [r0, #14]
 8007ef2:	6183      	str	r3, [r0, #24]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	305c      	adds	r0, #92	@ 0x5c
 8007efa:	f000 f8f4 	bl	80080e6 <memset>
 8007efe:	4b0d      	ldr	r3, [pc, #52]	@ (8007f34 <std+0x58>)
 8007f00:	6224      	str	r4, [r4, #32]
 8007f02:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f04:	4b0c      	ldr	r3, [pc, #48]	@ (8007f38 <std+0x5c>)
 8007f06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f08:	4b0c      	ldr	r3, [pc, #48]	@ (8007f3c <std+0x60>)
 8007f0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f40 <std+0x64>)
 8007f0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f10:	4b0c      	ldr	r3, [pc, #48]	@ (8007f44 <std+0x68>)
 8007f12:	429c      	cmp	r4, r3
 8007f14:	d006      	beq.n	8007f24 <std+0x48>
 8007f16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f1a:	4294      	cmp	r4, r2
 8007f1c:	d002      	beq.n	8007f24 <std+0x48>
 8007f1e:	33d0      	adds	r3, #208	@ 0xd0
 8007f20:	429c      	cmp	r4, r3
 8007f22:	d105      	bne.n	8007f30 <std+0x54>
 8007f24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2c:	f000 b9b0 	b.w	8008290 <__retarget_lock_init_recursive>
 8007f30:	bd10      	pop	{r4, pc}
 8007f32:	bf00      	nop
 8007f34:	08008061 	.word	0x08008061
 8007f38:	08008083 	.word	0x08008083
 8007f3c:	080080bb 	.word	0x080080bb
 8007f40:	080080df 	.word	0x080080df
 8007f44:	200003d4 	.word	0x200003d4

08007f48 <stdio_exit_handler>:
 8007f48:	4a02      	ldr	r2, [pc, #8]	@ (8007f54 <stdio_exit_handler+0xc>)
 8007f4a:	4903      	ldr	r1, [pc, #12]	@ (8007f58 <stdio_exit_handler+0x10>)
 8007f4c:	4803      	ldr	r0, [pc, #12]	@ (8007f5c <stdio_exit_handler+0x14>)
 8007f4e:	f000 b869 	b.w	8008024 <_fwalk_sglue>
 8007f52:	bf00      	nop
 8007f54:	20000044 	.word	0x20000044
 8007f58:	080085ed 	.word	0x080085ed
 8007f5c:	20000054 	.word	0x20000054

08007f60 <cleanup_stdio>:
 8007f60:	6841      	ldr	r1, [r0, #4]
 8007f62:	4b0c      	ldr	r3, [pc, #48]	@ (8007f94 <cleanup_stdio+0x34>)
 8007f64:	b510      	push	{r4, lr}
 8007f66:	4299      	cmp	r1, r3
 8007f68:	4604      	mov	r4, r0
 8007f6a:	d001      	beq.n	8007f70 <cleanup_stdio+0x10>
 8007f6c:	f000 fb3e 	bl	80085ec <_fflush_r>
 8007f70:	68a1      	ldr	r1, [r4, #8]
 8007f72:	4b09      	ldr	r3, [pc, #36]	@ (8007f98 <cleanup_stdio+0x38>)
 8007f74:	4299      	cmp	r1, r3
 8007f76:	d002      	beq.n	8007f7e <cleanup_stdio+0x1e>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 fb37 	bl	80085ec <_fflush_r>
 8007f7e:	68e1      	ldr	r1, [r4, #12]
 8007f80:	4b06      	ldr	r3, [pc, #24]	@ (8007f9c <cleanup_stdio+0x3c>)
 8007f82:	4299      	cmp	r1, r3
 8007f84:	d004      	beq.n	8007f90 <cleanup_stdio+0x30>
 8007f86:	4620      	mov	r0, r4
 8007f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f8c:	f000 bb2e 	b.w	80085ec <_fflush_r>
 8007f90:	bd10      	pop	{r4, pc}
 8007f92:	bf00      	nop
 8007f94:	200003d4 	.word	0x200003d4
 8007f98:	2000043c 	.word	0x2000043c
 8007f9c:	200004a4 	.word	0x200004a4

08007fa0 <global_stdio_init.part.0>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd0 <global_stdio_init.part.0+0x30>)
 8007fa4:	4c0b      	ldr	r4, [pc, #44]	@ (8007fd4 <global_stdio_init.part.0+0x34>)
 8007fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd8 <global_stdio_init.part.0+0x38>)
 8007fa8:	4620      	mov	r0, r4
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	2104      	movs	r1, #4
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f7ff ff94 	bl	8007edc <std>
 8007fb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fb8:	2201      	movs	r2, #1
 8007fba:	2109      	movs	r1, #9
 8007fbc:	f7ff ff8e 	bl	8007edc <std>
 8007fc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fca:	2112      	movs	r1, #18
 8007fcc:	f7ff bf86 	b.w	8007edc <std>
 8007fd0:	2000050c 	.word	0x2000050c
 8007fd4:	200003d4 	.word	0x200003d4
 8007fd8:	08007f49 	.word	0x08007f49

08007fdc <__sfp_lock_acquire>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	@ (8007fe4 <__sfp_lock_acquire+0x8>)
 8007fde:	f000 b958 	b.w	8008292 <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20000515 	.word	0x20000515

08007fe8 <__sfp_lock_release>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__sfp_lock_release+0x8>)
 8007fea:	f000 b953 	b.w	8008294 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20000515 	.word	0x20000515

08007ff4 <__sinit>:
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	f7ff fff0 	bl	8007fdc <__sfp_lock_acquire>
 8007ffc:	6a23      	ldr	r3, [r4, #32]
 8007ffe:	b11b      	cbz	r3, 8008008 <__sinit+0x14>
 8008000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008004:	f7ff bff0 	b.w	8007fe8 <__sfp_lock_release>
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <__sinit+0x28>)
 800800a:	6223      	str	r3, [r4, #32]
 800800c:	4b04      	ldr	r3, [pc, #16]	@ (8008020 <__sinit+0x2c>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1f5      	bne.n	8008000 <__sinit+0xc>
 8008014:	f7ff ffc4 	bl	8007fa0 <global_stdio_init.part.0>
 8008018:	e7f2      	b.n	8008000 <__sinit+0xc>
 800801a:	bf00      	nop
 800801c:	08007f61 	.word	0x08007f61
 8008020:	2000050c 	.word	0x2000050c

08008024 <_fwalk_sglue>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	4607      	mov	r7, r0
 800802a:	4688      	mov	r8, r1
 800802c:	4614      	mov	r4, r2
 800802e:	2600      	movs	r6, #0
 8008030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008034:	f1b9 0901 	subs.w	r9, r9, #1
 8008038:	d505      	bpl.n	8008046 <_fwalk_sglue+0x22>
 800803a:	6824      	ldr	r4, [r4, #0]
 800803c:	2c00      	cmp	r4, #0
 800803e:	d1f7      	bne.n	8008030 <_fwalk_sglue+0xc>
 8008040:	4630      	mov	r0, r6
 8008042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008046:	89ab      	ldrh	r3, [r5, #12]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d907      	bls.n	800805c <_fwalk_sglue+0x38>
 800804c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008050:	3301      	adds	r3, #1
 8008052:	d003      	beq.n	800805c <_fwalk_sglue+0x38>
 8008054:	4629      	mov	r1, r5
 8008056:	4638      	mov	r0, r7
 8008058:	47c0      	blx	r8
 800805a:	4306      	orrs	r6, r0
 800805c:	3568      	adds	r5, #104	@ 0x68
 800805e:	e7e9      	b.n	8008034 <_fwalk_sglue+0x10>

08008060 <__sread>:
 8008060:	b510      	push	{r4, lr}
 8008062:	460c      	mov	r4, r1
 8008064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008068:	f000 f8c4 	bl	80081f4 <_read_r>
 800806c:	2800      	cmp	r0, #0
 800806e:	bfab      	itete	ge
 8008070:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008072:	89a3      	ldrhlt	r3, [r4, #12]
 8008074:	181b      	addge	r3, r3, r0
 8008076:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800807a:	bfac      	ite	ge
 800807c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800807e:	81a3      	strhlt	r3, [r4, #12]
 8008080:	bd10      	pop	{r4, pc}

08008082 <__swrite>:
 8008082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008086:	461f      	mov	r7, r3
 8008088:	898b      	ldrh	r3, [r1, #12]
 800808a:	4605      	mov	r5, r0
 800808c:	05db      	lsls	r3, r3, #23
 800808e:	460c      	mov	r4, r1
 8008090:	4616      	mov	r6, r2
 8008092:	d505      	bpl.n	80080a0 <__swrite+0x1e>
 8008094:	2302      	movs	r3, #2
 8008096:	2200      	movs	r2, #0
 8008098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809c:	f000 f898 	bl	80081d0 <_lseek_r>
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	4632      	mov	r2, r6
 80080a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	4628      	mov	r0, r5
 80080ac:	463b      	mov	r3, r7
 80080ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b6:	f000 b8af 	b.w	8008218 <_write_r>

080080ba <__sseek>:
 80080ba:	b510      	push	{r4, lr}
 80080bc:	460c      	mov	r4, r1
 80080be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c2:	f000 f885 	bl	80081d0 <_lseek_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	bf15      	itete	ne
 80080cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080d6:	81a3      	strheq	r3, [r4, #12]
 80080d8:	bf18      	it	ne
 80080da:	81a3      	strhne	r3, [r4, #12]
 80080dc:	bd10      	pop	{r4, pc}

080080de <__sclose>:
 80080de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e2:	f000 b865 	b.w	80081b0 <_close_r>

080080e6 <memset>:
 80080e6:	4603      	mov	r3, r0
 80080e8:	4402      	add	r2, r0
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d100      	bne.n	80080f0 <memset+0xa>
 80080ee:	4770      	bx	lr
 80080f0:	f803 1b01 	strb.w	r1, [r3], #1
 80080f4:	e7f9      	b.n	80080ea <memset+0x4>
	...

080080f8 <strtok>:
 80080f8:	4b16      	ldr	r3, [pc, #88]	@ (8008154 <strtok+0x5c>)
 80080fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fe:	681f      	ldr	r7, [r3, #0]
 8008100:	4605      	mov	r5, r0
 8008102:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008104:	460e      	mov	r6, r1
 8008106:	b9ec      	cbnz	r4, 8008144 <strtok+0x4c>
 8008108:	2050      	movs	r0, #80	@ 0x50
 800810a:	f000 f939 	bl	8008380 <malloc>
 800810e:	4602      	mov	r2, r0
 8008110:	6478      	str	r0, [r7, #68]	@ 0x44
 8008112:	b920      	cbnz	r0, 800811e <strtok+0x26>
 8008114:	215b      	movs	r1, #91	@ 0x5b
 8008116:	4b10      	ldr	r3, [pc, #64]	@ (8008158 <strtok+0x60>)
 8008118:	4810      	ldr	r0, [pc, #64]	@ (800815c <strtok+0x64>)
 800811a:	f000 f8cb 	bl	80082b4 <__assert_func>
 800811e:	e9c0 4400 	strd	r4, r4, [r0]
 8008122:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008126:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800812a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800812e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008132:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008136:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800813a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800813e:	6184      	str	r4, [r0, #24]
 8008140:	7704      	strb	r4, [r0, #28]
 8008142:	6244      	str	r4, [r0, #36]	@ 0x24
 8008144:	4631      	mov	r1, r6
 8008146:	4628      	mov	r0, r5
 8008148:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800814a:	2301      	movs	r3, #1
 800814c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	f000 b806 	b.w	8008160 <__strtok_r>
 8008154:	20000050 	.word	0x20000050
 8008158:	0800919b 	.word	0x0800919b
 800815c:	080091b2 	.word	0x080091b2

08008160 <__strtok_r>:
 8008160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008162:	4604      	mov	r4, r0
 8008164:	b908      	cbnz	r0, 800816a <__strtok_r+0xa>
 8008166:	6814      	ldr	r4, [r2, #0]
 8008168:	b144      	cbz	r4, 800817c <__strtok_r+0x1c>
 800816a:	460f      	mov	r7, r1
 800816c:	4620      	mov	r0, r4
 800816e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008172:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008176:	b91e      	cbnz	r6, 8008180 <__strtok_r+0x20>
 8008178:	b965      	cbnz	r5, 8008194 <__strtok_r+0x34>
 800817a:	6015      	str	r5, [r2, #0]
 800817c:	2000      	movs	r0, #0
 800817e:	e005      	b.n	800818c <__strtok_r+0x2c>
 8008180:	42b5      	cmp	r5, r6
 8008182:	d1f6      	bne.n	8008172 <__strtok_r+0x12>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1f0      	bne.n	800816a <__strtok_r+0xa>
 8008188:	6014      	str	r4, [r2, #0]
 800818a:	7003      	strb	r3, [r0, #0]
 800818c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818e:	461c      	mov	r4, r3
 8008190:	e00c      	b.n	80081ac <__strtok_r+0x4c>
 8008192:	b91d      	cbnz	r5, 800819c <__strtok_r+0x3c>
 8008194:	460e      	mov	r6, r1
 8008196:	4627      	mov	r7, r4
 8008198:	f814 3b01 	ldrb.w	r3, [r4], #1
 800819c:	f816 5b01 	ldrb.w	r5, [r6], #1
 80081a0:	42ab      	cmp	r3, r5
 80081a2:	d1f6      	bne.n	8008192 <__strtok_r+0x32>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f2      	beq.n	800818e <__strtok_r+0x2e>
 80081a8:	2300      	movs	r3, #0
 80081aa:	703b      	strb	r3, [r7, #0]
 80081ac:	6014      	str	r4, [r2, #0]
 80081ae:	e7ed      	b.n	800818c <__strtok_r+0x2c>

080081b0 <_close_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	2300      	movs	r3, #0
 80081b4:	4d05      	ldr	r5, [pc, #20]	@ (80081cc <_close_r+0x1c>)
 80081b6:	4604      	mov	r4, r0
 80081b8:	4608      	mov	r0, r1
 80081ba:	602b      	str	r3, [r5, #0]
 80081bc:	f7f9 ff13 	bl	8001fe6 <_close>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d102      	bne.n	80081ca <_close_r+0x1a>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	b103      	cbz	r3, 80081ca <_close_r+0x1a>
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	20000510 	.word	0x20000510

080081d0 <_lseek_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	4611      	mov	r1, r2
 80081d8:	2200      	movs	r2, #0
 80081da:	4d05      	ldr	r5, [pc, #20]	@ (80081f0 <_lseek_r+0x20>)
 80081dc:	602a      	str	r2, [r5, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7f9 ff25 	bl	800202e <_lseek>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_lseek_r+0x1e>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_lseek_r+0x1e>
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	20000510 	.word	0x20000510

080081f4 <_read_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	2200      	movs	r2, #0
 80081fe:	4d05      	ldr	r5, [pc, #20]	@ (8008214 <_read_r+0x20>)
 8008200:	602a      	str	r2, [r5, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	f7f9 feb6 	bl	8001f74 <_read>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d102      	bne.n	8008212 <_read_r+0x1e>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	b103      	cbz	r3, 8008212 <_read_r+0x1e>
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	20000510 	.word	0x20000510

08008218 <_write_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	4611      	mov	r1, r2
 8008220:	2200      	movs	r2, #0
 8008222:	4d05      	ldr	r5, [pc, #20]	@ (8008238 <_write_r+0x20>)
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	f7f9 fec1 	bl	8001fae <_write>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_write_r+0x1e>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_write_r+0x1e>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20000510 	.word	0x20000510

0800823c <__errno>:
 800823c:	4b01      	ldr	r3, [pc, #4]	@ (8008244 <__errno+0x8>)
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20000050 	.word	0x20000050

08008248 <__libc_init_array>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	2600      	movs	r6, #0
 800824c:	4d0c      	ldr	r5, [pc, #48]	@ (8008280 <__libc_init_array+0x38>)
 800824e:	4c0d      	ldr	r4, [pc, #52]	@ (8008284 <__libc_init_array+0x3c>)
 8008250:	1b64      	subs	r4, r4, r5
 8008252:	10a4      	asrs	r4, r4, #2
 8008254:	42a6      	cmp	r6, r4
 8008256:	d109      	bne.n	800826c <__libc_init_array+0x24>
 8008258:	f000 fedc 	bl	8009014 <_init>
 800825c:	2600      	movs	r6, #0
 800825e:	4d0a      	ldr	r5, [pc, #40]	@ (8008288 <__libc_init_array+0x40>)
 8008260:	4c0a      	ldr	r4, [pc, #40]	@ (800828c <__libc_init_array+0x44>)
 8008262:	1b64      	subs	r4, r4, r5
 8008264:	10a4      	asrs	r4, r4, #2
 8008266:	42a6      	cmp	r6, r4
 8008268:	d105      	bne.n	8008276 <__libc_init_array+0x2e>
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008270:	4798      	blx	r3
 8008272:	3601      	adds	r6, #1
 8008274:	e7ee      	b.n	8008254 <__libc_init_array+0xc>
 8008276:	f855 3b04 	ldr.w	r3, [r5], #4
 800827a:	4798      	blx	r3
 800827c:	3601      	adds	r6, #1
 800827e:	e7f2      	b.n	8008266 <__libc_init_array+0x1e>
 8008280:	0800927c 	.word	0x0800927c
 8008284:	0800927c 	.word	0x0800927c
 8008288:	0800927c 	.word	0x0800927c
 800828c:	08009280 	.word	0x08009280

08008290 <__retarget_lock_init_recursive>:
 8008290:	4770      	bx	lr

08008292 <__retarget_lock_acquire_recursive>:
 8008292:	4770      	bx	lr

08008294 <__retarget_lock_release_recursive>:
 8008294:	4770      	bx	lr

08008296 <memcpy>:
 8008296:	440a      	add	r2, r1
 8008298:	4291      	cmp	r1, r2
 800829a:	f100 33ff 	add.w	r3, r0, #4294967295
 800829e:	d100      	bne.n	80082a2 <memcpy+0xc>
 80082a0:	4770      	bx	lr
 80082a2:	b510      	push	{r4, lr}
 80082a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082a8:	4291      	cmp	r1, r2
 80082aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ae:	d1f9      	bne.n	80082a4 <memcpy+0xe>
 80082b0:	bd10      	pop	{r4, pc}
	...

080082b4 <__assert_func>:
 80082b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082b6:	4614      	mov	r4, r2
 80082b8:	461a      	mov	r2, r3
 80082ba:	4b09      	ldr	r3, [pc, #36]	@ (80082e0 <__assert_func+0x2c>)
 80082bc:	4605      	mov	r5, r0
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68d8      	ldr	r0, [r3, #12]
 80082c2:	b14c      	cbz	r4, 80082d8 <__assert_func+0x24>
 80082c4:	4b07      	ldr	r3, [pc, #28]	@ (80082e4 <__assert_func+0x30>)
 80082c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082ca:	9100      	str	r1, [sp, #0]
 80082cc:	462b      	mov	r3, r5
 80082ce:	4906      	ldr	r1, [pc, #24]	@ (80082e8 <__assert_func+0x34>)
 80082d0:	f000 f9b4 	bl	800863c <fiprintf>
 80082d4:	f000 f9d4 	bl	8008680 <abort>
 80082d8:	4b04      	ldr	r3, [pc, #16]	@ (80082ec <__assert_func+0x38>)
 80082da:	461c      	mov	r4, r3
 80082dc:	e7f3      	b.n	80082c6 <__assert_func+0x12>
 80082de:	bf00      	nop
 80082e0:	20000050 	.word	0x20000050
 80082e4:	0800920c 	.word	0x0800920c
 80082e8:	08009219 	.word	0x08009219
 80082ec:	08009247 	.word	0x08009247

080082f0 <_free_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4605      	mov	r5, r0
 80082f4:	2900      	cmp	r1, #0
 80082f6:	d040      	beq.n	800837a <_free_r+0x8a>
 80082f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082fc:	1f0c      	subs	r4, r1, #4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfb8      	it	lt
 8008302:	18e4      	addlt	r4, r4, r3
 8008304:	f000 f8e6 	bl	80084d4 <__malloc_lock>
 8008308:	4a1c      	ldr	r2, [pc, #112]	@ (800837c <_free_r+0x8c>)
 800830a:	6813      	ldr	r3, [r2, #0]
 800830c:	b933      	cbnz	r3, 800831c <_free_r+0x2c>
 800830e:	6063      	str	r3, [r4, #4]
 8008310:	6014      	str	r4, [r2, #0]
 8008312:	4628      	mov	r0, r5
 8008314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008318:	f000 b8e2 	b.w	80084e0 <__malloc_unlock>
 800831c:	42a3      	cmp	r3, r4
 800831e:	d908      	bls.n	8008332 <_free_r+0x42>
 8008320:	6820      	ldr	r0, [r4, #0]
 8008322:	1821      	adds	r1, r4, r0
 8008324:	428b      	cmp	r3, r1
 8008326:	bf01      	itttt	eq
 8008328:	6819      	ldreq	r1, [r3, #0]
 800832a:	685b      	ldreq	r3, [r3, #4]
 800832c:	1809      	addeq	r1, r1, r0
 800832e:	6021      	streq	r1, [r4, #0]
 8008330:	e7ed      	b.n	800830e <_free_r+0x1e>
 8008332:	461a      	mov	r2, r3
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	b10b      	cbz	r3, 800833c <_free_r+0x4c>
 8008338:	42a3      	cmp	r3, r4
 800833a:	d9fa      	bls.n	8008332 <_free_r+0x42>
 800833c:	6811      	ldr	r1, [r2, #0]
 800833e:	1850      	adds	r0, r2, r1
 8008340:	42a0      	cmp	r0, r4
 8008342:	d10b      	bne.n	800835c <_free_r+0x6c>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	4401      	add	r1, r0
 8008348:	1850      	adds	r0, r2, r1
 800834a:	4283      	cmp	r3, r0
 800834c:	6011      	str	r1, [r2, #0]
 800834e:	d1e0      	bne.n	8008312 <_free_r+0x22>
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	4408      	add	r0, r1
 8008356:	6010      	str	r0, [r2, #0]
 8008358:	6053      	str	r3, [r2, #4]
 800835a:	e7da      	b.n	8008312 <_free_r+0x22>
 800835c:	d902      	bls.n	8008364 <_free_r+0x74>
 800835e:	230c      	movs	r3, #12
 8008360:	602b      	str	r3, [r5, #0]
 8008362:	e7d6      	b.n	8008312 <_free_r+0x22>
 8008364:	6820      	ldr	r0, [r4, #0]
 8008366:	1821      	adds	r1, r4, r0
 8008368:	428b      	cmp	r3, r1
 800836a:	bf01      	itttt	eq
 800836c:	6819      	ldreq	r1, [r3, #0]
 800836e:	685b      	ldreq	r3, [r3, #4]
 8008370:	1809      	addeq	r1, r1, r0
 8008372:	6021      	streq	r1, [r4, #0]
 8008374:	6063      	str	r3, [r4, #4]
 8008376:	6054      	str	r4, [r2, #4]
 8008378:	e7cb      	b.n	8008312 <_free_r+0x22>
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	2000051c 	.word	0x2000051c

08008380 <malloc>:
 8008380:	4b02      	ldr	r3, [pc, #8]	@ (800838c <malloc+0xc>)
 8008382:	4601      	mov	r1, r0
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	f000 b825 	b.w	80083d4 <_malloc_r>
 800838a:	bf00      	nop
 800838c:	20000050 	.word	0x20000050

08008390 <sbrk_aligned>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	4e0f      	ldr	r6, [pc, #60]	@ (80083d0 <sbrk_aligned+0x40>)
 8008394:	460c      	mov	r4, r1
 8008396:	6831      	ldr	r1, [r6, #0]
 8008398:	4605      	mov	r5, r0
 800839a:	b911      	cbnz	r1, 80083a2 <sbrk_aligned+0x12>
 800839c:	f000 f960 	bl	8008660 <_sbrk_r>
 80083a0:	6030      	str	r0, [r6, #0]
 80083a2:	4621      	mov	r1, r4
 80083a4:	4628      	mov	r0, r5
 80083a6:	f000 f95b 	bl	8008660 <_sbrk_r>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	d103      	bne.n	80083b6 <sbrk_aligned+0x26>
 80083ae:	f04f 34ff 	mov.w	r4, #4294967295
 80083b2:	4620      	mov	r0, r4
 80083b4:	bd70      	pop	{r4, r5, r6, pc}
 80083b6:	1cc4      	adds	r4, r0, #3
 80083b8:	f024 0403 	bic.w	r4, r4, #3
 80083bc:	42a0      	cmp	r0, r4
 80083be:	d0f8      	beq.n	80083b2 <sbrk_aligned+0x22>
 80083c0:	1a21      	subs	r1, r4, r0
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 f94c 	bl	8008660 <_sbrk_r>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d1f2      	bne.n	80083b2 <sbrk_aligned+0x22>
 80083cc:	e7ef      	b.n	80083ae <sbrk_aligned+0x1e>
 80083ce:	bf00      	nop
 80083d0:	20000518 	.word	0x20000518

080083d4 <_malloc_r>:
 80083d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d8:	1ccd      	adds	r5, r1, #3
 80083da:	f025 0503 	bic.w	r5, r5, #3
 80083de:	3508      	adds	r5, #8
 80083e0:	2d0c      	cmp	r5, #12
 80083e2:	bf38      	it	cc
 80083e4:	250c      	movcc	r5, #12
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	4606      	mov	r6, r0
 80083ea:	db01      	blt.n	80083f0 <_malloc_r+0x1c>
 80083ec:	42a9      	cmp	r1, r5
 80083ee:	d904      	bls.n	80083fa <_malloc_r+0x26>
 80083f0:	230c      	movs	r3, #12
 80083f2:	6033      	str	r3, [r6, #0]
 80083f4:	2000      	movs	r0, #0
 80083f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084d0 <_malloc_r+0xfc>
 80083fe:	f000 f869 	bl	80084d4 <__malloc_lock>
 8008402:	f8d8 3000 	ldr.w	r3, [r8]
 8008406:	461c      	mov	r4, r3
 8008408:	bb44      	cbnz	r4, 800845c <_malloc_r+0x88>
 800840a:	4629      	mov	r1, r5
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff ffbf 	bl	8008390 <sbrk_aligned>
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	4604      	mov	r4, r0
 8008416:	d158      	bne.n	80084ca <_malloc_r+0xf6>
 8008418:	f8d8 4000 	ldr.w	r4, [r8]
 800841c:	4627      	mov	r7, r4
 800841e:	2f00      	cmp	r7, #0
 8008420:	d143      	bne.n	80084aa <_malloc_r+0xd6>
 8008422:	2c00      	cmp	r4, #0
 8008424:	d04b      	beq.n	80084be <_malloc_r+0xea>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	4639      	mov	r1, r7
 800842a:	4630      	mov	r0, r6
 800842c:	eb04 0903 	add.w	r9, r4, r3
 8008430:	f000 f916 	bl	8008660 <_sbrk_r>
 8008434:	4581      	cmp	r9, r0
 8008436:	d142      	bne.n	80084be <_malloc_r+0xea>
 8008438:	6821      	ldr	r1, [r4, #0]
 800843a:	4630      	mov	r0, r6
 800843c:	1a6d      	subs	r5, r5, r1
 800843e:	4629      	mov	r1, r5
 8008440:	f7ff ffa6 	bl	8008390 <sbrk_aligned>
 8008444:	3001      	adds	r0, #1
 8008446:	d03a      	beq.n	80084be <_malloc_r+0xea>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	442b      	add	r3, r5
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	f8d8 3000 	ldr.w	r3, [r8]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	bb62      	cbnz	r2, 80084b0 <_malloc_r+0xdc>
 8008456:	f8c8 7000 	str.w	r7, [r8]
 800845a:	e00f      	b.n	800847c <_malloc_r+0xa8>
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	1b52      	subs	r2, r2, r5
 8008460:	d420      	bmi.n	80084a4 <_malloc_r+0xd0>
 8008462:	2a0b      	cmp	r2, #11
 8008464:	d917      	bls.n	8008496 <_malloc_r+0xc2>
 8008466:	1961      	adds	r1, r4, r5
 8008468:	42a3      	cmp	r3, r4
 800846a:	6025      	str	r5, [r4, #0]
 800846c:	bf18      	it	ne
 800846e:	6059      	strne	r1, [r3, #4]
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	bf08      	it	eq
 8008474:	f8c8 1000 	streq.w	r1, [r8]
 8008478:	5162      	str	r2, [r4, r5]
 800847a:	604b      	str	r3, [r1, #4]
 800847c:	4630      	mov	r0, r6
 800847e:	f000 f82f 	bl	80084e0 <__malloc_unlock>
 8008482:	f104 000b 	add.w	r0, r4, #11
 8008486:	1d23      	adds	r3, r4, #4
 8008488:	f020 0007 	bic.w	r0, r0, #7
 800848c:	1ac2      	subs	r2, r0, r3
 800848e:	bf1c      	itt	ne
 8008490:	1a1b      	subne	r3, r3, r0
 8008492:	50a3      	strne	r3, [r4, r2]
 8008494:	e7af      	b.n	80083f6 <_malloc_r+0x22>
 8008496:	6862      	ldr	r2, [r4, #4]
 8008498:	42a3      	cmp	r3, r4
 800849a:	bf0c      	ite	eq
 800849c:	f8c8 2000 	streq.w	r2, [r8]
 80084a0:	605a      	strne	r2, [r3, #4]
 80084a2:	e7eb      	b.n	800847c <_malloc_r+0xa8>
 80084a4:	4623      	mov	r3, r4
 80084a6:	6864      	ldr	r4, [r4, #4]
 80084a8:	e7ae      	b.n	8008408 <_malloc_r+0x34>
 80084aa:	463c      	mov	r4, r7
 80084ac:	687f      	ldr	r7, [r7, #4]
 80084ae:	e7b6      	b.n	800841e <_malloc_r+0x4a>
 80084b0:	461a      	mov	r2, r3
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d1fb      	bne.n	80084b0 <_malloc_r+0xdc>
 80084b8:	2300      	movs	r3, #0
 80084ba:	6053      	str	r3, [r2, #4]
 80084bc:	e7de      	b.n	800847c <_malloc_r+0xa8>
 80084be:	230c      	movs	r3, #12
 80084c0:	4630      	mov	r0, r6
 80084c2:	6033      	str	r3, [r6, #0]
 80084c4:	f000 f80c 	bl	80084e0 <__malloc_unlock>
 80084c8:	e794      	b.n	80083f4 <_malloc_r+0x20>
 80084ca:	6005      	str	r5, [r0, #0]
 80084cc:	e7d6      	b.n	800847c <_malloc_r+0xa8>
 80084ce:	bf00      	nop
 80084d0:	2000051c 	.word	0x2000051c

080084d4 <__malloc_lock>:
 80084d4:	4801      	ldr	r0, [pc, #4]	@ (80084dc <__malloc_lock+0x8>)
 80084d6:	f7ff bedc 	b.w	8008292 <__retarget_lock_acquire_recursive>
 80084da:	bf00      	nop
 80084dc:	20000514 	.word	0x20000514

080084e0 <__malloc_unlock>:
 80084e0:	4801      	ldr	r0, [pc, #4]	@ (80084e8 <__malloc_unlock+0x8>)
 80084e2:	f7ff bed7 	b.w	8008294 <__retarget_lock_release_recursive>
 80084e6:	bf00      	nop
 80084e8:	20000514 	.word	0x20000514

080084ec <__sflush_r>:
 80084ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	0716      	lsls	r6, r2, #28
 80084f4:	4605      	mov	r5, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	d454      	bmi.n	80085a4 <__sflush_r+0xb8>
 80084fa:	684b      	ldr	r3, [r1, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dc02      	bgt.n	8008506 <__sflush_r+0x1a>
 8008500:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	dd48      	ble.n	8008598 <__sflush_r+0xac>
 8008506:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008508:	2e00      	cmp	r6, #0
 800850a:	d045      	beq.n	8008598 <__sflush_r+0xac>
 800850c:	2300      	movs	r3, #0
 800850e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008512:	682f      	ldr	r7, [r5, #0]
 8008514:	6a21      	ldr	r1, [r4, #32]
 8008516:	602b      	str	r3, [r5, #0]
 8008518:	d030      	beq.n	800857c <__sflush_r+0x90>
 800851a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	0759      	lsls	r1, r3, #29
 8008520:	d505      	bpl.n	800852e <__sflush_r+0x42>
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	1ad2      	subs	r2, r2, r3
 8008526:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008528:	b10b      	cbz	r3, 800852e <__sflush_r+0x42>
 800852a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800852c:	1ad2      	subs	r2, r2, r3
 800852e:	2300      	movs	r3, #0
 8008530:	4628      	mov	r0, r5
 8008532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008534:	6a21      	ldr	r1, [r4, #32]
 8008536:	47b0      	blx	r6
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	d106      	bne.n	800854c <__sflush_r+0x60>
 800853e:	6829      	ldr	r1, [r5, #0]
 8008540:	291d      	cmp	r1, #29
 8008542:	d82b      	bhi.n	800859c <__sflush_r+0xb0>
 8008544:	4a28      	ldr	r2, [pc, #160]	@ (80085e8 <__sflush_r+0xfc>)
 8008546:	40ca      	lsrs	r2, r1
 8008548:	07d6      	lsls	r6, r2, #31
 800854a:	d527      	bpl.n	800859c <__sflush_r+0xb0>
 800854c:	2200      	movs	r2, #0
 800854e:	6062      	str	r2, [r4, #4]
 8008550:	6922      	ldr	r2, [r4, #16]
 8008552:	04d9      	lsls	r1, r3, #19
 8008554:	6022      	str	r2, [r4, #0]
 8008556:	d504      	bpl.n	8008562 <__sflush_r+0x76>
 8008558:	1c42      	adds	r2, r0, #1
 800855a:	d101      	bne.n	8008560 <__sflush_r+0x74>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b903      	cbnz	r3, 8008562 <__sflush_r+0x76>
 8008560:	6560      	str	r0, [r4, #84]	@ 0x54
 8008562:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008564:	602f      	str	r7, [r5, #0]
 8008566:	b1b9      	cbz	r1, 8008598 <__sflush_r+0xac>
 8008568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800856c:	4299      	cmp	r1, r3
 800856e:	d002      	beq.n	8008576 <__sflush_r+0x8a>
 8008570:	4628      	mov	r0, r5
 8008572:	f7ff febd 	bl	80082f0 <_free_r>
 8008576:	2300      	movs	r3, #0
 8008578:	6363      	str	r3, [r4, #52]	@ 0x34
 800857a:	e00d      	b.n	8008598 <__sflush_r+0xac>
 800857c:	2301      	movs	r3, #1
 800857e:	4628      	mov	r0, r5
 8008580:	47b0      	blx	r6
 8008582:	4602      	mov	r2, r0
 8008584:	1c50      	adds	r0, r2, #1
 8008586:	d1c9      	bne.n	800851c <__sflush_r+0x30>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0c6      	beq.n	800851c <__sflush_r+0x30>
 800858e:	2b1d      	cmp	r3, #29
 8008590:	d001      	beq.n	8008596 <__sflush_r+0xaa>
 8008592:	2b16      	cmp	r3, #22
 8008594:	d11d      	bne.n	80085d2 <__sflush_r+0xe6>
 8008596:	602f      	str	r7, [r5, #0]
 8008598:	2000      	movs	r0, #0
 800859a:	e021      	b.n	80085e0 <__sflush_r+0xf4>
 800859c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	e01a      	b.n	80085da <__sflush_r+0xee>
 80085a4:	690f      	ldr	r7, [r1, #16]
 80085a6:	2f00      	cmp	r7, #0
 80085a8:	d0f6      	beq.n	8008598 <__sflush_r+0xac>
 80085aa:	0793      	lsls	r3, r2, #30
 80085ac:	bf18      	it	ne
 80085ae:	2300      	movne	r3, #0
 80085b0:	680e      	ldr	r6, [r1, #0]
 80085b2:	bf08      	it	eq
 80085b4:	694b      	ldreq	r3, [r1, #20]
 80085b6:	1bf6      	subs	r6, r6, r7
 80085b8:	600f      	str	r7, [r1, #0]
 80085ba:	608b      	str	r3, [r1, #8]
 80085bc:	2e00      	cmp	r6, #0
 80085be:	ddeb      	ble.n	8008598 <__sflush_r+0xac>
 80085c0:	4633      	mov	r3, r6
 80085c2:	463a      	mov	r2, r7
 80085c4:	4628      	mov	r0, r5
 80085c6:	6a21      	ldr	r1, [r4, #32]
 80085c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80085cc:	47e0      	blx	ip
 80085ce:	2800      	cmp	r0, #0
 80085d0:	dc07      	bgt.n	80085e2 <__sflush_r+0xf6>
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085da:	f04f 30ff 	mov.w	r0, #4294967295
 80085de:	81a3      	strh	r3, [r4, #12]
 80085e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085e2:	4407      	add	r7, r0
 80085e4:	1a36      	subs	r6, r6, r0
 80085e6:	e7e9      	b.n	80085bc <__sflush_r+0xd0>
 80085e8:	20400001 	.word	0x20400001

080085ec <_fflush_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	690b      	ldr	r3, [r1, #16]
 80085f0:	4605      	mov	r5, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	b913      	cbnz	r3, 80085fc <_fflush_r+0x10>
 80085f6:	2500      	movs	r5, #0
 80085f8:	4628      	mov	r0, r5
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	b118      	cbz	r0, 8008606 <_fflush_r+0x1a>
 80085fe:	6a03      	ldr	r3, [r0, #32]
 8008600:	b90b      	cbnz	r3, 8008606 <_fflush_r+0x1a>
 8008602:	f7ff fcf7 	bl	8007ff4 <__sinit>
 8008606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0f3      	beq.n	80085f6 <_fflush_r+0xa>
 800860e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008610:	07d0      	lsls	r0, r2, #31
 8008612:	d404      	bmi.n	800861e <_fflush_r+0x32>
 8008614:	0599      	lsls	r1, r3, #22
 8008616:	d402      	bmi.n	800861e <_fflush_r+0x32>
 8008618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861a:	f7ff fe3a 	bl	8008292 <__retarget_lock_acquire_recursive>
 800861e:	4628      	mov	r0, r5
 8008620:	4621      	mov	r1, r4
 8008622:	f7ff ff63 	bl	80084ec <__sflush_r>
 8008626:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008628:	4605      	mov	r5, r0
 800862a:	07da      	lsls	r2, r3, #31
 800862c:	d4e4      	bmi.n	80085f8 <_fflush_r+0xc>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	059b      	lsls	r3, r3, #22
 8008632:	d4e1      	bmi.n	80085f8 <_fflush_r+0xc>
 8008634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008636:	f7ff fe2d 	bl	8008294 <__retarget_lock_release_recursive>
 800863a:	e7dd      	b.n	80085f8 <_fflush_r+0xc>

0800863c <fiprintf>:
 800863c:	b40e      	push	{r1, r2, r3}
 800863e:	b503      	push	{r0, r1, lr}
 8008640:	4601      	mov	r1, r0
 8008642:	ab03      	add	r3, sp, #12
 8008644:	4805      	ldr	r0, [pc, #20]	@ (800865c <fiprintf+0x20>)
 8008646:	f853 2b04 	ldr.w	r2, [r3], #4
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	f000 f845 	bl	80086dc <_vfiprintf_r>
 8008652:	b002      	add	sp, #8
 8008654:	f85d eb04 	ldr.w	lr, [sp], #4
 8008658:	b003      	add	sp, #12
 800865a:	4770      	bx	lr
 800865c:	20000050 	.word	0x20000050

08008660 <_sbrk_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	2300      	movs	r3, #0
 8008664:	4d05      	ldr	r5, [pc, #20]	@ (800867c <_sbrk_r+0x1c>)
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7f9 fcec 	bl	8002048 <_sbrk>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_sbrk_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_sbrk_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	20000510 	.word	0x20000510

08008680 <abort>:
 8008680:	2006      	movs	r0, #6
 8008682:	b508      	push	{r3, lr}
 8008684:	f000 fb8e 	bl	8008da4 <raise>
 8008688:	2001      	movs	r0, #1
 800868a:	f7f9 fc68 	bl	8001f5e <_exit>

0800868e <__sfputc_r>:
 800868e:	6893      	ldr	r3, [r2, #8]
 8008690:	b410      	push	{r4}
 8008692:	3b01      	subs	r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	6093      	str	r3, [r2, #8]
 8008698:	da07      	bge.n	80086aa <__sfputc_r+0x1c>
 800869a:	6994      	ldr	r4, [r2, #24]
 800869c:	42a3      	cmp	r3, r4
 800869e:	db01      	blt.n	80086a4 <__sfputc_r+0x16>
 80086a0:	290a      	cmp	r1, #10
 80086a2:	d102      	bne.n	80086aa <__sfputc_r+0x1c>
 80086a4:	bc10      	pop	{r4}
 80086a6:	f000 bac1 	b.w	8008c2c <__swbuf_r>
 80086aa:	6813      	ldr	r3, [r2, #0]
 80086ac:	1c58      	adds	r0, r3, #1
 80086ae:	6010      	str	r0, [r2, #0]
 80086b0:	7019      	strb	r1, [r3, #0]
 80086b2:	4608      	mov	r0, r1
 80086b4:	bc10      	pop	{r4}
 80086b6:	4770      	bx	lr

080086b8 <__sfputs_r>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	4606      	mov	r6, r0
 80086bc:	460f      	mov	r7, r1
 80086be:	4614      	mov	r4, r2
 80086c0:	18d5      	adds	r5, r2, r3
 80086c2:	42ac      	cmp	r4, r5
 80086c4:	d101      	bne.n	80086ca <__sfputs_r+0x12>
 80086c6:	2000      	movs	r0, #0
 80086c8:	e007      	b.n	80086da <__sfputs_r+0x22>
 80086ca:	463a      	mov	r2, r7
 80086cc:	4630      	mov	r0, r6
 80086ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d2:	f7ff ffdc 	bl	800868e <__sfputc_r>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d1f3      	bne.n	80086c2 <__sfputs_r+0xa>
 80086da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086dc <_vfiprintf_r>:
 80086dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	460d      	mov	r5, r1
 80086e2:	4614      	mov	r4, r2
 80086e4:	4698      	mov	r8, r3
 80086e6:	4606      	mov	r6, r0
 80086e8:	b09d      	sub	sp, #116	@ 0x74
 80086ea:	b118      	cbz	r0, 80086f4 <_vfiprintf_r+0x18>
 80086ec:	6a03      	ldr	r3, [r0, #32]
 80086ee:	b90b      	cbnz	r3, 80086f4 <_vfiprintf_r+0x18>
 80086f0:	f7ff fc80 	bl	8007ff4 <__sinit>
 80086f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086f6:	07d9      	lsls	r1, r3, #31
 80086f8:	d405      	bmi.n	8008706 <_vfiprintf_r+0x2a>
 80086fa:	89ab      	ldrh	r3, [r5, #12]
 80086fc:	059a      	lsls	r2, r3, #22
 80086fe:	d402      	bmi.n	8008706 <_vfiprintf_r+0x2a>
 8008700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008702:	f7ff fdc6 	bl	8008292 <__retarget_lock_acquire_recursive>
 8008706:	89ab      	ldrh	r3, [r5, #12]
 8008708:	071b      	lsls	r3, r3, #28
 800870a:	d501      	bpl.n	8008710 <_vfiprintf_r+0x34>
 800870c:	692b      	ldr	r3, [r5, #16]
 800870e:	b99b      	cbnz	r3, 8008738 <_vfiprintf_r+0x5c>
 8008710:	4629      	mov	r1, r5
 8008712:	4630      	mov	r0, r6
 8008714:	f000 fac8 	bl	8008ca8 <__swsetup_r>
 8008718:	b170      	cbz	r0, 8008738 <_vfiprintf_r+0x5c>
 800871a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800871c:	07dc      	lsls	r4, r3, #31
 800871e:	d504      	bpl.n	800872a <_vfiprintf_r+0x4e>
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	b01d      	add	sp, #116	@ 0x74
 8008726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872a:	89ab      	ldrh	r3, [r5, #12]
 800872c:	0598      	lsls	r0, r3, #22
 800872e:	d4f7      	bmi.n	8008720 <_vfiprintf_r+0x44>
 8008730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008732:	f7ff fdaf 	bl	8008294 <__retarget_lock_release_recursive>
 8008736:	e7f3      	b.n	8008720 <_vfiprintf_r+0x44>
 8008738:	2300      	movs	r3, #0
 800873a:	9309      	str	r3, [sp, #36]	@ 0x24
 800873c:	2320      	movs	r3, #32
 800873e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008742:	2330      	movs	r3, #48	@ 0x30
 8008744:	f04f 0901 	mov.w	r9, #1
 8008748:	f8cd 800c 	str.w	r8, [sp, #12]
 800874c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80088f8 <_vfiprintf_r+0x21c>
 8008750:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008754:	4623      	mov	r3, r4
 8008756:	469a      	mov	sl, r3
 8008758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800875c:	b10a      	cbz	r2, 8008762 <_vfiprintf_r+0x86>
 800875e:	2a25      	cmp	r2, #37	@ 0x25
 8008760:	d1f9      	bne.n	8008756 <_vfiprintf_r+0x7a>
 8008762:	ebba 0b04 	subs.w	fp, sl, r4
 8008766:	d00b      	beq.n	8008780 <_vfiprintf_r+0xa4>
 8008768:	465b      	mov	r3, fp
 800876a:	4622      	mov	r2, r4
 800876c:	4629      	mov	r1, r5
 800876e:	4630      	mov	r0, r6
 8008770:	f7ff ffa2 	bl	80086b8 <__sfputs_r>
 8008774:	3001      	adds	r0, #1
 8008776:	f000 80a7 	beq.w	80088c8 <_vfiprintf_r+0x1ec>
 800877a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800877c:	445a      	add	r2, fp
 800877e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008780:	f89a 3000 	ldrb.w	r3, [sl]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 809f 	beq.w	80088c8 <_vfiprintf_r+0x1ec>
 800878a:	2300      	movs	r3, #0
 800878c:	f04f 32ff 	mov.w	r2, #4294967295
 8008790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008794:	f10a 0a01 	add.w	sl, sl, #1
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	9307      	str	r3, [sp, #28]
 800879c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80087a2:	4654      	mov	r4, sl
 80087a4:	2205      	movs	r2, #5
 80087a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087aa:	4853      	ldr	r0, [pc, #332]	@ (80088f8 <_vfiprintf_r+0x21c>)
 80087ac:	f000 fb16 	bl	8008ddc <memchr>
 80087b0:	9a04      	ldr	r2, [sp, #16]
 80087b2:	b9d8      	cbnz	r0, 80087ec <_vfiprintf_r+0x110>
 80087b4:	06d1      	lsls	r1, r2, #27
 80087b6:	bf44      	itt	mi
 80087b8:	2320      	movmi	r3, #32
 80087ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087be:	0713      	lsls	r3, r2, #28
 80087c0:	bf44      	itt	mi
 80087c2:	232b      	movmi	r3, #43	@ 0x2b
 80087c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087c8:	f89a 3000 	ldrb.w	r3, [sl]
 80087cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ce:	d015      	beq.n	80087fc <_vfiprintf_r+0x120>
 80087d0:	4654      	mov	r4, sl
 80087d2:	2000      	movs	r0, #0
 80087d4:	f04f 0c0a 	mov.w	ip, #10
 80087d8:	9a07      	ldr	r2, [sp, #28]
 80087da:	4621      	mov	r1, r4
 80087dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087e0:	3b30      	subs	r3, #48	@ 0x30
 80087e2:	2b09      	cmp	r3, #9
 80087e4:	d94b      	bls.n	800887e <_vfiprintf_r+0x1a2>
 80087e6:	b1b0      	cbz	r0, 8008816 <_vfiprintf_r+0x13a>
 80087e8:	9207      	str	r2, [sp, #28]
 80087ea:	e014      	b.n	8008816 <_vfiprintf_r+0x13a>
 80087ec:	eba0 0308 	sub.w	r3, r0, r8
 80087f0:	fa09 f303 	lsl.w	r3, r9, r3
 80087f4:	4313      	orrs	r3, r2
 80087f6:	46a2      	mov	sl, r4
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	e7d2      	b.n	80087a2 <_vfiprintf_r+0xc6>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	1d19      	adds	r1, r3, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	9103      	str	r1, [sp, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	bfbb      	ittet	lt
 8008808:	425b      	neglt	r3, r3
 800880a:	f042 0202 	orrlt.w	r2, r2, #2
 800880e:	9307      	strge	r3, [sp, #28]
 8008810:	9307      	strlt	r3, [sp, #28]
 8008812:	bfb8      	it	lt
 8008814:	9204      	strlt	r2, [sp, #16]
 8008816:	7823      	ldrb	r3, [r4, #0]
 8008818:	2b2e      	cmp	r3, #46	@ 0x2e
 800881a:	d10a      	bne.n	8008832 <_vfiprintf_r+0x156>
 800881c:	7863      	ldrb	r3, [r4, #1]
 800881e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008820:	d132      	bne.n	8008888 <_vfiprintf_r+0x1ac>
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	3402      	adds	r4, #2
 8008826:	1d1a      	adds	r2, r3, #4
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	9203      	str	r2, [sp, #12]
 800882c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80088fc <_vfiprintf_r+0x220>
 8008836:	2203      	movs	r2, #3
 8008838:	4650      	mov	r0, sl
 800883a:	7821      	ldrb	r1, [r4, #0]
 800883c:	f000 face 	bl	8008ddc <memchr>
 8008840:	b138      	cbz	r0, 8008852 <_vfiprintf_r+0x176>
 8008842:	2240      	movs	r2, #64	@ 0x40
 8008844:	9b04      	ldr	r3, [sp, #16]
 8008846:	eba0 000a 	sub.w	r0, r0, sl
 800884a:	4082      	lsls	r2, r0
 800884c:	4313      	orrs	r3, r2
 800884e:	3401      	adds	r4, #1
 8008850:	9304      	str	r3, [sp, #16]
 8008852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008856:	2206      	movs	r2, #6
 8008858:	4829      	ldr	r0, [pc, #164]	@ (8008900 <_vfiprintf_r+0x224>)
 800885a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800885e:	f000 fabd 	bl	8008ddc <memchr>
 8008862:	2800      	cmp	r0, #0
 8008864:	d03f      	beq.n	80088e6 <_vfiprintf_r+0x20a>
 8008866:	4b27      	ldr	r3, [pc, #156]	@ (8008904 <_vfiprintf_r+0x228>)
 8008868:	bb1b      	cbnz	r3, 80088b2 <_vfiprintf_r+0x1d6>
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	3307      	adds	r3, #7
 800886e:	f023 0307 	bic.w	r3, r3, #7
 8008872:	3308      	adds	r3, #8
 8008874:	9303      	str	r3, [sp, #12]
 8008876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008878:	443b      	add	r3, r7
 800887a:	9309      	str	r3, [sp, #36]	@ 0x24
 800887c:	e76a      	b.n	8008754 <_vfiprintf_r+0x78>
 800887e:	460c      	mov	r4, r1
 8008880:	2001      	movs	r0, #1
 8008882:	fb0c 3202 	mla	r2, ip, r2, r3
 8008886:	e7a8      	b.n	80087da <_vfiprintf_r+0xfe>
 8008888:	2300      	movs	r3, #0
 800888a:	f04f 0c0a 	mov.w	ip, #10
 800888e:	4619      	mov	r1, r3
 8008890:	3401      	adds	r4, #1
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	4620      	mov	r0, r4
 8008896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800889a:	3a30      	subs	r2, #48	@ 0x30
 800889c:	2a09      	cmp	r2, #9
 800889e:	d903      	bls.n	80088a8 <_vfiprintf_r+0x1cc>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0c6      	beq.n	8008832 <_vfiprintf_r+0x156>
 80088a4:	9105      	str	r1, [sp, #20]
 80088a6:	e7c4      	b.n	8008832 <_vfiprintf_r+0x156>
 80088a8:	4604      	mov	r4, r0
 80088aa:	2301      	movs	r3, #1
 80088ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80088b0:	e7f0      	b.n	8008894 <_vfiprintf_r+0x1b8>
 80088b2:	ab03      	add	r3, sp, #12
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	462a      	mov	r2, r5
 80088b8:	4630      	mov	r0, r6
 80088ba:	4b13      	ldr	r3, [pc, #76]	@ (8008908 <_vfiprintf_r+0x22c>)
 80088bc:	a904      	add	r1, sp, #16
 80088be:	f3af 8000 	nop.w
 80088c2:	4607      	mov	r7, r0
 80088c4:	1c78      	adds	r0, r7, #1
 80088c6:	d1d6      	bne.n	8008876 <_vfiprintf_r+0x19a>
 80088c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088ca:	07d9      	lsls	r1, r3, #31
 80088cc:	d405      	bmi.n	80088da <_vfiprintf_r+0x1fe>
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	059a      	lsls	r2, r3, #22
 80088d2:	d402      	bmi.n	80088da <_vfiprintf_r+0x1fe>
 80088d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088d6:	f7ff fcdd 	bl	8008294 <__retarget_lock_release_recursive>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	065b      	lsls	r3, r3, #25
 80088de:	f53f af1f 	bmi.w	8008720 <_vfiprintf_r+0x44>
 80088e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088e4:	e71e      	b.n	8008724 <_vfiprintf_r+0x48>
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	462a      	mov	r2, r5
 80088ec:	4630      	mov	r0, r6
 80088ee:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <_vfiprintf_r+0x22c>)
 80088f0:	a904      	add	r1, sp, #16
 80088f2:	f000 f87d 	bl	80089f0 <_printf_i>
 80088f6:	e7e4      	b.n	80088c2 <_vfiprintf_r+0x1e6>
 80088f8:	08009248 	.word	0x08009248
 80088fc:	0800924e 	.word	0x0800924e
 8008900:	08009252 	.word	0x08009252
 8008904:	00000000 	.word	0x00000000
 8008908:	080086b9 	.word	0x080086b9

0800890c <_printf_common>:
 800890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008910:	4616      	mov	r6, r2
 8008912:	4698      	mov	r8, r3
 8008914:	688a      	ldr	r2, [r1, #8]
 8008916:	690b      	ldr	r3, [r1, #16]
 8008918:	4607      	mov	r7, r0
 800891a:	4293      	cmp	r3, r2
 800891c:	bfb8      	it	lt
 800891e:	4613      	movlt	r3, r2
 8008920:	6033      	str	r3, [r6, #0]
 8008922:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008926:	460c      	mov	r4, r1
 8008928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800892c:	b10a      	cbz	r2, 8008932 <_printf_common+0x26>
 800892e:	3301      	adds	r3, #1
 8008930:	6033      	str	r3, [r6, #0]
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	0699      	lsls	r1, r3, #26
 8008936:	bf42      	ittt	mi
 8008938:	6833      	ldrmi	r3, [r6, #0]
 800893a:	3302      	addmi	r3, #2
 800893c:	6033      	strmi	r3, [r6, #0]
 800893e:	6825      	ldr	r5, [r4, #0]
 8008940:	f015 0506 	ands.w	r5, r5, #6
 8008944:	d106      	bne.n	8008954 <_printf_common+0x48>
 8008946:	f104 0a19 	add.w	sl, r4, #25
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	6832      	ldr	r2, [r6, #0]
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	42ab      	cmp	r3, r5
 8008952:	dc2b      	bgt.n	80089ac <_printf_common+0xa0>
 8008954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	3b00      	subs	r3, #0
 800895c:	bf18      	it	ne
 800895e:	2301      	movne	r3, #1
 8008960:	0692      	lsls	r2, r2, #26
 8008962:	d430      	bmi.n	80089c6 <_printf_common+0xba>
 8008964:	4641      	mov	r1, r8
 8008966:	4638      	mov	r0, r7
 8008968:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800896c:	47c8      	blx	r9
 800896e:	3001      	adds	r0, #1
 8008970:	d023      	beq.n	80089ba <_printf_common+0xae>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	6922      	ldr	r2, [r4, #16]
 8008976:	f003 0306 	and.w	r3, r3, #6
 800897a:	2b04      	cmp	r3, #4
 800897c:	bf14      	ite	ne
 800897e:	2500      	movne	r5, #0
 8008980:	6833      	ldreq	r3, [r6, #0]
 8008982:	f04f 0600 	mov.w	r6, #0
 8008986:	bf08      	it	eq
 8008988:	68e5      	ldreq	r5, [r4, #12]
 800898a:	f104 041a 	add.w	r4, r4, #26
 800898e:	bf08      	it	eq
 8008990:	1aed      	subeq	r5, r5, r3
 8008992:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008996:	bf08      	it	eq
 8008998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800899c:	4293      	cmp	r3, r2
 800899e:	bfc4      	itt	gt
 80089a0:	1a9b      	subgt	r3, r3, r2
 80089a2:	18ed      	addgt	r5, r5, r3
 80089a4:	42b5      	cmp	r5, r6
 80089a6:	d11a      	bne.n	80089de <_printf_common+0xd2>
 80089a8:	2000      	movs	r0, #0
 80089aa:	e008      	b.n	80089be <_printf_common+0xb2>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4652      	mov	r2, sl
 80089b0:	4641      	mov	r1, r8
 80089b2:	4638      	mov	r0, r7
 80089b4:	47c8      	blx	r9
 80089b6:	3001      	adds	r0, #1
 80089b8:	d103      	bne.n	80089c2 <_printf_common+0xb6>
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c2:	3501      	adds	r5, #1
 80089c4:	e7c1      	b.n	800894a <_printf_common+0x3e>
 80089c6:	2030      	movs	r0, #48	@ 0x30
 80089c8:	18e1      	adds	r1, r4, r3
 80089ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089d4:	4422      	add	r2, r4
 80089d6:	3302      	adds	r3, #2
 80089d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089dc:	e7c2      	b.n	8008964 <_printf_common+0x58>
 80089de:	2301      	movs	r3, #1
 80089e0:	4622      	mov	r2, r4
 80089e2:	4641      	mov	r1, r8
 80089e4:	4638      	mov	r0, r7
 80089e6:	47c8      	blx	r9
 80089e8:	3001      	adds	r0, #1
 80089ea:	d0e6      	beq.n	80089ba <_printf_common+0xae>
 80089ec:	3601      	adds	r6, #1
 80089ee:	e7d9      	b.n	80089a4 <_printf_common+0x98>

080089f0 <_printf_i>:
 80089f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	7e0f      	ldrb	r7, [r1, #24]
 80089f6:	4691      	mov	r9, r2
 80089f8:	2f78      	cmp	r7, #120	@ 0x78
 80089fa:	4680      	mov	r8, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	469a      	mov	sl, r3
 8008a00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a06:	d807      	bhi.n	8008a18 <_printf_i+0x28>
 8008a08:	2f62      	cmp	r7, #98	@ 0x62
 8008a0a:	d80a      	bhi.n	8008a22 <_printf_i+0x32>
 8008a0c:	2f00      	cmp	r7, #0
 8008a0e:	f000 80d1 	beq.w	8008bb4 <_printf_i+0x1c4>
 8008a12:	2f58      	cmp	r7, #88	@ 0x58
 8008a14:	f000 80b8 	beq.w	8008b88 <_printf_i+0x198>
 8008a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a20:	e03a      	b.n	8008a98 <_printf_i+0xa8>
 8008a22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a26:	2b15      	cmp	r3, #21
 8008a28:	d8f6      	bhi.n	8008a18 <_printf_i+0x28>
 8008a2a:	a101      	add	r1, pc, #4	@ (adr r1, 8008a30 <_printf_i+0x40>)
 8008a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a30:	08008a89 	.word	0x08008a89
 8008a34:	08008a9d 	.word	0x08008a9d
 8008a38:	08008a19 	.word	0x08008a19
 8008a3c:	08008a19 	.word	0x08008a19
 8008a40:	08008a19 	.word	0x08008a19
 8008a44:	08008a19 	.word	0x08008a19
 8008a48:	08008a9d 	.word	0x08008a9d
 8008a4c:	08008a19 	.word	0x08008a19
 8008a50:	08008a19 	.word	0x08008a19
 8008a54:	08008a19 	.word	0x08008a19
 8008a58:	08008a19 	.word	0x08008a19
 8008a5c:	08008b9b 	.word	0x08008b9b
 8008a60:	08008ac7 	.word	0x08008ac7
 8008a64:	08008b55 	.word	0x08008b55
 8008a68:	08008a19 	.word	0x08008a19
 8008a6c:	08008a19 	.word	0x08008a19
 8008a70:	08008bbd 	.word	0x08008bbd
 8008a74:	08008a19 	.word	0x08008a19
 8008a78:	08008ac7 	.word	0x08008ac7
 8008a7c:	08008a19 	.word	0x08008a19
 8008a80:	08008a19 	.word	0x08008a19
 8008a84:	08008b5d 	.word	0x08008b5d
 8008a88:	6833      	ldr	r3, [r6, #0]
 8008a8a:	1d1a      	adds	r2, r3, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6032      	str	r2, [r6, #0]
 8008a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e09c      	b.n	8008bd6 <_printf_i+0x1e6>
 8008a9c:	6833      	ldr	r3, [r6, #0]
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	1d19      	adds	r1, r3, #4
 8008aa2:	6031      	str	r1, [r6, #0]
 8008aa4:	0606      	lsls	r6, r0, #24
 8008aa6:	d501      	bpl.n	8008aac <_printf_i+0xbc>
 8008aa8:	681d      	ldr	r5, [r3, #0]
 8008aaa:	e003      	b.n	8008ab4 <_printf_i+0xc4>
 8008aac:	0645      	lsls	r5, r0, #25
 8008aae:	d5fb      	bpl.n	8008aa8 <_printf_i+0xb8>
 8008ab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ab4:	2d00      	cmp	r5, #0
 8008ab6:	da03      	bge.n	8008ac0 <_printf_i+0xd0>
 8008ab8:	232d      	movs	r3, #45	@ 0x2d
 8008aba:	426d      	negs	r5, r5
 8008abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ac0:	230a      	movs	r3, #10
 8008ac2:	4858      	ldr	r0, [pc, #352]	@ (8008c24 <_printf_i+0x234>)
 8008ac4:	e011      	b.n	8008aea <_printf_i+0xfa>
 8008ac6:	6821      	ldr	r1, [r4, #0]
 8008ac8:	6833      	ldr	r3, [r6, #0]
 8008aca:	0608      	lsls	r0, r1, #24
 8008acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ad0:	d402      	bmi.n	8008ad8 <_printf_i+0xe8>
 8008ad2:	0649      	lsls	r1, r1, #25
 8008ad4:	bf48      	it	mi
 8008ad6:	b2ad      	uxthmi	r5, r5
 8008ad8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ada:	6033      	str	r3, [r6, #0]
 8008adc:	bf14      	ite	ne
 8008ade:	230a      	movne	r3, #10
 8008ae0:	2308      	moveq	r3, #8
 8008ae2:	4850      	ldr	r0, [pc, #320]	@ (8008c24 <_printf_i+0x234>)
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aea:	6866      	ldr	r6, [r4, #4]
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	60a6      	str	r6, [r4, #8]
 8008af0:	db05      	blt.n	8008afe <_printf_i+0x10e>
 8008af2:	6821      	ldr	r1, [r4, #0]
 8008af4:	432e      	orrs	r6, r5
 8008af6:	f021 0104 	bic.w	r1, r1, #4
 8008afa:	6021      	str	r1, [r4, #0]
 8008afc:	d04b      	beq.n	8008b96 <_printf_i+0x1a6>
 8008afe:	4616      	mov	r6, r2
 8008b00:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b04:	fb03 5711 	mls	r7, r3, r1, r5
 8008b08:	5dc7      	ldrb	r7, [r0, r7]
 8008b0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b0e:	462f      	mov	r7, r5
 8008b10:	42bb      	cmp	r3, r7
 8008b12:	460d      	mov	r5, r1
 8008b14:	d9f4      	bls.n	8008b00 <_printf_i+0x110>
 8008b16:	2b08      	cmp	r3, #8
 8008b18:	d10b      	bne.n	8008b32 <_printf_i+0x142>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	07df      	lsls	r7, r3, #31
 8008b1e:	d508      	bpl.n	8008b32 <_printf_i+0x142>
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	6861      	ldr	r1, [r4, #4]
 8008b24:	4299      	cmp	r1, r3
 8008b26:	bfde      	ittt	le
 8008b28:	2330      	movle	r3, #48	@ 0x30
 8008b2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b32:	1b92      	subs	r2, r2, r6
 8008b34:	6122      	str	r2, [r4, #16]
 8008b36:	464b      	mov	r3, r9
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	f8cd a000 	str.w	sl, [sp]
 8008b40:	aa03      	add	r2, sp, #12
 8008b42:	f7ff fee3 	bl	800890c <_printf_common>
 8008b46:	3001      	adds	r0, #1
 8008b48:	d14a      	bne.n	8008be0 <_printf_i+0x1f0>
 8008b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4e:	b004      	add	sp, #16
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	f043 0320 	orr.w	r3, r3, #32
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	2778      	movs	r7, #120	@ 0x78
 8008b5e:	4832      	ldr	r0, [pc, #200]	@ (8008c28 <_printf_i+0x238>)
 8008b60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	6831      	ldr	r1, [r6, #0]
 8008b68:	061f      	lsls	r7, r3, #24
 8008b6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b6e:	d402      	bmi.n	8008b76 <_printf_i+0x186>
 8008b70:	065f      	lsls	r7, r3, #25
 8008b72:	bf48      	it	mi
 8008b74:	b2ad      	uxthmi	r5, r5
 8008b76:	6031      	str	r1, [r6, #0]
 8008b78:	07d9      	lsls	r1, r3, #31
 8008b7a:	bf44      	itt	mi
 8008b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8008b80:	6023      	strmi	r3, [r4, #0]
 8008b82:	b11d      	cbz	r5, 8008b8c <_printf_i+0x19c>
 8008b84:	2310      	movs	r3, #16
 8008b86:	e7ad      	b.n	8008ae4 <_printf_i+0xf4>
 8008b88:	4826      	ldr	r0, [pc, #152]	@ (8008c24 <_printf_i+0x234>)
 8008b8a:	e7e9      	b.n	8008b60 <_printf_i+0x170>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	f023 0320 	bic.w	r3, r3, #32
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	e7f6      	b.n	8008b84 <_printf_i+0x194>
 8008b96:	4616      	mov	r6, r2
 8008b98:	e7bd      	b.n	8008b16 <_printf_i+0x126>
 8008b9a:	6833      	ldr	r3, [r6, #0]
 8008b9c:	6825      	ldr	r5, [r4, #0]
 8008b9e:	1d18      	adds	r0, r3, #4
 8008ba0:	6961      	ldr	r1, [r4, #20]
 8008ba2:	6030      	str	r0, [r6, #0]
 8008ba4:	062e      	lsls	r6, r5, #24
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	d501      	bpl.n	8008bae <_printf_i+0x1be>
 8008baa:	6019      	str	r1, [r3, #0]
 8008bac:	e002      	b.n	8008bb4 <_printf_i+0x1c4>
 8008bae:	0668      	lsls	r0, r5, #25
 8008bb0:	d5fb      	bpl.n	8008baa <_printf_i+0x1ba>
 8008bb2:	8019      	strh	r1, [r3, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4616      	mov	r6, r2
 8008bb8:	6123      	str	r3, [r4, #16]
 8008bba:	e7bc      	b.n	8008b36 <_printf_i+0x146>
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	1d1a      	adds	r2, r3, #4
 8008bc2:	6032      	str	r2, [r6, #0]
 8008bc4:	681e      	ldr	r6, [r3, #0]
 8008bc6:	6862      	ldr	r2, [r4, #4]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f907 	bl	8008ddc <memchr>
 8008bce:	b108      	cbz	r0, 8008bd4 <_printf_i+0x1e4>
 8008bd0:	1b80      	subs	r0, r0, r6
 8008bd2:	6060      	str	r0, [r4, #4]
 8008bd4:	6863      	ldr	r3, [r4, #4]
 8008bd6:	6123      	str	r3, [r4, #16]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bde:	e7aa      	b.n	8008b36 <_printf_i+0x146>
 8008be0:	4632      	mov	r2, r6
 8008be2:	4649      	mov	r1, r9
 8008be4:	4640      	mov	r0, r8
 8008be6:	6923      	ldr	r3, [r4, #16]
 8008be8:	47d0      	blx	sl
 8008bea:	3001      	adds	r0, #1
 8008bec:	d0ad      	beq.n	8008b4a <_printf_i+0x15a>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	079b      	lsls	r3, r3, #30
 8008bf2:	d413      	bmi.n	8008c1c <_printf_i+0x22c>
 8008bf4:	68e0      	ldr	r0, [r4, #12]
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	4298      	cmp	r0, r3
 8008bfa:	bfb8      	it	lt
 8008bfc:	4618      	movlt	r0, r3
 8008bfe:	e7a6      	b.n	8008b4e <_printf_i+0x15e>
 8008c00:	2301      	movs	r3, #1
 8008c02:	4632      	mov	r2, r6
 8008c04:	4649      	mov	r1, r9
 8008c06:	4640      	mov	r0, r8
 8008c08:	47d0      	blx	sl
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d09d      	beq.n	8008b4a <_printf_i+0x15a>
 8008c0e:	3501      	adds	r5, #1
 8008c10:	68e3      	ldr	r3, [r4, #12]
 8008c12:	9903      	ldr	r1, [sp, #12]
 8008c14:	1a5b      	subs	r3, r3, r1
 8008c16:	42ab      	cmp	r3, r5
 8008c18:	dcf2      	bgt.n	8008c00 <_printf_i+0x210>
 8008c1a:	e7eb      	b.n	8008bf4 <_printf_i+0x204>
 8008c1c:	2500      	movs	r5, #0
 8008c1e:	f104 0619 	add.w	r6, r4, #25
 8008c22:	e7f5      	b.n	8008c10 <_printf_i+0x220>
 8008c24:	08009259 	.word	0x08009259
 8008c28:	0800926a 	.word	0x0800926a

08008c2c <__swbuf_r>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	460e      	mov	r6, r1
 8008c30:	4614      	mov	r4, r2
 8008c32:	4605      	mov	r5, r0
 8008c34:	b118      	cbz	r0, 8008c3e <__swbuf_r+0x12>
 8008c36:	6a03      	ldr	r3, [r0, #32]
 8008c38:	b90b      	cbnz	r3, 8008c3e <__swbuf_r+0x12>
 8008c3a:	f7ff f9db 	bl	8007ff4 <__sinit>
 8008c3e:	69a3      	ldr	r3, [r4, #24]
 8008c40:	60a3      	str	r3, [r4, #8]
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	071a      	lsls	r2, r3, #28
 8008c46:	d501      	bpl.n	8008c4c <__swbuf_r+0x20>
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	b943      	cbnz	r3, 8008c5e <__swbuf_r+0x32>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 f82a 	bl	8008ca8 <__swsetup_r>
 8008c54:	b118      	cbz	r0, 8008c5e <__swbuf_r+0x32>
 8008c56:	f04f 37ff 	mov.w	r7, #4294967295
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	6922      	ldr	r2, [r4, #16]
 8008c62:	b2f6      	uxtb	r6, r6
 8008c64:	1a98      	subs	r0, r3, r2
 8008c66:	6963      	ldr	r3, [r4, #20]
 8008c68:	4637      	mov	r7, r6
 8008c6a:	4283      	cmp	r3, r0
 8008c6c:	dc05      	bgt.n	8008c7a <__swbuf_r+0x4e>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	f7ff fcbb 	bl	80085ec <_fflush_r>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1ed      	bne.n	8008c56 <__swbuf_r+0x2a>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	60a3      	str	r3, [r4, #8]
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	6022      	str	r2, [r4, #0]
 8008c86:	701e      	strb	r6, [r3, #0]
 8008c88:	6962      	ldr	r2, [r4, #20]
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d004      	beq.n	8008c9a <__swbuf_r+0x6e>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	07db      	lsls	r3, r3, #31
 8008c94:	d5e1      	bpl.n	8008c5a <__swbuf_r+0x2e>
 8008c96:	2e0a      	cmp	r6, #10
 8008c98:	d1df      	bne.n	8008c5a <__swbuf_r+0x2e>
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f7ff fca5 	bl	80085ec <_fflush_r>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d0d9      	beq.n	8008c5a <__swbuf_r+0x2e>
 8008ca6:	e7d6      	b.n	8008c56 <__swbuf_r+0x2a>

08008ca8 <__swsetup_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4b29      	ldr	r3, [pc, #164]	@ (8008d50 <__swsetup_r+0xa8>)
 8008cac:	4605      	mov	r5, r0
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	b118      	cbz	r0, 8008cbc <__swsetup_r+0x14>
 8008cb4:	6a03      	ldr	r3, [r0, #32]
 8008cb6:	b90b      	cbnz	r3, 8008cbc <__swsetup_r+0x14>
 8008cb8:	f7ff f99c 	bl	8007ff4 <__sinit>
 8008cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc0:	0719      	lsls	r1, r3, #28
 8008cc2:	d422      	bmi.n	8008d0a <__swsetup_r+0x62>
 8008cc4:	06da      	lsls	r2, r3, #27
 8008cc6:	d407      	bmi.n	8008cd8 <__swsetup_r+0x30>
 8008cc8:	2209      	movs	r2, #9
 8008cca:	602a      	str	r2, [r5, #0]
 8008ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	e033      	b.n	8008d40 <__swsetup_r+0x98>
 8008cd8:	0758      	lsls	r0, r3, #29
 8008cda:	d512      	bpl.n	8008d02 <__swsetup_r+0x5a>
 8008cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cde:	b141      	cbz	r1, 8008cf2 <__swsetup_r+0x4a>
 8008ce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ce4:	4299      	cmp	r1, r3
 8008ce6:	d002      	beq.n	8008cee <__swsetup_r+0x46>
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f7ff fb01 	bl	80082f0 <_free_r>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6063      	str	r3, [r4, #4]
 8008cfe:	6923      	ldr	r3, [r4, #16]
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	f043 0308 	orr.w	r3, r3, #8
 8008d08:	81a3      	strh	r3, [r4, #12]
 8008d0a:	6923      	ldr	r3, [r4, #16]
 8008d0c:	b94b      	cbnz	r3, 8008d22 <__swsetup_r+0x7a>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d18:	d003      	beq.n	8008d22 <__swsetup_r+0x7a>
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	f000 f890 	bl	8008e42 <__smakebuf_r>
 8008d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d26:	f013 0201 	ands.w	r2, r3, #1
 8008d2a:	d00a      	beq.n	8008d42 <__swsetup_r+0x9a>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	60a2      	str	r2, [r4, #8]
 8008d30:	6962      	ldr	r2, [r4, #20]
 8008d32:	4252      	negs	r2, r2
 8008d34:	61a2      	str	r2, [r4, #24]
 8008d36:	6922      	ldr	r2, [r4, #16]
 8008d38:	b942      	cbnz	r2, 8008d4c <__swsetup_r+0xa4>
 8008d3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d3e:	d1c5      	bne.n	8008ccc <__swsetup_r+0x24>
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	0799      	lsls	r1, r3, #30
 8008d44:	bf58      	it	pl
 8008d46:	6962      	ldrpl	r2, [r4, #20]
 8008d48:	60a2      	str	r2, [r4, #8]
 8008d4a:	e7f4      	b.n	8008d36 <__swsetup_r+0x8e>
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	e7f7      	b.n	8008d40 <__swsetup_r+0x98>
 8008d50:	20000050 	.word	0x20000050

08008d54 <_raise_r>:
 8008d54:	291f      	cmp	r1, #31
 8008d56:	b538      	push	{r3, r4, r5, lr}
 8008d58:	4605      	mov	r5, r0
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	d904      	bls.n	8008d68 <_raise_r+0x14>
 8008d5e:	2316      	movs	r3, #22
 8008d60:	6003      	str	r3, [r0, #0]
 8008d62:	f04f 30ff 	mov.w	r0, #4294967295
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d6a:	b112      	cbz	r2, 8008d72 <_raise_r+0x1e>
 8008d6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d70:	b94b      	cbnz	r3, 8008d86 <_raise_r+0x32>
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 f830 	bl	8008dd8 <_getpid_r>
 8008d78:	4622      	mov	r2, r4
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d82:	f000 b817 	b.w	8008db4 <_kill_r>
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d00a      	beq.n	8008da0 <_raise_r+0x4c>
 8008d8a:	1c59      	adds	r1, r3, #1
 8008d8c:	d103      	bne.n	8008d96 <_raise_r+0x42>
 8008d8e:	2316      	movs	r3, #22
 8008d90:	6003      	str	r3, [r0, #0]
 8008d92:	2001      	movs	r0, #1
 8008d94:	e7e7      	b.n	8008d66 <_raise_r+0x12>
 8008d96:	2100      	movs	r1, #0
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d9e:	4798      	blx	r3
 8008da0:	2000      	movs	r0, #0
 8008da2:	e7e0      	b.n	8008d66 <_raise_r+0x12>

08008da4 <raise>:
 8008da4:	4b02      	ldr	r3, [pc, #8]	@ (8008db0 <raise+0xc>)
 8008da6:	4601      	mov	r1, r0
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	f7ff bfd3 	b.w	8008d54 <_raise_r>
 8008dae:	bf00      	nop
 8008db0:	20000050 	.word	0x20000050

08008db4 <_kill_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	2300      	movs	r3, #0
 8008db8:	4d06      	ldr	r5, [pc, #24]	@ (8008dd4 <_kill_r+0x20>)
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	f7f9 f8bc 	bl	8001f3e <_kill>
 8008dc6:	1c43      	adds	r3, r0, #1
 8008dc8:	d102      	bne.n	8008dd0 <_kill_r+0x1c>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	b103      	cbz	r3, 8008dd0 <_kill_r+0x1c>
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	bd38      	pop	{r3, r4, r5, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000510 	.word	0x20000510

08008dd8 <_getpid_r>:
 8008dd8:	f7f9 b8aa 	b.w	8001f30 <_getpid>

08008ddc <memchr>:
 8008ddc:	4603      	mov	r3, r0
 8008dde:	b510      	push	{r4, lr}
 8008de0:	b2c9      	uxtb	r1, r1
 8008de2:	4402      	add	r2, r0
 8008de4:	4293      	cmp	r3, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	d101      	bne.n	8008dee <memchr+0x12>
 8008dea:	2000      	movs	r0, #0
 8008dec:	e003      	b.n	8008df6 <memchr+0x1a>
 8008dee:	7804      	ldrb	r4, [r0, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	428c      	cmp	r4, r1
 8008df4:	d1f6      	bne.n	8008de4 <memchr+0x8>
 8008df6:	bd10      	pop	{r4, pc}

08008df8 <__swhatbuf_r>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e00:	4615      	mov	r5, r2
 8008e02:	2900      	cmp	r1, #0
 8008e04:	461e      	mov	r6, r3
 8008e06:	b096      	sub	sp, #88	@ 0x58
 8008e08:	da0c      	bge.n	8008e24 <__swhatbuf_r+0x2c>
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e12:	bf14      	ite	ne
 8008e14:	2340      	movne	r3, #64	@ 0x40
 8008e16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	6031      	str	r1, [r6, #0]
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	b016      	add	sp, #88	@ 0x58
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	466a      	mov	r2, sp
 8008e26:	f000 f849 	bl	8008ebc <_fstat_r>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	dbed      	blt.n	8008e0a <__swhatbuf_r+0x12>
 8008e2e:	9901      	ldr	r1, [sp, #4]
 8008e30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e38:	4259      	negs	r1, r3
 8008e3a:	4159      	adcs	r1, r3
 8008e3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e40:	e7eb      	b.n	8008e1a <__swhatbuf_r+0x22>

08008e42 <__smakebuf_r>:
 8008e42:	898b      	ldrh	r3, [r1, #12]
 8008e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e46:	079d      	lsls	r5, r3, #30
 8008e48:	4606      	mov	r6, r0
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	d507      	bpl.n	8008e5e <__smakebuf_r+0x1c>
 8008e4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	2301      	movs	r3, #1
 8008e58:	6163      	str	r3, [r4, #20]
 8008e5a:	b003      	add	sp, #12
 8008e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e5e:	466a      	mov	r2, sp
 8008e60:	ab01      	add	r3, sp, #4
 8008e62:	f7ff ffc9 	bl	8008df8 <__swhatbuf_r>
 8008e66:	9f00      	ldr	r7, [sp, #0]
 8008e68:	4605      	mov	r5, r0
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff fab1 	bl	80083d4 <_malloc_r>
 8008e72:	b948      	cbnz	r0, 8008e88 <__smakebuf_r+0x46>
 8008e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e78:	059a      	lsls	r2, r3, #22
 8008e7a:	d4ee      	bmi.n	8008e5a <__smakebuf_r+0x18>
 8008e7c:	f023 0303 	bic.w	r3, r3, #3
 8008e80:	f043 0302 	orr.w	r3, r3, #2
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	e7e2      	b.n	8008e4e <__smakebuf_r+0xc>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	9b01      	ldr	r3, [sp, #4]
 8008e96:	6020      	str	r0, [r4, #0]
 8008e98:	b15b      	cbz	r3, 8008eb2 <__smakebuf_r+0x70>
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea0:	f000 f81e 	bl	8008ee0 <_isatty_r>
 8008ea4:	b128      	cbz	r0, 8008eb2 <__smakebuf_r+0x70>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f023 0303 	bic.w	r3, r3, #3
 8008eac:	f043 0301 	orr.w	r3, r3, #1
 8008eb0:	81a3      	strh	r3, [r4, #12]
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	431d      	orrs	r5, r3
 8008eb6:	81a5      	strh	r5, [r4, #12]
 8008eb8:	e7cf      	b.n	8008e5a <__smakebuf_r+0x18>
	...

08008ebc <_fstat_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4d06      	ldr	r5, [pc, #24]	@ (8008edc <_fstat_r+0x20>)
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	f7f9 f897 	bl	8001ffc <_fstat>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	d102      	bne.n	8008ed8 <_fstat_r+0x1c>
 8008ed2:	682b      	ldr	r3, [r5, #0]
 8008ed4:	b103      	cbz	r3, 8008ed8 <_fstat_r+0x1c>
 8008ed6:	6023      	str	r3, [r4, #0]
 8008ed8:	bd38      	pop	{r3, r4, r5, pc}
 8008eda:	bf00      	nop
 8008edc:	20000510 	.word	0x20000510

08008ee0 <_isatty_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4d05      	ldr	r5, [pc, #20]	@ (8008efc <_isatty_r+0x1c>)
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	602b      	str	r3, [r5, #0]
 8008eec:	f7f9 f895 	bl	800201a <_isatty>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_isatty_r+0x1a>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_isatty_r+0x1a>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000510 	.word	0x20000510

08008f00 <fmaxf>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4604      	mov	r4, r0
 8008f04:	460d      	mov	r5, r1
 8008f06:	f000 f825 	bl	8008f54 <__fpclassifyf>
 8008f0a:	b910      	cbnz	r0, 8008f12 <fmaxf+0x12>
 8008f0c:	462c      	mov	r4, r5
 8008f0e:	4620      	mov	r0, r4
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
 8008f12:	4628      	mov	r0, r5
 8008f14:	f000 f81e 	bl	8008f54 <__fpclassifyf>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0f8      	beq.n	8008f0e <fmaxf+0xe>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7f7 fdc2 	bl	8000aa8 <__aeabi_fcmpgt>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d0f1      	beq.n	8008f0c <fmaxf+0xc>
 8008f28:	e7f1      	b.n	8008f0e <fmaxf+0xe>

08008f2a <fminf>:
 8008f2a:	b538      	push	{r3, r4, r5, lr}
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	460d      	mov	r5, r1
 8008f30:	f000 f810 	bl	8008f54 <__fpclassifyf>
 8008f34:	b910      	cbnz	r0, 8008f3c <fminf+0x12>
 8008f36:	462c      	mov	r4, r5
 8008f38:	4620      	mov	r0, r4
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 f809 	bl	8008f54 <__fpclassifyf>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d0f8      	beq.n	8008f38 <fminf+0xe>
 8008f46:	4629      	mov	r1, r5
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f7f7 fd8f 	bl	8000a6c <__aeabi_fcmplt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d0f1      	beq.n	8008f36 <fminf+0xc>
 8008f52:	e7f1      	b.n	8008f38 <fminf+0xe>

08008f54 <__fpclassifyf>:
 8008f54:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8008f58:	d00d      	beq.n	8008f76 <__fpclassifyf+0x22>
 8008f5a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008f5e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008f62:	d30a      	bcc.n	8008f7a <__fpclassifyf+0x26>
 8008f64:	4b07      	ldr	r3, [pc, #28]	@ (8008f84 <__fpclassifyf+0x30>)
 8008f66:	1e42      	subs	r2, r0, #1
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d908      	bls.n	8008f7e <__fpclassifyf+0x2a>
 8008f6c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008f70:	4258      	negs	r0, r3
 8008f72:	4158      	adcs	r0, r3
 8008f74:	4770      	bx	lr
 8008f76:	2002      	movs	r0, #2
 8008f78:	4770      	bx	lr
 8008f7a:	2004      	movs	r0, #4
 8008f7c:	4770      	bx	lr
 8008f7e:	2003      	movs	r0, #3
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	007ffffe 	.word	0x007ffffe

08008f88 <round>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008f8e:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8008f92:	2a13      	cmp	r2, #19
 8008f94:	4604      	mov	r4, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	460b      	mov	r3, r1
 8008f9a:	dc1a      	bgt.n	8008fd2 <round+0x4a>
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	da0b      	bge.n	8008fb8 <round+0x30>
 8008fa0:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8008fa4:	3201      	adds	r2, #1
 8008fa6:	bf04      	itt	eq
 8008fa8:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008fac:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	461d      	mov	r5, r3
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	e016      	b.n	8008fe6 <round+0x5e>
 8008fb8:	4815      	ldr	r0, [pc, #84]	@ (8009010 <round+0x88>)
 8008fba:	4110      	asrs	r0, r2
 8008fbc:	4001      	ands	r1, r0
 8008fbe:	4321      	orrs	r1, r4
 8008fc0:	d011      	beq.n	8008fe6 <round+0x5e>
 8008fc2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008fc6:	fa41 f202 	asr.w	r2, r1, r2
 8008fca:	4413      	add	r3, r2
 8008fcc:	ea23 0300 	bic.w	r3, r3, r0
 8008fd0:	e7ee      	b.n	8008fb0 <round+0x28>
 8008fd2:	2a33      	cmp	r2, #51	@ 0x33
 8008fd4:	dd0a      	ble.n	8008fec <round+0x64>
 8008fd6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008fda:	d104      	bne.n	8008fe6 <round+0x5e>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f7f7 f8bb 	bl	8000158 <__adddf3>
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	460d      	mov	r5, r1
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	4629      	mov	r1, r5
 8008fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008ff4:	40f8      	lsrs	r0, r7
 8008ff6:	4220      	tst	r0, r4
 8008ff8:	d0f5      	beq.n	8008fe6 <round+0x5e>
 8008ffa:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008ffe:	2201      	movs	r2, #1
 8009000:	408a      	lsls	r2, r1
 8009002:	1912      	adds	r2, r2, r4
 8009004:	bf28      	it	cs
 8009006:	3301      	addcs	r3, #1
 8009008:	ea22 0200 	bic.w	r2, r2, r0
 800900c:	e7d1      	b.n	8008fb2 <round+0x2a>
 800900e:	bf00      	nop
 8009010:	000fffff 	.word	0x000fffff

08009014 <_init>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	bf00      	nop
 8009018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901a:	bc08      	pop	{r3}
 800901c:	469e      	mov	lr, r3
 800901e:	4770      	bx	lr

08009020 <_fini>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr
